"""

--------------------

PropertyGroups are the base class for dynamically defined sets of properties.

They can be used to extend existing blender data with your own types which can
be animated, accessed from the user interface and from python.

[NOTE]
The values assigned to blender data are saved to disk but the class
definitions are not, this means whenever you load blender the class needs
to be registered too.
This is best done by creating an add-on which loads on startup and registers
your properties.

[NOTE]
PropertyGroups must be registered before assigning them to blender data.

Property types used in class declarations are all in bpy.props



```../examples/bpy.types.PropertyGroup.py```

```../examples/bpy.types.AddonPreferences.1.py```


--------------------

This script is the UIList subclass used to show material slots, with a bunch of additional commentaries.

Notice the name of the class, this naming convention is similar as the one for panels or menus.

[NOTE]
UIList subclasses must be registered for blender to use them.

```../examples/bpy.types.UIList.1.py```


--------------------

This script is an extended version of the UIList

 subclass used to show vertex groups. It is not used 'as is',
because iterating over all vertices in a 'draw' function is a very bad idea for UI performances! However, it's a good
example of how to create/use filtering/reordering callbacks.

```../examples/bpy.types.UIList.2.py```


--------------------

The NodeTree.poll function determines if a node tree is visible
in the given context (similar to how Panel.poll
and Menu.poll define visibility). If it returns False,
the node tree type will not be selectable in the node editor.

A typical condition for shader nodes would be to check the active render engine
of the scene and only show nodes of the renderer they are designed for.

```../examples/bpy.types.NodeTree.py```


--------------------

```../examples/bpy.types.RenderEngine.py```


--------------------

This script is a simple panel which will draw into the object properties
section.

Notice the 'CATEGORY_PT_name' Panel.bl_idname, this is a naming
convention for panels.

[NOTE]
Panel subclasses must be registered for blender to use them.

```../examples/bpy.types.Panel.py```


--------------------

This panel has a Panel.poll and Panel.draw_header function,
even though the contents is basic this closely resembles blenders panels.

```../examples/bpy.types.Panel.1.py```


--------------------

A mix-in parent class can be used to share common properties and
Menu.poll function.

```../examples/bpy.types.Panel.2.py```


--------------------

This script demonstrates basic operations on object like creating new
object, placing it into scene, selecting it and making it active.

```../examples/bpy.types.Object.py```


--------------------

The mesh data is accessed in object mode and intended for compact storage,
for more flexible mesh editing from python see bmesh.

Blender stores 4 main arrays to define mesh geometry.

* Mesh.vertices (3 points in space)
* Mesh.edges (reference 2 vertices)
* Mesh.loops (reference a single vertex and edge)
* Mesh.polygons: (reference a range of loops)

Each polygon reference a slice in the loop array, this way, polygons do not store vertices or corner data such as UV's directly,
only a reference to loops that the polygon uses.

Mesh.loops, Mesh.uv_layers Mesh.vertex_colors are all aligned so the same polygon loop
indices can be used to find the UV's and vertex colors as with as the vertices.

To compare mesh API options see: NGons and Tessellation Faces <info_gotcha_mesh_faces>

This example script prints the vertices and UV's for each polygon, assumes the active object is a mesh with UVs.

```../examples/bpy.types.Mesh.py```


--------------------

Here is an example of a simple menu. Menus differ from panels in that they must
reference from a header, panel or another menu.

Notice the 'CATEGORY_MT_name' in  Menu.bl_idname, this is a naming
convention for menus.

[NOTE]
Menu subclasses must be registered before referencing them from blender.

[NOTE]
Menus have their Layout.operator_context initialized as
'EXEC_REGION_WIN' rather than 'INVOKE_DEFAULT' (see Execution Context <operator-execution_context>).
If the operator context needs to initialize inputs from the
Operator.invoke function, then this needs to be explicitly set.

```../examples/bpy.types.Menu.py```


--------------------

This menu demonstrates some different functions.

```../examples/bpy.types.Menu.1.py```


--------------------

When creating menus for add-ons you can't reference menus
in Blender's default scripts.
Instead, the add-on can add menu items to existing menus.

The function menu_draw acts like Menu.draw.

```../examples/bpy.types.Menu.2.py```


--------------------

Preset menus are simply a convention that uses a menu sub-class
to perform the common task of managing presets.

This example shows how you can add a preset menu.

This example uses the object draw options,
however you can use properties defined by your own scripts too.

```../examples/bpy.types.Menu.3.py```


--------------------

This example enables you to insert your own menu entry into the common
right click menu that you get while hovering over a value field,
color, string, etc.

To make the example work, you have to first select an object
then right click on an user interface element (maybe a color in the
material properties) and choose *Execute Custom Action*.

Executing the operator will then print all values.

```../examples/bpy.types.Menu.4.py```


--------------------

This script shows simple operator which prints a message.

Since the operator only has an Operator.execute function it takes no
user input.

[NOTE]
Operator subclasses must be registered before accessing them from blender.

```../examples/bpy.types.Operator.py```


--------------------

Operator.invoke is used to initialize the operator from the context
at the moment the operator is called.
invoke() is typically used to assign properties which are then used by
execute().
Some operators don't have an execute() function, removing the ability to be
repeated from a script or macro.

This example shows how to define an operator which gets mouse input to
execute a function and that this operator can be invoked or executed from
the python api.

Also notice this operator defines its own properties, these are different
to typical class properties because blender registers them with the
operator, to use as arguments when called, saved for operator undo/redo and
automatically added into the user interface.

```../examples/bpy.types.Operator.1.py```


--------------------

This example shows how an operator can use the file selector.

Notice the invoke function calls a window manager method and returns
{'RUNNING_MODAL'}

, this means the file selector stays open and the operator does not
exit immediately after invoke finishes.

The file selector runs the operator, calling Operator.execute when the
user confirms.

The Operator.poll function is optional, used to check if the operator
can run.

```../examples/bpy.types.Operator.2.py```


--------------------

This operator uses its Operator.invoke function to call a popup.

```../examples/bpy.types.Operator.3.py```


--------------------

By default operator properties use an automatic user interface layout.
If you need more control you can create your own layout with a
Operator.draw function.

This works like the Panel and Menu draw functions, its used
for dialogs and file selectors.

```../examples/bpy.types.Operator.4.py```


--------------------

This operator defines a Operator.modal function that will keep being
run to handle events until it returns {'FINISHED'}

 or {'CANCELLED'}

.

Modal operators run every time a new event is detected, such as a mouse click
or key press. Conversely, when no new events are detected, the modal operator
will not run. Modal operators are especially useful for interactive tools, an
operator can have its own state where keys toggle options as the operator runs.
Grab, Rotate, Scale, and Fly-Mode are examples of modal operators.

Operator.invoke is used to initialize the operator as being by
returning {'RUNNING_MODAL'}

, initializing the modal loop.

Notice __init__()

 and __del__()

 are declared.
For other operator types they are not useful but for modal operators they will
be called before the Operator.invoke and after the operator finishes.

```../examples/bpy.types.Operator.5.py```


--------------------

You may want to have an operator prompt the user to select an item
from a search field, this can be done using bpy.types.Operator.invoke_search_popup.

```../examples/bpy.types.Operator.6.py```

"""

import typing
import collections.abc
import typing_extensions
import bl_operators.anim
import bl_operators.clip
import bl_operators.file
import bl_operators.freestyle
import bl_operators.mask
import bl_operators.node
import bl_operators.presets
import bl_operators.view3d
import bl_operators.wm
import bl_ui
import bl_ui.properties_constraint
import bl_ui.properties_data_armature
import bl_ui.properties_data_bone
import bl_ui.properties_data_camera
import bl_ui.properties_data_curve
import bl_ui.properties_data_empty
import bl_ui.properties_data_lamp
import bl_ui.properties_data_lattice
import bl_ui.properties_data_mesh
import bl_ui.properties_data_metaball
import bl_ui.properties_data_modifier
import bl_ui.properties_data_speaker
import bl_ui.properties_freestyle
import bl_ui.properties_game
import bl_ui.properties_grease_pencil_common
import bl_ui.properties_mask_common
import bl_ui.properties_material
import bl_ui.properties_object
import bl_ui.properties_paint_common
import bl_ui.properties_particle
import bl_ui.properties_physics_cloth
import bl_ui.properties_physics_common
import bl_ui.properties_physics_dynamicpaint
import bl_ui.properties_physics_field
import bl_ui.properties_physics_fluid
import bl_ui.properties_physics_rigidbody
import bl_ui.properties_physics_rigidbody_constraint
import bl_ui.properties_physics_smoke
import bl_ui.properties_physics_softbody
import bl_ui.properties_render
import bl_ui.properties_render_layer
import bl_ui.properties_scene
import bl_ui.properties_texture
import bl_ui.properties_world
import bl_ui.space_clip
import bl_ui.space_console
import bl_ui.space_dopesheet
import bl_ui.space_filebrowser
import bl_ui.space_graph
import bl_ui.space_image
import bl_ui.space_info
import bl_ui.space_logic
import bl_ui.space_nla
import bl_ui.space_node
import bl_ui.space_outliner
import bl_ui.space_properties
import bl_ui.space_sequencer
import bl_ui.space_text
import bl_ui.space_time
import bl_ui.space_userpref
import bl_ui.space_view3d
import bl_ui.space_view3d_toolbar
import mathutils

class bpy_struct[_GenericType1]:
    """built-in base class for all classes in bpy.types."""

    id_data: typing.Any
    """ The `bpy.types.ID` object this datablock is from or None, (not available for all data types)"""

    bl_rna: BlenderRNA
    """ 

    :type: BlenderRNA
    """

    def as_pointer(self) -> int:
        """Returns the memory address which holds a pointer to blenders internal data

        :return: int (memory address).
        :rtype: int
        """

    def driver_add(self, path: str | None, index: int | None = -1) -> FCurve:
        """Adds driver(s) to the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str | None
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int | None
        :return: The driver(s) added.
        :rtype: FCurve
        """

    def driver_remove(self, path: str | None, index: int | None = -1) -> bool:
        """Remove driver(s) from the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str | None
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int | None
        :return: Success of driver removal.
        :rtype: bool
        """

    def get(self, key: str | None, default=None):
        """Returns the value of the custom property assigned to key or default
        when not found (matches pythons dictionary function of the same name).

                :param key: The key associated with the custom property.
                :type key: str | None
                :param default: Optional argument for the value to return if
        key is not found.
        """

    def is_property_hidden(self, property) -> bool:
        """Check if a property is hidden.

        :param property:
        :return: True when the property is hidden.
        :rtype: bool
        """

    def is_property_readonly(self, property) -> bool:
        """Check if a property is readonly.

        :param property:
        :return: True when the property is readonly (not writable).
        :rtype: bool
        """

    def is_property_set(self, property) -> bool:
        """Check if a property is set, use for testing operator properties.

        :param property:
        :return: True when the property has been set.
        :rtype: bool
        """

    def items(self):
        """Returns the items of this objects custom properties (matches pythons
        dictionary function of the same name).

                :return: custom property key, value pairs.
        """

    def keyframe_delete(
        self,
        data_path: str | None,
        index: int | None = -1,
        frame: float | None = bpy.context.scene.frame_current,
        group: str | None = "",
    ) -> bool:
        """Remove a keyframe from this properties fcurve.

        :param data_path: path to the property to remove a key, analogous to the fcurve's data path.
        :type data_path: str | None
        :param index: array index of the property to remove a key. Defaults to -1 removing all indices or a single channel if the property is not an array.
        :type index: int | None
        :param frame: The frame on which the keyframe is deleted, defaulting to the current frame.
        :type frame: float | None
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str | None
        :return: Success of keyframe deleation.
        :rtype: bool
        """

    def keyframe_insert(
        self,
        data_path: str | None,
        index: int | None = -1,
        frame: float | None = bpy.context.scene.frame_current,
        group: str | None = "",
    ) -> bool:
        """Insert a keyframe on the property given, adding fcurves and animation data when necessary.This is the most simple example of inserting a keyframe from python.Note that when keying data paths which contain nested properties this must be
        done from the `ID` subclass, in this case the `Armature` rather
        than the bone.

                :param data_path: path to the property to key, analogous to the fcurve's data path.
                :type data_path: str | None
                :param index: array index of the property to key.
        Defaults to -1 which will key all indices or a single channel if the property is not an array.
                :type index: int | None
                :param frame: The frame on which the keyframe is inserted, defaulting to the current frame.
                :type frame: float | None
                :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
                :type group: str | None
                :return: Success of keyframe insertion.
                :rtype: bool
        """

    def keys(self) -> list[str]:
        """Returns the keys of this objects custom properties (matches pythons
        dictionary function of the same name).

                :return: custom property keys.
                :rtype: list[str]
        """

    def path_from_id(self, property: str | None = "") -> str:
        """Returns the data path from the ID to this object (string).

                :param property: Optional property name which can be used if the path is
        to a property of this object.
                :type property: str | None
                :return: The path from `bpy.types.bpy_struct.id_data`
        to this struct and property (when given).
                :rtype: str
        """

    def path_resolve(self, path: str | None, coerce: bool | None = True):
        """Returns the property from the path, raise an exception when not found.

                :param path: path which this property resolves.
                :type path: str | None
                :param coerce: optional argument, when True, the property will be converted
        into its python representation.
                :type coerce: bool | None
        """

    def pop(self, key: str | None, default=None):
        """Remove and return the value of the custom property assigned to key or default
        when not found (matches pythons dictionary function of the same name).

                :param key: The key associated with the custom property.
                :type key: str | None
                :param default: Optional argument for the value to return if
        key is not found.
        """

    def property_unset(self, property):
        """Unset a property, will use default value afterward.

        :param property:
        """

    def type_recast(self):
        """Return a new instance, this is needed because types
        such as textures can be changed at runtime.

                :return: a new instance of this object with the type initialized again.
        """

    def values(self) -> list:
        """Returns the values of this objects custom properties (matches pythons
        dictionary function of the same name).

                :return: custom property values.
                :rtype: list
        """

    def __getitem__(self, key: int | str) -> typing.Any:
        """

        :param key:
        :type key: int | str
        :return:
        :rtype: typing.Any
        """

    def __setitem__(self, key: int | str, value: typing.Any):
        """

        :param key:
        :type key: int | str
        :param value:
        :type value: typing.Any
        """

    def __delitem__(self, key: int | str):
        """

        :param key:
        :type key: int | str
        """

class bpy_prop_collection[_GenericType1]:
    """built-in class used for all collections."""

    def find(self, key: str) -> int:
        """Returns the index of a key in a collection or -1 when not found
        (matches pythons string find function of the same name).

                :param key: The identifier for the collection member.
                :type key: str
                :return: index of the key.
                :rtype: int
        """

    def foreach_get(
        self,
        attr: str,
        seq: collections.abc.MutableSequence[bool]
        | collections.abc.MutableSequence[int]
        | collections.abc.MutableSequence[float]
        | typing_extensions.Buffer,
    ):
        """This is a function to give fast access to attributes within a collection.Only works for 'basic type' properties (bool, int and float)!
        Multi-dimensional arrays (like array of vectors) will be flattened into seq.

                :param attr:
                :type attr: str
                :param seq:
                :type seq: collections.abc.MutableSequence[bool] | collections.abc.MutableSequence[int] | collections.abc.MutableSequence[float] | typing_extensions.Buffer
        """

    def foreach_set(
        self,
        attr: str,
        seq: collections.abc.Sequence[bool]
        | collections.abc.Sequence[int]
        | collections.abc.Sequence[float]
        | typing_extensions.Buffer,
    ):
        """This is a function to give fast access to attributes within a collection.Only works for 'basic type' properties (bool, int and float)!
        seq must be uni-dimensional, multi-dimensional arrays (like array of vectors) will be re-created from it.

                :param attr:
                :type attr: str
                :param seq:
                :type seq: collections.abc.Sequence[bool] | collections.abc.Sequence[int] | collections.abc.Sequence[float] | typing_extensions.Buffer
        """

    def get[_GenericType2](
        self, key: str, default: _GenericType2 = None
    ) -> _GenericType1 | _GenericType2:
        """Returns the value of the item assigned to key or default when not found
        (matches pythons dictionary function of the same name).

                :param key: The identifier for the collection member.
                :type key: str
                :param default: Optional argument for the value to return if
        key is not found.
                :type default: _GenericType2
                :return:
                :rtype: _GenericType1 | _GenericType2
        """

    def items(self) -> list[tuple[str, _GenericType1]]:
        """Return the identifiers of collection members
        (matching pythons dict.items() functionality).

                :return: (key, value) pairs for each member of this collection.
                :rtype: list[tuple[str, _GenericType1]]
        """

    def keys(self) -> list[str]:
        """Return the identifiers of collection members
        (matching pythons dict.keys() functionality).

                :return: the identifiers for each member of this collection.
                :rtype: list[str]
        """

    def values(self) -> list[_GenericType1 | None]:
        """Return the values of collection
        (matching pythons dict.values() functionality).

                :return: the members of this collection.
                :rtype: list[_GenericType1 | None]
        """

    @typing.overload
    def __getitem__(self, key: int | str) -> _GenericType1:
        """

        :param key:
        :type key: int | str
        :return:
        :rtype: _GenericType1
        """

    @typing.overload
    def __getitem__(self, key: slice) -> list[_GenericType1, ...]:
        """

        :param key:
        :type key: slice
        :return:
        :rtype: list[_GenericType1, ...]
        """

    def __setitem__(self, key: int | str, value: _GenericType1 | None):
        """

        :param key:
        :type key: int | str
        :param value:
        :type value: _GenericType1 | None
        """

    @typing.overload
    def __setitem__(self, key: int, value: _GenericType1 | None):
        """

        :param key:
        :type key: int
        :param value:
        :type value: _GenericType1 | None
        """

    @typing.overload
    def __setitem__(self, key: str, value: _GenericType1):
        """

        :param key:
        :type key: str
        :param value:
        :type value: _GenericType1
        """

    def __iter__(self) -> collections.abc.Iterator[_GenericType1]:
        """

        :return:
        :rtype: collections.abc.Iterator[_GenericType1]
        """

    def __next__(self) -> _GenericType1:
        """

        :return:
        :rtype: _GenericType1
        """

    def __len__(self) -> int:
        """

        :return:
        :rtype: int
        """

    def __contains__(self, key: str | tuple[str, ...] | _GenericType1) -> bool:
        """

        :param key:
        :type key: str | tuple[str, ...] | _GenericType1
        :return:
        :rtype: bool
        """

class bpy_prop_array[_GenericType1]:
    def __get__(self, instance, owner) -> bpy_prop_array[_GenericType1]:
        """

        :param instance:
        :param owner:
        :return:
        :rtype: bpy_prop_array[_GenericType1]
        """

    def __set__(self, instance, value: collections.abc.Iterable[_GenericType1]):
        """

        :param instance:
        :param value:
        :type value: collections.abc.Iterable[_GenericType1]
        """

    def foreach_get(
        self,
        seq: collections.abc.MutableSequence[_GenericType1] | typing_extensions.Buffer,
    ):
        """

        :param seq:
        :type seq: collections.abc.MutableSequence[_GenericType1] | typing_extensions.Buffer
        """

    def foreach_set(
        self, seq: collections.abc.Sequence[_GenericType1] | typing_extensions.Buffer
    ):
        """

        :param seq:
        :type seq: collections.abc.Sequence[_GenericType1] | typing_extensions.Buffer
        """

    @typing.overload
    def __getitem__(self, key: int) -> _GenericType1:
        """

        :param key:
        :type key: int
        :return:
        :rtype: _GenericType1
        """

    @typing.overload
    def __getitem__(self, key: slice) -> list[_GenericType1, ...]:
        """

        :param key:
        :type key: slice
        :return:
        :rtype: list[_GenericType1, ...]
        """

    @typing.overload
    def __setitem__(self, key: int, value: _GenericType1):
        """

        :param key:
        :type key: int
        :param value:
        :type value: _GenericType1
        """

    @typing.overload
    def __setitem__(self, key: slice, value: collections.abc.Iterable[_GenericType1]):
        """

        :param key:
        :type key: slice
        :param value:
        :type value: collections.abc.Iterable[_GenericType1]
        """

    def __delitem__(self, key: int):
        """

        :param key:
        :type key: int
        """

    def __iter__(self) -> collections.abc.Iterator[_GenericType1]:
        """

        :return:
        :rtype: collections.abc.Iterator[_GenericType1]
        """

    def __next__(self) -> _GenericType1:
        """

        :return:
        :rtype: _GenericType1
        """

    def __len__(self) -> int:
        """

        :return:
        :rtype: int
        """

class ActionFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of action F-Curves"""

    def new(
        self, data_path: str, index: int | None = 0, action_group: str = ""
    ) -> FCurve:
        """Add an F-Curve to the action

        :param data_path: Data Path, F-Curve data path to use
        :type data_path: str
        :param index: Index, Array index
        :type index: int | None
        :param action_group: Action Group, Acton group to add this F-Curve into
        :type action_group: str
        :return: Newly created F-Curve
        :rtype: FCurve
        """

    def find(self, data_path: str, index: int | None = 0) -> FCurve:
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the action.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """

    def remove(self, fcurve: FCurve):
        """Remove action group

        :param fcurve: F-Curve to remove
        :type fcurve: FCurve
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActionGroups(bpy_prop_collection[ActionGroup], bpy_struct):
    """Collection of action groups"""

    def new(self, name: str) -> ActionGroup:
        """Create a new action group and add it to the action

        :param name: New name for the action group
        :type name: str
        :return: Newly created action group
        :rtype: ActionGroup
        """

    def remove(self, action_group: ActionGroup):
        """Remove action group

        :param action_group: Action group to remove
        :type action_group: ActionGroup
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActionPoseMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """Collection of timeline markers"""

    active: TimelineMarker | None
    """ Active pose marker for this action

    :type: TimelineMarker | None
    """

    active_index: int | None
    """ Index of active pose marker

    :type: int | None
    """

    def new(self, name: str) -> TimelineMarker:
        """Add a pose marker to the action

        :param name: New name for the marker (not unique)
        :type name: str
        :return: Newly created marker
        :rtype: TimelineMarker
        """

    def remove(self, marker: TimelineMarker):
        """Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: TimelineMarker
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Addons(bpy_prop_collection[Addon], bpy_struct):
    """Collection of add-ons"""

    @classmethod
    def new(cls) -> Addon:
        """Add a new add-on

        :return: Add-on data
        :rtype: Addon
        """

    @classmethod
    def remove(cls, addon: Addon):
        """Remove add-on

        :param addon: Add-on to remove
        :type addon: Addon
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AlembicObjectPaths(bpy_prop_collection[AlembicObjectPath], bpy_struct):
    """Collection of object paths"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnimDataDrivers(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of Driver F-Curves"""

    def from_existing(self, src_driver: FCurve | None = None) -> FCurve:
        """Add a new driver given an existing one

        :param src_driver: Existing Driver F-Curve to use as template for a new one
        :type src_driver: FCurve | None
        :return: New Driver F-Curve
        :rtype: FCurve
        """

    def find(self, data_path: str, index: int | None = 0) -> FCurve:
        """Find a driver F-Curve. Note that this function performs a linear scan of all driver F-Curves.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AreaSpaces(bpy_prop_collection[Space], bpy_struct):
    """Collection of spaces"""

    active: Space | None
    """ Space currently being displayed in this area

    :type: Space | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArmatureBones(bpy_prop_collection[Bone], bpy_struct):
    """Collection of armature bones"""

    active: Bone | None
    """ Armature's active bone

    :type: Bone | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArmatureEditBones(bpy_prop_collection[EditBone], bpy_struct):
    """Collection of armature edit bones"""

    active: EditBone | None
    """ Armatures active edit bone

    :type: EditBone | None
    """

    def new(self, name: str) -> EditBone:
        """Add a new bone

        :param name: New name for the bone
        :type name: str
        :return: Newly created edit bone
        :rtype: EditBone
        """

    def remove(self, bone: EditBone):
        """Remove an existing bone from the armature

        :param bone: EditBone to remove
        :type bone: EditBone
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BackgroundImages(bpy_prop_collection[BackgroundImage], bpy_struct):
    """Collection of background images"""

    def new(self) -> BackgroundImage:
        """Add new background image

        :return: Image displayed as viewport background
        :rtype: BackgroundImage
        """

    def remove(self, image: BackgroundImage):
        """Remove background image

        :param image: Image displayed as viewport background
        :type image: BackgroundImage
        """

    def clear(self):
        """Remove all background images"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataActions(bpy_prop_collection[Action], bpy_struct):
    """Collection of actions"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Action:
        """Add a new action to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New action data-block
        :rtype: Action
        """

    def remove(
        self,
        action: Action,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a action from the current blendfile

        :param action: Action to remove
        :type action: Action
        :param do_unlink: Unlink all usages of this action before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this action
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this action
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataArmatures(bpy_prop_collection[Armature], bpy_struct):
    """Collection of armatures"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Armature:
        """Add a new armature to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New armature data-block
        :rtype: Armature
        """

    def remove(
        self,
        armature: Armature,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a armature from the current blendfile

        :param armature: Armature to remove
        :type armature: Armature
        :param do_unlink: Unlink all usages of this armature before deleting it (WARNING: will also delete objects instancing that armature data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this armature data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this armature data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataBrushes(bpy_prop_collection[Brush], bpy_struct):
    """Collection of brushes"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(
        self,
        name: str,
        mode: typing.Literal[
            "OBJECT",
            "EDIT",
            "POSE",
            "SCULPT",
            "VERTEX_PAINT",
            "WEIGHT_PAINT",
            "TEXTURE_PAINT",
            "PARTICLE_EDIT",
            "GPENCIL_EDIT",
        ]
        | None = "TEXTURE_PAINT",
    ) -> Brush:
        """Add a new brush to the main database

                :param name: New name for the data-block
                :type name: str
                :param mode: Paint Mode for the new brush

        OBJECT Object Mode.

        EDIT Edit Mode.

        POSE Pose Mode.

        SCULPT Sculpt Mode.

        VERTEX_PAINT Vertex Paint.

        WEIGHT_PAINT Weight Paint.

        TEXTURE_PAINT Texture Paint.

        PARTICLE_EDIT Particle Edit.

        GPENCIL_EDIT Edit Strokes, Edit Grease Pencil Strokes.
                :type mode: typing.Literal['OBJECT','EDIT','POSE','SCULPT','VERTEX_PAINT','WEIGHT_PAINT','TEXTURE_PAINT','PARTICLE_EDIT','GPENCIL_EDIT'] | None
                :return: New brush data-block
                :rtype: Brush
        """

    def remove(
        self,
        brush: Brush,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a brush from the current blendfile

        :param brush: Brush to remove
        :type brush: Brush
        :param do_unlink: Unlink all usages of this brush before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this brush
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this brush
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataCacheFiles(bpy_prop_collection[CacheFile], bpy_struct):
    """Collection of cache files"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataCameras(bpy_prop_collection[Camera], bpy_struct):
    """Collection of cameras"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Camera:
        """Add a new camera to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New camera data-block
        :rtype: Camera
        """

    def remove(
        self,
        camera: Camera,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a camera from the current blendfile

        :param camera: Camera to remove
        :type camera: Camera
        :param do_unlink: Unlink all usages of this camera before deleting it (WARNING: will also delete objects instancing that camera data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this camera
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this camera
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataCurves(bpy_prop_collection[Curve], bpy_struct):
    """Collection of curves"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(
        self, name: str, type: typing.Literal["CURVE", "SURFACE", "FONT"] | None
    ) -> Curve:
        """Add a new curve to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of curve to add
        :type type: typing.Literal['CURVE','SURFACE','FONT'] | None
        :return: New curve data-block
        :rtype: Curve
        """

    def remove(
        self,
        curve: Curve,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a curve from the current blendfile

        :param curve: Curve to remove
        :type curve: Curve
        :param do_unlink: Unlink all usages of this curve before deleting it (WARNING: will also delete objects instancing that curve data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this curve data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this curve data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataFonts(bpy_prop_collection[VectorFont], bpy_struct):
    """Collection of fonts"""

    is_updated: bool
    """ 

    :type: bool
    """

    def load(self, filepath: str, check_existing: bool | None = False) -> VectorFont:
        """Load a new font into the main database

        :param filepath: path of the font to load
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | None
        :return: New font data-block
        :rtype: VectorFont
        """

    def remove(
        self,
        vfont: VectorFont,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a font from the current blendfile

        :param vfont: Font to remove
        :type vfont: VectorFont
        :param do_unlink: Unlink all usages of this font before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this font
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this font
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataGreasePencils(bpy_prop_collection[GreasePencil], bpy_struct):
    """Collection of grease pencils"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def new(cls, name: str) -> GreasePencil:
        """new

        :param name: New name for the data-block
        :type name: str
        :return: New grease pencil data-block
        :rtype: GreasePencil
        """

    def remove(
        self,
        grease_pencil: GreasePencil,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a grease pencil instance from the current blendfile

        :param grease_pencil: Grease Pencil to remove
        :type grease_pencil: GreasePencil
        :param do_unlink: Unlink all usages of this grease pencil before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this grease pencil
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this grease pencil
        :type do_ui_user: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataGroups(bpy_prop_collection[Group], bpy_struct):
    """Collection of groups"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Group:
        """Add a new group to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New group data-block
        :rtype: Group
        """

    def remove(
        self,
        group: Group,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a group from the current blendfile

        :param group: Group to remove
        :type group: Group
        :param do_unlink: Unlink all usages of this group before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this group
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this group
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataImages(bpy_prop_collection[Image], bpy_struct):
    """Collection of images"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(
        self,
        name: str,
        width: int | None,
        height: int | None,
        alpha: bool | None = False,
        float_buffer: bool | None = False,
        stereo3d: bool | None = False,
    ) -> Image:
        """Add a new image to the main database

        :param name: New name for the data-block
        :type name: str
        :param width: Width of the image
        :type width: int | None
        :param height: Height of the image
        :type height: int | None
        :param alpha: Alpha, Use alpha channel
        :type alpha: bool | None
        :param float_buffer: Float Buffer, Create an image with floating point color
        :type float_buffer: bool | None
        :param stereo3d: Stereo 3D, Create left and right views
        :type stereo3d: bool | None
        :return: New image data-block
        :rtype: Image
        """

    def load(self, filepath: str, check_existing: bool | None = False) -> Image:
        """Load a new image into the main database

        :param filepath: path of the file to load
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | None
        :return: New image data-block
        :rtype: Image
        """

    def remove(
        self,
        image: Image,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove an image from the current blendfile

        :param image: Image to remove
        :type image: Image
        :param do_unlink: Unlink all usages of this image before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this image
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this image
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataLamps(bpy_prop_collection[Lamp], bpy_struct):
    """Collection of lamps"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(
        self,
        name: str,
        type: typing.Literal["POINT", "SUN", "SPOT", "HEMI", "AREA"] | None,
    ) -> Lamp:
        """Add a new lamp to the main database

                :param name: New name for the data-block
                :type name: str
                :param type: Type, The type of texture to add

        POINT Point, Omnidirectional point light source.

        SUN Sun, Constant direction parallel ray light source.

        SPOT Spot, Directional cone light source.

        HEMI Hemi, 180 degree constant light source.

        AREA Area, Directional area light source.
                :type type: typing.Literal['POINT','SUN','SPOT','HEMI','AREA'] | None
                :return: New lamp data-block
                :rtype: Lamp
        """

    def remove(
        self,
        lamp: Lamp,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a lamp from the current blendfile

        :param lamp: Lamp to remove
        :type lamp: Lamp
        :param do_unlink: Unlink all usages of this lamp before deleting it (WARNING: will also delete objects instancing that lamp data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this lamp data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this lamp data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataLattices(bpy_prop_collection[Lattice], bpy_struct):
    """Collection of lattices"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Lattice:
        """Add a new lattice to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New lattices data-block
        :rtype: Lattice
        """

    def remove(
        self,
        lattice: Lattice,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a lattice from the current blendfile

        :param lattice: Lattice to remove
        :type lattice: Lattice
        :param do_unlink: Unlink all usages of this lattice before deleting it (WARNING: will also delete objects instancing that lattice data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this lattice data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this lattice data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataLibraries(bpy_prop_collection[Library], bpy_struct):
    """Collection of libraries"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def load(
        self,
        filepath: str | None,
        link: bool | None = False,
        relative: bool | None = False,
    ):
        """Returns a context manager which exposes 2 library objects on entering.
        Each object has attributes matching bpy.data which are lists of strings to be linked.

                :param filepath: The path to a blend file.
                :type filepath: str | None
                :param link: When False reference to the original file is lost.
                :type link: bool | None
                :param relative: When True the path is stored relative to the open blend file.
                :type relative: bool | None
        """

    def write(
        self,
        filepath: str | None,
        datablocks: set | None,
        relative_remap: bool | None = False,
        fake_user: bool | None = False,
        compress: bool | None = False,
    ):
        """Write data-blocks into a blend file.

        :param filepath: The path to write the blend-file.
        :type filepath: str | None
        :param datablocks: set of data-blocks (`bpy.types.ID` instances).
        :type datablocks: set | None
        :param relative_remap: When True, remap the paths relative to the current blend-file.
        :type relative_remap: bool | None
        :param fake_user: When True, data-blocks will be written with fake-user flag enabled.
        :type fake_user: bool | None
        :param compress: When True, write a compressed blend file.
        :type compress: bool | None
        """

class BlendDataLineStyles(bpy_prop_collection[FreestyleLineStyle], bpy_struct):
    """Collection of line styles"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    def new(self, name: str) -> FreestyleLineStyle:
        """Add a new line style instance to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New line style data-block
        :rtype: FreestyleLineStyle
        """

    def remove(
        self,
        linestyle: FreestyleLineStyle,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a line style instance from the current blendfile

        :param linestyle: Line style to remove
        :type linestyle: FreestyleLineStyle
        :param do_unlink: Unlink all usages of this line style before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this line style
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this line style
        :type do_ui_user: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataMasks(bpy_prop_collection[Mask], bpy_struct):
    """Collection of masks"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    def new(self, name: str) -> Mask:
        """Add a new mask with a given name to the main database

        :param name: Mask, Name of new mask data-block
        :type name: str
        :return: New mask data-block
        :rtype: Mask
        """

    def remove(
        self,
        mask: Mask,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a masks from the current blendfile.

        :param mask: Mask to remove
        :type mask: Mask
        :param do_unlink: Unlink all usages of this mask before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this mask
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this mask
        :type do_ui_user: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataMaterials(bpy_prop_collection[Material], bpy_struct):
    """Collection of materials"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Material:
        """Add a new material to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New material data-block
        :rtype: Material
        """

    def remove(
        self,
        material: Material,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a material from the current blendfile

        :param material: Material to remove
        :type material: Material
        :param do_unlink: Unlink all usages of this material before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this material
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this material
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataMeshes(bpy_prop_collection[Mesh], bpy_struct):
    """Collection of meshes"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Mesh:
        """Add a new mesh to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New mesh data-block
        :rtype: Mesh
        """

    def new_from_object(
        self,
        scene: Scene,
        object: Object,
        apply_modifiers: bool | None,
        settings: typing.Literal["PREVIEW", "RENDER"] | None,
        calc_tessface: bool | None = True,
        calc_undeformed: bool | None = False,
    ) -> Mesh:
        """Add a new mesh created from object with modifiers applied

                :param scene: Scene within which to evaluate modifiers
                :type scene: Scene
                :param object: Object to create mesh from
                :type object: Object
                :param apply_modifiers: Apply modifiers
                :type apply_modifiers: bool | None
                :param settings: Modifier settings to apply

        PREVIEW Preview, Apply modifier preview settings.

        RENDER Render, Apply modifier render settings.
                :type settings: typing.Literal['PREVIEW','RENDER'] | None
                :param calc_tessface: Calculate Tessellation, Calculate tessellation faces
                :type calc_tessface: bool | None
                :param calc_undeformed: Calculate Undeformed, Calculate undeformed vertex coordinates
                :type calc_undeformed: bool | None
                :return: Mesh created from object, remove it if it is only used for export
                :rtype: Mesh
        """

    def remove(
        self,
        mesh: Mesh,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a mesh from the current blendfile

        :param mesh: Mesh to remove
        :type mesh: Mesh
        :param do_unlink: Unlink all usages of this mesh before deleting it (WARNING: will also delete objects instancing that mesh data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this mesh data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this mesh data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataMetaBalls(bpy_prop_collection[MetaBall], bpy_struct):
    """Collection of metaballs"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> MetaBall:
        """Add a new metaball to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New metaball data-block
        :rtype: MetaBall
        """

    def remove(
        self,
        metaball: MetaBall,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a metaball from the current blendfile

        :param metaball: Metaball to remove
        :type metaball: MetaBall
        :param do_unlink: Unlink all usages of this metaball before deleting it (WARNING: will also delete objects instancing that metaball data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this metaball data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this metaball data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataMovieClips(bpy_prop_collection[MovieClip], bpy_struct):
    """Collection of movie clips"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    def remove(
        self,
        clip: MovieClip,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a movie clip from the current blendfile.

        :param clip: Movie clip to remove
        :type clip: MovieClip
        :param do_unlink: Unlink all usages of this movie clip before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this movie clip
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this movie clip
        :type do_ui_user: bool | None
        """

    def load(self, filepath: str, check_existing: bool | None = False) -> MovieClip:
        """Add a new movie clip to the main database from a file (while check_existing is disabled for consistency with other load functions, behavior with multiple movie-clips using the same file may incorrectly generate proxies)

        :param filepath: path for the data-block
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | None
        :return: New movie clip data-block
        :rtype: MovieClip
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataNodeTrees(bpy_prop_collection[NodeTree], bpy_struct):
    """Collection of node trees"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str, type: typing.Literal["DUMMY"] | None) -> NodeTree:
        """Add a new node tree to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of node_group to add
        :type type: typing.Literal['DUMMY'] | None
        :return: New node tree data-block
        :rtype: NodeTree
        """

    def remove(
        self,
        tree: NodeTree,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a node tree from the current blendfile

        :param tree: Node tree to remove
        :type tree: NodeTree
        :param do_unlink: Unlink all usages of this node tree before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this node tree
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this node tree
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataObjects(bpy_prop_collection[Object], bpy_struct):
    """Collection of objects"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str, object_data: ID | None) -> Object:
        """Add a new object to the main database

        :param name: New name for the data-block
        :type name: str
        :param object_data: Object data or None for an empty object
        :type object_data: ID | None
        :return: New object data-block
        :rtype: Object
        """

    def remove(
        self,
        object: Object,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a object from the current blendfile

        :param object: Object to remove
        :type object: Object
        :param do_unlink: Unlink all usages of this object before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this object
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this object
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataPaintCurves(bpy_prop_collection[PaintCurve], bpy_struct):
    """Collection of paint curves"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataPalettes(bpy_prop_collection[Palette], bpy_struct):
    """Collection of palettes"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Palette:
        """Add a new palette to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New palette data-block
        :rtype: Palette
        """

    def remove(
        self,
        palette: Palette,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a palette from the current blendfile

        :param palette: Palette to remove
        :type palette: Palette
        :param do_unlink: Unlink all usages of this palette before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this palette
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this palette
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataParticles(bpy_prop_collection[ParticleSettings], bpy_struct):
    """Collection of particle settings"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> ParticleSettings:
        """Add a new particle settings instance to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New particle settings data-block
        :rtype: ParticleSettings
        """

    def remove(
        self,
        particle: ParticleSettings,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a particle settings instance from the current blendfile

        :param particle: Particle Settings to remove
        :type particle: ParticleSettings
        :param do_unlink: Unlink all usages of those particle settings before deleting them
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this particle settings
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this particle settings
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataScenes(bpy_prop_collection[Scene], bpy_struct):
    """Collection of scenes"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Scene:
        """Add a new scene to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New scene data-block
        :rtype: Scene
        """

    def remove(self, scene: Scene, do_unlink: bool | None = True):
        """Remove a scene from the current blendfile

        :param scene: Scene to remove
        :type scene: Scene
        :param do_unlink: Unlink all usages of this scene before deleting it
        :type do_unlink: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataScreens(bpy_prop_collection[Screen], bpy_struct):
    """Collection of screens"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataSounds(bpy_prop_collection[Sound], bpy_struct):
    """Collection of sounds"""

    is_updated: bool
    """ 

    :type: bool
    """

    def load(self, filepath: str, check_existing: bool | None = False) -> Sound:
        """Add a new sound to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | None
        :return: New text data-block
        :rtype: Sound
        """

    def remove(
        self,
        sound: Sound,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a sound from the current blendfile

        :param sound: Sound to remove
        :type sound: Sound
        :param do_unlink: Unlink all usages of this sound before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this sound
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this sound
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataSpeakers(bpy_prop_collection[Speaker], bpy_struct):
    """Collection of speakers"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Speaker:
        """Add a new speaker to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New speaker data-block
        :rtype: Speaker
        """

    def remove(
        self,
        speaker: Speaker,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a speaker from the current blendfile

        :param speaker: Speaker to remove
        :type speaker: Speaker
        :param do_unlink: Unlink all usages of this speaker before deleting it (WARNING: will also delete objects instancing that speaker data)
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this speaker data
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this speaker data
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataTexts(bpy_prop_collection[Text], bpy_struct):
    """Collection of texts"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> Text:
        """Add a new text to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New text data-block
        :rtype: Text
        """

    def remove(
        self,
        text: Text,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a text from the current blendfile

        :param text: Text to remove
        :type text: Text
        :param do_unlink: Unlink all usages of this text before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this text
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this text
        :type do_ui_user: bool | None
        """

    def load(self, filepath: str, internal: bool | None = False) -> Text:
        """Add a new text to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str
        :param internal: Make internal, Make text file internal after loading
        :type internal: bool | None
        :return: New text data-block
        :rtype: Text
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataTextures(bpy_prop_collection[Texture], bpy_struct):
    """Collection of groups"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(
        self,
        name: str,
        type: typing.Literal[
            "NONE",
            "BLEND",
            "CLOUDS",
            "DISTORTED_NOISE",
            "ENVIRONMENT_MAP",
            "IMAGE",
            "MAGIC",
            "MARBLE",
            "MUSGRAVE",
            "NOISE",
            "OCEAN",
            "POINT_DENSITY",
            "STUCCI",
            "VORONOI",
            "VOXEL_DATA",
            "WOOD",
        ]
        | None,
    ) -> Texture:
        """Add a new texture to the main database

                :param name: New name for the data-block
                :type name: str
                :param type: Type, The type of texture to add

        NONE None.

        BLEND Blend, Procedural - create a ramp texture.

        CLOUDS Clouds, Procedural - create a cloud-like fractal noise texture.

        DISTORTED_NOISE Distorted Noise, Procedural - noise texture distorted by two noise algorithms.

        ENVIRONMENT_MAP Environment Map, Create a render of the environment mapped to a texture.

        IMAGE Image or Movie, Allow for images or movies to be used as textures.

        MAGIC Magic, Procedural - color texture based on trigonometric functions.

        MARBLE Marble, Procedural - marble-like noise texture with wave generated bands.

        MUSGRAVE Musgrave, Procedural - highly flexible fractal noise texture.

        NOISE Noise, Procedural - random noise, gives a different result every time, for every frame, for every pixel.

        OCEAN Ocean, Use a texture generated by an Ocean modifier.

        POINT_DENSITY Point Density.

        STUCCI Stucci, Procedural - create a fractal noise texture.

        VORONOI Voronoi, Procedural - create cell-like patterns based on Worley noise.

        VOXEL_DATA Voxel Data, Create a 3D texture based on volumetric data.

        WOOD Wood, Procedural - wave generated bands or rings, with optional noise.
                :type type: typing.Literal['NONE','BLEND','CLOUDS','DISTORTED_NOISE','ENVIRONMENT_MAP','IMAGE','MAGIC','MARBLE','MUSGRAVE','NOISE','OCEAN','POINT_DENSITY','STUCCI','VORONOI','VOXEL_DATA','WOOD'] | None
                :return: New texture data-block
                :rtype: Texture
        """

    def remove(
        self,
        texture: Texture,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a texture from the current blendfile

        :param texture: Texture to remove
        :type texture: Texture
        :param do_unlink: Unlink all usages of this texture before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this texture
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this texture
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataWindowManagers(bpy_prop_collection[WindowManager], bpy_struct):
    """Collection of window managers"""

    is_updated: bool
    """ 

    :type: bool
    """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendDataWorlds(bpy_prop_collection[World], bpy_struct):
    """Collection of worlds"""

    is_updated: bool
    """ 

    :type: bool
    """

    def new(self, name: str) -> World:
        """Add a new world to the main database

        :param name: New name for the data-block
        :type name: str
        :return: New world data-block
        :rtype: World
        """

    def remove(
        self,
        world: World,
        do_unlink: bool | None = True,
        do_id_user: bool | None = True,
        do_ui_user: bool | None = True,
    ):
        """Remove a world from the current blendfile

        :param world: World to remove
        :type world: World
        :param do_unlink: Unlink all usages of this world before deleting it
        :type do_unlink: bool | None
        :param do_id_user: Decrement user counter of all datablocks used by this world
        :type do_id_user: bool | None
        :param do_ui_user: Make sure interface does not reference this world
        :type do_ui_user: bool | None
        """

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoneGroups(bpy_prop_collection[BoneGroup], bpy_struct):
    """Collection of bone groups"""

    active: BoneGroup | None
    """ Active bone group for this pose

    :type: BoneGroup | None
    """

    active_index: int | None
    """ Active index in bone groups array

    :type: int | None
    """

    def new(self, name: str = "Group") -> BoneGroup:
        """Add a new bone group to the object

        :param name: Name of the new group
        :type name: str
        :return: New bone group
        :rtype: BoneGroup
        """

    def remove(self, group: BoneGroup):
        """Remove a bone group from this object

        :param group: Removed bone group
        :type group: BoneGroup
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ChannelDriverVariables(bpy_prop_collection[DriverVariable], bpy_struct):
    """Collection of channel driver Variables"""

    def new(self) -> DriverVariable:
        """Add a new variable for the driver

        :return: Newly created Driver Variable
        :rtype: DriverVariable
        """

    def remove(self, variable: DriverVariable):
        """Remove an existing variable from the driver

        :param variable: Variable to remove from the driver
        :type variable: DriverVariable
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorRampElements(bpy_prop_collection[ColorRampElement], bpy_struct):
    """Collection of Color Ramp Elements"""

    def new(self, position: float | None) -> ColorRampElement:
        """Add element to ColorRamp

        :param position: Position, Position to add element
        :type position: float | None
        :return: New element
        :rtype: ColorRampElement
        """

    def remove(self, element: ColorRampElement):
        """Delete element from ColorRamp

        :param element: Element to remove
        :type element: ColorRampElement
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeOutputFileFileSlots(
    bpy_prop_collection[NodeOutputFileSlotFile], bpy_struct
):
    """Collection of File Output node slots"""

    def new(self, name: str) -> NodeSocket:
        """Add a file slot to this node

        :param name: Name
        :type name: str
        :return: New socket
        :rtype: NodeSocket
        """

    def remove(self, socket: NodeSocket | None):
        """Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """

    def clear(self):
        """Remove all file slots from this node"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeOutputFileLayerSlots(
    bpy_prop_collection[NodeOutputFileSlotLayer], bpy_struct
):
    """Collection of File Output node slots"""

    def new(self, name: str) -> NodeSocket:
        """Add a file slot to this node

        :param name: Name
        :type name: str
        :return: New socket
        :rtype: NodeSocket
        """

    def remove(self, socket: NodeSocket | None):
        """Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """

    def clear(self):
        """Remove all file slots from this node"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveMapPoints(bpy_prop_collection[CurveMapPoint], bpy_struct):
    """Collection of Curve Map Points"""

    def new(self, position: float | None, value: float | None) -> CurveMapPoint:
        """Add point to CurveMap

        :param position: Position, Position to add point
        :type position: float | None
        :param value: Value, Value of point
        :type value: float | None
        :return: New point
        :rtype: CurveMapPoint
        """

    def remove(self, point: CurveMapPoint):
        """Delete point from CurveMap

        :param point: PointElement to remove
        :type point: CurveMapPoint
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveSplines(bpy_prop_collection[Spline], bpy_struct):
    """Collection of curve splines"""

    active: Spline | None
    """ Active curve spline

    :type: Spline | None
    """

    def new(
        self,
        type: typing.Literal["POLY", "BEZIER", "BSPLINE", "CARDINAL", "NURBS"] | None,
    ) -> Spline:
        """Add a new spline to the curve

        :param type: type for the new spline
        :type type: typing.Literal['POLY','BEZIER','BSPLINE','CARDINAL','NURBS'] | None
        :return: The newly created spline
        :rtype: Spline
        """

    def remove(self, spline: Spline):
        """Remove a spline from a curve

        :param spline: The spline to remove
        :type spline: Spline
        """

    def clear(self):
        """Remove all splines from a curve"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DynamicPaintSurfaces(bpy_prop_collection[DynamicPaintSurface], bpy_struct):
    """Collection of Dynamic Paint Canvas surfaces"""

    active: DynamicPaintSurface | None
    """ Active Dynamic Paint surface being displayed

    :type: DynamicPaintSurface | None
    """

    active_index: int | None
    """ 

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FCurveKeyframePoints(bpy_prop_collection[Keyframe], bpy_struct):
    """Collection of keyframe points"""

    def insert(
        self,
        frame: float | None,
        value: float | None,
        options: set[typing.Literal["REPLACE", "NEEDED", "FAST"]] | None = {},
        keyframe_type: typing.Literal[
            "KEYFRAME", "BREAKDOWN", "MOVING_HOLD", "EXTREME", "JITTER"
        ]
        | None = "KEYFRAME",
    ) -> Keyframe:
        """Add a keyframe point to a F-Curve

                :param frame: X Value of this keyframe point
                :type frame: float | None
                :param value: Y Value of this keyframe point
                :type value: float | None
                :param options: Keyframe options

        REPLACE Replace, Don't add any new keyframes, but just replace existing ones.

        NEEDED Needed, Only adds keyframes that are needed.

        FAST Fast, Fast keyframe insertion to avoid recalculating the curve each time.
                :type options: set[typing.Literal['REPLACE','NEEDED','FAST']] | None
                :param keyframe_type: Type of keyframe to insert

        KEYFRAME Keyframe, Normal keyframe - e.g. for key poses.

        BREAKDOWN Breakdown, A breakdown pose - e.g. for transitions between key poses.

        MOVING_HOLD Moving Hold, A keyframe that is part of a moving hold.

        EXTREME Extreme, An 'extreme' pose, or some other purpose as needed.

        JITTER Jitter, A filler or baked keyframe for keying on ones, or some other purpose as needed.
                :type keyframe_type: typing.Literal['KEYFRAME','BREAKDOWN','MOVING_HOLD','EXTREME','JITTER'] | None
                :return: Newly created keyframe
                :rtype: Keyframe
        """

    def add(self, count: int | None = 1):
        """Add a keyframe point to a F-Curve

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """

    def remove(self, keyframe: Keyframe, fast: bool | None = False):
        """Remove keyframe from an F-Curve

        :param keyframe: Keyframe to remove
        :type keyframe: Keyframe
        :param fast: Fast, Fast keyframe removal to avoid recalculating the curve each time
        :type fast: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FCurveModifiers(bpy_prop_collection[FModifier], bpy_struct):
    """Collection of F-Curve Modifiers"""

    active: FModifier | None
    """ Active F-Curve Modifier

    :type: FModifier | None
    """

    def new(
        self,
        type: typing.Literal[
            "NULL",
            "GENERATOR",
            "FNGENERATOR",
            "ENVELOPE",
            "CYCLES",
            "NOISE",
            "LIMITS",
            "STEPPED",
        ]
        | None,
    ) -> FModifier:
        """Add a constraint to this object

                :param type: Constraint type to add

        NULL Invalid.

        GENERATOR Generator, Generate a curve using a factorized or expanded polynomial.

        FNGENERATOR Built-In Function, Generate a curve using standard math functions such as sin and cos.

        ENVELOPE Envelope, Reshape F-Curve values - e.g. change amplitude of movements.

        CYCLES Cycles, Cyclic extend/repeat keyframe sequence.

        NOISE Noise, Add pseudo-random noise on top of F-Curves.

        LIMITS Limits, Restrict maximum and minimum values of F-Curve.

        STEPPED Stepped Interpolation, Snap values to nearest grid-step - e.g. for a stop-motion look.
                :type type: typing.Literal['NULL','GENERATOR','FNGENERATOR','ENVELOPE','CYCLES','NOISE','LIMITS','STEPPED'] | None
                :return: New fmodifier
                :rtype: FModifier
        """

    def remove(self, modifier: FModifier):
        """Remove a modifier from this F-Curve

        :param modifier: Removed modifier
        :type modifier: FModifier
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierEnvelopeControlPoints(
    bpy_prop_collection[FModifierEnvelopeControlPoint], bpy_struct
):
    """Control points defining the shape of the envelope"""

    def add(self, frame: float | None) -> FModifierEnvelopeControlPoint:
        """Add a control point to a FModifierEnvelope

        :param frame: Frame to add this control-point
        :type frame: float | None
        :return: Newly created control-point
        :rtype: FModifierEnvelopeControlPoint
        """

    def remove(self, point: FModifierEnvelopeControlPoint):
        """Remove a control-point from an FModifierEnvelope

        :param point: Control-point to remove
        :type point: FModifierEnvelopeControlPoint
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FreestyleModules(bpy_prop_collection[FreestyleModuleSettings], bpy_struct):
    """A list of style modules (to be applied from top to bottom)"""

    def new(self) -> FreestyleModuleSettings:
        """Add a style module to scene render layer Freestyle settings

        :return: Newly created style module
        :rtype: FreestyleModuleSettings
        """

    def remove(self, module: FreestyleModuleSettings):
        """Remove a style module from scene render layer Freestyle settings

        :param module: Style module to remove
        :type module: FreestyleModuleSettings
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilFrames(bpy_prop_collection[GPencilFrame], bpy_struct):
    """Collection of grease pencil frames"""

    def new(self, frame_number: int | None) -> GPencilFrame:
        """Add a new grease pencil frame

        :param frame_number: Frame Number, The frame on which this sketch appears
        :type frame_number: int | None
        :return: The newly created frame
        :rtype: GPencilFrame
        """

    def remove(self, frame: GPencilFrame):
        """Remove a grease pencil frame

        :param frame: Frame, The frame to remove
        :type frame: GPencilFrame
        """

    def copy(self, source: GPencilFrame) -> GPencilFrame:
        """Copy a grease pencil frame

        :param source: Source, The source frame
        :type source: GPencilFrame
        :return: The newly copied frame
        :rtype: GPencilFrame
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilPaletteColors(bpy_prop_collection[GPencilPaletteColor], bpy_struct):
    """Collection of palette colors"""

    active: GPencilPaletteColor | None
    """ Current active color

    :type: GPencilPaletteColor | None
    """

    active_index: int | None
    """ Index of active palette color

    :type: int | None
    """

    def new(self) -> GPencilPaletteColor:
        """Add a new color to the palette

        :return: The newly created color
        :rtype: GPencilPaletteColor
        """

    def remove(self, color: GPencilPaletteColor):
        """Remove a color from the palette

        :param color: The color to remove
        :type color: GPencilPaletteColor
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilStrokePoints(bpy_prop_collection[GPencilStrokePoint], bpy_struct):
    """Collection of grease pencil stroke points"""

    def add(
        self,
        count: int | None = 1,
        pressure: float | None = 1.0,
        strength: float | None = 1.0,
    ):
        """Add a new grease pencil stroke point

        :param count: Number, Number of points to add to the stroke
        :type count: int | None
        :param pressure: Pressure, Pressure for newly created points
        :type pressure: float | None
        :param strength: Strength, Color intensity (alpha factor) for newly created points
        :type strength: float | None
        """

    def pop(self, index: int | None = -1):
        """Remove a grease pencil stroke point

        :param index: Index, point index
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilStrokes(bpy_prop_collection[GPencilStroke], bpy_struct):
    """Collection of grease pencil stroke"""

    def new(self, colorname: str = "") -> GPencilStroke:
        """Add a new grease pencil stroke

        :param colorname: Color, Name of the color
        :type colorname: str
        :return: The newly created stroke
        :rtype: GPencilStroke
        """

    def remove(self, stroke: GPencilStroke):
        """Remove a grease pencil stroke

        :param stroke: Stroke, The stroke to remove
        :type stroke: GPencilStroke
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GreasePencilBrushes(bpy_prop_collection[GPencilBrush], bpy_struct):
    """Collection of grease pencil brushes"""

    active: GPencilBrush | None
    """ Current active brush

    :type: GPencilBrush | None
    """

    active_index: int | None
    """ Index of active brush

    :type: int | None
    """

    def new(self, name: str, set_active: bool | None = False) -> GPencilBrush:
        """Add a new grease pencil brush

        :param name: Name, Name of the brush
        :type name: str
        :param set_active: Set Active, Set the newly created brush to the active brush
        :type set_active: bool | None
        :return: The newly created brush
        :rtype: GPencilBrush
        """

    def remove(self, brush: GPencilBrush):
        """Remove a grease pencil brush

        :param brush: The brush to remove
        :type brush: GPencilBrush
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GreasePencilLayers(bpy_prop_collection[GPencilLayer], bpy_struct):
    """Collection of grease pencil layers"""

    active: GPencilLayer | None
    """ Active grease pencil layer

    :type: GPencilLayer | None
    """

    active_index: int | None
    """ Index of active grease pencil layer

    :type: int | None
    """

    def new(self, name: str, set_active: bool | None = True) -> GPencilLayer:
        """Add a new grease pencil layer

        :param name: Name, Name of the layer
        :type name: str
        :param set_active: Set Active, Set the newly created layer to the active layer
        :type set_active: bool | None
        :return: The newly created layer
        :rtype: GPencilLayer
        """

    def remove(self, layer: GPencilLayer):
        """Remove a grease pencil layer

        :param layer: The layer to remove
        :type layer: GPencilLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GreasePencilPalettes(bpy_prop_collection[GPencilPalette], bpy_struct):
    """Collection of grease pencil palettes"""

    active: GPencilPalette | None
    """ Current active palette

    :type: GPencilPalette | None
    """

    active_index: int | None
    """ Index of active palette

    :type: int | None
    """

    def new(self, name: str, set_active: bool | None = True) -> GPencilPalette:
        """Add a new grease pencil palette

        :param name: Name, Name of the palette
        :type name: str
        :param set_active: Set Active, Activate the newly created palette
        :type set_active: bool | None
        :return: The newly created palette
        :rtype: GPencilPalette
        """

    def remove(self, palette: GPencilPalette):
        """Remove a grease pencil palette

        :param palette: The palette to remove
        :type palette: GPencilPalette
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GroupObjects(bpy_prop_collection[Object], bpy_struct):
    """Collection of group objects"""

    def link(self, object: Object):
        """Add this object to a group

        :param object: Object to add
        :type object: Object
        """

    def unlink(self, object: Object | None):
        """Remove this object to a group

        :param object: Object to remove
        :type object: Object | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class IDMaterials(bpy_prop_collection[Material], bpy_struct):
    """Collection of materials"""

    def append(self, material: Material | None):
        """Add a new material to the data-block

        :param material: Material to add
        :type material: Material | None
        """

    def pop(self, *, index: int = -1, update_data: bool | None = False) -> Material:
        """Remove a material from the data-block

        :param index: Index of material to remove
        :type index: int
        :param update_data: Update data by re-adjusting the material slots assigned
        :type update_data: bool | None
        :return: Material to remove
        :rtype: Material
        """

    def clear(self, update_data: bool | None = False):
        """Remove all materials from the data-block

        :param update_data: Update data by re-adjusting the material slots assigned
        :type update_data: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    @typing.overload
    def __getitem__(self, key: int | str) -> Material | None:
        """

        :param key:
        :type key: int | str
        :return:
        :rtype: Material | None
        """

    @typing.overload
    def __getitem__(self, key: slice) -> list[Material | None, ...]:
        """

        :param key:
        :type key: slice
        :return:
        :rtype: list[Material | None, ...]
        """

class KeyConfigurations(bpy_prop_collection[KeyConfig], bpy_struct):
    """Collection of KeyConfigs"""

    active: KeyConfig | None
    """ Active key configuration (preset)

    :type: KeyConfig | None
    """

    addon: KeyConfig
    """ Key configuration that can be extended by add-ons, and is added to the active configuration when handling events

    :type: KeyConfig
    """

    default: KeyConfig
    """ Default builtin key configuration

    :type: KeyConfig
    """

    user: KeyConfig
    """ Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user

    :type: KeyConfig
    """

    def new(self, name: str) -> KeyConfig:
        """new

        :param name: Name
        :type name: str
        :return: Key Configuration, Added key configuration
        :rtype: KeyConfig
        """

    def remove(self, keyconfig: KeyConfig):
        """remove

        :param keyconfig: Key Configuration, Removed key configuration
        :type keyconfig: KeyConfig
        """

    def find_item_from_operator(
        self,
        idname: str,
        context: typing.Literal[
            "INVOKE_DEFAULT",
            "INVOKE_REGION_WIN",
            "INVOKE_REGION_CHANNELS",
            "INVOKE_REGION_PREVIEW",
            "INVOKE_AREA",
            "INVOKE_SCREEN",
            "EXEC_DEFAULT",
            "EXEC_REGION_WIN",
            "EXEC_REGION_CHANNELS",
            "EXEC_REGION_PREVIEW",
            "EXEC_AREA",
            "EXEC_SCREEN",
        ]
        | None = "INVOKE_DEFAULT",
        properties: OperatorProperties | None = None,
        is_hotkey: bool | None = False,
        item: KeyMapItem | None = None,
    ) -> KeyMap:
        """find_item_from_operator

        :param idname: Operator Identifier
        :type idname: str
        :param context: context
        :type context: typing.Literal['INVOKE_DEFAULT','INVOKE_REGION_WIN','INVOKE_REGION_CHANNELS','INVOKE_REGION_PREVIEW','INVOKE_AREA','INVOKE_SCREEN','EXEC_DEFAULT','EXEC_REGION_WIN','EXEC_REGION_CHANNELS','EXEC_REGION_PREVIEW','EXEC_AREA','EXEC_SCREEN'] | None
        :param properties:
        :type properties: OperatorProperties | None
        :param is_hotkey: Hotkey, Event is not a modifier
        :type is_hotkey: bool | None
        :param item:
        :type item: KeyMapItem | None
        :return:
        :rtype: KeyMap
        """

    def update(self):
        """update"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyMapItems(bpy_prop_collection[KeyMapItem], bpy_struct):
    """Collection of keymap items"""

    def new(
        self,
        idname: str,
        type: typing.Literal[
            "NONE",
            "LEFTMOUSE",
            "MIDDLEMOUSE",
            "RIGHTMOUSE",
            "BUTTON4MOUSE",
            "BUTTON5MOUSE",
            "BUTTON6MOUSE",
            "BUTTON7MOUSE",
            "ACTIONMOUSE",
            "SELECTMOUSE",
            "PEN",
            "ERASER",
            "MOUSEMOVE",
            "INBETWEEN_MOUSEMOVE",
            "TRACKPADPAN",
            "TRACKPADZOOM",
            "MOUSEROTATE",
            "WHEELUPMOUSE",
            "WHEELDOWNMOUSE",
            "WHEELINMOUSE",
            "WHEELOUTMOUSE",
            "EVT_TWEAK_L",
            "EVT_TWEAK_M",
            "EVT_TWEAK_R",
            "EVT_TWEAK_A",
            "EVT_TWEAK_S",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "J",
            "K",
            "L",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "ZERO",
            "ONE",
            "TWO",
            "THREE",
            "FOUR",
            "FIVE",
            "SIX",
            "SEVEN",
            "EIGHT",
            "NINE",
            "LEFT_CTRL",
            "LEFT_ALT",
            "LEFT_SHIFT",
            "RIGHT_ALT",
            "RIGHT_CTRL",
            "RIGHT_SHIFT",
            "OSKEY",
            "GRLESS",
            "ESC",
            "TAB",
            "RET",
            "SPACE",
            "LINE_FEED",
            "BACK_SPACE",
            "DEL",
            "SEMI_COLON",
            "PERIOD",
            "COMMA",
            "QUOTE",
            "ACCENT_GRAVE",
            "MINUS",
            "PLUS",
            "SLASH",
            "BACK_SLASH",
            "EQUAL",
            "LEFT_BRACKET",
            "RIGHT_BRACKET",
            "LEFT_ARROW",
            "DOWN_ARROW",
            "RIGHT_ARROW",
            "UP_ARROW",
            "NUMPAD_2",
            "NUMPAD_4",
            "NUMPAD_6",
            "NUMPAD_8",
            "NUMPAD_1",
            "NUMPAD_3",
            "NUMPAD_5",
            "NUMPAD_7",
            "NUMPAD_9",
            "NUMPAD_PERIOD",
            "NUMPAD_SLASH",
            "NUMPAD_ASTERIX",
            "NUMPAD_0",
            "NUMPAD_MINUS",
            "NUMPAD_ENTER",
            "NUMPAD_PLUS",
            "F1",
            "F2",
            "F3",
            "F4",
            "F5",
            "F6",
            "F7",
            "F8",
            "F9",
            "F10",
            "F11",
            "F12",
            "F13",
            "F14",
            "F15",
            "F16",
            "F17",
            "F18",
            "F19",
            "PAUSE",
            "INSERT",
            "HOME",
            "PAGE_UP",
            "PAGE_DOWN",
            "END",
            "MEDIA_PLAY",
            "MEDIA_STOP",
            "MEDIA_FIRST",
            "MEDIA_LAST",
            "TEXTINPUT",
            "WINDOW_DEACTIVATE",
            "TIMER",
            "TIMER0",
            "TIMER1",
            "TIMER2",
            "TIMER_JOBS",
            "TIMER_AUTOSAVE",
            "TIMER_REPORT",
            "TIMERREGION",
            "NDOF_MOTION",
            "NDOF_BUTTON_MENU",
            "NDOF_BUTTON_FIT",
            "NDOF_BUTTON_TOP",
            "NDOF_BUTTON_BOTTOM",
            "NDOF_BUTTON_LEFT",
            "NDOF_BUTTON_RIGHT",
            "NDOF_BUTTON_FRONT",
            "NDOF_BUTTON_BACK",
            "NDOF_BUTTON_ISO1",
            "NDOF_BUTTON_ISO2",
            "NDOF_BUTTON_ROLL_CW",
            "NDOF_BUTTON_ROLL_CCW",
            "NDOF_BUTTON_SPIN_CW",
            "NDOF_BUTTON_SPIN_CCW",
            "NDOF_BUTTON_TILT_CW",
            "NDOF_BUTTON_TILT_CCW",
            "NDOF_BUTTON_ROTATE",
            "NDOF_BUTTON_PANZOOM",
            "NDOF_BUTTON_DOMINANT",
            "NDOF_BUTTON_PLUS",
            "NDOF_BUTTON_MINUS",
            "NDOF_BUTTON_ESC",
            "NDOF_BUTTON_ALT",
            "NDOF_BUTTON_SHIFT",
            "NDOF_BUTTON_CTRL",
            "NDOF_BUTTON_1",
            "NDOF_BUTTON_2",
            "NDOF_BUTTON_3",
            "NDOF_BUTTON_4",
            "NDOF_BUTTON_5",
            "NDOF_BUTTON_6",
            "NDOF_BUTTON_7",
            "NDOF_BUTTON_8",
            "NDOF_BUTTON_9",
            "NDOF_BUTTON_10",
            "NDOF_BUTTON_A",
            "NDOF_BUTTON_B",
            "NDOF_BUTTON_C",
            "ACTIONZONE_AREA",
            "ACTIONZONE_REGION",
            "ACTIONZONE_FULLSCREEN",
        ]
        | None,
        value: typing.Literal[
            "ANY",
            "NOTHING",
            "PRESS",
            "RELEASE",
            "CLICK",
            "DOUBLE_CLICK",
            "CLICK_DRAG",
            "NORTH",
            "NORTH_EAST",
            "EAST",
            "SOUTH_EAST",
            "SOUTH",
            "SOUTH_WEST",
            "WEST",
            "NORTH_WEST",
        ]
        | None,
        any: bool | None = False,
        shift: bool | None = False,
        ctrl: bool | None = False,
        alt: bool | None = False,
        oskey: bool | None = False,
        key_modifier: typing.Literal[
            "NONE",
            "LEFTMOUSE",
            "MIDDLEMOUSE",
            "RIGHTMOUSE",
            "BUTTON4MOUSE",
            "BUTTON5MOUSE",
            "BUTTON6MOUSE",
            "BUTTON7MOUSE",
            "ACTIONMOUSE",
            "SELECTMOUSE",
            "PEN",
            "ERASER",
            "MOUSEMOVE",
            "INBETWEEN_MOUSEMOVE",
            "TRACKPADPAN",
            "TRACKPADZOOM",
            "MOUSEROTATE",
            "WHEELUPMOUSE",
            "WHEELDOWNMOUSE",
            "WHEELINMOUSE",
            "WHEELOUTMOUSE",
            "EVT_TWEAK_L",
            "EVT_TWEAK_M",
            "EVT_TWEAK_R",
            "EVT_TWEAK_A",
            "EVT_TWEAK_S",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "J",
            "K",
            "L",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "ZERO",
            "ONE",
            "TWO",
            "THREE",
            "FOUR",
            "FIVE",
            "SIX",
            "SEVEN",
            "EIGHT",
            "NINE",
            "LEFT_CTRL",
            "LEFT_ALT",
            "LEFT_SHIFT",
            "RIGHT_ALT",
            "RIGHT_CTRL",
            "RIGHT_SHIFT",
            "OSKEY",
            "GRLESS",
            "ESC",
            "TAB",
            "RET",
            "SPACE",
            "LINE_FEED",
            "BACK_SPACE",
            "DEL",
            "SEMI_COLON",
            "PERIOD",
            "COMMA",
            "QUOTE",
            "ACCENT_GRAVE",
            "MINUS",
            "PLUS",
            "SLASH",
            "BACK_SLASH",
            "EQUAL",
            "LEFT_BRACKET",
            "RIGHT_BRACKET",
            "LEFT_ARROW",
            "DOWN_ARROW",
            "RIGHT_ARROW",
            "UP_ARROW",
            "NUMPAD_2",
            "NUMPAD_4",
            "NUMPAD_6",
            "NUMPAD_8",
            "NUMPAD_1",
            "NUMPAD_3",
            "NUMPAD_5",
            "NUMPAD_7",
            "NUMPAD_9",
            "NUMPAD_PERIOD",
            "NUMPAD_SLASH",
            "NUMPAD_ASTERIX",
            "NUMPAD_0",
            "NUMPAD_MINUS",
            "NUMPAD_ENTER",
            "NUMPAD_PLUS",
            "F1",
            "F2",
            "F3",
            "F4",
            "F5",
            "F6",
            "F7",
            "F8",
            "F9",
            "F10",
            "F11",
            "F12",
            "F13",
            "F14",
            "F15",
            "F16",
            "F17",
            "F18",
            "F19",
            "PAUSE",
            "INSERT",
            "HOME",
            "PAGE_UP",
            "PAGE_DOWN",
            "END",
            "MEDIA_PLAY",
            "MEDIA_STOP",
            "MEDIA_FIRST",
            "MEDIA_LAST",
            "TEXTINPUT",
            "WINDOW_DEACTIVATE",
            "TIMER",
            "TIMER0",
            "TIMER1",
            "TIMER2",
            "TIMER_JOBS",
            "TIMER_AUTOSAVE",
            "TIMER_REPORT",
            "TIMERREGION",
            "NDOF_MOTION",
            "NDOF_BUTTON_MENU",
            "NDOF_BUTTON_FIT",
            "NDOF_BUTTON_TOP",
            "NDOF_BUTTON_BOTTOM",
            "NDOF_BUTTON_LEFT",
            "NDOF_BUTTON_RIGHT",
            "NDOF_BUTTON_FRONT",
            "NDOF_BUTTON_BACK",
            "NDOF_BUTTON_ISO1",
            "NDOF_BUTTON_ISO2",
            "NDOF_BUTTON_ROLL_CW",
            "NDOF_BUTTON_ROLL_CCW",
            "NDOF_BUTTON_SPIN_CW",
            "NDOF_BUTTON_SPIN_CCW",
            "NDOF_BUTTON_TILT_CW",
            "NDOF_BUTTON_TILT_CCW",
            "NDOF_BUTTON_ROTATE",
            "NDOF_BUTTON_PANZOOM",
            "NDOF_BUTTON_DOMINANT",
            "NDOF_BUTTON_PLUS",
            "NDOF_BUTTON_MINUS",
            "NDOF_BUTTON_ESC",
            "NDOF_BUTTON_ALT",
            "NDOF_BUTTON_SHIFT",
            "NDOF_BUTTON_CTRL",
            "NDOF_BUTTON_1",
            "NDOF_BUTTON_2",
            "NDOF_BUTTON_3",
            "NDOF_BUTTON_4",
            "NDOF_BUTTON_5",
            "NDOF_BUTTON_6",
            "NDOF_BUTTON_7",
            "NDOF_BUTTON_8",
            "NDOF_BUTTON_9",
            "NDOF_BUTTON_10",
            "NDOF_BUTTON_A",
            "NDOF_BUTTON_B",
            "NDOF_BUTTON_C",
            "ACTIONZONE_AREA",
            "ACTIONZONE_REGION",
            "ACTIONZONE_FULLSCREEN",
        ]
        | None = "NONE",
        head: bool | None = False,
    ) -> KeyMapItem:
        """new

                :param idname: Operator Identifier
                :type idname: str
                :param type: Type

        NONE .

        LEFTMOUSE Left Mouse, LMB.

        MIDDLEMOUSE Middle Mouse, MMB.

        RIGHTMOUSE Right Mouse, RMB.

        BUTTON4MOUSE Button4 Mouse, MB4.

        BUTTON5MOUSE Button5 Mouse, MB5.

        BUTTON6MOUSE Button6 Mouse, MB6.

        BUTTON7MOUSE Button7 Mouse, MB7.

        ACTIONMOUSE Action Mouse, MBA.

        SELECTMOUSE Select Mouse, MBS.

        PEN Pen.

        ERASER Eraser.

        MOUSEMOVE Mouse Move, MsMov.

        INBETWEEN_MOUSEMOVE In-between Move, MsSubMov.

        TRACKPADPAN Mouse/Trackpad Pan, MsPan.

        TRACKPADZOOM Mouse/Trackpad Zoom, MsZoom.

        MOUSEROTATE Mouse/Trackpad Rotate, MsRot.

        WHEELUPMOUSE Wheel Up, WhUp.

        WHEELDOWNMOUSE Wheel Down, WhDown.

        WHEELINMOUSE Wheel In, WhIn.

        WHEELOUTMOUSE Wheel Out, WhOut.

        EVT_TWEAK_L Tweak Left, TwkL.

        EVT_TWEAK_M Tweak Middle, TwkM.

        EVT_TWEAK_R Tweak Right, TwkR.

        EVT_TWEAK_A Tweak Action, TwkA.

        EVT_TWEAK_S Tweak Select, TwkS.

        A A.

        B B.

        C C.

        D D.

        E E.

        F F.

        G G.

        H H.

        I I.

        J J.

        K K.

        L L.

        M M.

        N N.

        O O.

        P P.

        Q Q.

        R R.

        S S.

        T T.

        U U.

        V V.

        W W.

        X X.

        Y Y.

        Z Z.

        ZERO 0.

        ONE 1.

        TWO 2.

        THREE 3.

        FOUR 4.

        FIVE 5.

        SIX 6.

        SEVEN 7.

        EIGHT 8.

        NINE 9.

        LEFT_CTRL Left Ctrl, CtrlL.

        LEFT_ALT Left Alt, AltL.

        LEFT_SHIFT Left Shift, ShiftL.

        RIGHT_ALT Right Alt, AltR.

        RIGHT_CTRL Right Ctrl, CtrlR.

        RIGHT_SHIFT Right Shift, ShiftR.

        OSKEY OS Key, Cmd.

        GRLESS Grless.

        ESC Esc.

        TAB Tab.

        RET Return, Enter.

        SPACE Spacebar, Space.

        LINE_FEED Line Feed.

        BACK_SPACE Back Space, BkSpace.

        DEL Delete, Del.

        SEMI_COLON ;.

        PERIOD ..

        COMMA ,.

        QUOTE ".

        ACCENT_GRAVE `.

        MINUS -.

        PLUS +.

        SLASH /.

        BACK_SLASH \.

        EQUAL =.

        LEFT_BRACKET [.

        RIGHT_BRACKET ].

        LEFT_ARROW Left Arrow, ←.

        DOWN_ARROW Down Arrow, ↓.

        RIGHT_ARROW Right Arrow, →.

        UP_ARROW Up Arrow, ↑.

        NUMPAD_2 Numpad 2, Pad2.

        NUMPAD_4 Numpad 4, Pad4.

        NUMPAD_6 Numpad 6, Pad6.

        NUMPAD_8 Numpad 8, Pad8.

        NUMPAD_1 Numpad 1, Pad1.

        NUMPAD_3 Numpad 3, Pad3.

        NUMPAD_5 Numpad 5, Pad5.

        NUMPAD_7 Numpad 7, Pad7.

        NUMPAD_9 Numpad 9, Pad9.

        NUMPAD_PERIOD Numpad ., Pad..

        NUMPAD_SLASH Numpad /, Pad/.

        NUMPAD_ASTERIX Numpad *, Pad*.

        NUMPAD_0 Numpad 0, Pad0.

        NUMPAD_MINUS Numpad -, Pad-.

        NUMPAD_ENTER Numpad Enter, PadEnter.

        NUMPAD_PLUS Numpad +, Pad+.

        F1 F1.

        F2 F2.

        F3 F3.

        F4 F4.

        F5 F5.

        F6 F6.

        F7 F7.

        F8 F8.

        F9 F9.

        F10 F10.

        F11 F11.

        F12 F12.

        F13 F13.

        F14 F14.

        F15 F15.

        F16 F16.

        F17 F17.

        F18 F18.

        F19 F19.

        PAUSE Pause.

        INSERT Insert, Ins.

        HOME Home.

        PAGE_UP Page Up, PgUp.

        PAGE_DOWN Page Down, PgDown.

        END End.

        MEDIA_PLAY Media Play/Pause, >/||.

        MEDIA_STOP Media Stop, Stop.

        MEDIA_FIRST Media First, |<<.

        MEDIA_LAST Media Last, >>|.

        TEXTINPUT Text Input, TxtIn.

        WINDOW_DEACTIVATE Window Deactivate.

        TIMER Timer, Tmr.

        TIMER0 Timer 0, Tmr0.

        TIMER1 Timer 1, Tmr1.

        TIMER2 Timer 2, Tmr2.

        TIMER_JOBS Timer Jobs, TmrJob.

        TIMER_AUTOSAVE Timer Autosave, TmrSave.

        TIMER_REPORT Timer Report, TmrReport.

        TIMERREGION Timer Region, TmrReg.

        NDOF_MOTION NDOF Motion, NdofMov.

        NDOF_BUTTON_MENU NDOF Menu, NdofMenu.

        NDOF_BUTTON_FIT NDOF Fit, NdofFit.

        NDOF_BUTTON_TOP NDOF Top, Ndof↑.

        NDOF_BUTTON_BOTTOM NDOF Bottom, Ndof↓.

        NDOF_BUTTON_LEFT NDOF Left, Ndof←.

        NDOF_BUTTON_RIGHT NDOF Right, Ndof→.

        NDOF_BUTTON_FRONT NDOF Front, NdofFront.

        NDOF_BUTTON_BACK NDOF Back, NdofBack.

        NDOF_BUTTON_ISO1 NDOF Isometric 1, NdofIso1.

        NDOF_BUTTON_ISO2 NDOF Isometric 2, NdofIso2.

        NDOF_BUTTON_ROLL_CW NDOF Roll CW, NdofRCW.

        NDOF_BUTTON_ROLL_CCW NDOF Roll CCW, NdofRCCW.

        NDOF_BUTTON_SPIN_CW NDOF Spin CW, NdofSCW.

        NDOF_BUTTON_SPIN_CCW NDOF Spin CCW, NdofSCCW.

        NDOF_BUTTON_TILT_CW NDOF Tilt CW, NdofTCW.

        NDOF_BUTTON_TILT_CCW NDOF Tilt CCW, NdofTCCW.

        NDOF_BUTTON_ROTATE NDOF Rotate, NdofRot.

        NDOF_BUTTON_PANZOOM NDOF Pan/Zoom, NdofPanZoom.

        NDOF_BUTTON_DOMINANT NDOF Dominant, NdofDom.

        NDOF_BUTTON_PLUS NDOF Plus, Ndof+.

        NDOF_BUTTON_MINUS NDOF Minus, Ndof-.

        NDOF_BUTTON_ESC NDOF Esc, NdofEsc.

        NDOF_BUTTON_ALT NDOF Alt, NdofAlt.

        NDOF_BUTTON_SHIFT NDOF Shift, NdofShift.

        NDOF_BUTTON_CTRL NDOF Ctrl, NdofCtrl.

        NDOF_BUTTON_1 NDOF Button 1, NdofB1.

        NDOF_BUTTON_2 NDOF Button 2, NdofB2.

        NDOF_BUTTON_3 NDOF Button 3, NdofB3.

        NDOF_BUTTON_4 NDOF Button 4, NdofB4.

        NDOF_BUTTON_5 NDOF Button 5, NdofB5.

        NDOF_BUTTON_6 NDOF Button 6, NdofB6.

        NDOF_BUTTON_7 NDOF Button 7, NdofB7.

        NDOF_BUTTON_8 NDOF Button 8, NdofB8.

        NDOF_BUTTON_9 NDOF Button 9, NdofB9.

        NDOF_BUTTON_10 NDOF Button 10, NdofB10.

        NDOF_BUTTON_A NDOF Button A, NdofBA.

        NDOF_BUTTON_B NDOF Button B, NdofBB.

        NDOF_BUTTON_C NDOF Button C, NdofBC.

        ACTIONZONE_AREA ActionZone Area, AZone Area.

        ACTIONZONE_REGION ActionZone Region, AZone Region.

        ACTIONZONE_FULLSCREEN ActionZone Fullscreen, AZone FullScr.
                :type type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN'] | None
                :param value: Value
                :type value: typing.Literal['ANY','NOTHING','PRESS','RELEASE','CLICK','DOUBLE_CLICK','CLICK_DRAG','NORTH','NORTH_EAST','EAST','SOUTH_EAST','SOUTH','SOUTH_WEST','WEST','NORTH_WEST'] | None
                :param any: Any
                :type any: bool | None
                :param shift: Shift
                :type shift: bool | None
                :param ctrl: Ctrl
                :type ctrl: bool | None
                :param alt: Alt
                :type alt: bool | None
                :param oskey: OS Key
                :type oskey: bool | None
                :param key_modifier: Key Modifier

        NONE .

        LEFTMOUSE Left Mouse, LMB.

        MIDDLEMOUSE Middle Mouse, MMB.

        RIGHTMOUSE Right Mouse, RMB.

        BUTTON4MOUSE Button4 Mouse, MB4.

        BUTTON5MOUSE Button5 Mouse, MB5.

        BUTTON6MOUSE Button6 Mouse, MB6.

        BUTTON7MOUSE Button7 Mouse, MB7.

        ACTIONMOUSE Action Mouse, MBA.

        SELECTMOUSE Select Mouse, MBS.

        PEN Pen.

        ERASER Eraser.

        MOUSEMOVE Mouse Move, MsMov.

        INBETWEEN_MOUSEMOVE In-between Move, MsSubMov.

        TRACKPADPAN Mouse/Trackpad Pan, MsPan.

        TRACKPADZOOM Mouse/Trackpad Zoom, MsZoom.

        MOUSEROTATE Mouse/Trackpad Rotate, MsRot.

        WHEELUPMOUSE Wheel Up, WhUp.

        WHEELDOWNMOUSE Wheel Down, WhDown.

        WHEELINMOUSE Wheel In, WhIn.

        WHEELOUTMOUSE Wheel Out, WhOut.

        EVT_TWEAK_L Tweak Left, TwkL.

        EVT_TWEAK_M Tweak Middle, TwkM.

        EVT_TWEAK_R Tweak Right, TwkR.

        EVT_TWEAK_A Tweak Action, TwkA.

        EVT_TWEAK_S Tweak Select, TwkS.

        A A.

        B B.

        C C.

        D D.

        E E.

        F F.

        G G.

        H H.

        I I.

        J J.

        K K.

        L L.

        M M.

        N N.

        O O.

        P P.

        Q Q.

        R R.

        S S.

        T T.

        U U.

        V V.

        W W.

        X X.

        Y Y.

        Z Z.

        ZERO 0.

        ONE 1.

        TWO 2.

        THREE 3.

        FOUR 4.

        FIVE 5.

        SIX 6.

        SEVEN 7.

        EIGHT 8.

        NINE 9.

        LEFT_CTRL Left Ctrl, CtrlL.

        LEFT_ALT Left Alt, AltL.

        LEFT_SHIFT Left Shift, ShiftL.

        RIGHT_ALT Right Alt, AltR.

        RIGHT_CTRL Right Ctrl, CtrlR.

        RIGHT_SHIFT Right Shift, ShiftR.

        OSKEY OS Key, Cmd.

        GRLESS Grless.

        ESC Esc.

        TAB Tab.

        RET Return, Enter.

        SPACE Spacebar, Space.

        LINE_FEED Line Feed.

        BACK_SPACE Back Space, BkSpace.

        DEL Delete, Del.

        SEMI_COLON ;.

        PERIOD ..

        COMMA ,.

        QUOTE ".

        ACCENT_GRAVE `.

        MINUS -.

        PLUS +.

        SLASH /.

        BACK_SLASH \.

        EQUAL =.

        LEFT_BRACKET [.

        RIGHT_BRACKET ].

        LEFT_ARROW Left Arrow, ←.

        DOWN_ARROW Down Arrow, ↓.

        RIGHT_ARROW Right Arrow, →.

        UP_ARROW Up Arrow, ↑.

        NUMPAD_2 Numpad 2, Pad2.

        NUMPAD_4 Numpad 4, Pad4.

        NUMPAD_6 Numpad 6, Pad6.

        NUMPAD_8 Numpad 8, Pad8.

        NUMPAD_1 Numpad 1, Pad1.

        NUMPAD_3 Numpad 3, Pad3.

        NUMPAD_5 Numpad 5, Pad5.

        NUMPAD_7 Numpad 7, Pad7.

        NUMPAD_9 Numpad 9, Pad9.

        NUMPAD_PERIOD Numpad ., Pad..

        NUMPAD_SLASH Numpad /, Pad/.

        NUMPAD_ASTERIX Numpad *, Pad*.

        NUMPAD_0 Numpad 0, Pad0.

        NUMPAD_MINUS Numpad -, Pad-.

        NUMPAD_ENTER Numpad Enter, PadEnter.

        NUMPAD_PLUS Numpad +, Pad+.

        F1 F1.

        F2 F2.

        F3 F3.

        F4 F4.

        F5 F5.

        F6 F6.

        F7 F7.

        F8 F8.

        F9 F9.

        F10 F10.

        F11 F11.

        F12 F12.

        F13 F13.

        F14 F14.

        F15 F15.

        F16 F16.

        F17 F17.

        F18 F18.

        F19 F19.

        PAUSE Pause.

        INSERT Insert, Ins.

        HOME Home.

        PAGE_UP Page Up, PgUp.

        PAGE_DOWN Page Down, PgDown.

        END End.

        MEDIA_PLAY Media Play/Pause, >/||.

        MEDIA_STOP Media Stop, Stop.

        MEDIA_FIRST Media First, |<<.

        MEDIA_LAST Media Last, >>|.

        TEXTINPUT Text Input, TxtIn.

        WINDOW_DEACTIVATE Window Deactivate.

        TIMER Timer, Tmr.

        TIMER0 Timer 0, Tmr0.

        TIMER1 Timer 1, Tmr1.

        TIMER2 Timer 2, Tmr2.

        TIMER_JOBS Timer Jobs, TmrJob.

        TIMER_AUTOSAVE Timer Autosave, TmrSave.

        TIMER_REPORT Timer Report, TmrReport.

        TIMERREGION Timer Region, TmrReg.

        NDOF_MOTION NDOF Motion, NdofMov.

        NDOF_BUTTON_MENU NDOF Menu, NdofMenu.

        NDOF_BUTTON_FIT NDOF Fit, NdofFit.

        NDOF_BUTTON_TOP NDOF Top, Ndof↑.

        NDOF_BUTTON_BOTTOM NDOF Bottom, Ndof↓.

        NDOF_BUTTON_LEFT NDOF Left, Ndof←.

        NDOF_BUTTON_RIGHT NDOF Right, Ndof→.

        NDOF_BUTTON_FRONT NDOF Front, NdofFront.

        NDOF_BUTTON_BACK NDOF Back, NdofBack.

        NDOF_BUTTON_ISO1 NDOF Isometric 1, NdofIso1.

        NDOF_BUTTON_ISO2 NDOF Isometric 2, NdofIso2.

        NDOF_BUTTON_ROLL_CW NDOF Roll CW, NdofRCW.

        NDOF_BUTTON_ROLL_CCW NDOF Roll CCW, NdofRCCW.

        NDOF_BUTTON_SPIN_CW NDOF Spin CW, NdofSCW.

        NDOF_BUTTON_SPIN_CCW NDOF Spin CCW, NdofSCCW.

        NDOF_BUTTON_TILT_CW NDOF Tilt CW, NdofTCW.

        NDOF_BUTTON_TILT_CCW NDOF Tilt CCW, NdofTCCW.

        NDOF_BUTTON_ROTATE NDOF Rotate, NdofRot.

        NDOF_BUTTON_PANZOOM NDOF Pan/Zoom, NdofPanZoom.

        NDOF_BUTTON_DOMINANT NDOF Dominant, NdofDom.

        NDOF_BUTTON_PLUS NDOF Plus, Ndof+.

        NDOF_BUTTON_MINUS NDOF Minus, Ndof-.

        NDOF_BUTTON_ESC NDOF Esc, NdofEsc.

        NDOF_BUTTON_ALT NDOF Alt, NdofAlt.

        NDOF_BUTTON_SHIFT NDOF Shift, NdofShift.

        NDOF_BUTTON_CTRL NDOF Ctrl, NdofCtrl.

        NDOF_BUTTON_1 NDOF Button 1, NdofB1.

        NDOF_BUTTON_2 NDOF Button 2, NdofB2.

        NDOF_BUTTON_3 NDOF Button 3, NdofB3.

        NDOF_BUTTON_4 NDOF Button 4, NdofB4.

        NDOF_BUTTON_5 NDOF Button 5, NdofB5.

        NDOF_BUTTON_6 NDOF Button 6, NdofB6.

        NDOF_BUTTON_7 NDOF Button 7, NdofB7.

        NDOF_BUTTON_8 NDOF Button 8, NdofB8.

        NDOF_BUTTON_9 NDOF Button 9, NdofB9.

        NDOF_BUTTON_10 NDOF Button 10, NdofB10.

        NDOF_BUTTON_A NDOF Button A, NdofBA.

        NDOF_BUTTON_B NDOF Button B, NdofBB.

        NDOF_BUTTON_C NDOF Button C, NdofBC.

        ACTIONZONE_AREA ActionZone Area, AZone Area.

        ACTIONZONE_REGION ActionZone Region, AZone Region.

        ACTIONZONE_FULLSCREEN ActionZone Fullscreen, AZone FullScr.
                :type key_modifier: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN'] | None
                :param head: At Head, Force item to be added at start (not end) of key map so that it doesn't get blocked by an existing key map item
                :type head: bool | None
                :return: Item, Added key map item
                :rtype: KeyMapItem
        """

    def new_modal(
        self,
        propvalue: str,
        type: typing.Literal[
            "NONE",
            "LEFTMOUSE",
            "MIDDLEMOUSE",
            "RIGHTMOUSE",
            "BUTTON4MOUSE",
            "BUTTON5MOUSE",
            "BUTTON6MOUSE",
            "BUTTON7MOUSE",
            "ACTIONMOUSE",
            "SELECTMOUSE",
            "PEN",
            "ERASER",
            "MOUSEMOVE",
            "INBETWEEN_MOUSEMOVE",
            "TRACKPADPAN",
            "TRACKPADZOOM",
            "MOUSEROTATE",
            "WHEELUPMOUSE",
            "WHEELDOWNMOUSE",
            "WHEELINMOUSE",
            "WHEELOUTMOUSE",
            "EVT_TWEAK_L",
            "EVT_TWEAK_M",
            "EVT_TWEAK_R",
            "EVT_TWEAK_A",
            "EVT_TWEAK_S",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "J",
            "K",
            "L",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "ZERO",
            "ONE",
            "TWO",
            "THREE",
            "FOUR",
            "FIVE",
            "SIX",
            "SEVEN",
            "EIGHT",
            "NINE",
            "LEFT_CTRL",
            "LEFT_ALT",
            "LEFT_SHIFT",
            "RIGHT_ALT",
            "RIGHT_CTRL",
            "RIGHT_SHIFT",
            "OSKEY",
            "GRLESS",
            "ESC",
            "TAB",
            "RET",
            "SPACE",
            "LINE_FEED",
            "BACK_SPACE",
            "DEL",
            "SEMI_COLON",
            "PERIOD",
            "COMMA",
            "QUOTE",
            "ACCENT_GRAVE",
            "MINUS",
            "PLUS",
            "SLASH",
            "BACK_SLASH",
            "EQUAL",
            "LEFT_BRACKET",
            "RIGHT_BRACKET",
            "LEFT_ARROW",
            "DOWN_ARROW",
            "RIGHT_ARROW",
            "UP_ARROW",
            "NUMPAD_2",
            "NUMPAD_4",
            "NUMPAD_6",
            "NUMPAD_8",
            "NUMPAD_1",
            "NUMPAD_3",
            "NUMPAD_5",
            "NUMPAD_7",
            "NUMPAD_9",
            "NUMPAD_PERIOD",
            "NUMPAD_SLASH",
            "NUMPAD_ASTERIX",
            "NUMPAD_0",
            "NUMPAD_MINUS",
            "NUMPAD_ENTER",
            "NUMPAD_PLUS",
            "F1",
            "F2",
            "F3",
            "F4",
            "F5",
            "F6",
            "F7",
            "F8",
            "F9",
            "F10",
            "F11",
            "F12",
            "F13",
            "F14",
            "F15",
            "F16",
            "F17",
            "F18",
            "F19",
            "PAUSE",
            "INSERT",
            "HOME",
            "PAGE_UP",
            "PAGE_DOWN",
            "END",
            "MEDIA_PLAY",
            "MEDIA_STOP",
            "MEDIA_FIRST",
            "MEDIA_LAST",
            "TEXTINPUT",
            "WINDOW_DEACTIVATE",
            "TIMER",
            "TIMER0",
            "TIMER1",
            "TIMER2",
            "TIMER_JOBS",
            "TIMER_AUTOSAVE",
            "TIMER_REPORT",
            "TIMERREGION",
            "NDOF_MOTION",
            "NDOF_BUTTON_MENU",
            "NDOF_BUTTON_FIT",
            "NDOF_BUTTON_TOP",
            "NDOF_BUTTON_BOTTOM",
            "NDOF_BUTTON_LEFT",
            "NDOF_BUTTON_RIGHT",
            "NDOF_BUTTON_FRONT",
            "NDOF_BUTTON_BACK",
            "NDOF_BUTTON_ISO1",
            "NDOF_BUTTON_ISO2",
            "NDOF_BUTTON_ROLL_CW",
            "NDOF_BUTTON_ROLL_CCW",
            "NDOF_BUTTON_SPIN_CW",
            "NDOF_BUTTON_SPIN_CCW",
            "NDOF_BUTTON_TILT_CW",
            "NDOF_BUTTON_TILT_CCW",
            "NDOF_BUTTON_ROTATE",
            "NDOF_BUTTON_PANZOOM",
            "NDOF_BUTTON_DOMINANT",
            "NDOF_BUTTON_PLUS",
            "NDOF_BUTTON_MINUS",
            "NDOF_BUTTON_ESC",
            "NDOF_BUTTON_ALT",
            "NDOF_BUTTON_SHIFT",
            "NDOF_BUTTON_CTRL",
            "NDOF_BUTTON_1",
            "NDOF_BUTTON_2",
            "NDOF_BUTTON_3",
            "NDOF_BUTTON_4",
            "NDOF_BUTTON_5",
            "NDOF_BUTTON_6",
            "NDOF_BUTTON_7",
            "NDOF_BUTTON_8",
            "NDOF_BUTTON_9",
            "NDOF_BUTTON_10",
            "NDOF_BUTTON_A",
            "NDOF_BUTTON_B",
            "NDOF_BUTTON_C",
            "ACTIONZONE_AREA",
            "ACTIONZONE_REGION",
            "ACTIONZONE_FULLSCREEN",
        ]
        | None,
        value: typing.Literal[
            "ANY",
            "NOTHING",
            "PRESS",
            "RELEASE",
            "CLICK",
            "DOUBLE_CLICK",
            "CLICK_DRAG",
            "NORTH",
            "NORTH_EAST",
            "EAST",
            "SOUTH_EAST",
            "SOUTH",
            "SOUTH_WEST",
            "WEST",
            "NORTH_WEST",
        ]
        | None,
        any: bool | None = False,
        shift: bool | None = False,
        ctrl: bool | None = False,
        alt: bool | None = False,
        oskey: bool | None = False,
        key_modifier: typing.Literal[
            "NONE",
            "LEFTMOUSE",
            "MIDDLEMOUSE",
            "RIGHTMOUSE",
            "BUTTON4MOUSE",
            "BUTTON5MOUSE",
            "BUTTON6MOUSE",
            "BUTTON7MOUSE",
            "ACTIONMOUSE",
            "SELECTMOUSE",
            "PEN",
            "ERASER",
            "MOUSEMOVE",
            "INBETWEEN_MOUSEMOVE",
            "TRACKPADPAN",
            "TRACKPADZOOM",
            "MOUSEROTATE",
            "WHEELUPMOUSE",
            "WHEELDOWNMOUSE",
            "WHEELINMOUSE",
            "WHEELOUTMOUSE",
            "EVT_TWEAK_L",
            "EVT_TWEAK_M",
            "EVT_TWEAK_R",
            "EVT_TWEAK_A",
            "EVT_TWEAK_S",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "J",
            "K",
            "L",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "ZERO",
            "ONE",
            "TWO",
            "THREE",
            "FOUR",
            "FIVE",
            "SIX",
            "SEVEN",
            "EIGHT",
            "NINE",
            "LEFT_CTRL",
            "LEFT_ALT",
            "LEFT_SHIFT",
            "RIGHT_ALT",
            "RIGHT_CTRL",
            "RIGHT_SHIFT",
            "OSKEY",
            "GRLESS",
            "ESC",
            "TAB",
            "RET",
            "SPACE",
            "LINE_FEED",
            "BACK_SPACE",
            "DEL",
            "SEMI_COLON",
            "PERIOD",
            "COMMA",
            "QUOTE",
            "ACCENT_GRAVE",
            "MINUS",
            "PLUS",
            "SLASH",
            "BACK_SLASH",
            "EQUAL",
            "LEFT_BRACKET",
            "RIGHT_BRACKET",
            "LEFT_ARROW",
            "DOWN_ARROW",
            "RIGHT_ARROW",
            "UP_ARROW",
            "NUMPAD_2",
            "NUMPAD_4",
            "NUMPAD_6",
            "NUMPAD_8",
            "NUMPAD_1",
            "NUMPAD_3",
            "NUMPAD_5",
            "NUMPAD_7",
            "NUMPAD_9",
            "NUMPAD_PERIOD",
            "NUMPAD_SLASH",
            "NUMPAD_ASTERIX",
            "NUMPAD_0",
            "NUMPAD_MINUS",
            "NUMPAD_ENTER",
            "NUMPAD_PLUS",
            "F1",
            "F2",
            "F3",
            "F4",
            "F5",
            "F6",
            "F7",
            "F8",
            "F9",
            "F10",
            "F11",
            "F12",
            "F13",
            "F14",
            "F15",
            "F16",
            "F17",
            "F18",
            "F19",
            "PAUSE",
            "INSERT",
            "HOME",
            "PAGE_UP",
            "PAGE_DOWN",
            "END",
            "MEDIA_PLAY",
            "MEDIA_STOP",
            "MEDIA_FIRST",
            "MEDIA_LAST",
            "TEXTINPUT",
            "WINDOW_DEACTIVATE",
            "TIMER",
            "TIMER0",
            "TIMER1",
            "TIMER2",
            "TIMER_JOBS",
            "TIMER_AUTOSAVE",
            "TIMER_REPORT",
            "TIMERREGION",
            "NDOF_MOTION",
            "NDOF_BUTTON_MENU",
            "NDOF_BUTTON_FIT",
            "NDOF_BUTTON_TOP",
            "NDOF_BUTTON_BOTTOM",
            "NDOF_BUTTON_LEFT",
            "NDOF_BUTTON_RIGHT",
            "NDOF_BUTTON_FRONT",
            "NDOF_BUTTON_BACK",
            "NDOF_BUTTON_ISO1",
            "NDOF_BUTTON_ISO2",
            "NDOF_BUTTON_ROLL_CW",
            "NDOF_BUTTON_ROLL_CCW",
            "NDOF_BUTTON_SPIN_CW",
            "NDOF_BUTTON_SPIN_CCW",
            "NDOF_BUTTON_TILT_CW",
            "NDOF_BUTTON_TILT_CCW",
            "NDOF_BUTTON_ROTATE",
            "NDOF_BUTTON_PANZOOM",
            "NDOF_BUTTON_DOMINANT",
            "NDOF_BUTTON_PLUS",
            "NDOF_BUTTON_MINUS",
            "NDOF_BUTTON_ESC",
            "NDOF_BUTTON_ALT",
            "NDOF_BUTTON_SHIFT",
            "NDOF_BUTTON_CTRL",
            "NDOF_BUTTON_1",
            "NDOF_BUTTON_2",
            "NDOF_BUTTON_3",
            "NDOF_BUTTON_4",
            "NDOF_BUTTON_5",
            "NDOF_BUTTON_6",
            "NDOF_BUTTON_7",
            "NDOF_BUTTON_8",
            "NDOF_BUTTON_9",
            "NDOF_BUTTON_10",
            "NDOF_BUTTON_A",
            "NDOF_BUTTON_B",
            "NDOF_BUTTON_C",
            "ACTIONZONE_AREA",
            "ACTIONZONE_REGION",
            "ACTIONZONE_FULLSCREEN",
        ]
        | None = "NONE",
    ) -> KeyMapItem:
        """new_modal

                :param propvalue: Property Value
                :type propvalue: str
                :param type: Type

        NONE .

        LEFTMOUSE Left Mouse, LMB.

        MIDDLEMOUSE Middle Mouse, MMB.

        RIGHTMOUSE Right Mouse, RMB.

        BUTTON4MOUSE Button4 Mouse, MB4.

        BUTTON5MOUSE Button5 Mouse, MB5.

        BUTTON6MOUSE Button6 Mouse, MB6.

        BUTTON7MOUSE Button7 Mouse, MB7.

        ACTIONMOUSE Action Mouse, MBA.

        SELECTMOUSE Select Mouse, MBS.

        PEN Pen.

        ERASER Eraser.

        MOUSEMOVE Mouse Move, MsMov.

        INBETWEEN_MOUSEMOVE In-between Move, MsSubMov.

        TRACKPADPAN Mouse/Trackpad Pan, MsPan.

        TRACKPADZOOM Mouse/Trackpad Zoom, MsZoom.

        MOUSEROTATE Mouse/Trackpad Rotate, MsRot.

        WHEELUPMOUSE Wheel Up, WhUp.

        WHEELDOWNMOUSE Wheel Down, WhDown.

        WHEELINMOUSE Wheel In, WhIn.

        WHEELOUTMOUSE Wheel Out, WhOut.

        EVT_TWEAK_L Tweak Left, TwkL.

        EVT_TWEAK_M Tweak Middle, TwkM.

        EVT_TWEAK_R Tweak Right, TwkR.

        EVT_TWEAK_A Tweak Action, TwkA.

        EVT_TWEAK_S Tweak Select, TwkS.

        A A.

        B B.

        C C.

        D D.

        E E.

        F F.

        G G.

        H H.

        I I.

        J J.

        K K.

        L L.

        M M.

        N N.

        O O.

        P P.

        Q Q.

        R R.

        S S.

        T T.

        U U.

        V V.

        W W.

        X X.

        Y Y.

        Z Z.

        ZERO 0.

        ONE 1.

        TWO 2.

        THREE 3.

        FOUR 4.

        FIVE 5.

        SIX 6.

        SEVEN 7.

        EIGHT 8.

        NINE 9.

        LEFT_CTRL Left Ctrl, CtrlL.

        LEFT_ALT Left Alt, AltL.

        LEFT_SHIFT Left Shift, ShiftL.

        RIGHT_ALT Right Alt, AltR.

        RIGHT_CTRL Right Ctrl, CtrlR.

        RIGHT_SHIFT Right Shift, ShiftR.

        OSKEY OS Key, Cmd.

        GRLESS Grless.

        ESC Esc.

        TAB Tab.

        RET Return, Enter.

        SPACE Spacebar, Space.

        LINE_FEED Line Feed.

        BACK_SPACE Back Space, BkSpace.

        DEL Delete, Del.

        SEMI_COLON ;.

        PERIOD ..

        COMMA ,.

        QUOTE ".

        ACCENT_GRAVE `.

        MINUS -.

        PLUS +.

        SLASH /.

        BACK_SLASH \.

        EQUAL =.

        LEFT_BRACKET [.

        RIGHT_BRACKET ].

        LEFT_ARROW Left Arrow, ←.

        DOWN_ARROW Down Arrow, ↓.

        RIGHT_ARROW Right Arrow, →.

        UP_ARROW Up Arrow, ↑.

        NUMPAD_2 Numpad 2, Pad2.

        NUMPAD_4 Numpad 4, Pad4.

        NUMPAD_6 Numpad 6, Pad6.

        NUMPAD_8 Numpad 8, Pad8.

        NUMPAD_1 Numpad 1, Pad1.

        NUMPAD_3 Numpad 3, Pad3.

        NUMPAD_5 Numpad 5, Pad5.

        NUMPAD_7 Numpad 7, Pad7.

        NUMPAD_9 Numpad 9, Pad9.

        NUMPAD_PERIOD Numpad ., Pad..

        NUMPAD_SLASH Numpad /, Pad/.

        NUMPAD_ASTERIX Numpad *, Pad*.

        NUMPAD_0 Numpad 0, Pad0.

        NUMPAD_MINUS Numpad -, Pad-.

        NUMPAD_ENTER Numpad Enter, PadEnter.

        NUMPAD_PLUS Numpad +, Pad+.

        F1 F1.

        F2 F2.

        F3 F3.

        F4 F4.

        F5 F5.

        F6 F6.

        F7 F7.

        F8 F8.

        F9 F9.

        F10 F10.

        F11 F11.

        F12 F12.

        F13 F13.

        F14 F14.

        F15 F15.

        F16 F16.

        F17 F17.

        F18 F18.

        F19 F19.

        PAUSE Pause.

        INSERT Insert, Ins.

        HOME Home.

        PAGE_UP Page Up, PgUp.

        PAGE_DOWN Page Down, PgDown.

        END End.

        MEDIA_PLAY Media Play/Pause, >/||.

        MEDIA_STOP Media Stop, Stop.

        MEDIA_FIRST Media First, |<<.

        MEDIA_LAST Media Last, >>|.

        TEXTINPUT Text Input, TxtIn.

        WINDOW_DEACTIVATE Window Deactivate.

        TIMER Timer, Tmr.

        TIMER0 Timer 0, Tmr0.

        TIMER1 Timer 1, Tmr1.

        TIMER2 Timer 2, Tmr2.

        TIMER_JOBS Timer Jobs, TmrJob.

        TIMER_AUTOSAVE Timer Autosave, TmrSave.

        TIMER_REPORT Timer Report, TmrReport.

        TIMERREGION Timer Region, TmrReg.

        NDOF_MOTION NDOF Motion, NdofMov.

        NDOF_BUTTON_MENU NDOF Menu, NdofMenu.

        NDOF_BUTTON_FIT NDOF Fit, NdofFit.

        NDOF_BUTTON_TOP NDOF Top, Ndof↑.

        NDOF_BUTTON_BOTTOM NDOF Bottom, Ndof↓.

        NDOF_BUTTON_LEFT NDOF Left, Ndof←.

        NDOF_BUTTON_RIGHT NDOF Right, Ndof→.

        NDOF_BUTTON_FRONT NDOF Front, NdofFront.

        NDOF_BUTTON_BACK NDOF Back, NdofBack.

        NDOF_BUTTON_ISO1 NDOF Isometric 1, NdofIso1.

        NDOF_BUTTON_ISO2 NDOF Isometric 2, NdofIso2.

        NDOF_BUTTON_ROLL_CW NDOF Roll CW, NdofRCW.

        NDOF_BUTTON_ROLL_CCW NDOF Roll CCW, NdofRCCW.

        NDOF_BUTTON_SPIN_CW NDOF Spin CW, NdofSCW.

        NDOF_BUTTON_SPIN_CCW NDOF Spin CCW, NdofSCCW.

        NDOF_BUTTON_TILT_CW NDOF Tilt CW, NdofTCW.

        NDOF_BUTTON_TILT_CCW NDOF Tilt CCW, NdofTCCW.

        NDOF_BUTTON_ROTATE NDOF Rotate, NdofRot.

        NDOF_BUTTON_PANZOOM NDOF Pan/Zoom, NdofPanZoom.

        NDOF_BUTTON_DOMINANT NDOF Dominant, NdofDom.

        NDOF_BUTTON_PLUS NDOF Plus, Ndof+.

        NDOF_BUTTON_MINUS NDOF Minus, Ndof-.

        NDOF_BUTTON_ESC NDOF Esc, NdofEsc.

        NDOF_BUTTON_ALT NDOF Alt, NdofAlt.

        NDOF_BUTTON_SHIFT NDOF Shift, NdofShift.

        NDOF_BUTTON_CTRL NDOF Ctrl, NdofCtrl.

        NDOF_BUTTON_1 NDOF Button 1, NdofB1.

        NDOF_BUTTON_2 NDOF Button 2, NdofB2.

        NDOF_BUTTON_3 NDOF Button 3, NdofB3.

        NDOF_BUTTON_4 NDOF Button 4, NdofB4.

        NDOF_BUTTON_5 NDOF Button 5, NdofB5.

        NDOF_BUTTON_6 NDOF Button 6, NdofB6.

        NDOF_BUTTON_7 NDOF Button 7, NdofB7.

        NDOF_BUTTON_8 NDOF Button 8, NdofB8.

        NDOF_BUTTON_9 NDOF Button 9, NdofB9.

        NDOF_BUTTON_10 NDOF Button 10, NdofB10.

        NDOF_BUTTON_A NDOF Button A, NdofBA.

        NDOF_BUTTON_B NDOF Button B, NdofBB.

        NDOF_BUTTON_C NDOF Button C, NdofBC.

        ACTIONZONE_AREA ActionZone Area, AZone Area.

        ACTIONZONE_REGION ActionZone Region, AZone Region.

        ACTIONZONE_FULLSCREEN ActionZone Fullscreen, AZone FullScr.
                :type type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN'] | None
                :param value: Value
                :type value: typing.Literal['ANY','NOTHING','PRESS','RELEASE','CLICK','DOUBLE_CLICK','CLICK_DRAG','NORTH','NORTH_EAST','EAST','SOUTH_EAST','SOUTH','SOUTH_WEST','WEST','NORTH_WEST'] | None
                :param any: Any
                :type any: bool | None
                :param shift: Shift
                :type shift: bool | None
                :param ctrl: Ctrl
                :type ctrl: bool | None
                :param alt: Alt
                :type alt: bool | None
                :param oskey: OS Key
                :type oskey: bool | None
                :param key_modifier: Key Modifier

        NONE .

        LEFTMOUSE Left Mouse, LMB.

        MIDDLEMOUSE Middle Mouse, MMB.

        RIGHTMOUSE Right Mouse, RMB.

        BUTTON4MOUSE Button4 Mouse, MB4.

        BUTTON5MOUSE Button5 Mouse, MB5.

        BUTTON6MOUSE Button6 Mouse, MB6.

        BUTTON7MOUSE Button7 Mouse, MB7.

        ACTIONMOUSE Action Mouse, MBA.

        SELECTMOUSE Select Mouse, MBS.

        PEN Pen.

        ERASER Eraser.

        MOUSEMOVE Mouse Move, MsMov.

        INBETWEEN_MOUSEMOVE In-between Move, MsSubMov.

        TRACKPADPAN Mouse/Trackpad Pan, MsPan.

        TRACKPADZOOM Mouse/Trackpad Zoom, MsZoom.

        MOUSEROTATE Mouse/Trackpad Rotate, MsRot.

        WHEELUPMOUSE Wheel Up, WhUp.

        WHEELDOWNMOUSE Wheel Down, WhDown.

        WHEELINMOUSE Wheel In, WhIn.

        WHEELOUTMOUSE Wheel Out, WhOut.

        EVT_TWEAK_L Tweak Left, TwkL.

        EVT_TWEAK_M Tweak Middle, TwkM.

        EVT_TWEAK_R Tweak Right, TwkR.

        EVT_TWEAK_A Tweak Action, TwkA.

        EVT_TWEAK_S Tweak Select, TwkS.

        A A.

        B B.

        C C.

        D D.

        E E.

        F F.

        G G.

        H H.

        I I.

        J J.

        K K.

        L L.

        M M.

        N N.

        O O.

        P P.

        Q Q.

        R R.

        S S.

        T T.

        U U.

        V V.

        W W.

        X X.

        Y Y.

        Z Z.

        ZERO 0.

        ONE 1.

        TWO 2.

        THREE 3.

        FOUR 4.

        FIVE 5.

        SIX 6.

        SEVEN 7.

        EIGHT 8.

        NINE 9.

        LEFT_CTRL Left Ctrl, CtrlL.

        LEFT_ALT Left Alt, AltL.

        LEFT_SHIFT Left Shift, ShiftL.

        RIGHT_ALT Right Alt, AltR.

        RIGHT_CTRL Right Ctrl, CtrlR.

        RIGHT_SHIFT Right Shift, ShiftR.

        OSKEY OS Key, Cmd.

        GRLESS Grless.

        ESC Esc.

        TAB Tab.

        RET Return, Enter.

        SPACE Spacebar, Space.

        LINE_FEED Line Feed.

        BACK_SPACE Back Space, BkSpace.

        DEL Delete, Del.

        SEMI_COLON ;.

        PERIOD ..

        COMMA ,.

        QUOTE ".

        ACCENT_GRAVE `.

        MINUS -.

        PLUS +.

        SLASH /.

        BACK_SLASH \.

        EQUAL =.

        LEFT_BRACKET [.

        RIGHT_BRACKET ].

        LEFT_ARROW Left Arrow, ←.

        DOWN_ARROW Down Arrow, ↓.

        RIGHT_ARROW Right Arrow, →.

        UP_ARROW Up Arrow, ↑.

        NUMPAD_2 Numpad 2, Pad2.

        NUMPAD_4 Numpad 4, Pad4.

        NUMPAD_6 Numpad 6, Pad6.

        NUMPAD_8 Numpad 8, Pad8.

        NUMPAD_1 Numpad 1, Pad1.

        NUMPAD_3 Numpad 3, Pad3.

        NUMPAD_5 Numpad 5, Pad5.

        NUMPAD_7 Numpad 7, Pad7.

        NUMPAD_9 Numpad 9, Pad9.

        NUMPAD_PERIOD Numpad ., Pad..

        NUMPAD_SLASH Numpad /, Pad/.

        NUMPAD_ASTERIX Numpad *, Pad*.

        NUMPAD_0 Numpad 0, Pad0.

        NUMPAD_MINUS Numpad -, Pad-.

        NUMPAD_ENTER Numpad Enter, PadEnter.

        NUMPAD_PLUS Numpad +, Pad+.

        F1 F1.

        F2 F2.

        F3 F3.

        F4 F4.

        F5 F5.

        F6 F6.

        F7 F7.

        F8 F8.

        F9 F9.

        F10 F10.

        F11 F11.

        F12 F12.

        F13 F13.

        F14 F14.

        F15 F15.

        F16 F16.

        F17 F17.

        F18 F18.

        F19 F19.

        PAUSE Pause.

        INSERT Insert, Ins.

        HOME Home.

        PAGE_UP Page Up, PgUp.

        PAGE_DOWN Page Down, PgDown.

        END End.

        MEDIA_PLAY Media Play/Pause, >/||.

        MEDIA_STOP Media Stop, Stop.

        MEDIA_FIRST Media First, |<<.

        MEDIA_LAST Media Last, >>|.

        TEXTINPUT Text Input, TxtIn.

        WINDOW_DEACTIVATE Window Deactivate.

        TIMER Timer, Tmr.

        TIMER0 Timer 0, Tmr0.

        TIMER1 Timer 1, Tmr1.

        TIMER2 Timer 2, Tmr2.

        TIMER_JOBS Timer Jobs, TmrJob.

        TIMER_AUTOSAVE Timer Autosave, TmrSave.

        TIMER_REPORT Timer Report, TmrReport.

        TIMERREGION Timer Region, TmrReg.

        NDOF_MOTION NDOF Motion, NdofMov.

        NDOF_BUTTON_MENU NDOF Menu, NdofMenu.

        NDOF_BUTTON_FIT NDOF Fit, NdofFit.

        NDOF_BUTTON_TOP NDOF Top, Ndof↑.

        NDOF_BUTTON_BOTTOM NDOF Bottom, Ndof↓.

        NDOF_BUTTON_LEFT NDOF Left, Ndof←.

        NDOF_BUTTON_RIGHT NDOF Right, Ndof→.

        NDOF_BUTTON_FRONT NDOF Front, NdofFront.

        NDOF_BUTTON_BACK NDOF Back, NdofBack.

        NDOF_BUTTON_ISO1 NDOF Isometric 1, NdofIso1.

        NDOF_BUTTON_ISO2 NDOF Isometric 2, NdofIso2.

        NDOF_BUTTON_ROLL_CW NDOF Roll CW, NdofRCW.

        NDOF_BUTTON_ROLL_CCW NDOF Roll CCW, NdofRCCW.

        NDOF_BUTTON_SPIN_CW NDOF Spin CW, NdofSCW.

        NDOF_BUTTON_SPIN_CCW NDOF Spin CCW, NdofSCCW.

        NDOF_BUTTON_TILT_CW NDOF Tilt CW, NdofTCW.

        NDOF_BUTTON_TILT_CCW NDOF Tilt CCW, NdofTCCW.

        NDOF_BUTTON_ROTATE NDOF Rotate, NdofRot.

        NDOF_BUTTON_PANZOOM NDOF Pan/Zoom, NdofPanZoom.

        NDOF_BUTTON_DOMINANT NDOF Dominant, NdofDom.

        NDOF_BUTTON_PLUS NDOF Plus, Ndof+.

        NDOF_BUTTON_MINUS NDOF Minus, Ndof-.

        NDOF_BUTTON_ESC NDOF Esc, NdofEsc.

        NDOF_BUTTON_ALT NDOF Alt, NdofAlt.

        NDOF_BUTTON_SHIFT NDOF Shift, NdofShift.

        NDOF_BUTTON_CTRL NDOF Ctrl, NdofCtrl.

        NDOF_BUTTON_1 NDOF Button 1, NdofB1.

        NDOF_BUTTON_2 NDOF Button 2, NdofB2.

        NDOF_BUTTON_3 NDOF Button 3, NdofB3.

        NDOF_BUTTON_4 NDOF Button 4, NdofB4.

        NDOF_BUTTON_5 NDOF Button 5, NdofB5.

        NDOF_BUTTON_6 NDOF Button 6, NdofB6.

        NDOF_BUTTON_7 NDOF Button 7, NdofB7.

        NDOF_BUTTON_8 NDOF Button 8, NdofB8.

        NDOF_BUTTON_9 NDOF Button 9, NdofB9.

        NDOF_BUTTON_10 NDOF Button 10, NdofB10.

        NDOF_BUTTON_A NDOF Button A, NdofBA.

        NDOF_BUTTON_B NDOF Button B, NdofBB.

        NDOF_BUTTON_C NDOF Button C, NdofBC.

        ACTIONZONE_AREA ActionZone Area, AZone Area.

        ACTIONZONE_REGION ActionZone Region, AZone Region.

        ACTIONZONE_FULLSCREEN ActionZone Fullscreen, AZone FullScr.
                :type key_modifier: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN'] | None
                :return: Item, Added key map item
                :rtype: KeyMapItem
        """

    def remove(self, item: KeyMapItem):
        """remove

        :param item: Item
        :type item: KeyMapItem
        """

    def from_id(self, id: int | None) -> KeyMapItem:
        """from_id

        :param id: id, ID of the item
        :type id: int | None
        :return: Item
        :rtype: KeyMapItem
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyMaps(bpy_prop_collection[KeyMap], bpy_struct):
    """Collection of keymaps"""

    def new(
        self,
        name: str,
        space_type: typing.Literal[
            "EMPTY",
            "VIEW_3D",
            "IMAGE_EDITOR",
            "NODE_EDITOR",
            "SEQUENCE_EDITOR",
            "CLIP_EDITOR",
            "TIMELINE",
            "GRAPH_EDITOR",
            "DOPESHEET_EDITOR",
            "NLA_EDITOR",
            "TEXT_EDITOR",
            "LOGIC_EDITOR",
            "CONSOLE",
            "INFO",
            "OUTLINER",
            "PROPERTIES",
            "FILE_BROWSER",
            "USER_PREFERENCES",
        ]
        | None = "EMPTY",
        region_type: typing.Literal[
            "WINDOW",
            "HEADER",
            "CHANNELS",
            "TEMPORARY",
            "UI",
            "TOOLS",
            "TOOL_PROPS",
            "PREVIEW",
        ]
        | None = "WINDOW",
        modal: bool | None = False,
    ) -> KeyMap:
        """new

                :param name: Name
                :type name: str
                :param space_type: Space Type

        EMPTY Empty.

        VIEW_3D 3D View, 3D viewport.

        IMAGE_EDITOR UV/Image Editor, View and edit images and UV Maps.

        NODE_EDITOR Node Editor, Editor for node-based shading and compositing tools.

        SEQUENCE_EDITOR Video Sequencer, Video editing tools.

        CLIP_EDITOR Movie Clip Editor, Motion tracking tools.

        TIMELINE Timeline, Timeline and playback controls.

        GRAPH_EDITOR Graph Editor, Edit drivers and keyframe interpolation.

        DOPESHEET_EDITOR Dope Sheet, Adjust timing of keyframes.

        NLA_EDITOR NLA Editor, Combine and layer Actions.

        TEXT_EDITOR Text Editor, Edit scripts and in-file documentation.

        LOGIC_EDITOR Logic Editor, Game logic editing.

        CONSOLE Python Console, Interactive programmatic console for advanced editing and script development.

        INFO Info, Main menu bar and list of error messages (drag down to expand and display).

        OUTLINER Outliner, Overview of scene graph and all available data-blocks.

        PROPERTIES Properties, Edit properties of active object and related data-blocks.

        FILE_BROWSER File Browser, Browse for files and assets.

        USER_PREFERENCES User Preferences, Edit persistent configuration settings.
                :type space_type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES'] | None
                :param region_type: Region Type
                :type region_type: typing.Literal['WINDOW','HEADER','CHANNELS','TEMPORARY','UI','TOOLS','TOOL_PROPS','PREVIEW'] | None
                :param modal: Modal
                :type modal: bool | None
                :return: Key Map, Added key map
                :rtype: KeyMap
        """

    def remove(self, keymap: KeyMap):
        """remove

        :param keymap: Key Map, Removed key map
        :type keymap: KeyMap
        """

    def find(
        self,
        name: str,
        space_type: typing.Literal[
            "EMPTY",
            "VIEW_3D",
            "IMAGE_EDITOR",
            "NODE_EDITOR",
            "SEQUENCE_EDITOR",
            "CLIP_EDITOR",
            "TIMELINE",
            "GRAPH_EDITOR",
            "DOPESHEET_EDITOR",
            "NLA_EDITOR",
            "TEXT_EDITOR",
            "LOGIC_EDITOR",
            "CONSOLE",
            "INFO",
            "OUTLINER",
            "PROPERTIES",
            "FILE_BROWSER",
            "USER_PREFERENCES",
        ]
        | None = "EMPTY",
        region_type: typing.Literal[
            "WINDOW",
            "HEADER",
            "CHANNELS",
            "TEMPORARY",
            "UI",
            "TOOLS",
            "TOOL_PROPS",
            "PREVIEW",
        ]
        | None = "WINDOW",
    ) -> KeyMap:
        """find

                :param name: Name
                :type name: str
                :param space_type: Space Type

        EMPTY Empty.

        VIEW_3D 3D View, 3D viewport.

        IMAGE_EDITOR UV/Image Editor, View and edit images and UV Maps.

        NODE_EDITOR Node Editor, Editor for node-based shading and compositing tools.

        SEQUENCE_EDITOR Video Sequencer, Video editing tools.

        CLIP_EDITOR Movie Clip Editor, Motion tracking tools.

        TIMELINE Timeline, Timeline and playback controls.

        GRAPH_EDITOR Graph Editor, Edit drivers and keyframe interpolation.

        DOPESHEET_EDITOR Dope Sheet, Adjust timing of keyframes.

        NLA_EDITOR NLA Editor, Combine and layer Actions.

        TEXT_EDITOR Text Editor, Edit scripts and in-file documentation.

        LOGIC_EDITOR Logic Editor, Game logic editing.

        CONSOLE Python Console, Interactive programmatic console for advanced editing and script development.

        INFO Info, Main menu bar and list of error messages (drag down to expand and display).

        OUTLINER Outliner, Overview of scene graph and all available data-blocks.

        PROPERTIES Properties, Edit properties of active object and related data-blocks.

        FILE_BROWSER File Browser, Browse for files and assets.

        USER_PREFERENCES User Preferences, Edit persistent configuration settings.
                :type space_type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES'] | None
                :param region_type: Region Type
                :type region_type: typing.Literal['WINDOW','HEADER','CHANNELS','TEMPORARY','UI','TOOLS','TOOL_PROPS','PREVIEW'] | None
                :return: Key Map, Corresponding key map
                :rtype: KeyMap
        """

    def find_modal(self, name: str) -> KeyMap:
        """find_modal

        :param name: Operator Name
        :type name: str
        :return: Key Map, Corresponding key map
        :rtype: KeyMap
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSetPaths(bpy_prop_collection[KeyingSetPath], bpy_struct):
    """Collection of keying set paths"""

    active: KeyingSetPath | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSetPath | None
    """

    active_index: int | None
    """ Current Keying Set index

    :type: int | None
    """

    def add(
        self,
        target_id: ID | None,
        data_path: str,
        index: int | None = -1,
        group_method: typing.Literal["NAMED", "NONE", "KEYINGSET"] | None = "KEYINGSET",
        group_name: str = "",
    ) -> KeyingSetPath:
        """Add a new path for the Keying Set

        :param target_id: Target ID, ID data-block for the destination
        :type target_id: ID | None
        :param data_path: Data-Path, RNA-Path to destination property
        :type data_path: str
        :param index: Index, The index of the destination property (i.e. axis of Location/Rotation/etc.), or -1 for the entire array
        :type index: int | None
        :param group_method: Grouping Method, Method used to define which Group-name to use
        :type group_method: typing.Literal['NAMED','NONE','KEYINGSET'] | None
        :param group_name: Group Name, Name of Action Group to assign destination to (only if grouping mode is to use this name)
        :type group_name: str
        :return: New Path, Path created and added to the Keying Set
        :rtype: KeyingSetPath
        """

    def remove(self, path: KeyingSetPath):
        """Remove the given path from the Keying Set

        :param path: Path
        :type path: KeyingSetPath
        """

    def clear(self):
        """Remove all the paths from the Keying Set"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSets(bpy_prop_collection[KeyingSet], bpy_struct):
    """Scene keying sets"""

    active: KeyingSet | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSet | None
    """

    active_index: int | None
    """ Current Keying Set index (negative for 'builtin' and positive for 'absolute')

    :type: int | None
    """

    def new(self, idname: str = "KeyingSet", name: str = "KeyingSet") -> KeyingSet:
        """Add a new Keying Set to Scene

        :param idname: IDName, Internal identifier of Keying Set
        :type idname: str
        :param name: Name, User visible name of Keying Set
        :type name: str
        :return: Newly created Keying Set
        :rtype: KeyingSet
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSetsAll(bpy_prop_collection[KeyingSet], bpy_struct):
    """All available keying sets"""

    active: KeyingSet | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSet | None
    """

    active_index: int | None
    """ Current Keying Set index (negative for 'builtin' and positive for 'absolute')

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LampTextureSlots(bpy_prop_collection[LampTextureSlot], bpy_struct):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> LampTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: LampTextureSlot
        """

    @classmethod
    def create(cls, index: int | None) -> LampTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: LampTextureSlot
        """

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifiers(bpy_prop_collection[LineStyleAlphaModifier], bpy_struct):
    """Alpha modifiers for changing line alphas"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "ALONG_STROKE",
            "CREASE_ANGLE",
            "CURVATURE_3D",
            "DISTANCE_FROM_CAMERA",
            "DISTANCE_FROM_OBJECT",
            "MATERIAL",
            "NOISE",
            "TANGENT",
        ]
        | None,
    ) -> LineStyleAlphaModifier:
        """Add a alpha modifier to line style

        :param name: New name for the alpha modifier (not unique)
        :type name: str
        :param type: Alpha modifier type to add
        :type type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT'] | None
        :return: Newly added alpha modifier
        :rtype: LineStyleAlphaModifier
        """

    def remove(self, modifier: LineStyleAlphaModifier):
        """Remove a alpha modifier from line style

        :param modifier: Alpha modifier to remove
        :type modifier: LineStyleAlphaModifier
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifiers(bpy_prop_collection[LineStyleColorModifier], bpy_struct):
    """Color modifiers for changing line colors"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "ALONG_STROKE",
            "CREASE_ANGLE",
            "CURVATURE_3D",
            "DISTANCE_FROM_CAMERA",
            "DISTANCE_FROM_OBJECT",
            "MATERIAL",
            "NOISE",
            "TANGENT",
        ]
        | None,
    ) -> LineStyleColorModifier:
        """Add a color modifier to line style

        :param name: New name for the color modifier (not unique)
        :type name: str
        :param type: Color modifier type to add
        :type type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT'] | None
        :return: Newly added color modifier
        :rtype: LineStyleColorModifier
        """

    def remove(self, modifier: LineStyleColorModifier):
        """Remove a color modifier from line style

        :param modifier: Color modifier to remove
        :type modifier: LineStyleColorModifier
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifiers(
    bpy_prop_collection[LineStyleGeometryModifier], bpy_struct
):
    """Geometry modifiers for changing line geometries"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "2D_OFFSET",
            "2D_TRANSFORM",
            "BACKBONE_STRETCHER",
            "BEZIER_CURVE",
            "BLUEPRINT",
            "GUIDING_LINES",
            "PERLIN_NOISE_1D",
            "PERLIN_NOISE_2D",
            "POLYGONIZATION",
            "SAMPLING",
            "SIMPLIFICATION",
            "SINUS_DISPLACEMENT",
            "SPATIAL_NOISE",
            "TIP_REMOVER",
        ]
        | None,
    ) -> LineStyleGeometryModifier:
        """Add a geometry modifier to line style

        :param name: New name for the geometry modifier (not unique)
        :type name: str
        :param type: Geometry modifier type to add
        :type type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER'] | None
        :return: Newly added geometry modifier
        :rtype: LineStyleGeometryModifier
        """

    def remove(self, modifier: LineStyleGeometryModifier):
        """Remove a geometry modifier from line style

        :param modifier: Geometry modifier to remove
        :type modifier: LineStyleGeometryModifier
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleTextureSlots(bpy_prop_collection[LineStyleTextureSlot], bpy_struct):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> LineStyleTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: LineStyleTextureSlot
        """

    @classmethod
    def create(cls, index: int | None) -> LineStyleTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: LineStyleTextureSlot
        """

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifiers(
    bpy_prop_collection[LineStyleThicknessModifier], bpy_struct
):
    """Thickness modifiers for changing line thickness"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "ALONG_STROKE",
            "CALLIGRAPHY",
            "CREASE_ANGLE",
            "CURVATURE_3D",
            "DISTANCE_FROM_CAMERA",
            "DISTANCE_FROM_OBJECT",
            "MATERIAL",
            "NOISE",
            "TANGENT",
        ]
        | None,
    ) -> LineStyleThicknessModifier:
        """Add a thickness modifier to line style

        :param name: New name for the thickness modifier (not unique)
        :type name: str
        :param type: Thickness modifier type to add
        :type type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT'] | None
        :return: Newly added thickness modifier
        :rtype: LineStyleThicknessModifier
        """

    def remove(self, modifier: LineStyleThicknessModifier):
        """Remove a thickness modifier from line style

        :param modifier: Thickness modifier to remove
        :type modifier: LineStyleThicknessModifier
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Linesets(bpy_prop_collection[FreestyleLineSet], bpy_struct):
    """Line sets for associating lines and style parameters"""

    active: FreestyleLineSet | None
    """ Active line set being displayed

    :type: FreestyleLineSet | None
    """

    active_index: int | None
    """ Index of active line set slot

    :type: int | None
    """

    def new(self, name: str) -> FreestyleLineSet:
        """Add a line set to scene render layer Freestyle settings

        :param name: New name for the line set (not unique)
        :type name: str
        :return: Newly created line set
        :rtype: FreestyleLineSet
        """

    def remove(self, lineset: FreestyleLineSet):
        """Remove a line set from scene render layer Freestyle settings

        :param lineset: Line set to remove
        :type lineset: FreestyleLineSet
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LoopColors(bpy_prop_collection[MeshLoopColorLayer], bpy_struct):
    """Collection of vertex colors"""

    active: MeshLoopColorLayer | None
    """ Active vertex color layer

    :type: MeshLoopColorLayer | None
    """

    active_index: int | None
    """ Active vertex color index

    :type: int | None
    """

    def new(self, name: str = "Col") -> MeshLoopColorLayer:
        """Add a vertex color layer to Mesh

        :param name: Vertex color name
        :type name: str
        :return: The newly created layer
        :rtype: MeshLoopColorLayer
        """

    def remove(self, layer: MeshLoopColorLayer):
        """Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: MeshLoopColorLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskLayers(bpy_prop_collection[MaskLayer], bpy_struct):
    """Collection of layers used by mask"""

    active: MaskLayer | None
    """ Active layer in this mask

    :type: MaskLayer | None
    """

    def new(self, name: str = "") -> MaskLayer:
        """Add layer to this mask

        :param name: Name, Name of new layer
        :type name: str
        :return: New mask layer
        :rtype: MaskLayer
        """

    def remove(self, layer: MaskLayer):
        """Remove layer from this mask

        :param layer: Shape to be removed
        :type layer: MaskLayer
        """

    def clear(self):
        """Remove all mask layers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSplinePoints(bpy_prop_collection[MaskSplinePoint], bpy_struct):
    """Collection of masking spline points"""

    def add(self, count: int | None = 1):
        """Add a number of point to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """

    def remove(self, point: MaskSplinePoint):
        """Remove a point from a spline

        :param point: The point to remove
        :type point: MaskSplinePoint
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSplines(bpy_prop_collection[MaskSpline], bpy_struct):
    """Collection of masking splines"""

    active: MaskSpline | None
    """ Active spline of masking layer

    :type: MaskSpline | None
    """

    active_point: MaskSplinePoint | None
    """ Active spline of masking layer

    :type: MaskSplinePoint | None
    """

    def new(self) -> MaskSpline:
        """Add a new spline to the layer

        :return: The newly created spline
        :rtype: MaskSpline
        """

    def remove(self, spline: MaskSpline):
        """Remove a spline from a layer

        :param spline: The spline to remove
        :type spline: MaskSpline
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialTextureSlots(bpy_prop_collection[MaterialTextureSlot], bpy_struct):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> MaterialTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: MaterialTextureSlot
        """

    @classmethod
    def create(cls, index: int | None) -> MaterialTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: MaterialTextureSlot
        """

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshEdges(bpy_prop_collection[MeshEdge], bpy_struct):
    """Collection of mesh edges"""

    def add(self, count: int | None = 0):
        """add

        :param count: Count, Number of edges to add
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshLoops(bpy_prop_collection[MeshLoop], bpy_struct):
    """Collection of mesh loops"""

    def add(self, count: int | None = 0):
        """add

        :param count: Count, Number of loops to add
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygons(bpy_prop_collection[MeshPolygon], bpy_struct):
    """Collection of mesh polygons"""

    active: int | None
    """ The active polygon for this mesh

    :type: int | None
    """

    def add(self, count: int | None = 0):
        """add

        :param count: Count, Number of polygons to add
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTessFaces(bpy_prop_collection[MeshTessFace], bpy_struct):
    """Collection of mesh faces"""

    active: int | None
    """ The active face for this mesh

    :type: int | None
    """

    def add(self, count: int | None = 0):
        """add

        :param count: Count, Number of faces to add
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertices(bpy_prop_collection[MeshVertex], bpy_struct):
    """Collection of mesh vertices"""

    def add(self, count: int | None = 0):
        """add

        :param count: Count, Number of vertices to add
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MetaBallElements(bpy_prop_collection[MetaElement], bpy_struct):
    """Collection of metaball elements"""

    active: MetaElement | None
    """ Last selected element

    :type: MetaElement | None
    """

    def new(
        self,
        type: typing.Literal["BALL", "CAPSULE", "PLANE", "ELLIPSOID", "CUBE"]
        | None = "BALL",
    ) -> MetaElement:
        """Add a new element to the metaball

        :param type: type for the new meta-element
        :type type: typing.Literal['BALL','CAPSULE','PLANE','ELLIPSOID','CUBE'] | None
        :return: The newly created meta-element
        :rtype: MetaElement
        """

    def remove(self, element: MetaElement):
        """Remove an element from the metaball

        :param element: The element to remove
        :type element: MetaElement
        """

    def clear(self):
        """Remove all elements from the metaball"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingMarkers(bpy_prop_collection[MovieTrackingMarker], bpy_struct):
    """Collection of markers for movie tracking track"""

    def find_frame(
        self, frame: int | None, exact: bool | None = True
    ) -> MovieTrackingMarker:
        """Get marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int | None
        :param exact: Exact, Get marker at exact frame number rather than get estimated marker
        :type exact: bool | None
        :return: Marker for specified frame
        :rtype: MovieTrackingMarker
        """

    def insert_frame(
        self, frame: int | None, co: collections.abc.Iterable[float] | None = (0.0, 0.0)
    ) -> MovieTrackingMarker:
        """Insert a new marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int | None
        :param co: Coordinate, Place new marker at the given frame using specified in normalized space coordinates
        :type co: collections.abc.Iterable[float] | None
        :return: Newly created marker
        :rtype: MovieTrackingMarker
        """

    def delete_frame(self, frame: int | None):
        """Delete marker at specified frame

        :param frame: Frame, Frame number to delete marker from
        :type frame: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingObjectPlaneTracks(
    bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct
):
    """Collection of tracking plane tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object

    :type: MovieTrackingTrack | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingObjectTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """Collection of movie tracking tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object

    :type: MovieTrackingTrack | None
    """

    def new(self, name: str = "", frame: int | None = 1) -> MovieTrackingTrack:
        """create new motion track in this movie clip

        :param name: Name of new track
        :type name: str
        :param frame: Frame, Frame number to add tracks on
        :type frame: int | None
        :return: Newly created track
        :rtype: MovieTrackingTrack
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingObjects(bpy_prop_collection[MovieTrackingObject], bpy_struct):
    """Collection of movie tracking objects"""

    active: MovieTrackingObject | None
    """ Active object in this tracking data object

    :type: MovieTrackingObject | None
    """

    def new(self, name: str) -> MovieTrackingObject:
        """Add tracking object to this movie clip

        :param name: Name of new object
        :type name: str
        :return: New motion tracking object
        :rtype: MovieTrackingObject
        """

    def remove(self, object: MovieTrackingObject):
        """Remove tracking object from this movie clip

        :param object: Motion tracking object to be removed
        :type object: MovieTrackingObject
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingPlaneMarkers(
    bpy_prop_collection[MovieTrackingPlaneMarker], bpy_struct
):
    """Collection of markers for movie tracking plane track"""

    def find_frame(
        self, frame: int | None, exact: bool | None = True
    ) -> MovieTrackingPlaneMarker:
        """Get plane marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int | None
        :param exact: Exact, Get plane marker at exact frame number rather than get estimated marker
        :type exact: bool | None
        :return: Plane marker for specified frame
        :rtype: MovieTrackingPlaneMarker
        """

    def insert_frame(self, frame: int | None) -> MovieTrackingPlaneMarker:
        """Insert a new plane marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int | None
        :return: Newly created plane marker
        :rtype: MovieTrackingPlaneMarker
        """

    def delete_frame(self, frame: int | None):
        """Delete plane marker at specified frame

        :param frame: Frame, Frame number to delete plane marker from
        :type frame: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingPlaneTracks(
    bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct
):
    """Collection of movie tracking plane tracks"""

    active: MovieTrackingPlaneTrack | None
    """ Active plane track in this tracking data object

    :type: MovieTrackingPlaneTrack | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingReconstructedCameras(
    bpy_prop_collection[MovieReconstructedCamera], bpy_struct
):
    """Collection of solved cameras"""

    def find_frame(self, frame: int | None = 1) -> MovieReconstructedCamera:
        """Find a reconstructed camera for a give frame number

        :param frame: Frame, Frame number to find camera for
        :type frame: int | None
        :return: Camera for a given frame
        :rtype: MovieReconstructedCamera
        """

    def matrix_from_frame(
        self, frame: int | None = 1
    ) -> (
        list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
    ):
        """Return interpolated camera matrix for a given frame

        :param frame: Frame, Frame number to find camera for
        :type frame: int | None
        :return: Matrix, Interpolated camera matrix for a given frame
        :rtype: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """Collection of movie tracking tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object

    :type: MovieTrackingTrack | None
    """

    def new(self, name: str = "", frame: int | None = 1) -> MovieTrackingTrack:
        """Create new motion track in this movie clip

        :param name: Name of new track
        :type name: str
        :param frame: Frame, Frame number to add track on
        :type frame: int | None
        :return: Newly created track
        :rtype: MovieTrackingTrack
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NlaStripFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of NLA strip F-Curves"""

    def find(self, data_path: str, index: int | None = 0) -> FCurve:
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the NLA strip.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NlaStrips(bpy_prop_collection[NlaStrip], bpy_struct):
    """Collection of Nla Strips"""

    def new(self, name: str, start: int | None, action: Action) -> NlaStrip:
        """Add a new Action-Clip strip to the track

        :param name: Name for the NLA Strips
        :type name: str
        :param start: Start Frame, Start frame for this strip
        :type start: int | None
        :param action: Action to assign to this strip
        :type action: Action
        :return: New NLA Strip
        :rtype: NlaStrip
        """

    def remove(self, strip: NlaStrip):
        """Remove a NLA Strip

        :param strip: NLA Strip to remove
        :type strip: NlaStrip
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NlaTracks(bpy_prop_collection[NlaTrack], bpy_struct):
    """Collection of NLA Tracks"""

    active: NlaTrack | None
    """ Active Object constraint

    :type: NlaTrack | None
    """

    def new(self, prev: NlaTrack | None = None) -> NlaTrack:
        """Add a new NLA Track

        :param prev: NLA Track to add the new one after
        :type prev: NlaTrack | None
        :return: New NLA Track
        :rtype: NlaTrack
        """

    def remove(self, track: NlaTrack):
        """Remove a NLA Track

        :param track: NLA Track to remove
        :type track: NlaTrack
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeInputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """Collection of Node Sockets"""

    def new(self, type: str, name: str, identifier: str = "") -> NodeSocket:
        """Add a socket to this node

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str
        :return: New socket
        :rtype: NodeSocket
        """

    def remove(self, socket: NodeSocket | None):
        """Remove a socket from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """

    def clear(self):
        """Remove all sockets from this node"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeLinks(bpy_prop_collection[NodeLink], bpy_struct):
    """Collection of Node Links"""

    def new(
        self, input: NodeSocket, output: NodeSocket, verify_limits: bool | None = True
    ) -> NodeLink:
        """Add a node link to this node tree

        :param input: The input socket
        :type input: NodeSocket
        :param output: The output socket
        :type output: NodeSocket
        :param verify_limits: Verify Limits, Remove existing links if connection limit is exceeded
        :type verify_limits: bool | None
        :return: New node link
        :rtype: NodeLink
        """

    def remove(self, link: NodeLink):
        """remove a node link from the node tree

        :param link: The node link to remove
        :type link: NodeLink
        """

    def clear(self):
        """remove all node links from the node tree"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeOutputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """Collection of Node Sockets"""

    def new(self, type: str, name: str, identifier: str = "") -> NodeSocket:
        """Add a socket to this node

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str
        :return: New socket
        :rtype: NodeSocket
        """

    def remove(self, socket: NodeSocket | None):
        """Remove a socket from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """

    def clear(self):
        """Remove all sockets from this node"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeTreeInputs(bpy_prop_collection[NodeSocketInterface], bpy_struct):
    """Collection of Node Tree Sockets"""

    def new(self, type: str, name: str) -> NodeSocketInterface:
        """Add a socket to this node tree

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :return: New socket
        :rtype: NodeSocketInterface
        """

    def remove(self, socket: NodeSocketInterface | None):
        """Remove a socket from this node tree

        :param socket: The socket to remove
        :type socket: NodeSocketInterface | None
        """

    def clear(self):
        """Remove all sockets from this node tree"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeTreeOutputs(bpy_prop_collection[NodeSocketInterface], bpy_struct):
    """Collection of Node Tree Sockets"""

    def new(self, type: str, name: str) -> NodeSocketInterface:
        """Add a socket to this node tree

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :return: New socket
        :rtype: NodeSocketInterface
        """

    def remove(self, socket: NodeSocketInterface | None):
        """Remove a socket from this node tree

        :param socket: The socket to remove
        :type socket: NodeSocketInterface | None
        """

    def clear(self):
        """Remove all sockets from this node tree"""

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Nodes(bpy_prop_collection[Node], bpy_struct):
    """Collection of Nodes"""

    active: Node | None
    """ Active node in this tree

    :type: Node | None
    """

    def new(self, type: str) -> Node:
        """Add a node to this node tree

        :param type: Type, Type of node to add (Warning: should be same as node.bl_idname, not node.type!)
        :type type: str
        :return: New node
        :rtype: Node
        """

    def remove(self, node: Node):
        """Remove a node from this node tree

        :param node: The node to remove
        :type node: Node
        """

    def clear(self):
        """Remove all nodes from this node tree"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """Collection of object constraints"""

    active: Constraint | None
    """ Active Object constraint

    :type: Constraint | None
    """

    def new(
        self,
        type: typing.Literal[
            "CAMERA_SOLVER",
            "FOLLOW_TRACK",
            "OBJECT_SOLVER",
            "COPY_LOCATION",
            "COPY_ROTATION",
            "COPY_SCALE",
            "COPY_TRANSFORMS",
            "LIMIT_DISTANCE",
            "LIMIT_LOCATION",
            "LIMIT_ROTATION",
            "LIMIT_SCALE",
            "MAINTAIN_VOLUME",
            "TRANSFORM",
            "TRANSFORM_CACHE",
            "CLAMP_TO",
            "DAMPED_TRACK",
            "IK",
            "LOCKED_TRACK",
            "SPLINE_IK",
            "STRETCH_TO",
            "TRACK_TO",
            "ACTION",
            "CHILD_OF",
            "FLOOR",
            "FOLLOW_PATH",
            "PIVOT",
            "RIGID_BODY_JOINT",
            "SHRINKWRAP",
        ]
        | None,
    ) -> Constraint:
        """Add a new constraint to this object

                :param type: Constraint type to add

        CAMERA_SOLVER Camera Solver.

        FOLLOW_TRACK Follow Track.

        OBJECT_SOLVER Object Solver.

        COPY_LOCATION Copy Location, Copy the location of a target (with an optional offset), so that they move together.

        COPY_ROTATION Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.

        COPY_SCALE Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.

        COPY_TRANSFORMS Copy Transforms, Copy all the transformations of a target, so that they move together.

        LIMIT_DISTANCE Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).

        LIMIT_LOCATION Limit Location, Restrict movement along each axis within given ranges.

        LIMIT_ROTATION Limit Rotation, Restrict rotation along each axis within given ranges.

        LIMIT_SCALE Limit Scale, Restrict scaling along each axis with given ranges.

        MAINTAIN_VOLUME Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.

        TRANSFORM Transformation, Use one transform property from target to control another (or same) property on owner.

        TRANSFORM_CACHE Transform Cache, Look up the transformation matrix from an external file.

        CLAMP_TO Clamp To, Restrict movements to lie along a curve by remapping location along curve's longest axis.

        DAMPED_TRACK Damped Track, Point towards a target by performing the smallest rotation necessary.

        IK Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).

        LOCKED_TRACK Locked Track, Rotate around the specified ('locked') axis to point towards a target.

        SPLINE_IK Spline IK, Align chain of bones along a curve (Bones only).

        STRETCH_TO Stretch To, Stretch along Y-Axis to point towards a target.

        TRACK_TO Track To, Legacy tracking constraint prone to twisting artifacts.

        ACTION Action, Use transform property of target to look up pose for owner from an Action.

        CHILD_OF Child Of, Make target the 'detachable' parent of owner.

        FLOOR Floor, Use position (and optionally rotation) of target to define a 'wall' or 'floor' that the owner can not cross.

        FOLLOW_PATH Follow Path, Use to animate an object/bone following a path.

        PIVOT Pivot, Change pivot point for transforms (buggy).

        RIGID_BODY_JOINT Rigid Body Joint, Use to define a Rigid Body Constraint (for Game Engine use only).

        SHRINKWRAP Shrinkwrap, Restrict movements to surface of target mesh.
                :type type: typing.Literal['CAMERA_SOLVER','FOLLOW_TRACK','OBJECT_SOLVER','COPY_LOCATION','COPY_ROTATION','COPY_SCALE','COPY_TRANSFORMS','LIMIT_DISTANCE','LIMIT_LOCATION','LIMIT_ROTATION','LIMIT_SCALE','MAINTAIN_VOLUME','TRANSFORM','TRANSFORM_CACHE','CLAMP_TO','DAMPED_TRACK','IK','LOCKED_TRACK','SPLINE_IK','STRETCH_TO','TRACK_TO','ACTION','CHILD_OF','FLOOR','FOLLOW_PATH','PIVOT','RIGID_BODY_JOINT','SHRINKWRAP'] | None
                :return: New constraint
                :rtype: Constraint
        """

    def remove(self, constraint: Constraint):
        """Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: Constraint
        """

    def clear(self):
        """Remove all constraint from this object"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectModifiers(bpy_prop_collection[Modifier], bpy_struct):
    """Collection of object modifiers"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "DATA_TRANSFER",
            "MESH_CACHE",
            "MESH_SEQUENCE_CACHE",
            "NORMAL_EDIT",
            "UV_PROJECT",
            "UV_WARP",
            "VERTEX_WEIGHT_EDIT",
            "VERTEX_WEIGHT_MIX",
            "VERTEX_WEIGHT_PROXIMITY",
            "ARRAY",
            "BEVEL",
            "BOOLEAN",
            "BUILD",
            "DECIMATE",
            "EDGE_SPLIT",
            "MASK",
            "MIRROR",
            "MULTIRES",
            "REMESH",
            "SCREW",
            "SKIN",
            "SOLIDIFY",
            "SUBSURF",
            "TRIANGULATE",
            "WIREFRAME",
            "ARMATURE",
            "CAST",
            "CORRECTIVE_SMOOTH",
            "CURVE",
            "DISPLACE",
            "HOOK",
            "LAPLACIANSMOOTH",
            "LAPLACIANDEFORM",
            "LATTICE",
            "MESH_DEFORM",
            "SHRINKWRAP",
            "SIMPLE_DEFORM",
            "SMOOTH",
            "SURFACE_DEFORM",
            "WARP",
            "WAVE",
            "CLOTH",
            "COLLISION",
            "DYNAMIC_PAINT",
            "EXPLODE",
            "FLUID_SIMULATION",
            "OCEAN",
            "PARTICLE_INSTANCE",
            "PARTICLE_SYSTEM",
            "SMOKE",
            "SOFT_BODY",
            "SURFACE",
        ]
        | None,
    ) -> Modifier:
        """Add a new modifier

                :param name: New name for the modifier
                :type name: str
                :param type: Modifier type to add

        DATA_TRANSFER Data Transfer.

        MESH_CACHE Mesh Cache.

        MESH_SEQUENCE_CACHE Mesh Sequence Cache.

        NORMAL_EDIT Normal Edit.

        UV_PROJECT UV Project.

        UV_WARP UV Warp.

        VERTEX_WEIGHT_EDIT Vertex Weight Edit.

        VERTEX_WEIGHT_MIX Vertex Weight Mix.

        VERTEX_WEIGHT_PROXIMITY Vertex Weight Proximity.

        ARRAY Array.

        BEVEL Bevel.

        BOOLEAN Boolean.

        BUILD Build.

        DECIMATE Decimate.

        EDGE_SPLIT Edge Split.

        MASK Mask.

        MIRROR Mirror.

        MULTIRES Multiresolution.

        REMESH Remesh.

        SCREW Screw.

        SKIN Skin.

        SOLIDIFY Solidify.

        SUBSURF Subdivision Surface.

        TRIANGULATE Triangulate.

        WIREFRAME Wireframe, Generate a wireframe on the edges of a mesh.

        ARMATURE Armature.

        CAST Cast.

        CORRECTIVE_SMOOTH Corrective Smooth.

        CURVE Curve.

        DISPLACE Displace.

        HOOK Hook.

        LAPLACIANSMOOTH Laplacian Smooth.

        LAPLACIANDEFORM Laplacian Deform.

        LATTICE Lattice.

        MESH_DEFORM Mesh Deform.

        SHRINKWRAP Shrinkwrap.

        SIMPLE_DEFORM Simple Deform.

        SMOOTH Smooth.

        SURFACE_DEFORM Surface Deform.

        WARP Warp.

        WAVE Wave.

        CLOTH Cloth.

        COLLISION Collision.

        DYNAMIC_PAINT Dynamic Paint.

        EXPLODE Explode.

        FLUID_SIMULATION Fluid Simulation.

        OCEAN Ocean.

        PARTICLE_INSTANCE Particle Instance.

        PARTICLE_SYSTEM Particle System.

        SMOKE Smoke.

        SOFT_BODY Soft Body.

        SURFACE Surface.
                :type type: typing.Literal['DATA_TRANSFER','MESH_CACHE','MESH_SEQUENCE_CACHE','NORMAL_EDIT','UV_PROJECT','UV_WARP','VERTEX_WEIGHT_EDIT','VERTEX_WEIGHT_MIX','VERTEX_WEIGHT_PROXIMITY','ARRAY','BEVEL','BOOLEAN','BUILD','DECIMATE','EDGE_SPLIT','MASK','MIRROR','MULTIRES','REMESH','SCREW','SKIN','SOLIDIFY','SUBSURF','TRIANGULATE','WIREFRAME','ARMATURE','CAST','CORRECTIVE_SMOOTH','CURVE','DISPLACE','HOOK','LAPLACIANSMOOTH','LAPLACIANDEFORM','LATTICE','MESH_DEFORM','SHRINKWRAP','SIMPLE_DEFORM','SMOOTH','SURFACE_DEFORM','WARP','WAVE','CLOTH','COLLISION','DYNAMIC_PAINT','EXPLODE','FLUID_SIMULATION','OCEAN','PARTICLE_INSTANCE','PARTICLE_SYSTEM','SMOKE','SOFT_BODY','SURFACE'] | None
                :return: Newly created modifier
                :rtype: Modifier
        """

    def remove(self, modifier: Modifier):
        """Remove an existing modifier from the object

        :param modifier: Modifier to remove
        :type modifier: Modifier
        """

    def clear(self):
        """Remove all modifiers from the object"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PaletteColors(bpy_prop_collection[PaletteColor], bpy_struct):
    """Collection of palette colors"""

    active: PaletteColor | None
    """ 

    :type: PaletteColor | None
    """

    def new(self) -> PaletteColor:
        """Add a new color to the palette

        :return: The newly created color
        :rtype: PaletteColor
        """

    def remove(self, color: PaletteColor):
        """Remove a color from the palette

        :param color: The color to remove
        :type color: PaletteColor
        """

    def clear(self):
        """Remove all colors from the palette"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSettingsTextureSlots(
    bpy_prop_collection[ParticleSettingsTextureSlot], bpy_struct
):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> ParticleSettingsTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: ParticleSettingsTextureSlot
        """

    @classmethod
    def create(cls, index: int | None) -> ParticleSettingsTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: ParticleSettingsTextureSlot
        """

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSystems(bpy_prop_collection[ParticleSystem], bpy_struct):
    """Collection of particle systems"""

    active: ParticleSystem | None
    """ Active particle system being displayed

    :type: ParticleSystem | None
    """

    active_index: int | None
    """ Index of active particle system slot

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PathCompareCollection(bpy_prop_collection[PathCompare], bpy_struct):
    """Collection of paths"""

    @classmethod
    def new(cls) -> PathCompare:
        """Add a new path

        :return:
        :rtype: PathCompare
        """

    @classmethod
    def remove(cls, pathcmp: PathCompare):
        """Remove path

        :param pathcmp:
        :type pathcmp: PathCompare
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointCaches(bpy_prop_collection[PointCacheItem], bpy_struct):
    """Collection of point caches"""

    active_index: int | None
    """ 

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PolygonFloatProperties(
    bpy_prop_collection[MeshPolygonFloatPropertyLayer], bpy_struct
):
    """Collection of float properties"""

    def new(self, name: str = "Float Prop") -> MeshPolygonFloatPropertyLayer:
        """Add a float property layer to Mesh

        :param name: Float property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshPolygonFloatPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PolygonIntProperties(
    bpy_prop_collection[MeshPolygonIntPropertyLayer], bpy_struct
):
    """Collection of int properties"""

    def new(self, name: str = "Int Prop") -> MeshPolygonIntPropertyLayer:
        """Add a integer property layer to Mesh

        :param name: Int property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshPolygonIntPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PolygonStringProperties(
    bpy_prop_collection[MeshPolygonStringPropertyLayer], bpy_struct
):
    """Collection of string properties"""

    def new(self, name: str = "String Prop") -> MeshPolygonStringPropertyLayer:
        """Add a string property layer to Mesh

        :param name: String property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshPolygonStringPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PoseBoneConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """Collection of pose bone constraints"""

    active: Constraint | None
    """ Active PoseChannel constraint

    :type: Constraint | None
    """

    def new(
        self,
        type: typing.Literal[
            "CAMERA_SOLVER",
            "FOLLOW_TRACK",
            "OBJECT_SOLVER",
            "COPY_LOCATION",
            "COPY_ROTATION",
            "COPY_SCALE",
            "COPY_TRANSFORMS",
            "LIMIT_DISTANCE",
            "LIMIT_LOCATION",
            "LIMIT_ROTATION",
            "LIMIT_SCALE",
            "MAINTAIN_VOLUME",
            "TRANSFORM",
            "TRANSFORM_CACHE",
            "CLAMP_TO",
            "DAMPED_TRACK",
            "IK",
            "LOCKED_TRACK",
            "SPLINE_IK",
            "STRETCH_TO",
            "TRACK_TO",
            "ACTION",
            "CHILD_OF",
            "FLOOR",
            "FOLLOW_PATH",
            "PIVOT",
            "RIGID_BODY_JOINT",
            "SHRINKWRAP",
        ]
        | None,
    ) -> Constraint:
        """Add a constraint to this object

                :param type: Constraint type to add

        CAMERA_SOLVER Camera Solver.

        FOLLOW_TRACK Follow Track.

        OBJECT_SOLVER Object Solver.

        COPY_LOCATION Copy Location, Copy the location of a target (with an optional offset), so that they move together.

        COPY_ROTATION Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.

        COPY_SCALE Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.

        COPY_TRANSFORMS Copy Transforms, Copy all the transformations of a target, so that they move together.

        LIMIT_DISTANCE Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).

        LIMIT_LOCATION Limit Location, Restrict movement along each axis within given ranges.

        LIMIT_ROTATION Limit Rotation, Restrict rotation along each axis within given ranges.

        LIMIT_SCALE Limit Scale, Restrict scaling along each axis with given ranges.

        MAINTAIN_VOLUME Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.

        TRANSFORM Transformation, Use one transform property from target to control another (or same) property on owner.

        TRANSFORM_CACHE Transform Cache, Look up the transformation matrix from an external file.

        CLAMP_TO Clamp To, Restrict movements to lie along a curve by remapping location along curve's longest axis.

        DAMPED_TRACK Damped Track, Point towards a target by performing the smallest rotation necessary.

        IK Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).

        LOCKED_TRACK Locked Track, Rotate around the specified ('locked') axis to point towards a target.

        SPLINE_IK Spline IK, Align chain of bones along a curve (Bones only).

        STRETCH_TO Stretch To, Stretch along Y-Axis to point towards a target.

        TRACK_TO Track To, Legacy tracking constraint prone to twisting artifacts.

        ACTION Action, Use transform property of target to look up pose for owner from an Action.

        CHILD_OF Child Of, Make target the 'detachable' parent of owner.

        FLOOR Floor, Use position (and optionally rotation) of target to define a 'wall' or 'floor' that the owner can not cross.

        FOLLOW_PATH Follow Path, Use to animate an object/bone following a path.

        PIVOT Pivot, Change pivot point for transforms (buggy).

        RIGID_BODY_JOINT Rigid Body Joint, Use to define a Rigid Body Constraint (for Game Engine use only).

        SHRINKWRAP Shrinkwrap, Restrict movements to surface of target mesh.
                :type type: typing.Literal['CAMERA_SOLVER','FOLLOW_TRACK','OBJECT_SOLVER','COPY_LOCATION','COPY_ROTATION','COPY_SCALE','COPY_TRANSFORMS','LIMIT_DISTANCE','LIMIT_LOCATION','LIMIT_ROTATION','LIMIT_SCALE','MAINTAIN_VOLUME','TRANSFORM','TRANSFORM_CACHE','CLAMP_TO','DAMPED_TRACK','IK','LOCKED_TRACK','SPLINE_IK','STRETCH_TO','TRACK_TO','ACTION','CHILD_OF','FLOOR','FOLLOW_PATH','PIVOT','RIGID_BODY_JOINT','SHRINKWRAP'] | None
                :return: New constraint
                :rtype: Constraint
        """

    def remove(self, constraint: Constraint):
        """Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: Constraint
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderLayers(bpy_prop_collection[SceneRenderLayer], bpy_struct):
    """Collection of render layers"""

    active: SceneRenderLayer | None
    """ Active Render Layer

    :type: SceneRenderLayer | None
    """

    active_index: int | None
    """ Active index in render layer array

    :type: int | None
    """

    def new(self, name: str) -> SceneRenderLayer:
        """Add a render layer to scene

        :param name: New name for the render layer (not unique)
        :type name: str
        :return: Newly created render layer
        :rtype: SceneRenderLayer
        """

    def remove(self, layer: SceneRenderLayer):
        """Remove a render layer

        :param layer: Render layer to remove
        :type layer: SceneRenderLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderPasses(bpy_prop_collection[RenderPass], bpy_struct):
    """Collection of render passes"""

    def find_by_type(
        self,
        pass_type: typing.Literal[
            "COMBINED",
            "Z",
            "COLOR",
            "DIFFUSE",
            "SPECULAR",
            "SHADOW",
            "AO",
            "REFLECTION",
            "NORMAL",
            "VECTOR",
            "REFRACTION",
            "OBJECT_INDEX",
            "UV",
            "MIST",
            "EMIT",
            "ENVIRONMENT",
            "MATERIAL_INDEX",
            "DIFFUSE_DIRECT",
            "DIFFUSE_INDIRECT",
            "DIFFUSE_COLOR",
            "GLOSSY_DIRECT",
            "GLOSSY_INDIRECT",
            "GLOSSY_COLOR",
            "TRANSMISSION_DIRECT",
            "TRANSMISSION_INDIRECT",
            "TRANSMISSION_COLOR",
            "SUBSURFACE_DIRECT",
            "SUBSURFACE_INDIRECT",
            "SUBSURFACE_COLOR",
        ]
        | None,
        view: str,
    ) -> RenderPass:
        """Get the render pass for a given type and view

        :param pass_type: Pass
        :type pass_type: typing.Literal['COMBINED','Z','COLOR','DIFFUSE','SPECULAR','SHADOW','AO','REFLECTION','NORMAL','VECTOR','REFRACTION','OBJECT_INDEX','UV','MIST','EMIT','ENVIRONMENT','MATERIAL_INDEX','DIFFUSE_DIRECT','DIFFUSE_INDIRECT','DIFFUSE_COLOR','GLOSSY_DIRECT','GLOSSY_INDIRECT','GLOSSY_COLOR','TRANSMISSION_DIRECT','TRANSMISSION_INDIRECT','TRANSMISSION_COLOR','SUBSURFACE_DIRECT','SUBSURFACE_INDIRECT','SUBSURFACE_COLOR'] | None
        :param view: View, Render view to get pass from
        :type view: str
        :return: The matching render pass
        :rtype: RenderPass
        """

    def find_by_name(self, name: str, view: str) -> RenderPass:
        """Get the render pass for a given name and view

        :param name: Pass
        :type name: str
        :param view: View, Render view to get pass from
        :type view: str
        :return: The matching render pass
        :rtype: RenderPass
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderSlots(bpy_prop_collection[RenderSlot], bpy_struct):
    """Collection of the render slots"""

    active: RenderSlot | None
    """ Active render slot of the image

    :type: RenderSlot | None
    """

    active_index: int | None
    """ Index of an active render slot of the image

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderViews(bpy_prop_collection[SceneRenderView], bpy_struct):
    """Collection of render views"""

    active: SceneRenderView | None
    """ Active Render View

    :type: SceneRenderView | None
    """

    active_index: int | None
    """ Active index in render view array

    :type: int | None
    """

    def new(self, name: str) -> SceneRenderView:
        """Add a render view to scene

        :param name: New name for the marker (not unique)
        :type name: str
        :return: Newly created render view
        :rtype: SceneRenderView
        """

    def remove(self, view: SceneRenderView):
        """Remove a render view

        :param view: Render view to remove
        :type view: SceneRenderView
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneBases(bpy_prop_collection[ObjectBase], bpy_struct):
    """Collection of scene bases"""

    active: ObjectBase | None
    """ Active object base in the scene

    :type: ObjectBase | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneObjects(bpy_prop_collection[Object], bpy_struct):
    """Collection of scene objects"""

    active: Object | None
    """ Active object for this scene

    :type: Object | None
    """

    def link(self, object: Object) -> ObjectBase:
        """Link object to scene, run scene.update() after

        :param object: Object to add to scene
        :type object: Object
        :return: The newly created base
        :rtype: ObjectBase
        """

    def unlink(self, object: Object):
        """Unlink object from scene

        :param object: Object to remove from scene
        :type object: Object
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceElements(bpy_prop_collection[SequenceElement], bpy_struct):
    """Collection of SequenceElement"""

    def append(self, filename: str) -> SequenceElement:
        """Push an image from ImageSequence.directory

        :param filename: Filepath to image
        :type filename: str
        :return: New SequenceElement
        :rtype: SequenceElement
        """

    def pop(self, index: int | None):
        """Pop an image off the collection

        :param index: Index of image to remove
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceModifiers(bpy_prop_collection[SequenceModifier], bpy_struct):
    """Collection of strip modifiers"""

    def new(
        self,
        name: str,
        type: typing.Literal[
            "COLOR_BALANCE",
            "CURVES",
            "HUE_CORRECT",
            "BRIGHT_CONTRAST",
            "MASK",
            "WHITE_BALANCE",
            "TONEMAP",
        ]
        | None,
    ) -> SequenceModifier:
        """Add a new modifier

        :param name: New name for the modifier
        :type name: str
        :param type: Modifier type to add
        :type type: typing.Literal['COLOR_BALANCE','CURVES','HUE_CORRECT','BRIGHT_CONTRAST','MASK','WHITE_BALANCE','TONEMAP'] | None
        :return: Newly created modifier
        :rtype: SequenceModifier
        """

    def remove(self, modifier: SequenceModifier):
        """Remove an existing modifier from the sequence

        :param modifier: Modifier to remove
        :type modifier: SequenceModifier
        """

    def clear(self):
        """Remove all modifiers from the sequence"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Sequences(bpy_prop_collection[Sequence], bpy_struct):
    """Collection of Sequences"""

    def new_clip(
        self, name: str, clip: MovieClip, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new movie clip sequence

        :param name: Name for the new sequence
        :type name: str
        :param clip: Movie clip to add
        :type clip: MovieClip
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_mask(
        self, name: str, mask: Mask, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new mask sequence

        :param name: Name for the new sequence
        :type name: str
        :param mask: Mask to add
        :type mask: Mask
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_scene(
        self, name: str, scene: Scene, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new scene sequence

        :param name: Name for the new sequence
        :type name: str
        :param scene: Scene to add
        :type scene: Scene
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_image(
        self, name: str, filepath: str, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new image sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to image
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_movie(
        self, name: str, filepath: str, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new movie sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_sound(
        self, name: str, filepath: str, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new sound sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """

    def new_effect(
        self,
        name: str,
        type: typing.Literal[
            "CROSS",
            "ADD",
            "SUBTRACT",
            "ALPHA_OVER",
            "ALPHA_UNDER",
            "GAMMA_CROSS",
            "MULTIPLY",
            "OVER_DROP",
            "WIPE",
            "GLOW",
            "TRANSFORM",
            "COLOR",
            "SPEED",
            "MULTICAM",
            "ADJUSTMENT",
            "GAUSSIAN_BLUR",
            "TEXT",
            "COLORMIX",
        ]
        | None,
        channel: int | None,
        frame_start: int | None,
        frame_end: int | None = 0,
        seq1: Sequence | None = None,
        seq2: Sequence | None = None,
        seq3: Sequence | None = None,
    ) -> Sequence:
        """Add a new effect sequence

        :param name: Name for the new sequence
        :type name: str
        :param type: Type, type for the new sequence
        :type type: typing.Literal['CROSS','ADD','SUBTRACT','ALPHA_OVER','ALPHA_UNDER','GAMMA_CROSS','MULTIPLY','OVER_DROP','WIPE','GLOW','TRANSFORM','COLOR','SPEED','MULTICAM','ADJUSTMENT','GAUSSIAN_BLUR','TEXT','COLORMIX'] | None
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :param frame_end: The end frame for the new sequence
        :type frame_end: int | None
        :param seq1: Sequence 1 for effect
        :type seq1: Sequence | None
        :param seq2: Sequence 2 for effect
        :type seq2: Sequence | None
        :param seq3: Sequence 3 for effect
        :type seq3: Sequence | None
        :return: New Sequence
        :rtype: Sequence
        """

    def remove(self, sequence: Sequence):
        """Remove a Sequence

        :param sequence: Sequence to remove
        :type sequence: Sequence
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SpaceNodeEditorPath(bpy_prop_collection[NodeTreePath], bpy_struct):
    """Get the node tree path as a string"""

    to_string: str
    """ 

    :type: str
    """

    def clear(self):
        """Reset the node tree path"""

    def start(self, node_tree: NodeTree | None):
        """Set the root node tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        """

    def append(self, node_tree: NodeTree | None, node: Node | None = None):
        """Append a node group tree to the path

        :param node_tree: Node Tree, Node tree to append to the node editor path
        :type node_tree: NodeTree | None
        :param node: Node, Group node linking to this node tree
        :type node: Node | None
        """

    def pop(self):
        """Remove the last node tree from the path"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SplineBezierPoints(bpy_prop_collection[BezierSplinePoint], bpy_struct):
    """Collection of spline Bezier points"""

    def add(self, count: int | None = 1):
        """Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SplinePoints(bpy_prop_collection[SplinePoint], bpy_struct):
    """Collection of spline points"""

    def add(self, count: int | None = 1):
        """Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TessfaceUVTextures(bpy_prop_collection[MeshTextureFaceLayer], bpy_struct):
    """Collection of UV maps for tessellated faces"""

    active: MeshTextureFaceLayer | None
    """ Active UV Map

    :type: MeshTextureFaceLayer | None
    """

    active_index: int | None
    """ Active UV Map index

    :type: int | None
    """

    def new(self, name: str = "UVMap") -> MeshTextureFaceLayer:
        """Add a UV tessface-texture layer to Mesh (only for meshes with no polygons)

        :param name: UV map name
        :type name: str
        :return: The newly created layer
        :rtype: MeshTextureFaceLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TimelineMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """Collection of timeline markers"""

    def new(self, name: str, frame: int | None = 1) -> TimelineMarker:
        """Add a keyframe to the curve

        :param name: New name for the marker (not unique)
        :type name: str
        :param frame: The frame for the new marker
        :type frame: int | None
        :return: Newly created timeline marker
        :rtype: TimelineMarker
        """

    def remove(self, marker: TimelineMarker):
        """Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: TimelineMarker
        """

    def clear(self):
        """Remove all timeline markers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UVLoopLayers(bpy_prop_collection[MeshUVLoopLayer], bpy_struct):
    """Collection of uv loop layers"""

    active: MeshUVLoopLayer | None
    """ Active UV loop layer

    :type: MeshUVLoopLayer | None
    """

    active_index: int | None
    """ Active UV loop layer index

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UVTextures(bpy_prop_collection[MeshTexturePolyLayer], bpy_struct):
    """Collection of UV maps"""

    active: MeshTexturePolyLayer | None
    """ Active UV Map

    :type: MeshTexturePolyLayer | None
    """

    active_index: int | None
    """ Active UV Map index

    :type: int | None
    """

    def new(self, name: str = "UVMap") -> MeshTexturePolyLayer:
        """Add a UV map layer to Mesh

        :param name: UV map name
        :type name: str
        :return: The newly created layer
        :rtype: MeshTexturePolyLayer
        """

    def remove(self, layer: MeshTexturePolyLayer):
        """Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: MeshTexturePolyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexColors(bpy_prop_collection[MeshColorLayer], bpy_struct):
    """Collection of vertex colors"""

    active: MeshColorLayer | None
    """ Active vertex color layer

    :type: MeshColorLayer | None
    """

    active_index: int | None
    """ Active vertex color index

    :type: int | None
    """

    def new(self, name: str = "Col") -> MeshColorLayer:
        """Add a vertex color layer to Mesh

        :param name: Vertex color name
        :type name: str
        :return: The newly created layer
        :rtype: MeshColorLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexFloatProperties(
    bpy_prop_collection[MeshVertexFloatPropertyLayer], bpy_struct
):
    """Collection of float properties"""

    def new(self, name: str = "Float Prop") -> MeshVertexFloatPropertyLayer:
        """Add a float property layer to Mesh

        :param name: Float property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshVertexFloatPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexGroups(bpy_prop_collection[VertexGroup], bpy_struct):
    """Collection of vertex groups"""

    active: VertexGroup | None
    """ Vertex groups of the object

    :type: VertexGroup | None
    """

    active_index: int | None
    """ Active index in vertex group array

    :type: int | None
    """

    def new(self, name: str = "Group") -> VertexGroup:
        """Add vertex group to object

        :param name: Vertex group name
        :type name: str
        :return: New vertex group
        :rtype: VertexGroup
        """

    def remove(self, group: VertexGroup):
        """Delete vertex group from object

        :param group: Vertex group to remove
        :type group: VertexGroup
        """

    def clear(self):
        """Delete all vertex groups from object"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexIntProperties(bpy_prop_collection[MeshVertexIntPropertyLayer], bpy_struct):
    """Collection of int properties"""

    def new(self, name: str = "Int Prop") -> MeshVertexIntPropertyLayer:
        """Add a integer property layer to Mesh

        :param name: Int property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshVertexIntPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexStringProperties(
    bpy_prop_collection[MeshVertexStringPropertyLayer], bpy_struct
):
    """Collection of string properties"""

    def new(self, name: str = "String Prop") -> MeshVertexStringPropertyLayer:
        """Add a string property layer to Mesh

        :param name: String property name
        :type name: str
        :return: The newly created layer
        :rtype: MeshVertexStringPropertyLayer
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WorldTextureSlots(bpy_prop_collection[WorldTextureSlot], bpy_struct):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> WorldTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: WorldTextureSlot
        """

    @classmethod
    def create(cls, index: int | None) -> WorldTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: WorldTextureSlot
        """

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Action(ID, bpy_struct):
    """A collection of F-Curves for animation"""

    fcurves: ActionFCurves
    """ The individual F-Curves that make up the action

    :type: ActionFCurves
    """

    frame_range: bpy_prop_array[float]
    """ The final frame range of all F-Curves within this action

    :type: bpy_prop_array[float]
    """

    groups: ActionGroups
    """ Convenient groupings of F-Curves

    :type: ActionGroups
    """

    id_root: typing.Literal[
        "ACTION",
        "ARMATURE",
        "BRUSH",
        "CAMERA",
        "CACHEFILE",
        "CURVE",
        "FONT",
        "GREASEPENCIL",
        "GROUP",
        "IMAGE",
        "KEY",
        "LAMP",
        "LIBRARY",
        "LINESTYLE",
        "LATTICE",
        "MASK",
        "MATERIAL",
        "META",
        "MESH",
        "MOVIECLIP",
        "NODETREE",
        "OBJECT",
        "PAINTCURVE",
        "PALETTE",
        "PARTICLE",
        "SCENE",
        "SCREEN",
        "SOUND",
        "SPEAKER",
        "TEXT",
        "TEXTURE",
        "WINDOWMANAGER",
        "WORLD",
    ]
    """ Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING

    :type: typing.Literal['ACTION','ARMATURE','BRUSH','CAMERA','CACHEFILE','CURVE','FONT','GREASEPENCIL','GROUP','IMAGE','KEY','LAMP','LIBRARY','LINESTYLE','LATTICE','MASK','MATERIAL','META','MESH','MOVIECLIP','NODETREE','OBJECT','PAINTCURVE','PALETTE','PARTICLE','SCENE','SCREEN','SOUND','SPEAKER','TEXT','TEXTURE','WINDOWMANAGER','WORLD']
    """

    pose_markers: ActionPoseMarkers
    """ Markers specific to this action, for labeling poses

    :type: ActionPoseMarkers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActionActuator(Actuator, bpy_struct):
    """Actuator to control the object movement"""

    action: Action | None
    """ 

    :type: Action | None
    """

    blend_mode: typing.Literal["BLEND", "ADD"]
    """ How this layer is blended with previous layers

    :type: typing.Literal['BLEND','ADD']
    """

    frame_blend_in: int
    """ Number of frames of motion blending

    :type: int
    """

    frame_end: float
    """ 

    :type: float
    """

    frame_property: str
    """ Assign the action's current frame number to this property

    :type: str
    """

    frame_start: float
    """ 

    :type: float
    """

    layer: int
    """ The animation layer to play the action on

    :type: int
    """

    layer_weight: float
    """ How much of the previous layer to blend into this one

    :type: float
    """

    play_mode: typing.Literal[
        "PLAY", "PINGPONG", "FLIPPER", "LOOPSTOP", "LOOPEND", "PROPERTY"
    ]
    """ Action playback type

    :type: typing.Literal['PLAY','PINGPONG','FLIPPER','LOOPSTOP','LOOPEND','PROPERTY']
    """

    priority: int
    """ Execution priority - lower numbers will override actions with higher numbers (with 2 or more actions at once, the overriding channels must be lower in the stack)

    :type: int
    """

    property: str
    """ Use this property to define the Action position

    :type: str
    """

    use_additive: bool
    """ Action is added to the current loc/rot/scale in global or local coordinate according to Local flag

    :type: bool
    """

    use_continue_last_frame: bool
    """ Restore last frame when switching on/off, otherwise play from the start each time

    :type: bool
    """

    use_force: bool
    """ Apply Action as a global or local force depending on the local option (dynamic objects only)

    :type: bool
    """

    use_local: bool
    """ Let the Action act in local coordinates, used in Force and Add mode

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActionConstraint(Constraint, bpy_struct):
    """Map an action to the transform axes of a bone"""

    action: Action | None
    """ The constraining action

    :type: Action | None
    """

    frame_end: int
    """ Last frame of the Action to use

    :type: int
    """

    frame_start: int
    """ First frame of the Action to use

    :type: int
    """

    max: float
    """ Maximum value for target channel range

    :type: float
    """

    min: float
    """ Minimum value for target channel range

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    transform_channel: typing.Literal[
        "LOCATION_X",
        "LOCATION_Y",
        "LOCATION_Z",
        "ROTATION_X",
        "ROTATION_Y",
        "ROTATION_Z",
        "SCALE_X",
        "SCALE_Y",
        "SCALE_Z",
    ]
    """ Transformation channel from the target that is used to key the Action

    :type: typing.Literal['LOCATION_X','LOCATION_Y','LOCATION_Z','ROTATION_X','ROTATION_Y','ROTATION_Z','SCALE_X','SCALE_Y','SCALE_Z']
    """

    use_bone_object_action: bool
    """ Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActionGroup(bpy_struct):
    """Groups of F-Curves"""

    channels: bpy_prop_collection[FCurve]
    """ F-Curves in this group

    :type: bpy_prop_collection[FCurve]
    """

    color_set: typing.Literal[
        "DEFAULT",
        "THEME01",
        "THEME02",
        "THEME03",
        "THEME04",
        "THEME05",
        "THEME06",
        "THEME07",
        "THEME08",
        "THEME09",
        "THEME10",
        "THEME11",
        "THEME12",
        "THEME13",
        "THEME14",
        "THEME15",
        "THEME16",
        "THEME17",
        "THEME18",
        "THEME19",
        "THEME20",
        "CUSTOM",
    ]
    """ Custom color set to use

    :type: typing.Literal['DEFAULT','THEME01','THEME02','THEME03','THEME04','THEME05','THEME06','THEME07','THEME08','THEME09','THEME10','THEME11','THEME12','THEME13','THEME14','THEME15','THEME16','THEME17','THEME18','THEME19','THEME20','CUSTOM']
    """

    colors: ThemeBoneColorSet
    """ Copy of the colors associated with the group's color set

    :type: ThemeBoneColorSet
    """

    is_custom_color_set: bool
    """ Color set is user-defined instead of a fixed theme color set

    :type: bool
    """

    lock: bool
    """ Action group is locked

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ Action group is selected

    :type: bool
    """

    show_expanded: bool
    """ Action group is expanded

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Actuator(bpy_struct):
    """Actuator to apply actions in the game engine"""

    active: bool | None
    """ Set the active state of the actuator

    :type: bool | None
    """

    name: str
    """ 

    :type: str
    """

    pin: bool
    """ Display when not linked to a visible states controller

    :type: bool
    """

    show_expanded: bool
    """ Set actuator expanded in the user interface

    :type: bool
    """

    type: typing.Literal[
        "ACTION",
        "ARMATURE",
        "CAMERA",
        "CONSTRAINT",
        "EDIT_OBJECT",
        "FILTER_2D",
        "GAME",
        "MESSAGE",
        "MOTION",
        "MOUSE",
        "PARENT",
        "PROPERTY",
        "RANDOM",
        "SCENE",
        "SOUND",
        "STATE",
        "STEERING",
        "VIBRATION",
        "VISIBILITY",
    ]
    """ 

    :type: typing.Literal['ACTION','ARMATURE','CAMERA','CONSTRAINT','EDIT_OBJECT','FILTER_2D','GAME','MESSAGE','MOTION','MOUSE','PARENT','PROPERTY','RANDOM','SCENE','SOUND','STATE','STEERING','VIBRATION','VISIBILITY']
    """

    def link(self, controller: Controller | None):
        """Link the actuator to a controller

        :param controller: Controller to link to
        :type controller: Controller | None
        """

    def unlink(self, controller: Controller | None):
        """Unlink the actuator from a controller

        :param controller: Controller to unlink from
        :type controller: Controller | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ActuatorSensor(Sensor, bpy_struct):
    """Sensor to detect state modifications of actuators"""

    actuator: str
    """ Actuator name, actuator active state modifications will be detected

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AddSequence(EffectSequence, Sequence, bpy_struct):
    """Add Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Addon(bpy_struct):
    """Python add-ons to be loaded automatically"""

    module: str
    """ Module name

    :type: str
    """

    preferences: AddonPreferences
    """ 

    :type: AddonPreferences
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AddonPreferences(bpy_struct):
    bl_idname: str
    """ 

    :type: str
    """

    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AdjustmentSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to perform filter adjustments to layers below"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AlembicObjectPath(bpy_struct):
    """Path of an object inside of an Alembic archive"""

    path: str
    """ Object path

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AlphaOverSequence(EffectSequence, Sequence, bpy_struct):
    """Alpha Over Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AlphaUnderSequence(EffectSequence, Sequence, bpy_struct):
    """Alpha Under Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AlwaysSensor(Sensor, bpy_struct):
    """Sensor to generate continuous pulses"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AndController(Controller, bpy_struct):
    """Controller passing on events based on a logical AND operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnimData(bpy_struct):
    """Animation data for data-block"""

    action: Action | None
    """ Active Action for this data-block

    :type: Action | None
    """

    action_blend_type: typing.Literal["REPLACE", "ADD", "SUBTRACT", "MULTIPLY"]
    """ Method used for combining Active Action's result with result of NLA stack

    :type: typing.Literal['REPLACE','ADD','SUBTRACT','MULTIPLY']
    """

    action_extrapolation: typing.Literal["NOTHING", "HOLD", "HOLD_FORWARD"]
    """ Action to take for gaps past the Active Action's range (when evaluating with NLA)

    :type: typing.Literal['NOTHING','HOLD','HOLD_FORWARD']
    """

    action_influence: float
    """ Amount the Active Action contributes to the result of the NLA stack

    :type: float
    """

    drivers: AnimDataDrivers
    """ The Drivers/Expressions for this data-block

    :type: AnimDataDrivers
    """

    nla_tracks: NlaTracks
    """ NLA Tracks (i.e. Animation Layers)

    :type: NlaTracks
    """

    use_nla: bool
    """ NLA stack is evaluated when evaluating this block

    :type: bool
    """

    use_tweak_mode: bool
    """ Whether to enable or disable tweak mode in NLA

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnimViz(bpy_struct):
    """Settings for the visualization of motion"""

    motion_path: AnimVizMotionPaths
    """ Motion Path settings for visualization

    :type: AnimVizMotionPaths
    """

    onion_skin_frames: AnimVizOnionSkinning
    """ Onion Skinning (ghosting) settings for visualization

    :type: AnimVizOnionSkinning
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnimVizMotionPaths(bpy_struct):
    """Motion Path settings for animation visualization"""

    bake_location: typing.Literal["HEADS", "TAILS"]
    """ When calculating Bone Paths, use Head or Tips

    :type: typing.Literal['HEADS','TAILS']
    """

    frame_after: int
    """ Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_before: int
    """ Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_end: int
    """ End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_start: int
    """ Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_step: int
    """ Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)

    :type: int
    """

    has_motion_paths: bool
    """ Are there any bone paths that will need updating (read-only)

    :type: bool
    """

    show_frame_numbers: bool
    """ Show frame numbers on Motion Paths

    :type: bool
    """

    show_keyframe_action_all: bool
    """ For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)

    :type: bool
    """

    show_keyframe_highlight: bool
    """ Emphasize position of keyframes on Motion Paths

    :type: bool
    """

    show_keyframe_numbers: bool
    """ Show frame numbers of Keyframes on Motion Paths

    :type: bool
    """

    type: typing.Literal["CURRENT_FRAME", "RANGE"]
    """ Type of range to show for Motion Paths

    :type: typing.Literal['CURRENT_FRAME','RANGE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnimVizOnionSkinning(bpy_struct):
    """Onion Skinning settings for animation visualization"""

    frame_after: int
    """ Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_before: int
    """ Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_end: int
    """ End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_start: int
    """ Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_step: int
    """ Number of frames between ghosts shown (not for 'On Keyframes' Onion-skinning method)

    :type: int
    """

    show_only_selected: bool
    """ For Pose-Mode drawing, only draw ghosts for selected bones

    :type: bool
    """

    type: typing.Literal["NONE", "CURRENT_FRAME", "RANGE", "KEYS"]
    """ Method used for determining what ghosts get drawn

    :type: typing.Literal['NONE','CURRENT_FRAME','RANGE','KEYS']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AnyType(bpy_struct):
    """RNA type used for pointers to any possible data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Area(bpy_struct):
    """Area in a subdivided screen, containing an editor"""

    height: int
    """ Area height

    :type: int
    """

    regions: bpy_prop_collection[Region]
    """ Regions this area is subdivided in

    :type: bpy_prop_collection[Region]
    """

    show_menus: bool
    """ Show menus in the header

    :type: bool
    """

    spaces: AreaSpaces
    """ Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)

    :type: AreaSpaces
    """

    type: typing.Literal[
        "EMPTY",
        "VIEW_3D",
        "IMAGE_EDITOR",
        "NODE_EDITOR",
        "SEQUENCE_EDITOR",
        "CLIP_EDITOR",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "TEXT_EDITOR",
        "LOGIC_EDITOR",
        "CONSOLE",
        "INFO",
        "OUTLINER",
        "PROPERTIES",
        "FILE_BROWSER",
        "USER_PREFERENCES",
    ]
    """ Current editor type for this area

    :type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES']
    """

    width: int
    """ Area width

    :type: int
    """

    x: int
    """ The window relative vertical location of the area

    :type: int
    """

    y: int
    """ The window relative horizontal location of the area

    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""

    def header_text_set(self, text: str = ""):
        """Set the header text

        :param text: Text, New string for the header, no argument clears the text
        :type text: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class AreaLamp(Lamp, ID, bpy_struct):
    """Directional area lamp"""

    compression_threshold: float
    """ Deep shadow map compression threshold

    :type: float
    """

    gamma: float
    """ Light gamma correction value

    :type: float
    """

    ge_shadow_buffer_type: typing.Literal["SIMPLE", "VARIANCE"]
    """ The shadow mapping algorithm used

    :type: typing.Literal['SIMPLE','VARIANCE']
    """

    shadow_adaptive_threshold: float
    """ Threshold for Adaptive Sampling (Raytraced shadows)

    :type: float
    """

    shadow_buffer_bias: float
    """ Shadow buffer sampling bias

    :type: float
    """

    shadow_buffer_bleed_bias: float
    """ Bias for reducing light-bleed on variance shadow maps

    :type: float
    """

    shadow_buffer_clip_end: float
    """ Shadow map clip end, beyond which objects will not generate shadows

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_buffer_samples: int
    """ Number of shadow buffer samples

    :type: int
    """

    shadow_buffer_sharp: float
    """ Sharpness of buffer sampling

    :type: float
    """

    shadow_buffer_size: int
    """ Resolution of the shadow buffer, higher values give crisper shadows but use more memory

    :type: int
    """

    shadow_buffer_slope_bias: float
    """ Shadow buffer sampling slope bias

    :type: float
    """

    shadow_buffer_soft: float
    """ Size of shadow buffer sampling area

    :type: float
    """

    shadow_buffer_type: typing.Literal["REGULAR", "HALFWAY", "IRREGULAR", "DEEP"]
    """ Type of shadow buffer

    :type: typing.Literal['REGULAR','HALFWAY','IRREGULAR','DEEP']
    """

    shadow_color: bpy_prop_array[float]
    """ Color of shadows cast by the lamp

    :type: bpy_prop_array[float]
    """

    shadow_filter: typing.Literal["NONE", "PCF", "PCF_BAIL", "PCF_JITTER"]
    """ The shadow mapping filtering algorithm used

    :type: typing.Literal['NONE','PCF','PCF_BAIL','PCF_JITTER']
    """

    shadow_filter_type: typing.Literal["BOX", "TENT", "GAUSS"]
    """ Type of shadow filter (Buffer Shadows)

    :type: typing.Literal['BOX','TENT','GAUSS']
    """

    shadow_method: typing.Literal["NOSHADOW", "RAY_SHADOW"]
    """ 

    :type: typing.Literal['NOSHADOW','RAY_SHADOW']
    """

    shadow_ray_sample_method: typing.Literal[
        "ADAPTIVE_QMC", "CONSTANT_QMC", "CONSTANT_JITTERED"
    ]
    """ Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower

    :type: typing.Literal['ADAPTIVE_QMC','CONSTANT_QMC','CONSTANT_JITTERED']
    """

    shadow_ray_samples_x: int
    """ Number of samples taken extra (samples x samples)

    :type: int
    """

    shadow_ray_samples_y: int
    """ Number of samples taken extra (samples x samples)

    :type: int
    """

    shadow_sample_buffers: typing.Literal["BUFFERS_1", "BUFFERS_4", "BUFFERS_9"]
    """ Number of shadow buffers to render for better AA, this increases memory usage

    :type: typing.Literal['BUFFERS_1','BUFFERS_4','BUFFERS_9']
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    shape: typing.Literal["SQUARE", "RECTANGLE"]
    """ Shape of the area lamp

    :type: typing.Literal['SQUARE','RECTANGLE']
    """

    show_shadow_box: bool
    """ Draw a box in 3D view to visualize which objects are contained in it

    :type: bool
    """

    size: float
    """ Size of the area of the area Lamp, X direction size for Rectangle shapes

    :type: float
    """

    size_y: float
    """ Size of the area of the area Lamp in the Y direction for Rectangle shapes

    :type: float
    """

    static_shadow: bool
    """ Enable static shadows

    :type: bool
    """

    use_auto_clip_end: bool
    """ Automatic calculation of clipping-end, based on visible vertices

    :type: bool
    """

    use_auto_clip_start: bool
    """ Automatic calculation of clipping-start, based on visible vertices

    :type: bool
    """

    use_dither: bool
    """ Use 2x2 dithering for sampling  (Constant Jittered sampling)

    :type: bool
    """

    use_jitter: bool
    """ Use noise for sampling  (Constant Jittered sampling)

    :type: bool
    """

    use_only_shadow: bool
    """ Cast shadows only, without illuminating objects

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_shadow_layer: bool
    """ Objects on the same layers only cast shadows

    :type: bool
    """

    use_umbra: bool
    """ Emphasize parts that are fully shadowed (Constant Jittered sampling)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Armature(ID, bpy_struct):
    """Armature data-block containing a hierarchy of bones, usually used for rigging characters"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    bones: ArmatureBones
    """ 

    :type: ArmatureBones
    """

    deform_method: typing.Literal["BLENDER", "BGE_CPU"]
    """ Vertex Deformer Method (Game Engine only)

    :type: typing.Literal['BLENDER','BGE_CPU']
    """

    draw_type: typing.Literal["OCTAHEDRAL", "STICK", "BBONE", "ENVELOPE", "WIRE"]
    """ 

    :type: typing.Literal['OCTAHEDRAL','STICK','BBONE','ENVELOPE','WIRE']
    """

    edit_bones: ArmatureEditBones
    """ 

    :type: ArmatureEditBones
    """

    ghost_frame_end: int
    """ End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    ghost_frame_start: int
    """ Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    ghost_size: int
    """ Frame step for Ghosts (not for 'On Keyframes' Onion-skinning method)

    :type: int
    """

    ghost_step: int
    """ Number of frame steps on either side of current frame to show as ghosts (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    ghost_type: typing.Literal["CURRENT_FRAME", "RANGE", "KEYS"]
    """ Method of Onion-skinning for active Action

    :type: typing.Literal['CURRENT_FRAME','RANGE','KEYS']
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Armature layer visibility

    :type: bpy_prop_array[bool]
    """

    layers_protected: bpy_prop_array[bool]
    """ Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo

    :type: bpy_prop_array[bool]
    """

    pose_position: typing.Literal["POSE", "REST"]
    """ Show armature in binding pose or final posed state

    :type: typing.Literal['POSE','REST']
    """

    show_axes: bool
    """ Draw bone axes

    :type: bool
    """

    show_bone_custom_shapes: bool
    """ Draw bones with their custom shapes

    :type: bool
    """

    show_group_colors: bool
    """ Draw bone group colors

    :type: bool
    """

    show_names: bool
    """ Draw bone names

    :type: bool
    """

    show_only_ghost_selected: bool
    """ 

    :type: bool
    """

    use_auto_ik: bool
    """ Add temporary IK constraints while grabbing bones in Pose Mode

    :type: bool
    """

    use_deform_delay: bool
    """ Don't deform children when manipulating bones in Pose Mode

    :type: bool
    """

    use_mirror_x: bool
    """ Apply changes to matching bone on opposite side of X-Axis

    :type: bool
    """

    def transform(
        self,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None,
    ):
        """Transform armature bones by a matrix

        :param matrix: Matrix
        :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArmatureActuator(Actuator, bpy_struct):
    bone: str
    """ Bone on which the constraint is defined

    :type: str
    """

    constraint: str
    """ Name of the constraint to control

    :type: str
    """

    influence: float
    """ Influence of this constraint

    :type: float
    """

    mode: typing.Literal[
        "RUN", "ENABLE", "DISABLE", "SETTARGET", "SETWEIGHT", "SETINFLUENCE"
    ]
    """ 

    :type: typing.Literal['RUN','ENABLE','DISABLE','SETTARGET','SETWEIGHT','SETINFLUENCE']
    """

    secondary_target: Object | None
    """ Set this object as the secondary target of the constraint (only IK polar target at the moment)

    :type: Object | None
    """

    target: Object | None
    """ Set this object as the target of the constraint

    :type: Object | None
    """

    weight: float
    """ Weight of this constraint

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArmatureModifier(Modifier, bpy_struct):
    """Armature deformation modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object | None
    """ Armature object to deform with

    :type: Object | None
    """

    use_bone_envelopes: bool
    """ Bind Bone envelopes to armature modifier

    :type: bool
    """

    use_deform_preserve_volume: bool
    """ Deform rotation interpolation with quaternions

    :type: bool
    """

    use_multi_modifier: bool
    """ Use same input as previous modifier, and mix results using overall vgroup

    :type: bool
    """

    use_vertex_groups: bool
    """ Bind vertex groups to armature modifier

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArmatureSensor(Sensor, bpy_struct):
    """Sensor to detect values and changes in values of IK solver"""

    bone: str
    """ Identify the bone to check value from

    :type: str
    """

    constraint: str
    """ Identify the bone constraint to check value from

    :type: str
    """

    test_type: typing.Literal[
        "STATECHG", "LINERRORBELOW", "LINERRORABOVE", "ROTERRORBELOW", "ROTERRORABOVE"
    ]
    """ Type of value and test

    :type: typing.Literal['STATECHG','LINERRORBELOW','LINERRORABOVE','ROTERRORBELOW','ROTERRORABOVE']
    """

    value: float
    """ Value to be used in comparison

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ArrayModifier(Modifier, bpy_struct):
    """Array duplication modifier"""

    constant_offset_displace: bpy_prop_array[float]
    """ Value for the distance between arrayed items

    :type: bpy_prop_array[float]
    """

    count: int
    """ Number of duplicates to make

    :type: int
    """

    curve: Object | None
    """ Curve object to fit array length to

    :type: Object | None
    """

    end_cap: Object | None
    """ Mesh object to use as an end cap

    :type: Object | None
    """

    fit_length: float
    """ Length to fit array within

    :type: float
    """

    fit_type: typing.Literal["FIXED_COUNT", "FIT_LENGTH", "FIT_CURVE"]
    """ Array length calculation method

    :type: typing.Literal['FIXED_COUNT','FIT_LENGTH','FIT_CURVE']
    """

    merge_threshold: float
    """ Limit below which to merge vertices

    :type: float
    """

    offset_object: Object | None
    """ Use the location and rotation of another object to determine the distance and rotational change between arrayed items

    :type: Object | None
    """

    offset_u: float
    """ Amount to offset array UVs on the U axis

    :type: float
    """

    offset_v: float
    """ Amount to offset array UVs on the V axis

    :type: float
    """

    relative_offset_displace: bpy_prop_array[float]
    """ The size of the geometry will determine the distance between arrayed items

    :type: bpy_prop_array[float]
    """

    start_cap: Object | None
    """ Mesh object to use as a start cap

    :type: Object | None
    """

    use_constant_offset: bool
    """ Add a constant offset

    :type: bool
    """

    use_merge_vertices: bool
    """ Merge vertices in adjacent duplicates

    :type: bool
    """

    use_merge_vertices_cap: bool
    """ Merge vertices in first and last duplicates

    :type: bool
    """

    use_object_offset: bool
    """ Add another object's transformation to the total offset

    :type: bool
    """

    use_relative_offset: bool
    """ Add an offset relative to the object's bounding box

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BackgroundImage(bpy_struct):
    """Image and settings for display in the 3D View background"""

    clip: MovieClip | None
    """ Movie clip displayed and edited in this space

    :type: MovieClip | None
    """

    clip_user: MovieClipUser
    """ Parameters defining which frame of the movie clip is displayed

    :type: MovieClipUser
    """

    draw_depth: typing.Literal["BACK", "FRONT"]
    """ Draw under or over everything

    :type: typing.Literal['BACK','FRONT']
    """

    frame_method: typing.Literal["STRETCH", "FIT", "CROP"]
    """ How the image fits in the camera frame

    :type: typing.Literal['STRETCH','FIT','CROP']
    """

    image: Image | None
    """ Image displayed and edited in this space

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    offset_x: float
    """ Offset image horizontally from the world origin

    :type: float
    """

    offset_y: float
    """ Offset image vertically from the world origin

    :type: float
    """

    opacity: float
    """ Image opacity to blend the image against the background color

    :type: float
    """

    rotation: float
    """ Rotation for the background image (ortho view only)

    :type: float
    """

    show_background_image: bool
    """ Show this image as background

    :type: bool
    """

    show_expanded: bool
    """ Show the expanded in the user interface

    :type: bool
    """

    show_on_foreground: bool
    """ Show this image in front of objects in viewport

    :type: bool
    """

    size: float
    """ Size of the background image (ortho view only)

    :type: float
    """

    source: typing.Literal["IMAGE", "MOVIE_CLIP"]
    """ Data source used for background

    :type: typing.Literal['IMAGE','MOVIE_CLIP']
    """

    use_camera_clip: bool
    """ Use movie clip from active scene camera

    :type: bool
    """

    use_flip_x: bool
    """ Flip the background image horizontally

    :type: bool
    """

    use_flip_y: bool
    """ Flip the background image vertically

    :type: bool
    """

    view_axis: typing.Literal[
        "LEFT", "RIGHT", "BACK", "FRONT", "BOTTOM", "TOP", "ALL", "CAMERA"
    ]
    """ The axis to display the image on

    :type: typing.Literal['LEFT','RIGHT','BACK','FRONT','BOTTOM','TOP','ALL','CAMERA']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BakePixel(bpy_struct):
    du_dx: float
    """ 

    :type: float
    """

    du_dy: float
    """ 

    :type: float
    """

    dv_dx: float
    """ 

    :type: float
    """

    dv_dy: float
    """ 

    :type: float
    """

    next: typing_extensions.Self
    """ 

    :type: typing_extensions.Self
    """

    object_id: int
    """ 

    :type: int
    """

    primitive_id: int
    """ 

    :type: int
    """

    uv: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BakeSettings(bpy_struct):
    """Bake data for a Scene data-block"""

    cage_extrusion: float
    """ Distance to use for the inward ray cast when using selected to active

    :type: float
    """

    cage_object: str
    """ Object to use as cage instead of calculating the cage from the active object with cage extrusion

    :type: str
    """

    filepath: str
    """ Image filepath to use when saving externally

    :type: str
    """

    height: int
    """ Vertical dimension of the baking map

    :type: int
    """

    image_settings: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    margin: int
    """ Extends the baked result as a post process filter

    :type: int
    """

    normal_b: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis to bake in blue channel

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    normal_g: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis to bake in green channel

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    normal_r: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis to bake in red channel

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    normal_space: typing.Literal["OBJECT", "TANGENT"]
    """ Choose normal space for baking

    :type: typing.Literal['OBJECT','TANGENT']
    """

    pass_filter: set[str]
    """ Passes to include in the active baking pass

    :type: set[str]
    """

    save_mode: typing.Literal["INTERNAL", "EXTERNAL"]
    """ Choose how to save the baking map

    :type: typing.Literal['INTERNAL','EXTERNAL']
    """

    use_automatic_name: bool
    """ Automatically name the output file with the pass type (external only)

    :type: bool
    """

    use_cage: bool
    """ Cast rays to active object from a cage

    :type: bool
    """

    use_clear: bool
    """ Clear Images before baking (internal only)

    :type: bool
    """

    use_pass_ambient_occlusion: bool
    """ Add ambient occlusion contribution

    :type: bool
    """

    use_pass_color: bool
    """ Color the pass

    :type: bool
    """

    use_pass_diffuse: bool
    """ Add diffuse contribution

    :type: bool
    """

    use_pass_direct: bool
    """ Add direct lighting contribution

    :type: bool
    """

    use_pass_emit: bool
    """ Add emission contribution

    :type: bool
    """

    use_pass_glossy: bool
    """ Add glossy contribution

    :type: bool
    """

    use_pass_indirect: bool
    """ Add indirect lighting contribution

    :type: bool
    """

    use_pass_subsurface: bool
    """ Add subsurface contribution

    :type: bool
    """

    use_pass_transmission: bool
    """ Add transmission contribution

    :type: bool
    """

    use_selected_to_active: bool
    """ Bake shading on the surface of selected objects to the active object

    :type: bool
    """

    use_split_materials: bool
    """ Split external images per material (external only)

    :type: bool
    """

    width: int
    """ Horizontal dimension of the baking map

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BevelModifier(Modifier, bpy_struct):
    """Bevel modifier to make edges and vertices more rounded"""

    angle_limit: float
    """ Angle above which to bevel edges

    :type: float
    """

    edge_weight_method: typing.Literal["AVERAGE", "SHARPEST", "LARGEST"]
    """ What edge weight to use for weighting a vertex

    :type: typing.Literal['AVERAGE','SHARPEST','LARGEST']
    """

    limit_method: typing.Literal["NONE", "ANGLE", "WEIGHT", "VGROUP"]
    """ 

    :type: typing.Literal['NONE','ANGLE','WEIGHT','VGROUP']
    """

    loop_slide: bool
    """ Prefer sliding along edges to having even widths

    :type: bool
    """

    material: int
    """ Material index of generated faces, -1 for automatic

    :type: int
    """

    offset_type: typing.Literal["OFFSET", "WIDTH", "DEPTH", "PERCENT"]
    """ What distance Width measures

    :type: typing.Literal['OFFSET','WIDTH','DEPTH','PERCENT']
    """

    profile: float
    """ The profile shape (0.5 = round)

    :type: float
    """

    segments: int
    """ Number of segments for round edges/verts

    :type: int
    """

    use_clamp_overlap: bool
    """ Clamp the width to avoid overlap

    :type: bool
    """

    use_only_vertices: bool
    """ Bevel verts/corners, not edges

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    width: float
    """ Bevel value/amount

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BezierSplinePoint(bpy_struct):
    """Bezier curve point with two handles"""

    co: bpy_prop_array[float]
    """ Coordinates of the control point

    :type: bpy_prop_array[float]
    """

    handle_left: bpy_prop_array[float]
    """ Coordinates of the first handle

    :type: bpy_prop_array[float]
    """

    handle_left_type: typing.Literal["FREE", "VECTOR", "ALIGNED", "AUTO"]
    """ Handle types

    :type: typing.Literal['FREE','VECTOR','ALIGNED','AUTO']
    """

    handle_right: bpy_prop_array[float]
    """ Coordinates of the second handle

    :type: bpy_prop_array[float]
    """

    handle_right_type: typing.Literal["FREE", "VECTOR", "ALIGNED", "AUTO"]
    """ Handle types

    :type: typing.Literal['FREE','VECTOR','ALIGNED','AUTO']
    """

    hide: bool
    """ Visibility status

    :type: bool
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    select_control_point: bool
    """ Control point selection status

    :type: bool
    """

    select_left_handle: bool
    """ Handle 1 selection status

    :type: bool
    """

    select_right_handle: bool
    """ Handle 2 selection status

    :type: bool
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlendData(bpy_struct):
    """Main data structure representing a .blend file and all its data-blocks"""

    actions: BlendDataActions
    """ Action data-blocks

    :type: BlendDataActions
    """

    armatures: BlendDataArmatures
    """ Armature data-blocks

    :type: BlendDataArmatures
    """

    brushes: BlendDataBrushes
    """ Brush data-blocks

    :type: BlendDataBrushes
    """

    cache_files: BlendDataCacheFiles
    """ Cache Files data-blocks

    :type: BlendDataCacheFiles
    """

    cameras: BlendDataCameras
    """ Camera data-blocks

    :type: BlendDataCameras
    """

    curves: BlendDataCurves
    """ Curve data-blocks

    :type: BlendDataCurves
    """

    filepath: str
    """ Path to the .blend file

    :type: str
    """

    fonts: BlendDataFonts
    """ Vector font data-blocks

    :type: BlendDataFonts
    """

    grease_pencil: BlendDataGreasePencils
    """ Grease Pencil data-blocks

    :type: BlendDataGreasePencils
    """

    groups: BlendDataGroups
    """ Group data-blocks

    :type: BlendDataGroups
    """

    images: BlendDataImages
    """ Image data-blocks

    :type: BlendDataImages
    """

    is_dirty: bool
    """ Have recent edits been saved to disk

    :type: bool
    """

    is_saved: bool
    """ Has the current session been saved to disk as a .blend file

    :type: bool
    """

    lamps: BlendDataLamps
    """ Lamp data-blocks

    :type: BlendDataLamps
    """

    lattices: BlendDataLattices
    """ Lattice data-blocks

    :type: BlendDataLattices
    """

    libraries: BlendDataLibraries
    """ Library data-blocks

    :type: BlendDataLibraries
    """

    linestyles: BlendDataLineStyles
    """ Line Style data-blocks

    :type: BlendDataLineStyles
    """

    masks: BlendDataMasks
    """ Masks data-blocks

    :type: BlendDataMasks
    """

    materials: BlendDataMaterials
    """ Material data-blocks

    :type: BlendDataMaterials
    """

    meshes: BlendDataMeshes
    """ Mesh data-blocks

    :type: BlendDataMeshes
    """

    metaballs: BlendDataMetaBalls
    """ Metaball data-blocks

    :type: BlendDataMetaBalls
    """

    movieclips: BlendDataMovieClips
    """ Movie Clip data-blocks

    :type: BlendDataMovieClips
    """

    node_groups: BlendDataNodeTrees
    """ Node group data-blocks

    :type: BlendDataNodeTrees
    """

    objects: BlendDataObjects
    """ Object data-blocks

    :type: BlendDataObjects
    """

    paint_curves: BlendDataPaintCurves
    """ Paint Curves data-blocks

    :type: BlendDataPaintCurves
    """

    palettes: BlendDataPalettes
    """ Palette data-blocks

    :type: BlendDataPalettes
    """

    particles: BlendDataParticles
    """ Particle data-blocks

    :type: BlendDataParticles
    """

    scenes: BlendDataScenes
    """ Scene data-blocks

    :type: BlendDataScenes
    """

    screens: BlendDataScreens
    """ Screen data-blocks

    :type: BlendDataScreens
    """

    shape_keys: bpy_prop_collection[Key]
    """ Shape Key data-blocks

    :type: bpy_prop_collection[Key]
    """

    sounds: BlendDataSounds
    """ Sound data-blocks

    :type: BlendDataSounds
    """

    speakers: BlendDataSpeakers
    """ Speaker data-blocks

    :type: BlendDataSpeakers
    """

    texts: BlendDataTexts
    """ Text data-blocks

    :type: BlendDataTexts
    """

    textures: BlendDataTextures
    """ Texture data-blocks

    :type: BlendDataTextures
    """

    use_autopack: bool
    """ Automatically pack all external data into .blend file

    :type: bool
    """

    version: bpy_prop_array[int]
    """ Version of Blender the .blend was saved with

    :type: bpy_prop_array[int]
    """

    window_managers: BlendDataWindowManagers
    """ Window manager data-blocks

    :type: BlendDataWindowManagers
    """

    worlds: BlendDataWorlds
    """ World data-blocks

    :type: BlendDataWorlds
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def user_map(
        self,
        subset: collections.abc.Sequence | None,
        key_types: set[str] | None,
        value_types: set[str] | None,
    ) -> dict:
        """Returns a mapping of all ID datablocks in current bpy.data to a set of all datablocks using them.For list of valid set members for key_types & value_types, see: `bpy.types.KeyingSetPath.id_type`.

        :param subset: When passed, only these data-blocks and their users will be included as keys/values in the map.
        :type subset: collections.abc.Sequence | None
        :param key_types: Filter the keys mapped by ID types.
        :type key_types: set[str] | None
        :param value_types: Filter the values in the set by ID types.
        :type value_types: set[str] | None
        :return: dictionary of `bpy.types.ID` instances, with sets of ID's as their values.
        :rtype: dict
        """

class BlendTexture(Texture, ID, bpy_struct):
    """Procedural color blending texture"""

    progression: typing.Literal[
        "LINEAR",
        "QUADRATIC",
        "EASING",
        "DIAGONAL",
        "SPHERICAL",
        "QUADRATIC_SPHERE",
        "RADIAL",
    ]
    """ Style of the color blending

    :type: typing.Literal['LINEAR','QUADRATIC','EASING','DIAGONAL','SPHERICAL','QUADRATIC_SPHERE','RADIAL']
    """

    use_flip_axis: typing.Literal["HORIZONTAL", "VERTICAL"]
    """ Flip the texture's X and Y axis

    :type: typing.Literal['HORIZONTAL','VERTICAL']
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BlenderRNA(bpy_struct):
    """Blender RNA structure definitions"""

    structs: bpy_prop_collection[Struct]
    """ 

    :type: bpy_prop_collection[Struct]
    """

    properties: bpy_prop_collection[Property]
    """ 

    :type: bpy_prop_collection[Property]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRule(bpy_struct):
    name: str
    """ Boid rule name

    :type: str
    """

    type: typing.Literal[
        "GOAL",
        "AVOID",
        "AVOID_COLLISION",
        "SEPARATE",
        "FLOCK",
        "FOLLOW_LEADER",
        "AVERAGE_SPEED",
        "FIGHT",
    ]
    """ 

    :type: typing.Literal['GOAL','AVOID','AVOID_COLLISION','SEPARATE','FLOCK','FOLLOW_LEADER','AVERAGE_SPEED','FIGHT']
    """

    use_in_air: bool
    """ Use rule when boid is flying

    :type: bool
    """

    use_on_land: bool
    """ Use rule when boid is on land

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleAverageSpeed(BoidRule, bpy_struct):
    level: float
    """ How much velocity's z-component is kept constant

    :type: float
    """

    speed: float
    """ Percentage of maximum speed

    :type: float
    """

    wander: float
    """ How fast velocity's direction is randomized

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleAvoid(BoidRule, bpy_struct):
    fear_factor: float
    """ Avoid object if danger from it is above this threshold

    :type: float
    """

    object: Object | None
    """ Object to avoid

    :type: Object | None
    """

    use_predict: bool
    """ Predict target movement

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleAvoidCollision(BoidRule, bpy_struct):
    look_ahead: float
    """ Time to look ahead in seconds

    :type: float
    """

    use_avoid: bool
    """ Avoid collision with other boids

    :type: bool
    """

    use_avoid_collision: bool
    """ Avoid collision with deflector objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleFight(BoidRule, bpy_struct):
    distance: float
    """ Attack boids at max this distance

    :type: float
    """

    flee_distance: float
    """ Flee to this distance

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleFollowLeader(BoidRule, bpy_struct):
    distance: float
    """ Distance behind leader to follow

    :type: float
    """

    object: Object | None
    """ Follow this object instead of a boid

    :type: Object | None
    """

    queue_count: int
    """ How many boids in a line

    :type: int
    """

    use_line: bool
    """ Follow leader in a line

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidRuleGoal(BoidRule, bpy_struct):
    object: Object | None
    """ Goal object

    :type: Object | None
    """

    use_predict: bool
    """ Predict target movement

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidSettings(bpy_struct):
    """Settings for boid physics"""

    accuracy: float
    """ Accuracy of attack

    :type: float
    """

    active_boid_state: BoidRule | None
    """ 

    :type: BoidRule | None
    """

    active_boid_state_index: int | None
    """ 

    :type: int | None
    """

    aggression: float
    """ Boid will fight this times stronger enemy

    :type: float
    """

    air_acc_max: float
    """ Maximum acceleration in air (relative to maximum speed)

    :type: float
    """

    air_ave_max: float
    """ Maximum angular velocity in air (relative to 180 degrees)

    :type: float
    """

    air_personal_space: float
    """ Radius of boids personal space in air (% of particle size)

    :type: float
    """

    air_speed_max: float
    """ Maximum speed in air

    :type: float
    """

    air_speed_min: float
    """ Minimum speed in air (relative to maximum speed)

    :type: float
    """

    bank: float
    """ Amount of rotation around velocity vector on turns

    :type: float
    """

    health: float
    """ Initial boid health when born

    :type: float
    """

    height: float
    """ Boid height relative to particle size

    :type: float
    """

    land_acc_max: float
    """ Maximum acceleration on land (relative to maximum speed)

    :type: float
    """

    land_ave_max: float
    """ Maximum angular velocity on land (relative to 180 degrees)

    :type: float
    """

    land_jump_speed: float
    """ Maximum speed for jumping

    :type: float
    """

    land_personal_space: float
    """ Radius of boids personal space on land (% of particle size)

    :type: float
    """

    land_smooth: float
    """ How smoothly the boids land

    :type: float
    """

    land_speed_max: float
    """ Maximum speed on land

    :type: float
    """

    land_stick_force: float
    """ How strong a force must be to start effecting a boid on land

    :type: float
    """

    pitch: float
    """ Amount of rotation around side vector

    :type: float
    """

    range: float
    """ Maximum distance from which a boid can attack

    :type: float
    """

    states: bpy_prop_collection[BoidState]
    """ 

    :type: bpy_prop_collection[BoidState]
    """

    strength: float
    """ Maximum caused damage on attack per second

    :type: float
    """

    use_climb: bool
    """ Allow boids to climb goal objects

    :type: bool
    """

    use_flight: bool
    """ Allow boids to move in air

    :type: bool
    """

    use_land: bool
    """ Allow boids to move on land

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoidState(bpy_struct):
    """Boid state for boid physics"""

    active_boid_rule: BoidRule | None
    """ 

    :type: BoidRule | None
    """

    active_boid_rule_index: int | None
    """ 

    :type: int | None
    """

    falloff: float
    """ 

    :type: float
    """

    name: str
    """ Boid state name

    :type: str
    """

    rule_fuzzy: float
    """ 

    :type: float
    """

    rules: bpy_prop_collection[BoidRule]
    """ 

    :type: bpy_prop_collection[BoidRule]
    """

    ruleset_type: typing.Literal["FUZZY", "RANDOM", "AVERAGE"]
    """ How the rules in the list are evaluated

    :type: typing.Literal['FUZZY','RANDOM','AVERAGE']
    """

    volume: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Bone(bpy_struct):
    """Bone in an Armature data-block"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveiny: float
    """ Y-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveouty: float
    """ Y-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_easein: float
    """ Length of first Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: float
    """ Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bbone_scaleout: float
    """ Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bbone_segments: int
    """ Number of subdivisions of bone (for B-Bones only)

    :type: int
    """

    bbone_x: float
    """ B-Bone X size

    :type: float
    """

    bbone_z: float
    """ B-Bone Z size

    :type: float
    """

    children: bpy_prop_collection[Bone]
    """ Bones which are children of this bone

    :type: bpy_prop_collection[Bone]
    """

    envelope_distance: float
    """ Bone deformation distance (for Envelope deform only)

    :type: float
    """

    envelope_weight: float
    """ Bone deformation weight (for Envelope deform only)

    :type: float
    """

    head: bpy_prop_array[float]
    """ Location of head end of the bone relative to its parent

    :type: bpy_prop_array[float]
    """

    head_local: bpy_prop_array[float]
    """ Location of head end of the bone relative to armature

    :type: bpy_prop_array[float]
    """

    head_radius: float
    """ Radius of head of bone (for Envelope deform only)

    :type: float
    """

    hide: bool
    """ Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)

    :type: bool
    """

    hide_select: bool
    """ Bone is able to be selected

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Layers bone exists in

    :type: bpy_prop_array[bool]
    """

    matrix: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ 3x3 bone matrix

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    matrix_local: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ 4x4 bone matrix relative to armature

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    name: str
    """ 

    :type: str
    """

    parent: typing_extensions.Self
    """ Parent bone (in same Armature)

    :type: typing_extensions.Self
    """

    select: bool
    """ 

    :type: bool
    """

    select_head: bool
    """ 

    :type: bool
    """

    select_tail: bool
    """ 

    :type: bool
    """

    show_wire: bool
    """ Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)

    :type: bool
    """

    tail: bpy_prop_array[float]
    """ Location of tail end of the bone

    :type: bpy_prop_array[float]
    """

    tail_local: bpy_prop_array[float]
    """ Location of tail end of the bone relative to armature

    :type: bpy_prop_array[float]
    """

    tail_radius: float
    """ Radius of tail of bone (for Envelope deform only)

    :type: float
    """

    use_connect: bool
    """ When bone has a parent, bone's head is stuck to the parent's tail

    :type: bool
    """

    use_cyclic_offset: bool
    """ When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)

    :type: bool
    """

    use_deform: bool
    """ Enable Bone to deform geometry

    :type: bool
    """

    use_endroll_as_inroll: bool
    """ Use Roll Out of parent bone as Roll In of its children

    :type: bool
    """

    use_envelope_multiply: bool
    """ When deforming bone, multiply effects of Vertex Group weights with Envelope influence

    :type: bool
    """

    use_inherit_rotation: bool
    """ Bone inherits rotation or scale from parent bone

    :type: bool
    """

    use_inherit_scale: bool
    """ Bone inherits scaling from parent bone

    :type: bool
    """

    use_local_location: bool
    """ Bone location is set in local space

    :type: bool
    """

    use_relative_parent: bool
    """ Object children will use relative transform, like deform

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character
(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.
(readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.
(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.
(readonly)"""

    length: typing.Any
    """ The distance from head to tail,
when set the head is moved to fit the length."""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent
(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)
(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.
(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.
(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.
(readonly)"""

    def evaluate_envelope(self, point: collections.abc.Iterable[float] | None) -> float:
        """Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: collections.abc.Iterable[float] | None
        :return: Factor, Envelope factor
        :rtype: float
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoneGroup(bpy_struct):
    """Groups of Pose Channels (Bones)"""

    color_set: typing.Literal[
        "DEFAULT",
        "THEME01",
        "THEME02",
        "THEME03",
        "THEME04",
        "THEME05",
        "THEME06",
        "THEME07",
        "THEME08",
        "THEME09",
        "THEME10",
        "THEME11",
        "THEME12",
        "THEME13",
        "THEME14",
        "THEME15",
        "THEME16",
        "THEME17",
        "THEME18",
        "THEME19",
        "THEME20",
        "CUSTOM",
    ]
    """ Custom color set to use

    :type: typing.Literal['DEFAULT','THEME01','THEME02','THEME03','THEME04','THEME05','THEME06','THEME07','THEME08','THEME09','THEME10','THEME11','THEME12','THEME13','THEME14','THEME15','THEME16','THEME17','THEME18','THEME19','THEME20','CUSTOM']
    """

    colors: ThemeBoneColorSet
    """ Copy of the colors associated with the group's color set

    :type: ThemeBoneColorSet
    """

    is_custom_color_set: bool
    """ Color set is user-defined instead of a fixed theme color set

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BoolProperty(Property, bpy_struct):
    """RNA boolean property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: bool
    """ Default value for this number

    :type: bool
    """

    default_array: bpy_prop_array[bool]
    """ Default value for this array

    :type: bpy_prop_array[bool]
    """

    is_array: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BooleanModifier(Modifier, bpy_struct):
    """Boolean operations modifier"""

    debug_options: set[typing.Literal["SEPARATE", "NO_DISSOLVE", "NO_CONNECT_REGIONS"]]
    """ Debugging options, only when started with '-d'

    :type: set[typing.Literal['SEPARATE','NO_DISSOLVE','NO_CONNECT_REGIONS']]
    """

    double_threshold: float
    """ Threshold for checking overlapping geometry

    :type: float
    """

    object: Object | None
    """ Mesh object to use for Boolean operation

    :type: Object | None
    """

    operation: typing.Literal["INTERSECT", "UNION", "DIFFERENCE"]
    """ 

    :type: typing.Literal['INTERSECT','UNION','DIFFERENCE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BrightContrastModifier(SequenceModifier, bpy_struct):
    """Bright/contrast modifier data for sequence strip"""

    bright: float
    """ Adjust the luminosity of the colors

    :type: float
    """

    contrast: float
    """ Adjust the difference in luminosity between pixels

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Brush(ID, bpy_struct):
    """Brush data-block for storing brush settings for painting and sculpting"""

    auto_smooth_factor: float
    """ Amount of smoothing to automatically apply to each stroke

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUB",
        "MUL",
        "LIGHTEN",
        "DARKEN",
        "ERASE_ALPHA",
        "ADD_ALPHA",
        "OVERLAY",
        "HARDLIGHT",
        "COLORBURN",
        "LINEARBURN",
        "COLORDODGE",
        "SCREEN",
        "SOFTLIGHT",
        "PINLIGHT",
        "VIVIDLIGHT",
        "LINEARLIGHT",
        "DIFFERENCE",
        "EXCLUSION",
        "HUE",
        "SATURATION",
        "LUMINOSITY",
        "COLOR",
    ]
    """ Brush blending mode

    :type: typing.Literal['MIX','ADD','SUB','MUL','LIGHTEN','DARKEN','ERASE_ALPHA','ADD_ALPHA','OVERLAY','HARDLIGHT','COLORBURN','LINEARBURN','COLORDODGE','SCREEN','SOFTLIGHT','PINLIGHT','VIVIDLIGHT','LINEARLIGHT','DIFFERENCE','EXCLUSION','HUE','SATURATION','LUMINOSITY','COLOR']
    """

    blur_kernel_radius: int
    """ Radius of kernel used for soften and sharpen in pixels

    :type: int
    """

    blur_mode: typing.Literal["BOX", "GAUSSIAN"]
    """ 

    :type: typing.Literal['BOX','GAUSSIAN']
    """

    brush_capabilities: BrushCapabilities
    """ Brush's capabilities

    :type: BrushCapabilities
    """

    clone_alpha: float
    """ Opacity of clone image display

    :type: float
    """

    clone_image: Image | None
    """ Image for clone tool

    :type: Image | None
    """

    clone_offset: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    crease_pinch_factor: float
    """ How much the crease brush pinches

    :type: float
    """

    cursor_color_add: bpy_prop_array[float]
    """ Color of cursor when adding

    :type: bpy_prop_array[float]
    """

    cursor_color_subtract: bpy_prop_array[float]
    """ Color of cursor when subtracting

    :type: bpy_prop_array[float]
    """

    cursor_overlay_alpha: int
    """ 

    :type: int
    """

    curve: CurveMapping
    """ Editable falloff curve

    :type: CurveMapping
    """

    direction: typing.Literal["ADD", "SUBTRACT"]
    """ 

    :type: typing.Literal['ADD','SUBTRACT']
    """

    falloff_angle: float
    """ Paint most on faces pointing towards the view according to this angle

    :type: float
    """

    fill_threshold: float
    """ Threshold above which filling is not propagated

    :type: float
    """

    grad_spacing: int
    """ Spacing before brush gradient goes full circle

    :type: int
    """

    gradient: ColorRamp
    """ 

    :type: ColorRamp
    """

    gradient_fill_mode: typing.Literal["LINEAR", "RADIAL"]
    """ 

    :type: typing.Literal['LINEAR','RADIAL']
    """

    gradient_stroke_mode: typing.Literal["PRESSURE", "SPACING_REPEAT", "SPACING_CLAMP"]
    """ 

    :type: typing.Literal['PRESSURE','SPACING_REPEAT','SPACING_CLAMP']
    """

    height: float
    """ Affectable height of brush (layer height for layer tool, i.e.)

    :type: float
    """

    icon_filepath: str
    """ File path to brush icon

    :type: str
    """

    image_paint_capabilities: ImapaintToolCapabilities
    """ Brush's capabilities in image paint mode

    :type: ImapaintToolCapabilities
    """

    image_tool: typing.Literal["DRAW", "SOFTEN", "SMEAR", "CLONE", "FILL", "MASK"]
    """ 

    :type: typing.Literal['DRAW','SOFTEN','SMEAR','CLONE','FILL','MASK']
    """

    jitter: float
    """ Jitter the position of the brush while painting

    :type: float
    """

    jitter_absolute: int
    """ Jitter the position of the brush in pixels while painting

    :type: int
    """

    mask_overlay_alpha: int
    """ 

    :type: int
    """

    mask_stencil_dimension: bpy_prop_array[float]
    """ Dimensions of mask stencil in viewport

    :type: bpy_prop_array[float]
    """

    mask_stencil_pos: bpy_prop_array[float]
    """ Position of mask stencil in viewport

    :type: bpy_prop_array[float]
    """

    mask_texture: Texture | None
    """ 

    :type: Texture | None
    """

    mask_texture_slot: BrushTextureSlot
    """ 

    :type: BrushTextureSlot
    """

    mask_tool: typing.Literal["DRAW", "SMOOTH"]
    """ 

    :type: typing.Literal['DRAW','SMOOTH']
    """

    normal_weight: float
    """ How much grab will pull vertexes out of surface during a grab

    :type: float
    """

    paint_curve: PaintCurve | None
    """ Active Paint Curve

    :type: PaintCurve | None
    """

    plane_offset: float
    """ Adjust plane on which the brush acts towards or away from the object surface

    :type: float
    """

    plane_trim: float
    """ If a vertex is further away from offset plane than this, then it is not affected

    :type: float
    """

    rake_factor: float
    """ How much grab will follow cursor rotation

    :type: float
    """

    rate: float
    """ Interval between paints for Airbrush

    :type: float
    """

    sculpt_capabilities: SculptToolCapabilities
    """ Brush's capabilities in sculpt mode

    :type: SculptToolCapabilities
    """

    sculpt_plane: typing.Literal["AREA", "VIEW", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['AREA','VIEW','X','Y','Z']
    """

    sculpt_tool: typing.Literal[
        "BLOB",
        "CLAY",
        "CLAY_STRIPS",
        "CREASE",
        "DRAW",
        "FILL",
        "FLATTEN",
        "GRAB",
        "INFLATE",
        "LAYER",
        "MASK",
        "NUDGE",
        "PINCH",
        "ROTATE",
        "SCRAPE",
        "SIMPLIFY",
        "SMOOTH",
        "SNAKE_HOOK",
        "THUMB",
    ]
    """ 

    :type: typing.Literal['BLOB','CLAY','CLAY_STRIPS','CREASE','DRAW','FILL','FLATTEN','GRAB','INFLATE','LAYER','MASK','NUDGE','PINCH','ROTATE','SCRAPE','SIMPLIFY','SMOOTH','SNAKE_HOOK','THUMB']
    """

    secondary_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    sharp_threshold: float
    """ Threshold below which, no sharpening is done

    :type: float
    """

    size: int
    """ Radius of the brush in pixels

    :type: int
    """

    smooth_stroke_factor: float
    """ Higher values give a smoother stroke

    :type: float
    """

    smooth_stroke_radius: int
    """ Minimum distance from last point before stroke continues

    :type: int
    """

    spacing: int
    """ Spacing between brush daubs as a percentage of brush diameter

    :type: int
    """

    stencil_dimension: bpy_prop_array[float]
    """ Dimensions of stencil in viewport

    :type: bpy_prop_array[float]
    """

    stencil_pos: bpy_prop_array[float]
    """ Position of stencil in viewport

    :type: bpy_prop_array[float]
    """

    strength: float
    """ How powerful the effect of the brush is when applied

    :type: float
    """

    stroke_method: typing.Literal[
        "DOTS", "DRAG_DOT", "SPACE", "AIRBRUSH", "ANCHORED", "LINE", "CURVE"
    ]
    """ 

    :type: typing.Literal['DOTS','DRAG_DOT','SPACE','AIRBRUSH','ANCHORED','LINE','CURVE']
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    texture_overlay_alpha: int
    """ 

    :type: int
    """

    texture_sample_bias: float
    """ Value added to texture samples

    :type: float
    """

    texture_slot: BrushTextureSlot
    """ 

    :type: BrushTextureSlot
    """

    unprojected_radius: float
    """ Radius of brush in Blender units

    :type: float
    """

    use_accumulate: bool
    """ Accumulate stroke daubs on top of each other

    :type: bool
    """

    use_adaptive_space: bool
    """ Space daubs according to surface orientation instead of screen space

    :type: bool
    """

    use_airbrush: bool
    """ Keep applying paint effect while holding mouse (spray)

    :type: bool
    """

    use_alpha: bool
    """ When this is disabled, lock alpha while painting

    :type: bool
    """

    use_anchor: bool
    """ Keep the brush anchored to the initial location

    :type: bool
    """

    use_cursor_overlay: bool
    """ Show cursor in viewport

    :type: bool
    """

    use_cursor_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_curve: bool
    """ Define the stroke curve with a bezier curve. Dabs are separated according to spacing

    :type: bool
    """

    use_custom_icon: bool
    """ Set the brush icon from an image file

    :type: bool
    """

    use_edge_to_edge: bool
    """ Drag anchor brush from edge-to-edge

    :type: bool
    """

    use_frontface: bool
    """ Brush only affects vertexes that face the viewer

    :type: bool
    """

    use_frontface_falloff: bool
    """ Blend brush influence by how much they face the front

    :type: bool
    """

    use_gradient: bool
    """ Use Gradient by utilizing a sampling method

    :type: bool
    """

    use_inverse_smooth_pressure: bool
    """ Lighter pressure causes more smoothing to be applied

    :type: bool
    """

    use_line: bool
    """ Draw a line with dabs separated according to spacing

    :type: bool
    """

    use_locked_size: bool
    """ When locked brush stays same size relative to object; when unlocked brush size is given in pixels

    :type: bool
    """

    use_offset_pressure: bool
    """ Enable tablet pressure sensitivity for offset

    :type: bool
    """

    use_original_normal: bool
    """ When locked keep using normal of surface where stroke was initiated

    :type: bool
    """

    use_paint_image: bool
    """ Use this brush in texture paint mode

    :type: bool
    """

    use_paint_sculpt: bool
    """ Use this brush in sculpt mode

    :type: bool
    """

    use_paint_vertex: bool
    """ Use this brush in vertex paint mode

    :type: bool
    """

    use_paint_weight: bool
    """ Use this brush in weight paint mode

    :type: bool
    """

    use_persistent: bool
    """ Sculpt on a persistent layer of the mesh

    :type: bool
    """

    use_plane_trim: bool
    """ Enable Plane Trim

    :type: bool
    """

    use_pressure_jitter: bool
    """ Enable tablet pressure sensitivity for jitter

    :type: bool
    """

    use_pressure_masking: typing.Literal["NONE", "RAMP", "CUTOFF"]
    """ Pen pressure makes texture influence smaller

    :type: typing.Literal['NONE','RAMP','CUTOFF']
    """

    use_pressure_size: bool
    """ Enable tablet pressure sensitivity for size

    :type: bool
    """

    use_pressure_spacing: bool
    """ Enable tablet pressure sensitivity for spacing

    :type: bool
    """

    use_pressure_strength: bool
    """ Enable tablet pressure sensitivity for strength

    :type: bool
    """

    use_primary_overlay: bool
    """ Show texture in viewport

    :type: bool
    """

    use_primary_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_projected: bool
    """ Apply brush influence in 2D circle instead of a sphere

    :type: bool
    """

    use_relative_jitter: bool
    """ Jittering happens in screen space, not relative to brush size

    :type: bool
    """

    use_restore_mesh: bool
    """ Allow a single dot to be carefully positioned

    :type: bool
    """

    use_secondary_overlay: bool
    """ Show texture in viewport

    :type: bool
    """

    use_secondary_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_smooth_stroke: bool
    """ Brush lags behind mouse and follows a smoother path

    :type: bool
    """

    use_space: bool
    """ Limit brush application to the distance specified by spacing

    :type: bool
    """

    use_space_attenuation: bool
    """ Automatically adjust strength to give consistent results for different spacings

    :type: bool
    """

    vertex_tool: typing.Literal[
        "MIX",
        "ADD",
        "SUB",
        "MUL",
        "BLUR",
        "LIGHTEN",
        "DARKEN",
        "AVERAGE",
        "SMEAR",
        "COLORDODGE",
        "DIFFERENCE",
        "SCREEN",
        "HARDLIGHT",
        "OVERLAY",
        "SOFTLIGHT",
        "EXCLUSION",
        "LUMINOCITY",
        "SATURATION",
        "HUE",
        "ERASE_ALPHA",
        "ADD_ALPHA",
    ]
    """ Brush blending mode

    :type: typing.Literal['MIX','ADD','SUB','MUL','BLUR','LIGHTEN','DARKEN','AVERAGE','SMEAR','COLORDODGE','DIFFERENCE','SCREEN','HARDLIGHT','OVERLAY','SOFTLIGHT','EXCLUSION','LUMINOCITY','SATURATION','HUE','ERASE_ALPHA','ADD_ALPHA']
    """

    weight: float
    """ Vertex weight when brush is applied

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BrushCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current brush"""

    has_overlay: bool
    """ 

    :type: bool
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_smooth_stroke: bool
    """ 

    :type: bool
    """

    has_spacing: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BrushTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Brush data-block"""

    angle: float
    """ Brush texture rotation

    :type: float
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_texture_angle: bool
    """ 

    :type: bool
    """

    has_texture_angle_source: bool
    """ 

    :type: bool
    """

    map_mode: typing.Literal[
        "VIEW_PLANE", "AREA_PLANE", "TILED", "3D", "RANDOM", "STENCIL"
    ]
    """ 

    :type: typing.Literal['VIEW_PLANE','AREA_PLANE','TILED','3D','RANDOM','STENCIL']
    """

    mask_map_mode: typing.Literal["VIEW_PLANE", "TILED", "RANDOM", "STENCIL"]
    """ 

    :type: typing.Literal['VIEW_PLANE','TILED','RANDOM','STENCIL']
    """

    random_angle: float
    """ Brush texture random angle

    :type: float
    """

    tex_paint_map_mode: typing.Literal["VIEW_PLANE", "TILED", "3D", "RANDOM", "STENCIL"]
    """ 

    :type: typing.Literal['VIEW_PLANE','TILED','3D','RANDOM','STENCIL']
    """

    use_rake: bool
    """ 

    :type: bool
    """

    use_random: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class BuildModifier(Modifier, bpy_struct):
    """Build effect modifier"""

    frame_duration: float
    """ Total time the build effect requires

    :type: float
    """

    frame_start: float
    """ Start frame of the effect

    :type: float
    """

    seed: int
    """ Seed for random if used

    :type: int
    """

    use_random_order: bool
    """ Randomize the faces or edges during build

    :type: bool
    """

    use_reverse: bool
    """ Deconstruct the mesh instead of building it

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CLIP_UL_tracking_objects(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CacheFile(ID, bpy_struct):
    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    forward_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ 

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    frame: float
    """ The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence

    :type: float
    """

    frame_offset: float
    """ Subtracted from the current frame to use for looking up the data in the cache file, or to determine which file to use in a file sequence

    :type: float
    """

    is_sequence: bool
    """ Whether the cache is separated in a series of files

    :type: bool
    """

    object_paths: AlembicObjectPaths
    """ Paths of the objects inside the Alembic archive

    :type: AlembicObjectPaths
    """

    override_frame: bool
    """ Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame

    :type: bool
    """

    scale: float
    """ Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)

    :type: float
    """

    up_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ 

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Camera(ID, bpy_struct):
    """Camera data-block for storing camera settings"""

    angle: float
    """ Camera lens field of view

    :type: float
    """

    angle_x: float
    """ Camera lens horizontal field of view

    :type: float
    """

    angle_y: float
    """ Camera lens vertical field of view

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    clip_end: float
    """ Camera far clipping distance

    :type: float
    """

    clip_start: float
    """ Camera near clipping distance

    :type: float
    """

    cycles: CyclesCameraSettings
    """ Cycles camera settings

    :type: CyclesCameraSettings
    """

    dof_distance: float
    """ Distance to the focus point for depth of field

    :type: float
    """

    dof_object: Object | None
    """ Use this object to define the depth of field focal point

    :type: Object | None
    """

    draw_size: float
    """ Apparent size of the Camera object in the 3D View

    :type: float
    """

    gpu_dof: GPUDOFSettings
    """ 

    :type: GPUDOFSettings
    """

    lens: float
    """ Perspective Camera lens value in millimeters

    :type: float
    """

    lens_unit: typing.Literal["MILLIMETERS", "FOV"]
    """ Unit to edit lens in for the user interface

    :type: typing.Literal['MILLIMETERS','FOV']
    """

    lod_factor: float
    """ The factor applied to distance computed in Lod

    :type: float
    """

    ortho_scale: float
    """ Orthographic Camera scale (similar to zoom)

    :type: float
    """

    override_culling: bool
    """ Use only this camera for scene culling in Game Engine

    :type: bool
    """

    passepartout_alpha: float
    """ Opacity (alpha) of the darkened overlay in Camera view

    :type: float
    """

    sensor_fit: typing.Literal["AUTO", "HORIZONTAL", "VERTICAL"]
    """ Method to fit image and field of view angle inside the sensor

    :type: typing.Literal['AUTO','HORIZONTAL','VERTICAL']
    """

    sensor_height: float
    """ Vertical size of the image sensor area in millimeters

    :type: float
    """

    sensor_width: float
    """ Horizontal size of the image sensor area in millimeters

    :type: float
    """

    shift_x: float
    """ Camera horizontal shift

    :type: float
    """

    shift_y: float
    """ Camera vertical shift

    :type: float
    """

    show_frustum: bool
    """ Show a visualization of frustum in Game Engine

    :type: bool
    """

    show_guide: set[
        typing.Literal[
            "CENTER",
            "CENTER_DIAGONAL",
            "THIRDS",
            "GOLDEN",
            "GOLDEN_TRIANGLE_A",
            "GOLDEN_TRIANGLE_B",
            "HARMONY_TRIANGLE_A",
            "HARMONY_TRIANGLE_B",
        ]
    ]
    """ Draw overlay

    :type: set[typing.Literal['CENTER','CENTER_DIAGONAL','THIRDS','GOLDEN','GOLDEN_TRIANGLE_A','GOLDEN_TRIANGLE_B','HARMONY_TRIANGLE_A','HARMONY_TRIANGLE_B']]
    """

    show_limits: bool
    """ Draw the clipping range and focus point on the camera

    :type: bool
    """

    show_mist: bool
    """ Draw a line from the Camera to indicate the mist area

    :type: bool
    """

    show_name: bool
    """ Show the active Camera's name in Camera view

    :type: bool
    """

    show_passepartout: bool
    """ Show a darkened overlay outside the image area in Camera view

    :type: bool
    """

    show_safe_areas: bool
    """ Show TV title safe and action safe areas in Camera view

    :type: bool
    """

    show_safe_center: bool
    """ Show safe areas to fit content in a different aspect ratio

    :type: bool
    """

    show_sensor: bool
    """ Show sensor size (film gate) in Camera view

    :type: bool
    """

    stereo: CameraStereoData
    """ 

    :type: CameraStereoData
    """

    type: typing.Literal["PERSP", "ORTHO", "PANO"]
    """ Camera types

    :type: typing.Literal['PERSP','ORTHO','PANO']
    """

    use_object_activity_culling: bool
    """ Enable object activity culling with this camera

    :type: bool
    """

    use_viewport: bool
    """ Show a visualization of frustum in Game Engine

    :type: bool
    """

    viewport: GameCameraViewportData
    """ 

    :type: GameCameraViewportData
    """

    def view_frame(self, scene: Scene | None = None):
        """Return 4 points for the cameras frame (before object transformation)

                :param scene: Scene to use for aspect calculation, when omitted 1:1 aspect is used
                :type scene: Scene | None
                :return: result_1, Result, float array of 3 items in [-inf, inf]

        result_2, Result, float array of 3 items in [-inf, inf]

        result_3, Result, float array of 3 items in [-inf, inf]

        result_4, Result, float array of 3 items in [-inf, inf]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CameraActuator(Actuator, bpy_struct):
    axis: typing.Literal["POS_X", "POS_Y", "NEG_X", "NEG_Y"]
    """ Axis the Camera will try to get behind

    :type: typing.Literal['POS_X','POS_Y','NEG_X','NEG_Y']
    """

    damping: float
    """ Strength of the constraint that drives the camera behind the target

    :type: float
    """

    height: float
    """ 

    :type: float
    """

    max: float
    """ 

    :type: float
    """

    min: float
    """ 

    :type: float
    """

    object: Object | None
    """ Look at this Object

    :type: Object | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CameraSolverConstraint(Constraint, bpy_struct):
    """Lock motion to the reconstructed camera movement"""

    clip: MovieClip | None
    """ Movie Clip to get tracking data from

    :type: MovieClip | None
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CameraStereoData(bpy_struct):
    """Stereoscopy settings for a Camera data-block"""

    convergence_distance: float
    """ The converge point for the stereo cameras (often the distance between a projector and the projection screen)

    :type: float
    """

    convergence_mode: typing.Literal["OFFAXIS", "PARALLEL", "TOE"]
    """ 

    :type: typing.Literal['OFFAXIS','PARALLEL','TOE']
    """

    interocular_distance: float
    """ Set the distance between the eyes - the stereo plane distance / 30 should be fine

    :type: float
    """

    pivot: typing.Literal["LEFT", "RIGHT", "CENTER"]
    """ 

    :type: typing.Literal['LEFT','RIGHT','CENTER']
    """

    pole_merge_angle_from: float
    """ Angle at which interocular distance starts to fade to 0

    :type: float
    """

    pole_merge_angle_to: float
    """ Angle at which interocular distance is 0

    :type: float
    """

    use_pole_merge: bool
    """ Fade interocular distance to 0 after the given cutoff angle

    :type: bool
    """

    use_spherical_stereo: bool
    """ Render every pixel rotating the camera around the middle of the interocular distance

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CastModifier(Modifier, bpy_struct):
    """Modifier to cast to other shapes"""

    cast_type: typing.Literal["SPHERE", "CYLINDER", "CUBOID"]
    """ Target object shape

    :type: typing.Literal['SPHERE','CYLINDER','CUBOID']
    """

    factor: float
    """ 

    :type: float
    """

    object: Object | None
    """ Control object: if available, its location determines the center of the effect

    :type: Object | None
    """

    radius: float
    """ Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)

    :type: float
    """

    size: float
    """ Size of projection shape (leave as 0 for auto)

    :type: float
    """

    use_radius_as_size: bool
    """ Use radius as size of projection shape (0 = auto)

    :type: bool
    """

    use_transform: bool
    """ Use object transform to control projection shape

    :type: bool
    """

    use_x: bool
    """ 

    :type: bool
    """

    use_y: bool
    """ 

    :type: bool
    """

    use_z: bool
    """ 

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ChildOfConstraint(Constraint, bpy_struct):
    """Create constraint-based parent-child relationship"""

    inverse_matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Transformation matrix to apply before

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_location_x: bool
    """ Use X Location of Parent

    :type: bool
    """

    use_location_y: bool
    """ Use Y Location of Parent

    :type: bool
    """

    use_location_z: bool
    """ Use Z Location of Parent

    :type: bool
    """

    use_rotation_x: bool
    """ Use X Rotation of Parent

    :type: bool
    """

    use_rotation_y: bool
    """ Use Y Rotation of Parent

    :type: bool
    """

    use_rotation_z: bool
    """ Use Z Rotation of Parent

    :type: bool
    """

    use_scale_x: bool
    """ Use X Scale of Parent

    :type: bool
    """

    use_scale_y: bool
    """ Use Y Scale of Parent

    :type: bool
    """

    use_scale_z: bool
    """ Use Z Scale of Parent

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ChildParticle(bpy_struct):
    """Child particle interpolated from simulated or edited particles"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ClampToConstraint(Constraint, bpy_struct):
    """Constrain an object's location to the nearest point along the target path"""

    main_axis: typing.Literal["CLAMPTO_AUTO", "CLAMPTO_X", "CLAMPTO_Y", "CLAMPTO_Z"]
    """ Main axis of movement

    :type: typing.Literal['CLAMPTO_AUTO','CLAMPTO_X','CLAMPTO_Y','CLAMPTO_Z']
    """

    target: Object | None
    """ Target Object (Curves only)

    :type: Object | None
    """

    use_cyclic: bool
    """ Treat curve as cyclic curve (no clamping to curve bounding box)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ClothCollisionSettings(bpy_struct):
    """Cloth simulation settings for self collision and collision with other objects"""

    collision_quality: int
    """ How many collision iterations should be done. (higher is better quality but slower)

    :type: int
    """

    damping: float
    """ Amount of velocity lost on collision

    :type: float
    """

    distance_min: float
    """ Minimum distance between collision objects before collision response takes in

    :type: float
    """

    distance_repel: float
    """ Maximum distance to apply repulsion force, must be greater than minimum distance

    :type: float
    """

    friction: float
    """ Friction force if a collision happened (higher = less movement)

    :type: float
    """

    group: Group | None
    """ Limit colliders to this Group

    :type: Group | None
    """

    repel_force: float
    """ Repulsion force to apply on cloth when close to colliding

    :type: float
    """

    self_collision_quality: int
    """ How many self collision iterations should be done (higher is better quality but slower)

    :type: int
    """

    self_distance_min: float
    """ 0.5 means no distance at all, 1.0 is maximum distance

    :type: float
    """

    self_friction: float
    """ Friction/damping with self contact

    :type: float
    """

    use_collision: bool
    """ Enable collisions with other objects

    :type: bool
    """

    use_self_collision: bool
    """ Enable self collisions

    :type: bool
    """

    vertex_group_self_collisions: str
    """ Vertex group to define vertices which are not used during self collisions

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ClothModifier(Modifier, bpy_struct):
    """Cloth simulation modifier"""

    collision_settings: ClothCollisionSettings
    """ 

    :type: ClothCollisionSettings
    """

    hair_grid_max: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    hair_grid_min: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    hair_grid_resolution: bpy_prop_array[int]
    """ 

    :type: bpy_prop_array[int]
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    settings: ClothSettings
    """ 

    :type: ClothSettings
    """

    solver_result: ClothSolverResult
    """ 

    :type: ClothSolverResult
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ClothSettings(bpy_struct):
    """Cloth simulation settings for an object"""

    air_damping: float
    """ Air has normally some thickness which slows falling things down

    :type: float
    """

    bending_damping: float
    """ Damping of bending motion

    :type: float
    """

    bending_stiffness: float
    """ Wrinkle coefficient (higher = less smaller but more big wrinkles)

    :type: float
    """

    bending_stiffness_max: float
    """ Maximum bending stiffness value

    :type: float
    """

    collider_friction: float
    """ 

    :type: float
    """

    density_strength: float
    """ Influence of target density on the simulation

    :type: float
    """

    density_target: float
    """ Maximum density of hair

    :type: float
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    goal_default: float
    """ Default Goal (vertex target position) value, when no Vertex Group used

    :type: float
    """

    goal_friction: float
    """ Goal (vertex target position) friction

    :type: float
    """

    goal_max: float
    """ Goal maximum, vertex group weights are scaled to match this range

    :type: float
    """

    goal_min: float
    """ Goal minimum, vertex group weights are scaled to match this range

    :type: float
    """

    goal_spring: float
    """ Goal (vertex target position) spring stiffness

    :type: float
    """

    gravity: bpy_prop_array[float]
    """ Gravity or external force vector

    :type: bpy_prop_array[float]
    """

    internal_friction: float
    """ 

    :type: float
    """

    mass: float
    """ Mass of cloth material

    :type: float
    """

    pin_stiffness: float
    """ Pin (vertex target position) spring stiffness

    :type: float
    """

    quality: int
    """ Quality of the simulation in steps per frame (higher is better quality but slower)

    :type: int
    """

    rest_shape_key: ShapeKey | None
    """ Shape key to use the rest spring lengths from

    :type: ShapeKey | None
    """

    sewing_force_max: float
    """ Maximum sewing force

    :type: float
    """

    shrink_max: float
    """ Max amount to shrink cloth by

    :type: float
    """

    shrink_min: float
    """ Min amount to shrink cloth by

    :type: float
    """

    spring_damping: float
    """ Damping of cloth velocity (higher = more smooth, less jiggling)

    :type: float
    """

    structural_stiffness: float
    """ Overall stiffness of structure

    :type: float
    """

    structural_stiffness_max: float
    """ Maximum structural stiffness value

    :type: float
    """

    time_scale: float
    """ Cloth speed is multiplied by this value

    :type: float
    """

    use_dynamic_mesh: bool
    """ Make simulation respect deformations in the base mesh

    :type: bool
    """

    use_pin_cloth: bool
    """ Enable pinning of cloth vertices to other objects/positions

    :type: bool
    """

    use_sewing_springs: bool
    """ Pulls loose edges together

    :type: bool
    """

    use_stiffness_scale: bool
    """ If enabled, stiffness can be scaled along a weight painted vertex group

    :type: bool
    """

    vel_damping: float
    """ Damp velocity to help cloth reach the resting position faster (1.0 = no damping, 0.0 = fully dampened)

    :type: float
    """

    vertex_group_bending: str
    """ Vertex group for fine control over bending stiffness

    :type: str
    """

    vertex_group_mass: str
    """ Vertex Group for pinning of vertices

    :type: str
    """

    vertex_group_shrink: str
    """ Vertex Group for shrinking cloth

    :type: str
    """

    vertex_group_structural_stiffness: str
    """ Vertex group for fine control over structural stiffness

    :type: str
    """

    voxel_cell_size: float
    """ Size of the voxel grid cells for interaction effects

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ClothSolverResult(bpy_struct):
    """Result of cloth solver iteration"""

    avg_error: float
    """ Average error during substeps

    :type: float
    """

    avg_iterations: float
    """ Average iterations during substeps

    :type: float
    """

    max_error: float
    """ Maximum error during substeps

    :type: float
    """

    max_iterations: int
    """ Maximum iterations during substeps

    :type: int
    """

    min_error: float
    """ Minimum error during substeps

    :type: float
    """

    min_iterations: int
    """ Minimum iterations during substeps

    :type: int
    """

    status: set[
        typing.Literal["SUCCESS", "NUMERICAL_ISSUE", "NO_CONVERGENCE", "INVALID_INPUT"]
    ]
    """ Status of the solver iteration

    :type: set[typing.Literal['SUCCESS','NUMERICAL_ISSUE','NO_CONVERGENCE','INVALID_INPUT']]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CloudsTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    cloud_type: typing.Literal["GRAYSCALE", "COLOR"]
    """ Determine whether Noise returns grayscale or RGB values

    :type: typing.Literal['GRAYSCALE','COLOR']
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_depth: int
    """ Depth of the cloud calculation

    :type: int
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: typing.Literal["SOFT_NOISE", "HARD_NOISE"]
    """ 

    :type: typing.Literal['SOFT_NOISE','HARD_NOISE']
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CollectionProperty(Property, bpy_struct):
    """RNA collection property to define lists, arrays and mappings"""

    fixed_type: Struct
    """ Fixed pointer type, empty if variable type

    :type: Struct
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CollisionModifier(Modifier, bpy_struct):
    """Collision modifier defining modifier stack position used for collision"""

    settings: CollisionSettings
    """ 

    :type: CollisionSettings
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CollisionSensor(Sensor, bpy_struct):
    """Sensor to detect objects colliding with the current object, with more settings than the Touch sensor"""

    material: str
    """ Only look for objects with this material (blank = all objects)

    :type: str
    """

    property: str
    """ Only look for objects with this property (blank = all objects)

    :type: str
    """

    use_material: bool
    """ Toggle collision on material or property

    :type: bool
    """

    use_pulse: bool
    """ Change to the set of colliding objects generates pulse

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CollisionSettings(bpy_struct):
    """Collision settings for object in physics simulation"""

    absorption: float
    """ How much of effector force gets lost during collision with this object (in percent)

    :type: float
    """

    damping: float
    """ Amount of damping during collision

    :type: float
    """

    damping_factor: float
    """ Amount of damping during particle collision

    :type: float
    """

    damping_random: float
    """ Random variation of damping

    :type: float
    """

    friction_factor: float
    """ Amount of friction during particle collision

    :type: float
    """

    friction_random: float
    """ Random variation of friction

    :type: float
    """

    permeability: float
    """ Chance that the particle will pass through the mesh

    :type: float
    """

    stickiness: float
    """ Amount of stickiness to surface collision

    :type: float
    """

    thickness_inner: float
    """ Inner face thickness (only used by softbodies)

    :type: float
    """

    thickness_outer: float
    """ Outer face thickness

    :type: float
    """

    use: bool
    """ Enable this objects as a collider for physics systems

    :type: bool
    """

    use_particle_kill: bool
    """ Kill collided particles

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorBalanceModifier(SequenceModifier, bpy_struct):
    """Color balance modifier for sequence strip"""

    color_balance: SequenceColorBalanceData
    """ 

    :type: SequenceColorBalanceData
    """

    color_multiply: float
    """ Multiply the intensity of each pixel

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorManagedDisplaySettings(bpy_struct):
    """Color management specific to display device"""

    display_device: str
    """ Display device name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorManagedInputColorspaceSettings(bpy_struct):
    """Input color space settings"""

    name: typing.Literal[
        "Filmic Log", "Linear", "Linear ACES", "Non-Color", "Raw", "sRGB", "VD16", "XYZ"
    ]
    """ Color space of the image or movie on disk

    :type: typing.Literal['Filmic Log','Linear','Linear ACES','Non-Color','Raw','sRGB','VD16','XYZ']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorManagedSequencerColorspaceSettings(bpy_struct):
    """Input color space settings"""

    name: typing.Literal[
        "Filmic Log", "Linear", "Linear ACES", "Non-Color", "Raw", "sRGB", "VD16", "XYZ"
    ]
    """ Color space that the sequencer operates in

    :type: typing.Literal['Filmic Log','Linear','Linear ACES','Non-Color','Raw','sRGB','VD16','XYZ']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorManagedViewSettings(bpy_struct):
    """Color management settings used for displaying images on the display"""

    curve_mapping: CurveMapping
    """ Color curve mapping applied before display transform

    :type: CurveMapping
    """

    exposure: float
    """ Exposure (stops) applied before display transform

    :type: float
    """

    gamma: float
    """ Amount of gamma modification applied after display transform

    :type: float
    """

    look: typing.Literal["NONE"]
    """ Additional transform applied before view transform for an artistic needs

    :type: typing.Literal['NONE']
    """

    use_curve_mapping: bool
    """ Use RGB curved for pre-display transformation

    :type: bool
    """

    view_transform: typing.Literal["NONE"]
    """ View used when converting image to a display space

    :type: typing.Literal['NONE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorMapping(bpy_struct):
    """Color mapping settings"""

    blend_color: bpy_prop_array[float]
    """ Blend color to mix with texture output color

    :type: bpy_prop_array[float]
    """

    blend_factor: float
    """ 

    :type: float
    """

    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "SCREEN",
        "OVERLAY",
        "DIFFERENCE",
        "DIVIDE",
        "DARKEN",
        "LIGHTEN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Mode used to mix with texture output color

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','SCREEN','OVERLAY','DIFFERENCE','DIVIDE','DARKEN','LIGHTEN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    brightness: float
    """ Adjust the brightness of the texture

    :type: float
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    contrast: float
    """ Adjust the contrast of the texture

    :type: float
    """

    saturation: float
    """ Adjust the saturation of colors in the texture

    :type: float
    """

    use_color_ramp: bool
    """ Toggle color ramp operations

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorMixSequence(EffectSequence, Sequence, bpy_struct):
    """Color Mix Sequence"""

    blend_effect: typing.Literal[
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "LIGHTEN",
        "DARKEN",
        "SCREEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "LINEAR_BURN",
        "SOFT_LIGHT",
        "HARD_LIGHT",
        "PIN_LIGHT",
        "LINEAR_LIGHT",
        "VIVID_LIGHT",
        "COLOR",
        "HUE",
        "SATURATION",
        "VALUE",
        "DIFFERENCE",
        "EXCLUSION",
    ]
    """ Method for controlling how the strip combines with other strips

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','LIGHTEN','DARKEN','SCREEN','OVERLAY','DODGE','BURN','LINEAR_BURN','SOFT_LIGHT','HARD_LIGHT','PIN_LIGHT','LINEAR_LIGHT','VIVID_LIGHT','COLOR','HUE','SATURATION','VALUE','DIFFERENCE','EXCLUSION']
    """

    factor: float
    """ Percentage of how much the strip's colors affect other strips

    :type: float
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorRamp(bpy_struct):
    """Color ramp mapping a scalar value to a color"""

    color_mode: typing.Literal["RGB", "HSV", "HSL"]
    """ Set color mode to use for interpolation

    :type: typing.Literal['RGB','HSV','HSL']
    """

    elements: ColorRampElements
    """ 

    :type: ColorRampElements
    """

    hue_interpolation: typing.Literal["NEAR", "FAR", "CW", "CCW"]
    """ Set color interpolation

    :type: typing.Literal['NEAR','FAR','CW','CCW']
    """

    interpolation: typing.Literal["EASE", "CARDINAL", "LINEAR", "B_SPLINE", "CONSTANT"]
    """ Set interpolation between color stops

    :type: typing.Literal['EASE','CARDINAL','LINEAR','B_SPLINE','CONSTANT']
    """

    def evaluate(self, position: float | None) -> bpy_prop_array[float]:
        """Evaluate ColorRamp

        :param position: Position, Evaluate ColorRamp at position
        :type position: float | None
        :return: Color, Color at given position
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorRampElement(bpy_struct):
    """Element defining a color at a position in the color ramp"""

    alpha: float
    """ Set alpha of selected color stop

    :type: float
    """

    color: bpy_prop_array[float]
    """ Set color of selected color stop

    :type: bpy_prop_array[float]
    """

    position: float
    """ Set position of selected color stop

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ColorSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating an image filled with a single color"""

    color: bpy_prop_array[float]
    """ Effect Strip color

    :type: bpy_prop_array[float]
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentBooleanProperty(PythonComponentProperty, bpy_struct):
    """A boolean property of a Python Component"""

    value: bool
    """ Property value

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentFloatProperty(PythonComponentProperty, bpy_struct):
    """A float property of a Python Component"""

    value: float
    """ Property value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentIntProperty(PythonComponentProperty, bpy_struct):
    """An integer property of a Python Component"""

    value: int
    """ Property value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentSetProperty(PythonComponentProperty, bpy_struct):
    """A set property of a Python Component"""

    value: typing.Literal["EMPTY"]
    """ Property value

    :type: typing.Literal['EMPTY']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentStringProperty(PythonComponentProperty, bpy_struct):
    """A string property of a Python Component"""

    value: str
    """ Property value

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentVector2DProperty(PythonComponentProperty, bpy_struct):
    """A 2D vector property of a Python Component"""

    value: bpy_prop_array[float]
    """ Property value

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentVector3DProperty(PythonComponentProperty, bpy_struct):
    """A 3D vector property of a Python Component"""

    value: bpy_prop_array[float]
    """ Property value

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ComponentVector4DProperty(PythonComponentProperty, bpy_struct):
    """A 4D vector property of a Python Component"""

    value: bpy_prop_array[float]
    """ Property value

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNode(NodeInternal, Node, bpy_struct):
    def tag_need_exec(self):
        """Tag the node for compositor update"""

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeAlphaOver(CompositorNode, NodeInternal, Node, bpy_struct):
    premul: float
    """ Mix Factor

    :type: float
    """

    use_premultiply: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBilateralblur(CompositorNode, NodeInternal, Node, bpy_struct):
    iterations: int
    """ 

    :type: int
    """

    sigma_color: float
    """ 

    :type: float
    """

    sigma_space: float
    """ 

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    aspect_correction: typing.Literal["NONE", "Y", "X"]
    """ Type of aspect correction to use

    :type: typing.Literal['NONE','Y','X']
    """

    factor: float
    """ 

    :type: float
    """

    factor_x: float
    """ 

    :type: float
    """

    factor_y: float
    """ 

    :type: float
    """

    filter_type: typing.Literal[
        "FLAT", "TENT", "QUAD", "CUBIC", "GAUSS", "FAST_GAUSS", "CATROM", "MITCH"
    ]
    """ 

    :type: typing.Literal['FLAT','TENT','QUAD','CUBIC','GAUSS','FAST_GAUSS','CATROM','MITCH']
    """

    size_x: int
    """ 

    :type: int
    """

    size_y: int
    """ 

    :type: int
    """

    use_bokeh: bool
    """ Use circular filter (slower)

    :type: bool
    """

    use_extended_bounds: bool
    """ Extend bounds of the input image to fully fit blurred image

    :type: bool
    """

    use_gamma_correction: bool
    """ Apply filter on gamma corrected values

    :type: bool
    """

    use_relative: bool
    """ Use relative (percent) values to define blur radius

    :type: bool
    """

    use_variable_size: bool
    """ Support variable blur per-pixel when using an image for size input

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBokehBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_max: float
    """ Blur limit, maximum CoC radius

    :type: float
    """

    use_extended_bounds: bool
    """ Extend bounds of the input image to fully fit blurred image

    :type: bool
    """

    use_variable_size: bool
    """ Support variable blur per-pixel when using an image for size input

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBokehImage(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ Angle of the bokeh

    :type: float
    """

    catadioptric: float
    """ Level of catadioptric of the bokeh

    :type: float
    """

    flaps: int
    """ Number of flaps

    :type: int
    """

    rounding: float
    """ Level of rounding of the bokeh

    :type: float
    """

    shift: float
    """ Shift of the lens components

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBoxMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float
    """ Height of the box

    :type: float
    """

    mask_type: typing.Literal["ADD", "SUBTRACT", "MULTIPLY", "NOT"]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','NOT']
    """

    rotation: float
    """ Rotation angle of the box

    :type: float
    """

    width: float
    """ Width of the box

    :type: float
    """

    x: float
    """ X position of the middle of the box

    :type: float
    """

    y: float
    """ Y position of the middle of the box

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeBrightContrast(CompositorNode, NodeInternal, Node, bpy_struct):
    use_premultiply: bool
    """ Keep output image premultiplied alpha

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeChannelMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_space: typing.Literal["RGB", "HSV", "YUV", "YCC"]
    """ 

    :type: typing.Literal['RGB','HSV','YUV','YCC']
    """

    limit_channel: typing.Literal["R", "G", "B"]
    """ Limit by this channel's value

    :type: typing.Literal['R','G','B']
    """

    limit_max: float
    """ Values higher than this setting are 100% opaque

    :type: float
    """

    limit_method: typing.Literal["SINGLE", "MAX"]
    """ Algorithm to use to limit channel

    :type: typing.Literal['SINGLE','MAX']
    """

    limit_min: float
    """ Values lower than this setting are 100% keyed

    :type: float
    """

    matte_channel: typing.Literal["R", "G", "B"]
    """ Channel used to determine matte

    :type: typing.Literal['R','G','B']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeChromaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    gain: float
    """ Alpha falloff

    :type: float
    """

    lift: float
    """ Alpha lift

    :type: float
    """

    shadow_adjust: float
    """ Adjusts the brightness of any shadows captured

    :type: float
    """

    threshold: float
    """ Tolerance below which colors will be considered as exact matches

    :type: float
    """

    tolerance: float
    """ Tolerance for a color to be considered a keying color

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeColorBalance(CompositorNode, NodeInternal, Node, bpy_struct):
    correction_method: typing.Literal["LIFT_GAMMA_GAIN", "OFFSET_POWER_SLOPE"]
    """ 

    :type: typing.Literal['LIFT_GAMMA_GAIN','OFFSET_POWER_SLOPE']
    """

    gain: bpy_prop_array[float]
    """ Correction for Highlights

    :type: bpy_prop_array[float]
    """

    gamma: bpy_prop_array[float]
    """ Correction for Midtones

    :type: bpy_prop_array[float]
    """

    lift: bpy_prop_array[float]
    """ Correction for Shadows

    :type: bpy_prop_array[float]
    """

    offset: bpy_prop_array[float]
    """ Correction for Shadows

    :type: bpy_prop_array[float]
    """

    offset_basis: float
    """ Support negative color by using this as the RGB basis

    :type: float
    """

    power: bpy_prop_array[float]
    """ Correction for Midtones

    :type: bpy_prop_array[float]
    """

    slope: bpy_prop_array[float]
    """ Correction for Highlights

    :type: bpy_prop_array[float]
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeColorCorrection(CompositorNode, NodeInternal, Node, bpy_struct):
    blue: bool
    """ Blue channel active

    :type: bool
    """

    green: bool
    """ Green channel active

    :type: bool
    """

    highlights_contrast: float
    """ Highlights contrast

    :type: float
    """

    highlights_gain: float
    """ Highlights gain

    :type: float
    """

    highlights_gamma: float
    """ Highlights gamma

    :type: float
    """

    highlights_lift: float
    """ Highlights lift

    :type: float
    """

    highlights_saturation: float
    """ Highlights saturation

    :type: float
    """

    master_contrast: float
    """ Master contrast

    :type: float
    """

    master_gain: float
    """ Master gain

    :type: float
    """

    master_gamma: float
    """ Master gamma

    :type: float
    """

    master_lift: float
    """ Master lift

    :type: float
    """

    master_saturation: float
    """ Master saturation

    :type: float
    """

    midtones_contrast: float
    """ Midtones contrast

    :type: float
    """

    midtones_end: float
    """ End of midtones

    :type: float
    """

    midtones_gain: float
    """ Midtones gain

    :type: float
    """

    midtones_gamma: float
    """ Midtones gamma

    :type: float
    """

    midtones_lift: float
    """ Midtones lift

    :type: float
    """

    midtones_saturation: float
    """ Midtones saturation

    :type: float
    """

    midtones_start: float
    """ Start of midtones

    :type: float
    """

    red: bool
    """ Red channel active

    :type: bool
    """

    shadows_contrast: float
    """ Shadows contrast

    :type: float
    """

    shadows_gain: float
    """ Shadows gain

    :type: float
    """

    shadows_gamma: float
    """ Shadows gamma

    :type: float
    """

    shadows_lift: float
    """ Shadows lift

    :type: float
    """

    shadows_saturation: float
    """ Shadows saturation

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeColorMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_hue: float
    """ Hue tolerance for colors to be considered a keying color

    :type: float
    """

    color_saturation: float
    """ Saturation Tolerance for the color

    :type: float
    """

    color_value: float
    """ Value Tolerance for the color

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeColorSpill(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Literal["R", "G", "B"]
    """ 

    :type: typing.Literal['R','G','B']
    """

    limit_channel: typing.Literal["R", "G", "B"]
    """ 

    :type: typing.Literal['R','G','B']
    """

    limit_method: typing.Literal["SIMPLE", "AVERAGE"]
    """ 

    :type: typing.Literal['SIMPLE','AVERAGE']
    """

    ratio: float
    """ Scale limit by value

    :type: float
    """

    unspill_blue: float
    """ Blue spillmap scale

    :type: float
    """

    unspill_green: float
    """ Green spillmap scale

    :type: float
    """

    unspill_red: float
    """ Red spillmap scale

    :type: float
    """

    use_unspill: bool
    """ Compensate all channels (differently) by hand

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCombHSVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCombRGBA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCombYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Literal["ITUBT601", "ITUBT709", "JFIF"]
    """ 

    :type: typing.Literal['ITUBT601','ITUBT709','JFIF']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCombYUVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeComposite(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool
    """ Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCornerPin(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCrop(CompositorNode, NodeInternal, Node, bpy_struct):
    max_x: int
    """ 

    :type: int
    """

    max_y: int
    """ 

    :type: int
    """

    min_x: int
    """ 

    :type: int
    """

    min_y: int
    """ 

    :type: int
    """

    rel_max_x: float
    """ 

    :type: float
    """

    rel_max_y: float
    """ 

    :type: float
    """

    rel_min_x: float
    """ 

    :type: float
    """

    rel_min_y: float
    """ 

    :type: float
    """

    relative: bool
    """ Use relative values to crop image

    :type: bool
    """

    use_crop_size: bool
    """ Whether to crop the size of the input image

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCryptomatte(CompositorNode, NodeInternal, Node, bpy_struct):
    add: bpy_prop_array[float]
    """ Add object or material to matte, by picking a color from the Pick output

    :type: bpy_prop_array[float]
    """

    matte_id: str
    """ List of object and material crypto IDs to include in matte

    :type: str
    """

    remove: bpy_prop_array[float]
    """ Remove object or material from matte, by picking a color from the Pick output

    :type: bpy_prop_array[float]
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCurveRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeCurveVec(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ 

    :type: float
    """

    center_x: float
    """ 

    :type: float
    """

    center_y: float
    """ 

    :type: float
    """

    distance: float
    """ 

    :type: float
    """

    iterations: int
    """ 

    :type: int
    """

    spin: float
    """ 

    :type: float
    """

    use_wrap: bool
    """ 

    :type: bool
    """

    zoom: float
    """ 

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDefocus(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ Bokeh shape rotation offset

    :type: float
    """

    blur_max: float
    """ Blur limit, maximum CoC radius

    :type: float
    """

    bokeh: typing.Literal[
        "OCTAGON", "HEPTAGON", "HEXAGON", "PENTAGON", "SQUARE", "TRIANGLE", "CIRCLE"
    ]
    """ 

    :type: typing.Literal['OCTAGON','HEPTAGON','HEXAGON','PENTAGON','SQUARE','TRIANGLE','CIRCLE']
    """

    f_stop: float
    """ Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius

    :type: float
    """

    scene: Scene | None
    """ Scene from which to select the active camera (render scene if undefined)

    :type: Scene | None
    """

    threshold: float
    """ CoC radius threshold, prevents background bleed on in-focus midground, 0=off

    :type: float
    """

    use_gamma_correction: bool
    """ Enable gamma correction before and after main process

    :type: bool
    """

    use_preview: bool
    """ Enable low quality mode, useful for preview

    :type: bool
    """

    use_zbuffer: bool
    """ Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)

    :type: bool
    """

    z_scale: float
    """ Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDespeckle(CompositorNode, NodeInternal, Node, bpy_struct):
    threshold: float
    """ Threshold for detecting pixels to despeckle

    :type: float
    """

    threshold_neighbor: float
    """ Threshold for the number of neighbor pixels that must match

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDiffMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    falloff: float
    """ Color distances below this additional threshold are partially keyed

    :type: float
    """

    tolerance: float
    """ Color distances below this threshold are keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDilateErode(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int
    """ Distance to grow/shrink (number of iterations)

    :type: int
    """

    edge: float
    """ Edge to inset

    :type: float
    """

    falloff: typing.Literal[
        "SMOOTH", "SPHERE", "ROOT", "INVERSE_SQUARE", "SHARP", "LINEAR"
    ]
    """ Falloff type the feather

    :type: typing.Literal['SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR']
    """

    mode: typing.Literal["STEP", "THRESHOLD", "DISTANCE", "FEATHER"]
    """ Growing/shrinking mode

    :type: typing.Literal['STEP','THRESHOLD','DISTANCE','FEATHER']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDisplace(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDistanceMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Literal["RGB", "YCC"]
    """ 

    :type: typing.Literal['RGB','YCC']
    """

    falloff: float
    """ Color distances below this additional threshold are partially keyed

    :type: float
    """

    tolerance: float
    """ Color distances below this threshold are keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeDoubleEdgeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    edge_mode: typing.Literal["BLEED_OUT", "KEEP_IN"]
    """ 

    :type: typing.Literal['BLEED_OUT','KEEP_IN']
    """

    inner_mode: typing.Literal["ALL", "ADJACENT_ONLY"]
    """ 

    :type: typing.Literal['ALL','ADJACENT_ONLY']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeEllipseMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float
    """ Height of the ellipse

    :type: float
    """

    mask_type: typing.Literal["ADD", "SUBTRACT", "MULTIPLY", "NOT"]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','NOT']
    """

    rotation: float
    """ Rotation angle of the ellipse

    :type: float
    """

    width: float
    """ Width of the ellipse

    :type: float
    """

    x: float
    """ X position of the middle of the ellipse

    :type: float
    """

    y: float
    """ Y position of the middle of the ellipse

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeFilter(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Literal[
        "SOFTEN", "SHARPEN", "LAPLACE", "SOBEL", "PREWITT", "KIRSCH", "SHADOW"
    ]
    """ 

    :type: typing.Literal['SOFTEN','SHARPEN','LAPLACE','SOBEL','PREWITT','KIRSCH','SHADOW']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeFlip(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: typing.Literal["X", "Y", "XY"]
    """ 

    :type: typing.Literal['X','Y','XY']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeGamma(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeGlare(CompositorNode, NodeInternal, Node, bpy_struct):
    angle_offset: float
    """ Streak angle offset

    :type: float
    """

    color_modulation: float
    """ Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect

    :type: float
    """

    fade: float
    """ Streak fade-out factor

    :type: float
    """

    glare_type: typing.Literal["GHOSTS", "STREAKS", "FOG_GLOW", "SIMPLE_STAR"]
    """ 

    :type: typing.Literal['GHOSTS','STREAKS','FOG_GLOW','SIMPLE_STAR']
    """

    iterations: int
    """ 

    :type: int
    """

    mix: float
    """ -1 is original image only, 0 is exact 50/50 mix, 1 is processed image only

    :type: float
    """

    quality: typing.Literal["HIGH", "MEDIUM", "LOW"]
    """ If not set to high quality, the effect will be applied to a low-res copy of the source image

    :type: typing.Literal['HIGH','MEDIUM','LOW']
    """

    size: int
    """ Glow/glare size (not actual size; relative to initial size of bright area of pixels)

    :type: int
    """

    streaks: int
    """ Total number of streaks

    :type: int
    """

    threshold: float
    """ The glare filter will only be applied to pixels brighter than this value

    :type: float
    """

    use_rotate_45: bool
    """ Simple star filter: add 45 degree rotation offset

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeGroup(CompositorNode, NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    node_tree: CompositorNodeTree | None
    """ 

    :type: CompositorNodeTree | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeHueCorrect(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeHueSat(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeIDMask(CompositorNode, NodeInternal, Node, bpy_struct):
    index: int
    """ Pass index number to convert to alpha

    :type: int
    """

    use_antialiasing: bool
    """ Apply an anti-aliasing filter to the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeImage(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_duration: int
    """ Number of images of a movie to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the movie/sequence, assuming first picture has a #1

    :type: int
    """

    has_layers: bool
    """ True if this image has any named layer

    :type: bool
    """

    has_views: bool
    """ True if this image has multiple views

    :type: bool
    """

    image: Image | None
    """ 

    :type: Image | None
    """

    layer: typing.Literal["PLACEHOLDER"]
    """ 

    :type: typing.Literal['PLACEHOLDER']
    """

    use_auto_refresh: bool
    """ Always refresh image on frame changes

    :type: bool
    """

    use_cyclic: bool
    """ Cycle the images in the movie

    :type: bool
    """

    use_straight_alpha_output: bool
    """ Put Node output buffer to straight alpha instead of premultiplied

    :type: bool
    """

    view: typing.Literal["ALL"]
    """ 

    :type: typing.Literal['ALL']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeInpaint(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int
    """ Distance to inpaint (number of iterations)

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeInvert(CompositorNode, NodeInternal, Node, bpy_struct):
    invert_alpha: bool
    """ 

    :type: bool
    """

    invert_rgb: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeKeying(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_post: int
    """ Matte blur size which applies after clipping and dilate/eroding

    :type: int
    """

    blur_pre: int
    """ Chroma pre-blur size which applies before running keyer

    :type: int
    """

    clip_black: float
    """ Value of non-scaled matte pixel which considers as fully background pixel

    :type: float
    """

    clip_white: float
    """ Value of non-scaled matte pixel which considers as fully foreground pixel

    :type: float
    """

    despill_balance: float
    """ Balance between non-key colors used to detect amount of key color to be removed

    :type: float
    """

    despill_factor: float
    """ Factor of despilling screen color from image

    :type: float
    """

    dilate_distance: int
    """ Matte dilate/erode side

    :type: int
    """

    edge_kernel_radius: int
    """ Radius of kernel used to detect whether pixel belongs to edge

    :type: int
    """

    edge_kernel_tolerance: float
    """ Tolerance to pixels inside kernel which are treating as belonging to the same plane

    :type: float
    """

    feather_distance: int
    """ Distance to grow/shrink the feather

    :type: int
    """

    feather_falloff: typing.Literal[
        "SMOOTH", "SPHERE", "ROOT", "INVERSE_SQUARE", "SHARP", "LINEAR"
    ]
    """ Falloff type the feather

    :type: typing.Literal['SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR']
    """

    screen_balance: float
    """ Balance between two non-primary channels primary channel is comparing against

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeKeyingScreen(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    tracking_object: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeLensdist(CompositorNode, NodeInternal, Node, bpy_struct):
    use_fit: bool
    """ For positive distortion factor only: scale image such that black areas are not visible

    :type: bool
    """

    use_jitter: bool
    """ Enable/disable jittering (faster, but also noisier)

    :type: bool
    """

    use_projector: bool
    """ Enable/disable projector mode (the effect is applied in horizontal direction only)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeLevels(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Literal["COMBINED_RGB", "RED", "GREEN", "BLUE", "LUMINANCE"]
    """ 

    :type: typing.Literal['COMBINED_RGB','RED','GREEN','BLUE','LUMINANCE']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeLumaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    limit_max: float
    """ Values higher than this setting are 100% opaque

    :type: float
    """

    limit_min: float
    """ Values lower than this setting are 100% keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMapRange(CompositorNode, NodeInternal, Node, bpy_struct):
    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMapUV(CompositorNode, NodeInternal, Node, bpy_struct):
    alpha: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMapValue(CompositorNode, NodeInternal, Node, bpy_struct):
    max: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    min: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    offset: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    size: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    use_max: bool
    """ 

    :type: bool
    """

    use_min: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    mask: Mask | None
    """ 

    :type: Mask | None
    """

    motion_blur_samples: int
    """ Number of motion blur samples

    :type: int
    """

    motion_blur_shutter: float
    """ Exposure for motion blur as a factor of FPS

    :type: float
    """

    size_source: typing.Literal["SCENE", "FIXED", "FIXED_SCENE"]
    """ Where to get the mask size from for aspect/size information

    :type: typing.Literal['SCENE','FIXED','FIXED_SCENE']
    """

    size_x: int
    """ 

    :type: int
    """

    size_y: int
    """ 

    :type: int
    """

    use_feather: bool
    """ Use feather information from the mask

    :type: bool
    """

    use_motion_blur: bool
    """ Use multi-sampled motion blur of the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMath(CompositorNode, NodeInternal, Node, bpy_struct):
    operation: typing.Literal[
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "SINE",
        "COSINE",
        "TANGENT",
        "ARCSINE",
        "ARCCOSINE",
        "ARCTANGENT",
        "POWER",
        "LOGARITHM",
        "MINIMUM",
        "MAXIMUM",
        "ROUND",
        "LESS_THAN",
        "GREATER_THAN",
        "MODULO",
        "ABSOLUTE",
        "ARCTAN2",
        "FLOOR",
        "CEIL",
        "FRACT",
        "SQRT",
    ]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','DIVIDE','SINE','COSINE','TANGENT','ARCSINE','ARCCOSINE','ARCTANGENT','POWER','LOGARITHM','MINIMUM','MAXIMUM','ROUND','LESS_THAN','GREATER_THAN','MODULO','ABSOLUTE','ARCTAN2','FLOOR','CEIL','FRACT','SQRT']
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMixRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ 

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMovieClip(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeMovieDistortion(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    distortion_type: typing.Literal["UNDISTORT", "DISTORT"]
    """ Distortion to use to filter image

    :type: typing.Literal['UNDISTORT','DISTORT']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeNormal(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeNormalize(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeOutputFile(CompositorNode, NodeInternal, Node, bpy_struct):
    active_input_index: int | None
    """ Active input index in details view list

    :type: int | None
    """

    base_path: str
    """ Base output path for the image

    :type: str
    """

    file_slots: CompositorNodeOutputFileFileSlots
    """ 

    :type: CompositorNodeOutputFileFileSlots
    """

    format: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    layer_slots: CompositorNodeOutputFileLayerSlots
    """ 

    :type: CompositorNodeOutputFileLayerSlots
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodePixelate(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodePlaneTrackDeform(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    motion_blur_samples: int
    """ Number of motion blur samples

    :type: int
    """

    motion_blur_shutter: float
    """ Exposure for motion blur as a factor of FPS

    :type: float
    """

    plane_track_name: str
    """ 

    :type: str
    """

    tracking_object: str
    """ 

    :type: str
    """

    use_motion_blur: bool
    """ Use multi-sampled motion blur of the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodePremulKey(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: typing.Literal["STRAIGHT_TO_PREMUL", "PREMUL_TO_STRAIGHT"]
    """ Conversion between premultiplied alpha and key alpha

    :type: typing.Literal['STRAIGHT_TO_PREMUL','PREMUL_TO_STRAIGHT']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeRGBToBW(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeRLayers(CompositorNode, NodeInternal, Node, bpy_struct):
    layer: typing.Literal["PLACEHOLDER"]
    """ 

    :type: typing.Literal['PLACEHOLDER']
    """

    scene: Scene | None
    """ 

    :type: Scene | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeRotate(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Literal["NEAREST", "BILINEAR", "BICUBIC"]
    """ Method to use to filter rotation

    :type: typing.Literal['NEAREST','BILINEAR','BICUBIC']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeScale(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_method: typing.Literal["STRETCH", "FIT", "CROP"]
    """ How the image fits in the camera frame

    :type: typing.Literal['STRETCH','FIT','CROP']
    """

    offset_x: float
    """ Offset image horizontally (factor of image size)

    :type: float
    """

    offset_y: float
    """ Offset image vertically (factor of image size)

    :type: float
    """

    space: typing.Literal["RELATIVE", "ABSOLUTE", "SCENE_SIZE", "RENDER_SIZE"]
    """ Coordinate space to scale relative to

    :type: typing.Literal['RELATIVE','ABSOLUTE','SCENE_SIZE','RENDER_SIZE']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSepHSVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSepRGBA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSepYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Literal["ITUBT601", "ITUBT709", "JFIF"]
    """ 

    :type: typing.Literal['ITUBT601','ITUBT709','JFIF']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSepYUVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSetAlpha(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSplitViewer(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: typing.Literal["X", "Y"]
    """ 

    :type: typing.Literal['X','Y']
    """

    factor: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeStabilize(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    filter_type: typing.Literal["NEAREST", "BILINEAR", "BICUBIC"]
    """ Method to use to filter stabilization

    :type: typing.Literal['NEAREST','BILINEAR','BICUBIC']
    """

    invert: bool
    """ Invert stabilization to re-introduce motion to the frame

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSunBeams(CompositorNode, NodeInternal, Node, bpy_struct):
    ray_length: float
    """ Length of rays as a factor of the image size

    :type: float
    """

    source: bpy_prop_array[float]
    """ Source point of rays as a factor of the image width & height

    :type: bpy_prop_array[float]
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSwitch(CompositorNode, NodeInternal, Node, bpy_struct):
    check: bool
    """ Off: first socket, On: second socket

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeSwitchView(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTexture(CompositorNode, NodeInternal, Node, bpy_struct):
    node_output: int
    """ For node-based textures, which output node to use

    :type: int
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTime(CompositorNode, NodeInternal, Node, bpy_struct):
    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    frame_end: int
    """ 

    :type: int
    """

    frame_start: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTonemap(CompositorNode, NodeInternal, Node, bpy_struct):
    adaptation: float
    """ If 0, global; if 1, based on pixel intensity

    :type: float
    """

    contrast: float
    """ Set to 0 to use estimate from input image

    :type: float
    """

    correction: float
    """ If 0, same for all channels; if 1, each independent

    :type: float
    """

    gamma: float
    """ If not used, set to 1

    :type: float
    """

    intensity: float
    """ If less than zero, darkens image; otherwise, makes it brighter

    :type: float
    """

    key: float
    """ The value the average luminance is mapped to

    :type: float
    """

    offset: float
    """ Normally always 1, but can be used as an extra control to alter the brightness curve

    :type: float
    """

    tonemap_type: typing.Literal["RD_PHOTORECEPTOR", "RH_SIMPLE"]
    """ 

    :type: typing.Literal['RD_PHOTORECEPTOR','RH_SIMPLE']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTrackPos(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    frame_relative: int
    """ Frame to be used for relative position

    :type: int
    """

    position: typing.Literal[
        "ABSOLUTE", "RELATIVE_START", "RELATIVE_FRAME", "ABSOLUTE_FRAME"
    ]
    """ Which marker position to use for output

    :type: typing.Literal['ABSOLUTE','RELATIVE_START','RELATIVE_FRAME','ABSOLUTE_FRAME']
    """

    track_name: str
    """ 

    :type: str
    """

    tracking_object: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTransform(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Literal["NEAREST", "BILINEAR", "BICUBIC"]
    """ Method to use to filter transform

    :type: typing.Literal['NEAREST','BILINEAR','BICUBIC']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTranslate(CompositorNode, NodeInternal, Node, bpy_struct):
    use_relative: bool
    """ Use relative (fraction of input image size) values to define translation

    :type: bool
    """

    wrap_axis: typing.Literal["NONE", "XAXIS", "YAXIS", "BOTH"]
    """ Wrap image on a specific axis

    :type: typing.Literal['NONE','XAXIS','YAXIS','BOTH']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for compositing"""

    chunk_size: typing.Literal["32", "64", "128", "256", "512", "1024"]
    """ Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)

    :type: typing.Literal['32','64','128','256','512','1024']
    """

    edit_quality: typing.Literal["HIGH", "MEDIUM", "LOW"]
    """ Quality when editing

    :type: typing.Literal['HIGH','MEDIUM','LOW']
    """

    render_quality: typing.Literal["HIGH", "MEDIUM", "LOW"]
    """ Quality when rendering

    :type: typing.Literal['HIGH','MEDIUM','LOW']
    """

    use_groupnode_buffer: bool
    """ Enable buffering of group nodes

    :type: bool
    """

    use_opencl: bool
    """ Enable GPU calculations

    :type: bool
    """

    use_two_pass: bool
    """ Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes

    :type: bool
    """

    use_viewer_border: bool
    """ Use boundaries for viewer nodes and composite backdrop

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeValToRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeValue(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeVecBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    factor: float
    """ Scaling factor for motion vectors (actually, 'shutter speed', in frames)

    :type: float
    """

    samples: int
    """ 

    :type: int
    """

    speed_max: int
    """ Maximum speed, or zero for none

    :type: int
    """

    speed_min: int
    """ Minimum speed for a pixel to be blurred (used to separate background from foreground)

    :type: int
    """

    use_curved: bool
    """ Interpolate between frames in a Bezier curve, rather than linearly

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeViewer(CompositorNode, NodeInternal, Node, bpy_struct):
    center_x: float
    """ 

    :type: float
    """

    center_y: float
    """ 

    :type: float
    """

    tile_order: typing.Literal["CENTEROUT", "RANDOM", "BOTTOMUP", "RULE_OF_THIRDS"]
    """ Tile order

    :type: typing.Literal['CENTEROUT','RANDOM','BOTTOMUP','RULE_OF_THIRDS']
    """

    use_alpha: bool
    """ Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CompositorNodeZcombine(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool
    """ Take Alpha channel into account when doing the Z operation

    :type: bool
    """

    use_antialias_z: bool
    """ Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ConsoleLine(bpy_struct):
    """Input line for the interactive console"""

    body: str
    """ Text in the line

    :type: str
    """

    current_character: int
    """ 

    :type: int
    """

    type: typing.Literal["OUTPUT", "INPUT", "INFO", "ERROR"]
    """ Console line type when used in scrollback

    :type: typing.Literal['OUTPUT','INPUT','INFO','ERROR']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Constraint(bpy_struct):
    """Constraint modifying the transformation of objects and bones"""

    active: bool | None
    """ Constraint is the one being edited

    :type: bool | None
    """

    error_location: float
    """ Amount of residual error in Blender space unit for constraints that work on position

    :type: float
    """

    error_rotation: float
    """ Amount of residual error in radians for constraints that work on orientation

    :type: float
    """

    influence: float
    """ Amount of influence constraint will have on the final solution

    :type: float
    """

    is_proxy_local: bool
    """ Constraint was added in this proxy instance (i.e. did not belong to source Armature)

    :type: bool
    """

    is_valid: bool
    """ Constraint has valid settings and can be evaluated

    :type: bool
    """

    mute: bool
    """ Enable/Disable Constraint

    :type: bool
    """

    name: str
    """ Constraint name

    :type: str
    """

    owner_space: typing.Literal["WORLD", "POSE", "LOCAL_WITH_PARENT", "LOCAL"]
    """ Space that owner is evaluated in

    :type: typing.Literal['WORLD','POSE','LOCAL_WITH_PARENT','LOCAL']
    """

    show_expanded: bool
    """ Constraint's panel is expanded in UI

    :type: bool
    """

    target_space: typing.Literal["WORLD", "POSE", "LOCAL_WITH_PARENT", "LOCAL"]
    """ Space that target is evaluated in

    :type: typing.Literal['WORLD','POSE','LOCAL_WITH_PARENT','LOCAL']
    """

    type: typing.Literal[
        "CAMERA_SOLVER",
        "FOLLOW_TRACK",
        "OBJECT_SOLVER",
        "COPY_LOCATION",
        "COPY_ROTATION",
        "COPY_SCALE",
        "COPY_TRANSFORMS",
        "LIMIT_DISTANCE",
        "LIMIT_LOCATION",
        "LIMIT_ROTATION",
        "LIMIT_SCALE",
        "MAINTAIN_VOLUME",
        "TRANSFORM",
        "TRANSFORM_CACHE",
        "CLAMP_TO",
        "DAMPED_TRACK",
        "IK",
        "LOCKED_TRACK",
        "SPLINE_IK",
        "STRETCH_TO",
        "TRACK_TO",
        "ACTION",
        "CHILD_OF",
        "FLOOR",
        "FOLLOW_PATH",
        "PIVOT",
        "RIGID_BODY_JOINT",
        "SHRINKWRAP",
    ]
    """ 

    :type: typing.Literal['CAMERA_SOLVER','FOLLOW_TRACK','OBJECT_SOLVER','COPY_LOCATION','COPY_ROTATION','COPY_SCALE','COPY_TRANSFORMS','LIMIT_DISTANCE','LIMIT_LOCATION','LIMIT_ROTATION','LIMIT_SCALE','MAINTAIN_VOLUME','TRANSFORM','TRANSFORM_CACHE','CLAMP_TO','DAMPED_TRACK','IK','LOCKED_TRACK','SPLINE_IK','STRETCH_TO','TRACK_TO','ACTION','CHILD_OF','FLOOR','FOLLOW_PATH','PIVOT','RIGID_BODY_JOINT','SHRINKWRAP']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ConstraintActuator(Actuator, bpy_struct):
    """Actuator to handle Constraints"""

    angle_max: float
    """ Maximum angle allowed with target direction (no correction is done if angle with target direction is between min and max)

    :type: float
    """

    angle_min: float
    """ Minimum angle to maintain with target direction (no correction is done if angle with target direction is between min and max)

    :type: float
    """

    damping: int
    """ Damping factor: time constant (in frame) of low pass filter

    :type: int
    """

    damping_rotation: int
    """ Use a different damping for orientation

    :type: int
    """

    direction: typing.Literal[
        "NONE", "DIRPX", "DIRPY", "DIRPZ", "DIRNX", "DIRNY", "DIRNZ"
    ]
    """ Direction of the ray

    :type: typing.Literal['NONE','DIRPX','DIRPY','DIRPZ','DIRNX','DIRNY','DIRNZ']
    """

    direction_axis: typing.Literal[
        "NONE", "DIRPX", "DIRPY", "DIRPZ", "DIRNX", "DIRNY", "DIRNZ"
    ]
    """ Select the axis to be aligned along the reference direction

    :type: typing.Literal['NONE','DIRPX','DIRPY','DIRPZ','DIRNX','DIRNY','DIRNZ']
    """

    direction_axis_pos: typing.Literal["NONE", "DIRPX", "DIRPY", "DIRPZ"]
    """ Select the axis to be aligned along the reference direction

    :type: typing.Literal['NONE','DIRPX','DIRPY','DIRPZ']
    """

    distance: float
    """ Keep this distance to target

    :type: float
    """

    fh_damping: float
    """ Damping factor of the force field spring

    :type: float
    """

    fh_force: float
    """ Spring force within the force field area

    :type: float
    """

    fh_height: float
    """ Height of the force field area

    :type: float
    """

    limit: typing.Literal["NONE", "LOCX", "LOCY", "LOCZ"]
    """ 

    :type: typing.Literal['NONE','LOCX','LOCY','LOCZ']
    """

    limit_max: float
    """ 

    :type: float
    """

    limit_min: float
    """ 

    :type: float
    """

    material: str
    """ Ray detects only Objects with this material

    :type: str
    """

    mode: typing.Literal["LOC", "DIST", "ORI", "FH"]
    """ The type of the constraint

    :type: typing.Literal['LOC','DIST','ORI','FH']
    """

    property: str
    """ Ray detects only Objects with this property

    :type: str
    """

    range: float
    """ Maximum length of ray

    :type: float
    """

    rotation_max: bpy_prop_array[float]
    """ Reference Direction

    :type: bpy_prop_array[float]
    """

    time: int
    """ Maximum activation time in frame, 0 for unlimited

    :type: int
    """

    use_fh_normal: bool
    """ Add a horizontal spring force on slopes

    :type: bool
    """

    use_fh_paralel_axis: bool
    """ Keep object axis parallel to normal

    :type: bool
    """

    use_force_distance: bool
    """ Force distance of object to point of impact of ray

    :type: bool
    """

    use_local: bool
    """ Set ray along object's axis or global axis

    :type: bool
    """

    use_material_detect: bool
    """ Detect material instead of property

    :type: bool
    """

    use_normal: bool
    """ Set object axis along (local axis) or parallel (global axis) to the normal at hit position

    :type: bool
    """

    use_persistent: bool
    """ Persistent actuator: stays active even if ray does not reach target

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ConstraintTarget(bpy_struct):
    """Target object for multi-target constraints"""

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Context(bpy_struct):
    """Current windowmanager and data context"""

    area: Area
    """ 

    :type: Area
    """

    blend_data: BlendData
    """ 

    :type: BlendData
    """

    mode: typing.Literal[
        "EDIT_MESH",
        "EDIT_CURVE",
        "EDIT_SURFACE",
        "EDIT_TEXT",
        "EDIT_ARMATURE",
        "EDIT_METABALL",
        "EDIT_LATTICE",
        "POSE",
        "SCULPT",
        "PAINT_WEIGHT",
        "PAINT_VERTEX",
        "PAINT_TEXTURE",
        "PARTICLE",
        "OBJECT",
    ]
    """ 

    :type: typing.Literal['EDIT_MESH','EDIT_CURVE','EDIT_SURFACE','EDIT_TEXT','EDIT_ARMATURE','EDIT_METABALL','EDIT_LATTICE','POSE','SCULPT','PAINT_WEIGHT','PAINT_VERTEX','PAINT_TEXTURE','PARTICLE','OBJECT']
    """

    region: Region
    """ 

    :type: Region
    """

    region_data: RegionView3D
    """ 

    :type: RegionView3D
    """

    scene: Scene
    """ 

    :type: Scene
    """

    screen: Screen
    """ 

    :type: Screen
    """

    space_data: Space
    """ 

    :type: Space
    """

    tool_settings: ToolSettings
    """ 

    :type: ToolSettings
    """

    user_preferences: UserPreferences
    """ 

    :type: UserPreferences
    """

    window: Window
    """ 

    :type: Window
    """

    window_manager: WindowManager
    """ 

    :type: WindowManager
    """

    visible_objects: list[Object]
    """ 

    :type: list[Object]
    """

    visible_bases: list[ObjectBase]
    """ 

    :type: list[ObjectBase]
    """

    selectable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selectable_bases: list[ObjectBase]
    """ 

    :type: list[ObjectBase]
    """

    selected_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selected_bases: list[ObjectBase]
    """ 

    :type: list[ObjectBase]
    """

    editable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    editable_bases: list[ObjectBase]
    """ 

    :type: list[ObjectBase]
    """

    selected_editable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selected_editable_bases: list[ObjectBase]
    """ 

    :type: list[ObjectBase]
    """

    visible_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    editable_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    selected_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    selected_editable_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    visible_pose_bones: list[PoseBone]
    """ 

    :type: list[PoseBone]
    """

    selected_pose_bones: list[PoseBone]
    """ 

    :type: list[PoseBone]
    """

    active_bone: EditBone | None
    """ 

    :type: EditBone | None
    """

    active_pose_bone: PoseBone | None
    """ 

    :type: PoseBone | None
    """

    active_base: ObjectBase | None
    """ 

    :type: ObjectBase | None
    """

    active_object: Object | None
    """ 

    :type: Object | None
    """

    object: Object | None
    """ 

    :type: Object | None
    """

    edit_object: Object | None
    """ 

    :type: Object | None
    """

    sculpt_object: Object | None
    """ 

    :type: Object | None
    """

    vertex_paint_object: Object | None
    """ 

    :type: Object | None
    """

    weight_paint_object: Object | None
    """ 

    :type: Object | None
    """

    image_paint_object: Object | None
    """ 

    :type: Object | None
    """

    particle_edit_object: Object | None
    """ 

    :type: Object | None
    """

    sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    selected_sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    selected_editable_sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    gpencil_data: typing.Any
    gpencil_data_owner: ID | None
    """ 

    :type: ID | None
    """

    visible_gpencil_layers: list[GPencilLayer]
    """ 

    :type: list[GPencilLayer]
    """

    editable_gpencil_layers: list[GPencilLayer]
    """ 

    :type: list[GPencilLayer]
    """

    editable_gpencil_strokes: list[GPencilStroke]
    """ 

    :type: list[GPencilStroke]
    """

    active_gpencil_layer: list[GPencilLayer] | None
    """ 

    :type: list[GPencilLayer] | None
    """

    active_gpencil_frame: typing.Any
    active_gpencil_palette: list[GPencilPalette] | None
    """ 

    :type: list[GPencilPalette] | None
    """

    active_gpencil_palettecolor: list[GPencilPaletteColor] | None
    """ 

    :type: list[GPencilPaletteColor] | None
    """

    active_gpencil_brush: GPencilSculptBrush | None
    """ 

    :type: GPencilSculptBrush | None
    """

    active_operator: Operator | None
    """ 

    :type: Operator | None
    """

    selected_editable_fcurves: list[FCurve]
    """ 

    :type: list[FCurve]
    """

    texture_slot: MaterialTextureSlot | None
    """ 

    :type: MaterialTextureSlot | None
    """

    world: World | None
    """ 

    :type: World | None
    """

    mesh: Mesh | None
    """ 

    :type: Mesh | None
    """

    armature: Armature | None
    """ 

    :type: Armature | None
    """

    lattice: Lattice | None
    """ 

    :type: Lattice | None
    """

    curve: Curve | None
    """ 

    :type: Curve | None
    """

    meta_ball: MetaBall | None
    """ 

    :type: MetaBall | None
    """

    lamp: Lamp | None
    """ 

    :type: Lamp | None
    """

    speaker: Speaker | None
    """ 

    :type: Speaker | None
    """

    camera: Camera | None
    """ 

    :type: Camera | None
    """

    material: Material | None
    """ 

    :type: Material | None
    """

    material_slot: MaterialSlot | None
    """ 

    :type: MaterialSlot | None
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    texture_user: ID | None
    """ 

    :type: ID | None
    """

    texture_user_property: Property | None
    """ 

    :type: Property | None
    """

    bone: Bone | None
    """ 

    :type: Bone | None
    """

    edit_bone: EditBone | None
    """ 

    :type: EditBone | None
    """

    pose_bone: PoseBone | None
    """ 

    :type: PoseBone | None
    """

    particle_system: ParticleSystem | None
    """ 

    :type: ParticleSystem | None
    """

    particle_system_editable: ParticleSystem | None
    """ 

    :type: ParticleSystem | None
    """

    particle_settings: ParticleSettings | None
    """ 

    :type: ParticleSettings | None
    """

    cloth: ClothModifier | None
    """ 

    :type: ClothModifier | None
    """

    soft_body: SoftBodyModifier | None
    """ 

    :type: SoftBodyModifier | None
    """

    fluid: FluidSimulationModifier | None
    """ 

    :type: FluidSimulationModifier | None
    """

    smoke: SmokeModifier | None
    """ 

    :type: SmokeModifier | None
    """

    collision: CollisionModifier | None
    """ 

    :type: CollisionModifier | None
    """

    brush: Brush | None
    """ 

    :type: Brush | None
    """

    dynamic_paint: DynamicPaintModifier | None
    """ 

    :type: DynamicPaintModifier | None
    """

    line_style: FreestyleLineStyle | None
    """ 

    :type: FreestyleLineStyle | None
    """

    edit_image: Image | None
    """ 

    :type: Image | None
    """

    edit_mask: Mask | None
    """ 

    :type: Mask | None
    """

    selected_nodes: list[Node]
    """ 

    :type: list[Node]
    """

    active_node: Node | None
    """ 

    :type: Node | None
    """

    edit_text: Text | None
    """ 

    :type: Text | None
    """

    edit_movieclip: MovieClip | None
    """ 

    :type: MovieClip | None
    """

    def copy(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ControlFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for objects controlling the motion of fluid in the simulation"""

    attraction_radius: float
    """ Force field radius around the control object

    :type: float
    """

    attraction_strength: float
    """ Force strength for directional attraction towards the control object

    :type: float
    """

    end_time: float
    """ Time when the control particles are deactivated

    :type: float
    """

    quality: float
    """ Quality which is used for object sampling (higher = better but slower)

    :type: float
    """

    start_time: float
    """ Time when the control particles are activated

    :type: float
    """

    use: bool
    """ Object contributes to the fluid simulation

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse control object movement

    :type: bool
    """

    velocity_radius: float
    """ Force field radius around the control object

    :type: float
    """

    velocity_strength: float
    """ Force strength of how much of the control object's velocity is influencing the fluid velocity

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Controller(bpy_struct):
    """Game engine logic brick to process events, connecting sensors to actuators"""

    active: bool | None
    """ Set the active state of the controller

    :type: bool | None
    """

    actuators: bpy_prop_collection[Actuator]
    """ The list containing the actuators connected to the controller

    :type: bpy_prop_collection[Actuator]
    """

    name: str
    """ 

    :type: str
    """

    show_expanded: bool
    """ Set controller expanded in the user interface

    :type: bool
    """

    states: int
    """ Set Controller state index (1 to 30)

    :type: int
    """

    type: typing.Literal[
        "LOGIC_AND",
        "LOGIC_OR",
        "LOGIC_NAND",
        "LOGIC_NOR",
        "LOGIC_XOR",
        "LOGIC_XNOR",
        "EXPRESSION",
        "PYTHON",
    ]
    """ 

    :type: typing.Literal['LOGIC_AND','LOGIC_OR','LOGIC_NAND','LOGIC_NOR','LOGIC_XOR','LOGIC_XNOR','EXPRESSION','PYTHON']
    """

    use_priority: bool
    """ Mark controller for execution before all non-marked controllers (good for startup scripts)

    :type: bool
    """

    def link(self, sensor: Sensor | None = None, actuator: Actuator | None = None):
        """Link the controller with a sensor/actuator

        :param sensor: Sensor to link the controller to
        :type sensor: Sensor | None
        :param actuator: Actuator to link the controller to
        :type actuator: Actuator | None
        """

    def unlink(self, sensor: Sensor | None = None, actuator: Actuator | None = None):
        """Unlink the controller from a sensor/actuator

        :param sensor: Sensor to unlink the controller from
        :type sensor: Sensor | None
        :param actuator: Actuator to unlink the controller from
        :type actuator: Actuator | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CopyLocationConstraint(Constraint, bpy_struct):
    """Copy the location of the target"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    invert_x: bool
    """ Invert the X location

    :type: bool
    """

    invert_y: bool
    """ Invert the Y location

    :type: bool
    """

    invert_z: bool
    """ Invert the Z location

    :type: bool
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_offset: bool
    """ Add original location into copied location

    :type: bool
    """

    use_x: bool
    """ Copy the target's X location

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y location

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z location

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CopyRotationConstraint(Constraint, bpy_struct):
    """Copy the rotation of the target"""

    invert_x: bool
    """ Invert the X rotation

    :type: bool
    """

    invert_y: bool
    """ Invert the Y rotation

    :type: bool
    """

    invert_z: bool
    """ Invert the Z rotation

    :type: bool
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_offset: bool
    """ Add original rotation into copied rotation

    :type: bool
    """

    use_x: bool
    """ Copy the target's X rotation

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y rotation

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z rotation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CopyScaleConstraint(Constraint, bpy_struct):
    """Copy the scale of the target"""

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_offset: bool
    """ Add original scale into copied scale

    :type: bool
    """

    use_x: bool
    """ Copy the target's X scale

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y scale

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z scale

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CopyTransformsConstraint(Constraint, bpy_struct):
    """Copy all the transforms of the target"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CorrectiveSmoothModifier(Modifier, bpy_struct):
    """Correct distortion caused by deformation"""

    factor: float
    """ Smooth factor effect

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bind: bool
    """ 

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    rest_source: typing.Literal["ORCO", "BIND"]
    """ Select the source of rest positions

    :type: typing.Literal['ORCO','BIND']
    """

    smooth_type: typing.Literal["SIMPLE", "LENGTH_WEIGHTED"]
    """ Method used for smoothing

    :type: typing.Literal['SIMPLE','LENGTH_WEIGHTED']
    """

    use_only_smooth: bool
    """ Apply smoothing without reconstructing the surface

    :type: bool
    """

    use_pin_boundary: bool
    """ Excludes boundary vertices from being smoothed

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CrossSequence(EffectSequence, Sequence, bpy_struct):
    """Cross Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Curve(ID, bpy_struct):
    """Curve data-block storing curves, splines and NURBS"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    bevel_depth: float
    """ Bevel depth when not using a bevel object

    :type: float
    """

    bevel_factor_end: float
    """ Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)

    :type: float
    """

    bevel_factor_mapping_end: typing.Literal["RESOLUTION", "SEGMENTS", "SPLINE"]
    """ Determines how the end bevel factor is mapped to a spline

    :type: typing.Literal['RESOLUTION','SEGMENTS','SPLINE']
    """

    bevel_factor_mapping_start: typing.Literal["RESOLUTION", "SEGMENTS", "SPLINE"]
    """ Determines how the start bevel factor is mapped to a spline

    :type: typing.Literal['RESOLUTION','SEGMENTS','SPLINE']
    """

    bevel_factor_start: float
    """ Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)

    :type: float
    """

    bevel_object: Object | None
    """ Curve object name that defines the bevel shape

    :type: Object | None
    """

    bevel_resolution: int
    """ Bevel resolution when depth is non-zero and no specific bevel object has been defined

    :type: int
    """

    cycles: CyclesMeshSettings
    """ Cycles mesh settings

    :type: CyclesMeshSettings
    """

    dimensions: typing.Literal["2D", "3D"]
    """ Select 2D or 3D curve type

    :type: typing.Literal['2D','3D']
    """

    eval_time: float
    """ Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)

    :type: float
    """

    extrude: float
    """ Amount of curve extrusion when not using a bevel object

    :type: float
    """

    fill_mode: typing.Literal["FULL", "BACK", "FRONT", "HALF"]
    """ Mode of filling curve

    :type: typing.Literal['FULL','BACK','FRONT','HALF']
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    offset: float
    """ Offset the curve to adjust the width of a text

    :type: float
    """

    path_duration: int
    """ The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting

    :type: int
    """

    render_resolution_u: int
    """ Surface resolution in U direction used while rendering (zero uses preview resolution)

    :type: int
    """

    render_resolution_v: int
    """ Surface resolution in V direction used while rendering (zero uses preview resolution)

    :type: int
    """

    resolution_u: int
    """ Surface resolution in U direction

    :type: int
    """

    resolution_v: int
    """ Surface resolution in V direction

    :type: int
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    show_handles: bool
    """ Display Bezier handles in editmode

    :type: bool
    """

    show_normal_face: bool
    """ Display 3D curve normals in editmode

    :type: bool
    """

    splines: CurveSplines
    """ Collection of splines in this curve data object

    :type: CurveSplines
    """

    taper_object: Object | None
    """ Curve object name that defines the taper (width)

    :type: Object | None
    """

    texspace_location: bpy_prop_array[float]
    """ Texture space location

    :type: bpy_prop_array[float]
    """

    texspace_size: bpy_prop_array[float]
    """ Texture space size

    :type: bpy_prop_array[float]
    """

    twist_mode: typing.Literal["Z_UP", "MINIMUM", "TANGENT"]
    """ The type of tilt calculation for 3D Curves

    :type: typing.Literal['Z_UP','MINIMUM','TANGENT']
    """

    twist_smooth: float
    """ Smoothing iteration for tangents

    :type: float
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    use_deform_bounds: bool
    """ Option for curve-deform: Use the mesh bounds to clamp the deformation

    :type: bool
    """

    use_fill_caps: bool
    """ Fill caps for beveled curves

    :type: bool
    """

    use_fill_deform: bool
    """ Fill curve after applying shape keys and all modifiers

    :type: bool
    """

    use_map_taper: bool
    """ Map effect of taper object on actually beveled curve

    :type: bool
    """

    use_path: bool
    """ Enable the curve to become a translation path

    :type: bool
    """

    use_path_follow: bool
    """ Make curve path children to rotate along the path

    :type: bool
    """

    use_radius: bool
    """ Option for paths and curve-deform: apply the curve radius with path following it and deforming

    :type: bool
    """

    use_stretch: bool
    """ Option for curve-deform: make deformed child to stretch along entire path

    :type: bool
    """

    use_uv_as_generated: bool
    """ Uses the UV values as Generated textured coordinates

    :type: bool
    """

    def transform(
        self,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None,
        shape_keys: bool | None = False,
    ):
        """Transform curve by a matrix

        :param matrix: Matrix
        :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | None
        """

    def validate_material_indices(self) -> bool:
        """Validate material indices of splines or letters, return True when the curve has had invalid indices corrected (to default 0)

        :return: Result
        :rtype: bool
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveMap(bpy_struct):
    """Curve in a curve mapping"""

    extend: typing.Literal["HORIZONTAL", "EXTRAPOLATED"]
    """ Extrapolate the curve or extend it horizontally

    :type: typing.Literal['HORIZONTAL','EXTRAPOLATED']
    """

    points: CurveMapPoints
    """ 

    :type: CurveMapPoints
    """

    def evaluate(self, position: float | None) -> float:
        """Evaluate curve at given location

        :param position: Position, Position to evaluate curve at
        :type position: float | None
        :return: Value, Value of curve at given location
        :rtype: float
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveMapPoint(bpy_struct):
    """Point of a curve used for a curve mapping"""

    handle_type: typing.Literal["AUTO", "AUTO_CLAMPED", "VECTOR"]
    """ Curve interpolation at this point: Bezier or vector

    :type: typing.Literal['AUTO','AUTO_CLAMPED','VECTOR']
    """

    location: bpy_prop_array[float]
    """ X/Y coordinates of the curve point

    :type: bpy_prop_array[float]
    """

    select: bool
    """ Selection state of the curve point

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveMapping(bpy_struct):
    """Curve mapping to map color, vector and scalar values to other values using a user defined curve"""

    black_level: bpy_prop_array[float]
    """ For RGB curves, the color that black is mapped to

    :type: bpy_prop_array[float]
    """

    clip_max_x: float
    """ 

    :type: float
    """

    clip_max_y: float
    """ 

    :type: float
    """

    clip_min_x: float
    """ 

    :type: float
    """

    clip_min_y: float
    """ 

    :type: float
    """

    curves: bpy_prop_collection[CurveMap]
    """ 

    :type: bpy_prop_collection[CurveMap]
    """

    use_clip: bool
    """ Force the curve view to fit a defined boundary

    :type: bool
    """

    white_level: bpy_prop_array[float]
    """ For RGB curves, the color that white is mapped to

    :type: bpy_prop_array[float]
    """

    def update(self):
        """Update curve mapping after making changes"""

    def initialize(self):
        """Initialize curve"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurveModifier(Modifier, bpy_struct):
    """Curve deformation modifier"""

    deform_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ The axis that the curve deforms along

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    object: Object | None
    """ Curve object to deform with

    :type: Object | None
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurvePaintSettings(bpy_struct):
    corner_angle: float
    """ Angles above this are considered corners

    :type: float
    """

    curve_type: typing.Literal["POLY", "BEZIER"]
    """ Type of curve to use for new strokes

    :type: typing.Literal['POLY','BEZIER']
    """

    depth_mode: typing.Literal["CURSOR", "SURFACE"]
    """ Method of projecting depth

    :type: typing.Literal['CURSOR','SURFACE']
    """

    error_threshold: int
    """ Allow deviation for a smoother, less precise line

    :type: int
    """

    fit_method: typing.Literal["REFIT", "SPLIT"]
    """ Curve fitting method

    :type: typing.Literal['REFIT','SPLIT']
    """

    radius_max: float
    """ Radius to use when the maximum pressure is applied (or when a tablet isn't used)

    :type: float
    """

    radius_min: float
    """ Minimum radius when the minimum pressure is applied (also the minimum when tapering)

    :type: float
    """

    radius_taper_end: float
    """ Taper factor for the radius of each point along the curve

    :type: float
    """

    radius_taper_start: float
    """ Taper factor for the radius of each point along the curve

    :type: float
    """

    surface_offset: float
    """ Offset the stroke from the surface

    :type: float
    """

    surface_plane: typing.Literal["NORMAL_VIEW", "NORMAL_SURFACE", "VIEW"]
    """ Plane for projected stroke

    :type: typing.Literal['NORMAL_VIEW','NORMAL_SURFACE','VIEW']
    """

    use_corners_detect: bool
    """ Detect corners and use non-aligned handles

    :type: bool
    """

    use_offset_absolute: bool
    """ Apply a fixed offset (don't scale by the radius)

    :type: bool
    """

    use_pressure_radius: bool
    """ Map tablet pressure to curve radius

    :type: bool
    """

    use_stroke_endpoints: bool
    """ Use the start of the stroke for the depth

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CurvesModifier(SequenceModifier, bpy_struct):
    """RGB curves modifier for sequence strip"""

    curve_mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesCameraSettings(bpy_struct):
    aperture_blades: int
    """ Number of blades in aperture for polygonal bokeh (at least 3)

    :type: int
    """

    aperture_fstop: float
    """ F-stop ratio (lower numbers give more defocus, higher numbers give a sharper image)

    :type: float
    """

    aperture_ratio: float
    """ Distortion to simulate anamorphic lens bokeh

    :type: float
    """

    aperture_rotation: float
    """ Rotation of blades in aperture

    :type: float
    """

    aperture_size: float
    """ Radius of the aperture for depth of field (higher values give more defocus)

    :type: float
    """

    aperture_type: typing.Literal["RADIUS", "FSTOP"]
    """ Use f-stop number or aperture radius

    :type: typing.Literal['RADIUS','FSTOP']
    """

    fisheye_fov: float
    """ Field of view for the fisheye lens

    :type: float
    """

    fisheye_lens: float
    """ Lens focal length (mm)

    :type: float
    """

    latitude_max: float
    """ Maximum latitude (vertical angle) for the equirectangular lens

    :type: float
    """

    latitude_min: float
    """ Minimum latitude (vertical angle) for the equirectangular lens

    :type: float
    """

    longitude_max: float
    """ Maximum longitude (horizontal angle) for the equirectangular lens

    :type: float
    """

    longitude_min: float
    """ Minimum longitude (horizontal angle) for the equirectangular lens

    :type: float
    """

    panorama_type: typing.Literal[
        "EQUIRECTANGULAR", "FISHEYE_EQUIDISTANT", "FISHEYE_EQUISOLID", "MIRRORBALL"
    ]
    """ Distortion to use for the calculation

    :type: typing.Literal['EQUIRECTANGULAR','FISHEYE_EQUIDISTANT','FISHEYE_EQUISOLID','MIRRORBALL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesCurveRenderSettings(bpy_struct):
    cull_backfacing: bool
    """ Do not test the back-face of each strand

    :type: bool
    """

    maximum_width: float
    """ Maximum extension that strand radius can be increased by

    :type: float
    """

    minimum_width: float
    """ Minimal pixel width for strands (0 - deactivated)

    :type: float
    """

    primitive: typing.Literal["TRIANGLES", "LINE_SEGMENTS", "CURVE_SEGMENTS"]
    """ Type of primitive used for hair rendering

    :type: typing.Literal['TRIANGLES','LINE_SEGMENTS','CURVE_SEGMENTS']
    """

    resolution: int
    """ Resolution of generated mesh

    :type: int
    """

    shape: typing.Literal["RIBBONS", "THICK"]
    """ Form of hair

    :type: typing.Literal['RIBBONS','THICK']
    """

    subdivisions: int
    """ Number of subdivisions used in Cardinal curve intersection (power of 2)

    :type: int
    """

    use_curves: bool
    """ Activate Cycles hair rendering for particle system

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesCurveSettings(bpy_struct):
    radius_scale: float
    """ Multiplier of width properties

    :type: float
    """

    root_width: float
    """ Strand's width at root

    :type: float
    """

    shape: float
    """ Strand shape parameter

    :type: float
    """

    tip_width: float
    """ Strand's width at tip

    :type: float
    """

    use_closetip: bool
    """ Set tip radius to zero

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesLampSettings(bpy_struct):
    cast_shadow: bool
    """ Lamp casts shadows

    :type: bool
    """

    is_portal: bool
    """ Use this area lamp to guide sampling of the background, note that this will make the lamp invisible

    :type: bool
    """

    max_bounces: int
    """ Maximum number of bounces the light will contribute to the render

    :type: int
    """

    samples: int
    """ Number of light samples to render for each AA sample

    :type: int
    """

    use_multiple_importance_sampling: bool
    """ Use multiple importance sampling for the lamp, reduces noise for area lamps and sharp glossy materials

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesMaterialSettings(bpy_struct):
    displacement_method: typing.Literal["BUMP", "DISPLACEMENT", "BOTH"]
    """ Method to use for the displacement

    :type: typing.Literal['BUMP','DISPLACEMENT','BOTH']
    """

    homogeneous_volume: bool
    """ When using volume rendering, assume volume has the same density everywhere (not using any textures), for faster rendering

    :type: bool
    """

    sample_as_light: bool
    """ Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources

    :type: bool
    """

    use_transparent_shadow: bool
    """ Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows

    :type: bool
    """

    volume_interpolation: typing.Literal["LINEAR", "CUBIC"]
    """ Interpolation method to use for smoke/fire volumes

    :type: typing.Literal['LINEAR','CUBIC']
    """

    volume_sampling: typing.Literal["DISTANCE", "EQUIANGULAR", "MULTIPLE_IMPORTANCE"]
    """ Sampling method to use for volumes

    :type: typing.Literal['DISTANCE','EQUIANGULAR','MULTIPLE_IMPORTANCE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesMeshSettings(bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesObjectSettings(bpy_struct):
    dicing_rate: float
    """ Multiplier for scene dicing rate (located in the Geometry Panel)

    :type: float
    """

    is_holdout: bool
    """ Render objects as a holdout or matte, creating a hole in the image with zero alpha, to fill out in compositing with real footange or another render

    :type: bool
    """

    is_shadow_catcher: bool
    """ Only render shadows on this object, for compositing renders into real footage

    :type: bool
    """

    motion_steps: int
    """ Control accuracy of motion blur, more steps gives more memory usage (actual number of steps is 2^(steps - 1))

    :type: int
    """

    use_adaptive_subdivision: bool
    """ Use adaptive render time subdivision

    :type: bool
    """

    use_camera_cull: bool
    """ Allow this object and its duplicators to be culled by camera space culling

    :type: bool
    """

    use_deform_motion: bool
    """ Use deformation motion blur for this object

    :type: bool
    """

    use_distance_cull: bool
    """ Allow this object and its duplicators to be culled by distance from camera

    :type: bool
    """

    use_motion_blur: bool
    """ Use motion blur for this object

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesRenderLayerSettings(bpy_struct):
    denoising_diffuse_direct: bool
    """ Denoise the direct diffuse lighting

    :type: bool
    """

    denoising_diffuse_indirect: bool
    """ Denoise the indirect diffuse lighting

    :type: bool
    """

    denoising_feature_strength: float
    """ Controls removal of noisy image feature passes (lower values preserve more detail, but aren't as smooth)

    :type: float
    """

    denoising_glossy_direct: bool
    """ Denoise the direct glossy lighting

    :type: bool
    """

    denoising_glossy_indirect: bool
    """ Denoise the indirect glossy lighting

    :type: bool
    """

    denoising_radius: int
    """ Size of the image area that's used to denoise a pixel (higher values are smoother, but might lose detail and are slower)

    :type: int
    """

    denoising_relative_pca: bool
    """ When removing pixels that don't carry information, use a relative threshold instead of an absolute one (can help to reduce artifacts, but might cause detail loss around edges)

    :type: bool
    """

    denoising_store_passes: bool
    """ Store the denoising feature passes and the noisy image

    :type: bool
    """

    denoising_strength: float
    """ Controls neighbor pixel weighting for the denoising filter (lower values preserve more detail, but aren't as smooth)

    :type: float
    """

    denoising_subsurface_direct: bool
    """ Denoise the direct subsurface lighting

    :type: bool
    """

    denoising_subsurface_indirect: bool
    """ Denoise the indirect subsurface lighting

    :type: bool
    """

    denoising_transmission_direct: bool
    """ Denoise the direct transmission lighting

    :type: bool
    """

    denoising_transmission_indirect: bool
    """ Denoise the indirect transmission lighting

    :type: bool
    """

    pass_crypto_accurate: bool
    """ Gerenate a more accurate Cryptomatte pass. CPU only, may render slower and use more memory

    :type: bool
    """

    pass_crypto_depth: int
    """ Sets how many unique objects can be distinguished per pixel

    :type: int
    """

    pass_debug_bvh_intersections: bool
    """ Store Debug BVH Intersections

    :type: bool
    """

    pass_debug_bvh_traversed_instances: bool
    """ Store Debug BVH Traversed Instances pass

    :type: bool
    """

    pass_debug_bvh_traversed_nodes: bool
    """ Store Debug BVH Traversed Nodes pass

    :type: bool
    """

    pass_debug_ray_bounces: bool
    """ Store Debug Ray Bounces pass

    :type: bool
    """

    pass_debug_render_time: bool
    """ Render time in milliseconds per sample and pixel

    :type: bool
    """

    use_denoising: bool
    """ Denoise the rendered image

    :type: bool
    """

    use_pass_crypto_asset: bool
    """ Render cryptomatte asset pass, for isolating groups of objects with the same parent

    :type: bool
    """

    use_pass_crypto_material: bool
    """ Render cryptomatte material pass, for isolating materials in compositing

    :type: bool
    """

    use_pass_crypto_object: bool
    """ Render cryptomatte object pass, for isolating objects in compositing

    :type: bool
    """

    use_pass_volume_direct: bool
    """ Deliver direct volumetric scattering pass

    :type: bool
    """

    use_pass_volume_indirect: bool
    """ Deliver indirect volumetric scattering pass

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesRenderSettings(bpy_struct):
    aa_samples: int
    """ Number of antialiasing samples to render for each pixel

    :type: int
    """

    ao_bounces: int
    """ Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature

    :type: int
    """

    ao_bounces_render: int
    """ Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature

    :type: int
    """

    ao_samples: int
    """ Number of ambient occlusion samples to render for each AA sample

    :type: int
    """

    bake_type: typing.Literal[
        "COMBINED",
        "AO",
        "SHADOW",
        "NORMAL",
        "UV",
        "ROUGHNESS",
        "EMIT",
        "ENVIRONMENT",
        "DIFFUSE",
        "GLOSSY",
        "TRANSMISSION",
        "SUBSURFACE",
    ]
    """ Type of pass to bake

    :type: typing.Literal['COMBINED','AO','SHADOW','NORMAL','UV','ROUGHNESS','EMIT','ENVIRONMENT','DIFFUSE','GLOSSY','TRANSMISSION','SUBSURFACE']
    """

    blur_glossy: float
    """ Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy

    :type: float
    """

    camera_cull_margin: float
    """ Margin for the camera space culling

    :type: float
    """

    caustics_reflective: bool
    """ Use reflective caustics, resulting in a brighter image (more noise but added realism)

    :type: bool
    """

    caustics_refractive: bool
    """ Use refractive caustics, resulting in a brighter image (more noise but added realism)

    :type: bool
    """

    debug_bvh_layout: typing.Literal["BVH2", "BVH4", "BVH8"]
    """ 

    :type: typing.Literal['BVH2','BVH4','BVH8']
    """

    debug_bvh_time_steps: int
    """ Split BVH primitives by this number of time steps to speed up render time in cost of memory

    :type: int
    """

    debug_bvh_type: typing.Literal["DYNAMIC_BVH", "STATIC_BVH"]
    """ Choose between faster updates, or faster render

    :type: typing.Literal['DYNAMIC_BVH','STATIC_BVH']
    """

    debug_cancel_timeout: float
    """ 

    :type: float
    """

    debug_opencl_device_type: typing.Literal[
        "NONE", "ALL", "DEFAULT", "CPU", "GPU", "ACCELERATOR"
    ]
    """ 

    :type: typing.Literal['NONE','ALL','DEFAULT','CPU','GPU','ACCELERATOR']
    """

    debug_opencl_kernel_type: typing.Literal["DEFAULT", "MEGA", "SPLIT"]
    """ 

    :type: typing.Literal['DEFAULT','MEGA','SPLIT']
    """

    debug_opencl_mem_limit: int
    """ Artificial limit on OpenCL memory usage in MB (0 to disable limit)

    :type: int
    """

    debug_reset_timeout: float
    """ 

    :type: float
    """

    debug_text_timeout: float
    """ 

    :type: float
    """

    debug_tile_size: int
    """ 

    :type: int
    """

    debug_use_cpu_avx: bool
    """ 

    :type: bool
    """

    debug_use_cpu_avx2: bool
    """ 

    :type: bool
    """

    debug_use_cpu_split_kernel: bool
    """ 

    :type: bool
    """

    debug_use_cpu_sse2: bool
    """ 

    :type: bool
    """

    debug_use_cpu_sse3: bool
    """ 

    :type: bool
    """

    debug_use_cpu_sse41: bool
    """ 

    :type: bool
    """

    debug_use_cuda_adaptive_compile: bool
    """ 

    :type: bool
    """

    debug_use_cuda_split_kernel: bool
    """ 

    :type: bool
    """

    debug_use_hair_bvh: bool
    """ Use special type BVH optimized for hair (uses more ram but renders faster)

    :type: bool
    """

    debug_use_opencl_debug: bool
    """ 

    :type: bool
    """

    debug_use_spatial_splits: bool
    """ Use BVH spatial splits: longer builder time, faster render

    :type: bool
    """

    device: typing.Literal["CPU", "GPU"]
    """ Device to use for rendering

    :type: typing.Literal['CPU','GPU']
    """

    dicing_camera: Object | None
    """ Camera to use as reference point when subdividing geometry, useful to avoid crawling artifacts in animations when the scene camera is moving

    :type: Object | None
    """

    dicing_rate: float
    """ Size of a micropolygon in pixels

    :type: float
    """

    diffuse_bounces: int
    """ Maximum number of diffuse reflection bounces, bounded by total maximum

    :type: int
    """

    diffuse_samples: int
    """ Number of diffuse bounce samples to render for each AA sample

    :type: int
    """

    distance_cull_margin: float
    """ Cull objects which are further away from camera than this distance

    :type: float
    """

    feature_set: typing.Literal["SUPPORTED", "EXPERIMENTAL"]
    """ Feature set to use for rendering

    :type: typing.Literal['SUPPORTED','EXPERIMENTAL']
    """

    film_exposure: float
    """ Image brightness scale

    :type: float
    """

    film_transparent: bool
    """ World background is transparent, for compositing the render over another background

    :type: bool
    """

    film_transparent_glass: bool
    """ Render transmissive surfaces as transparent, for compositing glass over another background

    :type: bool
    """

    film_transparent_roughness: float
    """ For transparent transmission, keep surfaces with roughness above the threshold opaque

    :type: float
    """

    filter_type: typing.Literal["BOX", "GAUSSIAN", "BLACKMAN_HARRIS"]
    """ Pixel filter type

    :type: typing.Literal['BOX','GAUSSIAN','BLACKMAN_HARRIS']
    """

    filter_width: float
    """ Pixel filter width

    :type: float
    """

    glossy_bounces: int
    """ Maximum number of glossy reflection bounces, bounded by total maximum

    :type: int
    """

    glossy_samples: int
    """ Number of glossy bounce samples to render for each AA sample

    :type: int
    """

    light_sampling_threshold: float
    """ Probabilistically terminate light samples when the light contribution is below this threshold (more noise but faster rendering). Zero disables the test and never ignores lights

    :type: float
    """

    max_bounces: int
    """ Total maximum number of bounces

    :type: int
    """

    max_subdivisions: int
    """ Stop subdividing when this level is reached even if the dice rate would produce finer tessellation

    :type: int
    """

    mesh_light_samples: int
    """ Number of mesh emission light samples to render for each AA sample

    :type: int
    """

    motion_blur_position: typing.Literal["START", "CENTER", "END"]
    """ Offset for the shutter's time interval, allows to change the motion blur trails

    :type: typing.Literal['START','CENTER','END']
    """

    offscreen_dicing_scale: float
    """ Multiplier for dicing rate of geometry outside of the camera view. The dicing rate of objects is gradually increased the further they are outside the camera view. Lower values provide higher quality reflections and shadows for off screen objects, while higher values use less memory

    :type: float
    """

    pixel_filter_type: typing.Literal["BOX", "GAUSSIAN", "BLACKMAN_HARRIS"]
    """ Pixel filter type

    :type: typing.Literal['BOX','GAUSSIAN','BLACKMAN_HARRIS']
    """

    preview_aa_samples: int
    """ Number of antialiasing samples to render in the viewport, unlimited if 0

    :type: int
    """

    preview_active_layer: bool
    """ Preview active render layer in viewport

    :type: bool
    """

    preview_dicing_rate: float
    """ Size of a micropolygon in pixels during preview render

    :type: float
    """

    preview_pause: bool
    """ Pause all viewport preview renders

    :type: bool
    """

    preview_samples: int
    """ Number of samples to render in the viewport, unlimited if 0

    :type: int
    """

    preview_start_resolution: int
    """ Resolution to start rendering preview at, progressively increasing it to the full viewport size

    :type: int
    """

    progressive: typing.Literal["BRANCHED_PATH", "PATH"]
    """ Method to sample lights and materials

    :type: typing.Literal['BRANCHED_PATH','PATH']
    """

    rolling_shutter_duration: float
    """ Scanline "exposure" time for the rolling shutter effect

    :type: float
    """

    rolling_shutter_type: typing.Literal["NONE", "TOP"]
    """ Type of rolling shutter effect matching CMOS-based cameras

    :type: typing.Literal['NONE','TOP']
    """

    sample_all_lights_direct: bool
    """ Sample all lights (for direct samples), rather than randomly picking one

    :type: bool
    """

    sample_all_lights_indirect: bool
    """ Sample all lights (for indirect samples), rather than randomly picking one

    :type: bool
    """

    sample_clamp_direct: float
    """ If non-zero, the maximum value for a direct sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy

    :type: float
    """

    sample_clamp_indirect: float
    """ If non-zero, the maximum value for an indirect sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy

    :type: float
    """

    samples: int
    """ Number of samples to render for each pixel

    :type: int
    """

    sampling_pattern: typing.Literal["SOBOL", "CORRELATED_MUTI_JITTER"]
    """ Random sampling pattern used by the integrator

    :type: typing.Literal['SOBOL','CORRELATED_MUTI_JITTER']
    """

    seed: int
    """ Seed value for integrator to get different noise patterns

    :type: int
    """

    shading_system: bool
    """ Use Open Shading Language (CPU rendering only)

    :type: bool
    """

    subsurface_samples: int
    """ Number of subsurface scattering samples to render for each AA sample

    :type: int
    """

    texture_limit: typing.Literal[
        "OFF", "128", "256", "512", "1024", "2048", "4096", "8192"
    ]
    """ Limit texture size used by viewport rendering

    :type: typing.Literal['OFF','128','256','512','1024','2048','4096','8192']
    """

    texture_limit_render: typing.Literal[
        "OFF", "128", "256", "512", "1024", "2048", "4096", "8192"
    ]
    """ Limit texture size used by final rendering

    :type: typing.Literal['OFF','128','256','512','1024','2048','4096','8192']
    """

    tile_order: typing.Literal[
        "CENTER",
        "RIGHT_TO_LEFT",
        "LEFT_TO_RIGHT",
        "TOP_TO_BOTTOM",
        "BOTTOM_TO_TOP",
        "HILBERT_SPIRAL",
    ]
    """ Tile order for rendering

    :type: typing.Literal['CENTER','RIGHT_TO_LEFT','LEFT_TO_RIGHT','TOP_TO_BOTTOM','BOTTOM_TO_TOP','HILBERT_SPIRAL']
    """

    transmission_bounces: int
    """ Maximum number of transmission bounces, bounded by total maximum

    :type: int
    """

    transmission_samples: int
    """ Number of transmission bounce samples to render for each AA sample

    :type: int
    """

    transparent_max_bounces: int
    """ Maximum number of transparent bounces

    :type: int
    """

    use_animated_seed: bool
    """ Use different seed values (and hence noise patterns) at different frames

    :type: bool
    """

    use_bvh_embree: bool
    """ Use Embree as ray accelerator

    :type: bool
    """

    use_camera_cull: bool
    """ Allow objects to be culled based on the camera frustum

    :type: bool
    """

    use_distance_cull: bool
    """ Allow objects to be culled based on the distance from camera

    :type: bool
    """

    use_layer_samples: typing.Literal["USE", "BOUNDED", "IGNORE"]
    """ How to use per render layer sample settings

    :type: typing.Literal['USE','BOUNDED','IGNORE']
    """

    use_progressive_refine: bool
    """ Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)

    :type: bool
    """

    use_square_samples: bool
    """ Square sampling values for easier artist control

    :type: bool
    """

    volume_bounces: int
    """ Maximum number of volumetric scattering events

    :type: int
    """

    volume_max_steps: int
    """ Maximum number of steps through the volume before giving up, to avoid extremely long render times with big objects or small step sizes

    :type: int
    """

    volume_samples: int
    """ Number of volume scattering samples to render for each AA sample

    :type: int
    """

    volume_step_size: float
    """ Distance between volume shader samples when rendering the volume (lower values give more accurate and detailed results, but also increased render time)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesVisibilitySettings(bpy_struct):
    camera: bool
    """ Object visibility for camera rays

    :type: bool
    """

    diffuse: bool
    """ Object visibility for diffuse reflection rays

    :type: bool
    """

    glossy: bool
    """ Object visibility for glossy reflection rays

    :type: bool
    """

    scatter: bool
    """ Object visibility for volume scatter rays

    :type: bool
    """

    shadow: bool
    """ Object visibility for shadow rays

    :type: bool
    """

    transmission: bool
    """ Object visibility for transmission rays

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class CyclesWorldSettings(bpy_struct):
    homogeneous_volume: bool
    """ When using volume rendering, assume volume has the same density everywhere(not using any textures), for faster rendering

    :type: bool
    """

    max_bounces: int
    """ Maximum number of bounces the background light will contribute to the render

    :type: int
    """

    sample_map_resolution: int
    """ Importance map size is resolution x resolution/2; higher values potentially produce less noise, at the cost of memory and speed

    :type: int
    """

    samples: int
    """ Number of light samples to render for each AA sample

    :type: int
    """

    sampling_method: typing.Literal["NONE", "AUTOMATIC", "MANUAL"]
    """ How to sample the background light

    :type: typing.Literal['NONE','AUTOMATIC','MANUAL']
    """

    volume_interpolation: typing.Literal["LINEAR", "CUBIC"]
    """ Interpolation method to use for volumes

    :type: typing.Literal['LINEAR','CUBIC']
    """

    volume_sampling: typing.Literal["DISTANCE", "EQUIANGULAR", "MULTIPLE_IMPORTANCE"]
    """ Sampling method to use for volumes

    :type: typing.Literal['DISTANCE','EQUIANGULAR','MULTIPLE_IMPORTANCE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DampedTrackConstraint(Constraint, bpy_struct):
    """Point toward target by taking the shortest rotation path"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    track_axis: typing.Literal[
        "TRACK_X",
        "TRACK_Y",
        "TRACK_Z",
        "TRACK_NEGATIVE_X",
        "TRACK_NEGATIVE_Y",
        "TRACK_NEGATIVE_Z",
    ]
    """ Axis that points to the target object

    :type: typing.Literal['TRACK_X','TRACK_Y','TRACK_Z','TRACK_NEGATIVE_X','TRACK_NEGATIVE_Y','TRACK_NEGATIVE_Z']
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DataTransferModifier(Modifier, bpy_struct):
    """Modifier transferring some data from a source mesh"""

    data_types_edges: set[
        typing.Literal[
            "SHARP_EDGE", "SEAM", "CREASE", "BEVEL_WEIGHT_EDGE", "FREESTYLE_EDGE"
        ]
    ]
    """ Which edge data layers to transfer

    :type: set[typing.Literal['SHARP_EDGE','SEAM','CREASE','BEVEL_WEIGHT_EDGE','FREESTYLE_EDGE']]
    """

    data_types_loops: set[typing.Literal["CUSTOM_NORMAL", "VCOL", "UV"]]
    """ Which face corner data layers to transfer

    :type: set[typing.Literal['CUSTOM_NORMAL','VCOL','UV']]
    """

    data_types_polys: set[typing.Literal["SMOOTH", "FREESTYLE_FACE"]]
    """ Which poly data layers to transfer

    :type: set[typing.Literal['SMOOTH','FREESTYLE_FACE']]
    """

    data_types_verts: set[typing.Literal["VGROUP_WEIGHTS", "BEVEL_WEIGHT_VERT"]]
    """ Which vertex data layers to transfer

    :type: set[typing.Literal['VGROUP_WEIGHTS','BEVEL_WEIGHT_VERT']]
    """

    edge_mapping: typing.Literal[
        "TOPOLOGY", "VERT_NEAREST", "NEAREST", "POLY_NEAREST", "EDGEINTERP_VNORPROJ"
    ]
    """ Method used to map source edges to destination ones

    :type: typing.Literal['TOPOLOGY','VERT_NEAREST','NEAREST','POLY_NEAREST','EDGEINTERP_VNORPROJ']
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    islands_precision: float
    """ Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)

    :type: float
    """

    layers_uv_select_dst: typing.Literal["ACTIVE", "NAME", "INDEX"]
    """ How to match source and destination layers

    :type: typing.Literal['ACTIVE','NAME','INDEX']
    """

    layers_uv_select_src: typing.Literal["ACTIVE", "ALL", "BONE_SELECT", "BONE_DEFORM"]
    """ Which layers to transfer, in case of multi-layers types

    :type: typing.Literal['ACTIVE','ALL','BONE_SELECT','BONE_DEFORM']
    """

    layers_vcol_select_dst: typing.Literal["ACTIVE", "NAME", "INDEX"]
    """ How to match source and destination layers

    :type: typing.Literal['ACTIVE','NAME','INDEX']
    """

    layers_vcol_select_src: typing.Literal[
        "ACTIVE", "ALL", "BONE_SELECT", "BONE_DEFORM"
    ]
    """ Which layers to transfer, in case of multi-layers types

    :type: typing.Literal['ACTIVE','ALL','BONE_SELECT','BONE_DEFORM']
    """

    layers_vgroup_select_dst: typing.Literal["ACTIVE", "NAME", "INDEX"]
    """ How to match source and destination layers

    :type: typing.Literal['ACTIVE','NAME','INDEX']
    """

    layers_vgroup_select_src: typing.Literal[
        "ACTIVE", "ALL", "BONE_SELECT", "BONE_DEFORM"
    ]
    """ Which layers to transfer, in case of multi-layers types

    :type: typing.Literal['ACTIVE','ALL','BONE_SELECT','BONE_DEFORM']
    """

    loop_mapping: typing.Literal[
        "TOPOLOGY",
        "NEAREST_NORMAL",
        "NEAREST_POLYNOR",
        "NEAREST_POLY",
        "POLYINTERP_NEAREST",
        "POLYINTERP_LNORPROJ",
    ]
    """ Method used to map source faces' corners to destination ones

    :type: typing.Literal['TOPOLOGY','NEAREST_NORMAL','NEAREST_POLYNOR','NEAREST_POLY','POLYINTERP_NEAREST','POLYINTERP_LNORPROJ']
    """

    max_distance: float
    """ Maximum allowed distance between source and destination element, for non-topology mappings

    :type: float
    """

    mix_factor: float
    """ Factor to use when applying data to destination (exact behavior depends on mix mode)

    :type: float
    """

    mix_mode: typing.Literal[
        "REPLACE", "ABOVE_THRESHOLD", "BELOW_THRESHOLD", "MIX", "ADD", "SUB", "MUL"
    ]
    """ How to affect destination elements with source values

    :type: typing.Literal['REPLACE','ABOVE_THRESHOLD','BELOW_THRESHOLD','MIX','ADD','SUB','MUL']
    """

    object: Object | None
    """ Object to transfer data from

    :type: Object | None
    """

    poly_mapping: typing.Literal["TOPOLOGY", "NEAREST", "NORMAL", "POLYINTERP_PNORPROJ"]
    """ Method used to map source faces to destination ones

    :type: typing.Literal['TOPOLOGY','NEAREST','NORMAL','POLYINTERP_PNORPROJ']
    """

    ray_radius: float
    """ 'Width' of rays (especially useful when raycasting against vertices or edges)

    :type: float
    """

    use_edge_data: bool
    """ Enable edge data transfer

    :type: bool
    """

    use_loop_data: bool
    """ Enable face corner data transfer

    :type: bool
    """

    use_max_distance: bool
    """ Source elements must be closer than given distance from destination one

    :type: bool
    """

    use_object_transform: bool
    """ Evaluate source and destination meshes in global space

    :type: bool
    """

    use_poly_data: bool
    """ Enable face data transfer

    :type: bool
    """

    use_vert_data: bool
    """ Enable vertex data transfer

    :type: bool
    """

    vert_mapping: typing.Literal[
        "TOPOLOGY",
        "NEAREST",
        "EDGE_NEAREST",
        "EDGEINTERP_NEAREST",
        "POLY_NEAREST",
        "POLYINTERP_NEAREST",
        "POLYINTERP_VNORPROJ",
    ]
    """ Method used to map source vertices to destination ones

    :type: typing.Literal['TOPOLOGY','NEAREST','EDGE_NEAREST','EDGEINTERP_NEAREST','POLY_NEAREST','POLYINTERP_NEAREST','POLYINTERP_VNORPROJ']
    """

    vertex_group: str
    """ Vertex group name for selecting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DecimateModifier(Modifier, bpy_struct):
    """Decimation modifier"""

    angle_limit: float
    """ Only dissolve angles below this (planar only)

    :type: float
    """

    decimate_type: typing.Literal["COLLAPSE", "UNSUBDIV", "DISSOLVE"]
    """ 

    :type: typing.Literal['COLLAPSE','UNSUBDIV','DISSOLVE']
    """

    delimit: set[typing.Literal["NORMAL", "MATERIAL", "SEAM", "SHARP", "UV"]]
    """ Limit merging geometry

    :type: set[typing.Literal['NORMAL','MATERIAL','SEAM','SHARP','UV']]
    """

    face_count: int
    """ The current number of faces in the decimated mesh

    :type: int
    """

    invert_vertex_group: bool
    """ Invert vertex group influence (collapse only)

    :type: bool
    """

    iterations: int
    """ Number of times reduce the geometry (unsubdivide only)

    :type: int
    """

    ratio: float
    """ Ratio of triangles to reduce to (collapse only)

    :type: float
    """

    symmetry_axis: typing.Literal["X", "Y", "Z"]
    """ Axis of symmetry

    :type: typing.Literal['X','Y','Z']
    """

    use_collapse_triangulate: bool
    """ Keep triangulated faces resulting from decimation (collapse only)

    :type: bool
    """

    use_dissolve_boundaries: bool
    """ Dissolve all vertices inbetween face boundaries (planar only)

    :type: bool
    """

    use_symmetry: bool
    """ Maintain symmetry on an axis

    :type: bool
    """

    vertex_group: str
    """ Vertex group name (collapse only)

    :type: str
    """

    vertex_group_factor: float
    """ Vertex group strength

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DelaySensor(Sensor, bpy_struct):
    """Sensor to send delayed events"""

    delay: int
    """ Delay in number of logic tics before the positive trigger (default 60 per second)

    :type: int
    """

    duration: int
    """ If >0, delay in number of logic tics before the negative trigger following the positive trigger

    :type: int
    """

    use_repeat: bool
    """ Toggle repeat option (if selected, the sensor restarts after Delay+Duration logic tics)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Depsgraph(bpy_struct):
    def debug_relations_graphviz(self, filename: str):
        """debug_relations_graphviz

        :param filename: File Name, File in which to store graphviz debug output
        :type filename: str
        """

    def debug_stats_gnuplot(self, filename: str, output_filename: str):
        """debug_stats_gnuplot

        :param filename: File Name, File in which to store graphviz debug output
        :type filename: str
        :param output_filename: Output File Name, File name where gnuplot script will save the result
        :type output_filename: str
        """

    def debug_tag_update(self):
        """debug_tag_update"""

    def debug_stats(self) -> str:
        """Report the number of elements in the Dependency Graph

        :return: result
        :rtype: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DisplaceModifier(Modifier, bpy_struct):
    """Displacement modifier"""

    direction: typing.Literal["X", "Y", "Z", "NORMAL", "CUSTOM_NORMAL", "RGB_TO_XYZ"]
    """ 

    :type: typing.Literal['X','Y','Z','NORMAL','CUSTOM_NORMAL','RGB_TO_XYZ']
    """

    mid_level: float
    """ Material value that gives no displacement

    :type: float
    """

    space: typing.Literal["LOCAL", "GLOBAL"]
    """ 

    :type: typing.Literal['LOCAL','GLOBAL']
    """

    strength: float
    """ Amount to displace geometry

    :type: float
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    texture_coords: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ 

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    texture_coords_object: Object | None
    """ Object to set the texture coordinates

    :type: Object | None
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DisplaySafeAreas(bpy_struct):
    """Safe Areas used in 3D view and the VSE"""

    action: bpy_prop_array[float]
    """ Safe area for general elements

    :type: bpy_prop_array[float]
    """

    action_center: bpy_prop_array[float]
    """ Safe area for general elements in a different aspect ratio

    :type: bpy_prop_array[float]
    """

    title: bpy_prop_array[float]
    """ Safe area for text and graphics

    :type: bpy_prop_array[float]
    """

    title_center: bpy_prop_array[float]
    """ Safe area for text and graphics in a different aspect ratio

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DistortedNoiseTexture(Texture, ID, bpy_struct):
    """Procedural distorted noise texture"""

    distortion: float
    """ Amount of distortion

    :type: float
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_distortion: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis for the distortion

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DomainFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for the domain of a fluid simulation"""

    compressibility: float
    """ Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)

    :type: float
    """

    end_time: float
    """ Simulation time of the last blender frame (in seconds)

    :type: float
    """

    filepath: str
    """ Directory (and/or filename prefix) to store baked fluid simulation files in

    :type: str
    """

    fluid_mesh_vertices: bpy_prop_collection[FluidVertexVelocity]
    """ Vertices of the fluid mesh generated by simulation

    :type: bpy_prop_collection[FluidVertexVelocity]
    """

    frame_offset: int
    """ Offset when reading baked cache

    :type: int
    """

    generate_particles: float
    """ Amount of particles to generate (0=off, 1=normal, >1=more)

    :type: float
    """

    gravity: bpy_prop_array[float]
    """ Gravity in X, Y and Z direction

    :type: bpy_prop_array[float]
    """

    grid_levels: int
    """ Number of coarsened grids to use (-1 for automatic)

    :type: int
    """

    memory_estimate: str
    """ Estimated amount of memory needed for baking the domain

    :type: str
    """

    partial_slip_factor: float
    """ Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip

    :type: float
    """

    preview_resolution: int
    """ Preview resolution in X,Y and Z direction

    :type: int
    """

    render_display_mode: typing.Literal["GEOMETRY", "PREVIEW", "FINAL"]
    """ How to display the mesh for rendering

    :type: typing.Literal['GEOMETRY','PREVIEW','FINAL']
    """

    resolution: int
    """ Domain resolution in X,Y and Z direction

    :type: int
    """

    simulation_rate: float
    """ Fluid motion rate (0 = stationary, 1 = normal speed)

    :type: float
    """

    simulation_scale: float
    """ Size of the simulation domain in meters

    :type: float
    """

    slip_type: typing.Literal["NOSLIP", "PARTIALSLIP", "FREESLIP"]
    """ 

    :type: typing.Literal['NOSLIP','PARTIALSLIP','FREESLIP']
    """

    start_time: float
    """ Simulation time of the first blender frame (in seconds)

    :type: float
    """

    surface_smooth: float
    """ Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)

    :type: float
    """

    surface_subdivisions: int
    """ Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)

    :type: int
    """

    threads: int
    """ Override number of threads for the simulation, 0 is automatic

    :type: int
    """

    tracer_particles: int
    """ Number of tracer particles to generate

    :type: int
    """

    use_reverse_frames: bool
    """ Reverse fluid frames

    :type: bool
    """

    use_speed_vectors: bool
    """ Generate speed vectors for vector blur

    :type: bool
    """

    use_surface_noobs: bool
    """ Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas

    :type: bool
    """

    use_time_override: bool
    """ Use a custom start and end time (in seconds) instead of the scene's timeline

    :type: bool
    """

    viewport_display_mode: typing.Literal["GEOMETRY", "PREVIEW", "FINAL"]
    """ How to display the mesh in the viewport

    :type: typing.Literal['GEOMETRY','PREVIEW','FINAL']
    """

    viscosity_base: float
    """ Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)

    :type: float
    """

    viscosity_exponent: int
    """ Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DopeSheet(bpy_struct):
    """Settings for filtering the channels shown in animation editors"""

    filter_fcurve_name: str
    """ F-Curve live filtering string

    :type: str
    """

    filter_group: Group | None
    """ Group that included object should be a member of

    :type: Group | None
    """

    filter_text: str
    """ Live filtering string

    :type: str
    """

    show_armatures: bool
    """ Include visualization of armature related animation data

    :type: bool
    """

    show_cameras: bool
    """ Include visualization of camera related animation data

    :type: bool
    """

    show_curves: bool
    """ Include visualization of curve related animation data

    :type: bool
    """

    show_datablock_filters: bool
    """ Show options for whether channels related to certain types of data are included

    :type: bool
    """

    show_expanded_summary: bool
    """ Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)

    :type: bool
    """

    show_gpencil: bool
    """ Include visualization of Grease Pencil related animation data and frames

    :type: bool
    """

    show_gpencil_3d_only: bool
    """ Only show Grease Pencil data-blocks used as part of the active scene

    :type: bool
    """

    show_hidden: bool
    """ Include channels from objects/bone that are not visible

    :type: bool
    """

    show_lamps: bool
    """ Include visualization of lamp related animation data

    :type: bool
    """

    show_lattices: bool
    """ Include visualization of lattice related animation data

    :type: bool
    """

    show_linestyles: bool
    """ Include visualization of Line Style related Animation data

    :type: bool
    """

    show_materials: bool
    """ Include visualization of material related animation data

    :type: bool
    """

    show_meshes: bool
    """ Include visualization of mesh related animation data

    :type: bool
    """

    show_metaballs: bool
    """ Include visualization of metaball related animation data

    :type: bool
    """

    show_missing_nla: bool
    """ Include animation data-blocks with no NLA data (NLA editor only)

    :type: bool
    """

    show_modifiers: bool
    """ Include visualization of animation data related to data-blocks linked to modifiers

    :type: bool
    """

    show_nodes: bool
    """ Include visualization of node related animation data

    :type: bool
    """

    show_only_errors: bool
    """ Only include F-Curves and drivers that are disabled or have errors

    :type: bool
    """

    show_only_group_objects: bool
    """ Only include channels from objects in the specified group

    :type: bool
    """

    show_only_matching_fcurves: bool
    """ Only include F-Curves with names containing search text

    :type: bool
    """

    show_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    show_particles: bool
    """ Include visualization of particle related animation data

    :type: bool
    """

    show_scenes: bool
    """ Include visualization of scene related animation data

    :type: bool
    """

    show_shapekeys: bool
    """ Include visualization of shape key related animation data

    :type: bool
    """

    show_speakers: bool
    """ Include visualization of speaker related animation data

    :type: bool
    """

    show_summary: bool
    """ Display an additional 'summary' line (Dope Sheet editors only)

    :type: bool
    """

    show_textures: bool
    """ Include visualization of texture related animation data

    :type: bool
    """

    show_transforms: bool
    """ Include visualization of object-level animation data (mostly transforms)

    :type: bool
    """

    show_worlds: bool
    """ Include visualization of world related animation data

    :type: bool
    """

    source: ID
    """ ID-Block representing source data, usually ID_SCE (i.e. Scene)

    :type: ID
    """

    use_datablock_sort: bool
    """ Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)

    :type: bool
    """

    use_filter_text: bool
    """ Only include channels with names containing search text

    :type: bool
    """

    use_multi_word_filter: bool
    """ Perform fuzzy/multi-word matching (WARNING: May be slow)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Driver(bpy_struct):
    """Driver for the value of a setting based on an external value"""

    expression: str
    """ Expression to use for Scripted Expression

    :type: str
    """

    is_valid: bool
    """ Driver could not be evaluated in past, so should be skipped

    :type: bool
    """

    show_debug_info: bool
    """ Show intermediate values for the driver calculations to allow debugging of drivers

    :type: bool
    """

    type: typing.Literal["AVERAGE", "SUM", "SCRIPTED", "MIN", "MAX"]
    """ Driver type

    :type: typing.Literal['AVERAGE','SUM','SCRIPTED','MIN','MAX']
    """

    use_self: bool
    """ Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)

    :type: bool
    """

    variables: ChannelDriverVariables
    """ Properties acting as inputs for this driver

    :type: ChannelDriverVariables
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DriverTarget(bpy_struct):
    """Source of input values for driver variables"""

    bone_target: str
    """ Name of PoseBone to use as target

    :type: str
    """

    data_path: str
    """ RNA Path (from ID-block) to property used

    :type: str
    """

    id: ID | None
    """ ID-block that the specific property used can be found from (id_type property must be set first)

    :type: ID | None
    """

    id_type: typing.Literal[
        "ACTION",
        "ARMATURE",
        "BRUSH",
        "CAMERA",
        "CACHEFILE",
        "CURVE",
        "FONT",
        "GREASEPENCIL",
        "GROUP",
        "IMAGE",
        "KEY",
        "LAMP",
        "LIBRARY",
        "LINESTYLE",
        "LATTICE",
        "MASK",
        "MATERIAL",
        "META",
        "MESH",
        "MOVIECLIP",
        "NODETREE",
        "OBJECT",
        "PAINTCURVE",
        "PALETTE",
        "PARTICLE",
        "SCENE",
        "SCREEN",
        "SOUND",
        "SPEAKER",
        "TEXT",
        "TEXTURE",
        "WINDOWMANAGER",
        "WORLD",
    ]
    """ Type of ID-block that can be used

    :type: typing.Literal['ACTION','ARMATURE','BRUSH','CAMERA','CACHEFILE','CURVE','FONT','GREASEPENCIL','GROUP','IMAGE','KEY','LAMP','LIBRARY','LINESTYLE','LATTICE','MASK','MATERIAL','META','MESH','MOVIECLIP','NODETREE','OBJECT','PAINTCURVE','PALETTE','PARTICLE','SCENE','SCREEN','SOUND','SPEAKER','TEXT','TEXTURE','WINDOWMANAGER','WORLD']
    """

    transform_space: typing.Literal["WORLD_SPACE", "TRANSFORM_SPACE", "LOCAL_SPACE"]
    """ Space in which transforms are used

    :type: typing.Literal['WORLD_SPACE','TRANSFORM_SPACE','LOCAL_SPACE']
    """

    transform_type: typing.Literal[
        "LOC_X",
        "LOC_Y",
        "LOC_Z",
        "ROT_X",
        "ROT_Y",
        "ROT_Z",
        "SCALE_X",
        "SCALE_Y",
        "SCALE_Z",
    ]
    """ Driver variable type

    :type: typing.Literal['LOC_X','LOC_Y','LOC_Z','ROT_X','ROT_Y','ROT_Z','SCALE_X','SCALE_Y','SCALE_Z']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DriverVariable(bpy_struct):
    """Variable from some source/target for driver relationship"""

    is_name_valid: bool
    """ Is this a valid name for a driver variable

    :type: bool
    """

    name: str
    """ Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)

    :type: str
    """

    targets: bpy_prop_collection[DriverTarget]
    """ Sources of input data for evaluating this variable

    :type: bpy_prop_collection[DriverTarget]
    """

    type: typing.Literal["SINGLE_PROP", "TRANSFORMS", "ROTATION_DIFF", "LOC_DIFF"]
    """ Driver variable type

    :type: typing.Literal['SINGLE_PROP','TRANSFORMS','ROTATION_DIFF','LOC_DIFF']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DupliObject(bpy_struct):
    """An object duplicate"""

    hide: bool
    """ Don't show dupli object in viewport or render

    :type: bool
    """

    index: int
    """ Index in the lowest-level dupli list

    :type: int
    """

    matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Object duplicate transformation matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    object: Object
    """ Object being duplicated

    :type: Object
    """

    orco: bpy_prop_array[float]
    """ Generated coordinates in parent object space

    :type: bpy_prop_array[float]
    """

    particle_system: ParticleSystem
    """ Particle system that this dupli object was instanced from

    :type: ParticleSystem
    """

    persistent_id: bpy_prop_array[int]
    """ Persistent identifier for inter-frame matching of objects with motion blur

    :type: bpy_prop_array[int]
    """

    random_id: int
    """ Random id for this dupli object

    :type: int
    """

    type: typing.Literal["NONE", "FRAMES", "VERTS", "FACES", "GROUP"]
    """ Duplicator type that generated this dupli object

    :type: typing.Literal['NONE','FRAMES','VERTS','FACES','GROUP']
    """

    uv: bpy_prop_array[float]
    """ UV coordinates in parent object space

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DynamicPaintBrushSettings(bpy_struct):
    """Brush settings"""

    invert_proximity: bool
    """ Proximity falloff is applied inside the volume

    :type: bool
    """

    material: Material | None
    """ Material to use (if not defined, material linked to the mesh is used)

    :type: Material | None
    """

    paint_alpha: float
    """ Paint alpha

    :type: float
    """

    paint_color: bpy_prop_array[float]
    """ Color of the paint

    :type: bpy_prop_array[float]
    """

    paint_distance: float
    """ Maximum distance from brush to mesh surface to affect paint

    :type: float
    """

    paint_ramp: ColorRamp
    """ Color ramp used to define proximity falloff

    :type: ColorRamp
    """

    paint_source: typing.Literal[
        "PARTICLE_SYSTEM", "POINT", "DISTANCE", "VOLUME_DISTANCE", "VOLUME"
    ]
    """ 

    :type: typing.Literal['PARTICLE_SYSTEM','POINT','DISTANCE','VOLUME_DISTANCE','VOLUME']
    """

    paint_wetness: float
    """ Paint wetness, visible in wetmap (some effects only affect wet paint)

    :type: float
    """

    particle_system: ParticleSystem | None
    """ The particle system to paint with

    :type: ParticleSystem | None
    """

    proximity_falloff: typing.Literal["SMOOTH", "CONSTANT", "RAMP"]
    """ Proximity falloff type

    :type: typing.Literal['SMOOTH','CONSTANT','RAMP']
    """

    ray_direction: typing.Literal["CANVAS", "BRUSH", "Z_AXIS"]
    """ Ray direction to use for projection (if brush object is located in that direction it's painted)

    :type: typing.Literal['CANVAS','BRUSH','Z_AXIS']
    """

    smooth_radius: float
    """ Smooth falloff added after solid radius

    :type: float
    """

    smudge_strength: float
    """ Smudge effect strength

    :type: float
    """

    solid_radius: float
    """ Radius that will be painted solid

    :type: float
    """

    use_absolute_alpha: bool
    """ Only increase alpha value if paint alpha is higher than existing

    :type: bool
    """

    use_material: bool
    """ Use object material to define color and influence

    :type: bool
    """

    use_negative_volume: bool
    """ Negate influence inside the volume

    :type: bool
    """

    use_paint_erase: bool
    """ Erase / remove paint instead of adding it

    :type: bool
    """

    use_particle_radius: bool
    """ Use radius from particle settings

    :type: bool
    """

    use_proximity_project: bool
    """ Brush is projected to canvas from defined direction within brush proximity

    :type: bool
    """

    use_proximity_ramp_alpha: bool
    """ Only read color ramp alpha

    :type: bool
    """

    use_smudge: bool
    """ Make this brush to smudge existing paint as it moves

    :type: bool
    """

    use_velocity_alpha: bool
    """ Multiply brush influence by velocity color ramp alpha

    :type: bool
    """

    use_velocity_color: bool
    """ Replace brush color by velocity color ramp

    :type: bool
    """

    use_velocity_depth: bool
    """ Multiply brush intersection depth (displace, waves) by velocity ramp alpha

    :type: bool
    """

    velocity_max: float
    """ Velocity considered as maximum influence (Blender units per frame)

    :type: float
    """

    velocity_ramp: ColorRamp
    """ Color ramp used to define brush velocity effect

    :type: ColorRamp
    """

    wave_clamp: float
    """ Maximum level of surface intersection used to influence waves (use 0.0 to disable)

    :type: float
    """

    wave_factor: float
    """ Multiplier for wave influence of this brush

    :type: float
    """

    wave_type: typing.Literal["CHANGE", "DEPTH", "FORCE", "REFLECT"]
    """ 

    :type: typing.Literal['CHANGE','DEPTH','FORCE','REFLECT']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DynamicPaintCanvasSettings(bpy_struct):
    """Dynamic Paint canvas settings"""

    canvas_surfaces: DynamicPaintSurfaces
    """ Paint surface list

    :type: DynamicPaintSurfaces
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DynamicPaintModifier(Modifier, bpy_struct):
    """Dynamic Paint modifier"""

    brush_settings: DynamicPaintBrushSettings
    """ 

    :type: DynamicPaintBrushSettings
    """

    canvas_settings: DynamicPaintCanvasSettings
    """ 

    :type: DynamicPaintCanvasSettings
    """

    ui_type: typing.Literal["CANVAS", "BRUSH"]
    """ 

    :type: typing.Literal['CANVAS','BRUSH']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class DynamicPaintSurface(bpy_struct):
    """A canvas surface layer"""

    brush_group: Group | None
    """ Only use brush objects from this group

    :type: Group | None
    """

    brush_influence_scale: float
    """ Adjust influence brush objects have on this surface

    :type: float
    """

    brush_radius_scale: float
    """ Adjust radius of proximity brushes or particles for this surface

    :type: float
    """

    color_dry_threshold: float
    """ The wetness level when colors start to shift to the background

    :type: float
    """

    color_spread_speed: float
    """ How fast colors get mixed within wet paint

    :type: float
    """

    depth_clamp: float
    """ Maximum level of depth intersection in object space (use 0.0 to disable)

    :type: float
    """

    displace_factor: float
    """ Strength of displace when applied to the mesh

    :type: float
    """

    displace_type: typing.Literal["DISPLACE", "DEPTH"]
    """ 

    :type: typing.Literal['DISPLACE','DEPTH']
    """

    dissolve_speed: int
    """ Approximately in how many frames should dissolve happen

    :type: int
    """

    drip_acceleration: float
    """ How much surface acceleration affects dripping

    :type: float
    """

    drip_velocity: float
    """ How much surface velocity affects dripping

    :type: float
    """

    dry_speed: int
    """ Approximately in how many frames should drying happen

    :type: int
    """

    effect_ui: typing.Literal["SPREAD", "DRIP", "SHRINK"]
    """ 

    :type: typing.Literal['SPREAD','DRIP','SHRINK']
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    frame_end: int
    """ Simulation end frame

    :type: int
    """

    frame_start: int
    """ Simulation start frame

    :type: int
    """

    frame_substeps: int
    """ Do extra frames between scene frames to ensure smooth motion

    :type: int
    """

    image_fileformat: typing.Literal["PNG", "OPENEXR"]
    """ 

    :type: typing.Literal['PNG','OPENEXR']
    """

    image_output_path: str
    """ Directory to save the textures

    :type: str
    """

    image_resolution: int
    """ Output image resolution

    :type: int
    """

    init_color: bpy_prop_array[float]
    """ Initial color of the surface

    :type: bpy_prop_array[float]
    """

    init_color_type: typing.Literal["NONE", "COLOR", "TEXTURE", "VERTEX_COLOR"]
    """ 

    :type: typing.Literal['NONE','COLOR','TEXTURE','VERTEX_COLOR']
    """

    init_layername: str
    """ 

    :type: str
    """

    init_texture: Texture | None
    """ 

    :type: Texture | None
    """

    is_active: bool
    """ Toggle whether surface is processed or ignored

    :type: bool
    """

    is_cache_user: bool
    """ 

    :type: bool
    """

    name: str
    """ Surface name

    :type: str
    """

    output_name_a: str
    """ Name used to save output from this surface

    :type: str
    """

    output_name_b: str
    """ Name used to save output from this surface

    :type: str
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    preview_id: typing.Literal["PAINT", "WETMAP"]
    """ 

    :type: typing.Literal['PAINT','WETMAP']
    """

    show_preview: bool
    """ Display surface preview in 3D-views

    :type: bool
    """

    shrink_speed: float
    """ How fast shrink effect moves on the canvas surface

    :type: float
    """

    spread_speed: float
    """ How fast spread effect moves on the canvas surface

    :type: float
    """

    surface_format: typing.Literal["VERTEX", "IMAGE"]
    """ Surface Format

    :type: typing.Literal['VERTEX','IMAGE']
    """

    surface_type: typing.Literal["PAINT"]
    """ Surface Type

    :type: typing.Literal['PAINT']
    """

    use_antialiasing: bool
    """ Use 5x multisampling to smooth paint edges

    :type: bool
    """

    use_color_preview: bool
    """ Whether this surface has some color preview for 3D view

    :type: bool
    """

    use_dissolve: bool
    """ Enable to make surface changes disappear over time

    :type: bool
    """

    use_dissolve_log: bool
    """ Use logarithmic dissolve (makes high values to fade faster than low values)

    :type: bool
    """

    use_drip: bool
    """ Process drip effect (drip wet paint to gravity direction)

    :type: bool
    """

    use_dry_log: bool
    """ Use logarithmic drying (makes high values to dry faster than low values)

    :type: bool
    """

    use_drying: bool
    """ Enable to make surface wetness dry over time

    :type: bool
    """

    use_incremental_displace: bool
    """ New displace is added cumulatively on top of existing

    :type: bool
    """

    use_output_a: bool
    """ Save this output layer

    :type: bool
    """

    use_output_b: bool
    """ Save this output layer

    :type: bool
    """

    use_premultiply: bool
    """ Multiply color by alpha (recommended for Blender input)

    :type: bool
    """

    use_shrink: bool
    """ Process shrink effect (shrink paint areas)

    :type: bool
    """

    use_spread: bool
    """ Process spread effect (spread wet paint around surface)

    :type: bool
    """

    use_wave_open_border: bool
    """ Pass waves through mesh edges

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    wave_damping: float
    """ Wave damping factor

    :type: float
    """

    wave_smoothness: float
    """ Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)

    :type: float
    """

    wave_speed: float
    """ Wave propagation speed

    :type: float
    """

    wave_spring: float
    """ Spring force that pulls water level back to zero

    :type: float
    """

    wave_timescale: float
    """ Wave time scaling factor

    :type: float
    """

    def output_exists(self, object: Object, index: int | None) -> bool:
        """Checks if surface output layer of given name exists

        :param object:
        :type object: Object
        :param index: Index
        :type index: int | None
        :return:
        :rtype: bool
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EdgeSplitModifier(Modifier, bpy_struct):
    """Edge splitting modifier to create sharp edges"""

    split_angle: float
    """ Angle above which to split edges

    :type: float
    """

    use_edge_angle: bool
    """ Split edges with high angle between faces

    :type: bool
    """

    use_edge_sharp: bool
    """ Split edges that are marked as sharp

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EditBone(bpy_struct):
    """Editmode bone in an Armature data-block"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveiny: float
    """ Y-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveouty: float
    """ Y-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_easein: float
    """ Length of first Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: float
    """ Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bbone_scaleout: float
    """ Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bbone_segments: int
    """ Number of subdivisions of bone (for B-Bones only)

    :type: int
    """

    bbone_x: float
    """ B-Bone X size

    :type: float
    """

    bbone_z: float
    """ B-Bone Z size

    :type: float
    """

    envelope_distance: float
    """ Bone deformation distance (for Envelope deform only)

    :type: float
    """

    envelope_weight: float
    """ Bone deformation weight (for Envelope deform only)

    :type: float
    """

    head: bpy_prop_array[float]
    """ Location of head end of the bone

    :type: bpy_prop_array[float]
    """

    head_radius: float
    """ Radius of head of bone (for Envelope deform only)

    :type: float
    """

    hide: bool
    """ Bone is not visible when in Edit Mode

    :type: bool
    """

    hide_select: bool
    """ Bone is able to be selected

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Layers bone exists in

    :type: bpy_prop_array[bool]
    """

    lock: bool
    """ Bone is not able to be transformed when in Edit Mode

    :type: bool
    """

    matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Matrix combining loc/rot of the bone (head position, direction and roll), in armature space (WARNING: does not include/support bone's length/size)

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    name: str
    """ 

    :type: str
    """

    parent: typing_extensions.Self | None
    """ Parent edit bone (in same Armature)

    :type: typing_extensions.Self | None
    """

    roll: float
    """ Bone rotation around head-tail axis

    :type: float
    """

    select: bool
    """ 

    :type: bool
    """

    select_head: bool
    """ 

    :type: bool
    """

    select_tail: bool
    """ 

    :type: bool
    """

    show_wire: bool
    """ Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)

    :type: bool
    """

    tail: bpy_prop_array[float]
    """ Location of tail end of the bone

    :type: bpy_prop_array[float]
    """

    tail_radius: float
    """ Radius of tail of bone (for Envelope deform only)

    :type: float
    """

    use_connect: bool
    """ When bone has a parent, bone's head is stuck to the parent's tail

    :type: bool
    """

    use_cyclic_offset: bool
    """ When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)

    :type: bool
    """

    use_deform: bool
    """ Enable Bone to deform geometry

    :type: bool
    """

    use_endroll_as_inroll: bool
    """ Use Roll Out of parent bone as Roll In of its children

    :type: bool
    """

    use_envelope_multiply: bool
    """ When deforming bone, multiply effects of Vertex Group weights with Envelope influence

    :type: bool
    """

    use_inherit_rotation: bool
    """ Bone inherits rotation or scale from parent bone

    :type: bool
    """

    use_inherit_scale: bool
    """ Bone inherits scaling from parent bone

    :type: bool
    """

    use_local_location: bool
    """ Bone location is set in local space

    :type: bool
    """

    use_relative_parent: bool
    """ Object children will use relative transform, like deform

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character
(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.
(readonly)"""

    children: typing.Any
    """ A list of all the bones children.
(readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.
(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.
(readonly)"""

    length: typing.Any
    """ The distance from head to tail,
when set the head is moved to fit the length."""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent
(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)
(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.
(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.
(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.
(readonly)"""

    def align_roll(self, vector: collections.abc.Iterable[float] | None):
        """Align the bone to a localspace roll so the Z axis points in the direction of the vector given

        :param vector: Vector
        :type vector: collections.abc.Iterable[float] | None
        """

    def align_orientation(self, other):
        """Align this bone to another by moving its tail and settings its roll
        the length of the other bone is not used.

                :param other:
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        scale: bool | None = True,
        roll: bool | None = True,
    ):
        """Transform the the bones head, tail, roll and envelope
        (when the matrix has a scale component).

                :param matrix: 3x3 or 4x4 transformation matrix.
                :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
                :param scale: Scale the bone envelope by the matrix.
                :type scale: bool | None
                :param roll: Correct the roll to point in the same relative
        direction to the head and tail.
                :type roll: bool | None
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EditObjectActuator(Actuator, bpy_struct):
    """Actuator used to edit objects"""

    angular_velocity: bpy_prop_array[float]
    """ Angular velocity upon creation

    :type: bpy_prop_array[float]
    """

    dynamic_operation: typing.Literal[
        "RESTOREDYN",
        "SUSPENDDYN",
        "ENABLERIGIDBODY",
        "DISABLERIGIDBODY",
        "SETMASS",
        "RESTOREPHY",
        "SUSPENDPHY",
    ]
    """ 

    :type: typing.Literal['RESTOREDYN','SUSPENDDYN','ENABLERIGIDBODY','DISABLERIGIDBODY','SETMASS','RESTOREPHY','SUSPENDPHY']
    """

    linear_velocity: bpy_prop_array[float]
    """ Velocity upon creation

    :type: bpy_prop_array[float]
    """

    mass: float
    """ The mass of the object

    :type: float
    """

    mesh: Mesh | None
    """ Replace the existing, when left blank 'Phys' will remake the existing physics mesh

    :type: Mesh | None
    """

    mode: typing.Literal["ADDOBJECT", "ENDOBJECT", "REPLACEMESH", "TRACKTO", "DYNAMICS"]
    """ The mode of the actuator

    :type: typing.Literal['ADDOBJECT','ENDOBJECT','REPLACEMESH','TRACKTO','DYNAMICS']
    """

    object: Object | None
    """ Add this Object and all its children (can't be on a visible layer)

    :type: Object | None
    """

    time: float
    """ Duration the new Object lives or the track takes

    :type: float
    """

    track_axis: typing.Literal[
        "TRACKAXISX",
        "TRACKAXISY",
        "TRACKAXISZ",
        "TRACKAXISNEGX",
        "TRACKAXISNEGY",
        "TRACKAXISNEGZ",
    ]
    """ The axis that points to the target object

    :type: typing.Literal['TRACKAXISX','TRACKAXISY','TRACKAXISZ','TRACKAXISNEGX','TRACKAXISNEGY','TRACKAXISNEGZ']
    """

    track_object: Object | None
    """ Track to this Object

    :type: Object | None
    """

    up_axis: typing.Literal["UPAXISX", "UPAXISY", "UPAXISZ"]
    """ The axis that points upward

    :type: typing.Literal['UPAXISX','UPAXISY','UPAXISZ']
    """

    use_3d_tracking: bool
    """ Enable 3D tracking

    :type: bool
    """

    use_local_angular_velocity: bool
    """ Apply the rotation locally

    :type: bool
    """

    use_local_linear_velocity: bool
    """ Apply the transformation locally

    :type: bool
    """

    use_replace_display_mesh: bool
    """ Replace the display mesh

    :type: bool
    """

    use_replace_physics_mesh: bool
    """ Replace the physics mesh (triangle bounds only - compound shapes not supported)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EffectSequence(Sequence, bpy_struct):
    """Sequence strip applying an effect on the images created by other strips"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EffectorWeights(bpy_struct):
    """Effector weights for physics simulation"""

    all: float
    """ All effector's weight

    :type: float
    """

    apply_to_hair_growing: bool
    """ Use force fields when growing hair

    :type: bool
    """

    boid: float
    """ Boid effector weight

    :type: float
    """

    charge: float
    """ Charge effector weight

    :type: float
    """

    curve_guide: float
    """ Curve guide effector weight

    :type: float
    """

    drag: float
    """ Drag effector weight

    :type: float
    """

    force: float
    """ Force effector weight

    :type: float
    """

    gravity: float
    """ Global gravity weight

    :type: float
    """

    group: Group | None
    """ Limit effectors to this Group

    :type: Group | None
    """

    harmonic: float
    """ Harmonic effector weight

    :type: float
    """

    lennardjones: float
    """ Lennard-Jones effector weight

    :type: float
    """

    magnetic: float
    """ Magnetic effector weight

    :type: float
    """

    smokeflow: float
    """ Smoke Flow effector weight

    :type: float
    """

    texture: float
    """ Texture effector weight

    :type: float
    """

    turbulence: float
    """ Turbulence effector weight

    :type: float
    """

    vortex: float
    """ Vortex effector weight

    :type: float
    """

    wind: float
    """ Wind effector weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EnumProperty(Property, bpy_struct):
    """RNA enumeration property definition, to choose from a number of predefined options"""

    default: typing.Literal["DUMMY"]
    """ Default value for this enum

    :type: typing.Literal['DUMMY']
    """

    default_flag: set[str]
    """ Default value for this enum

    :type: set[str]
    """

    enum_items: bpy_prop_collection[EnumPropertyItem]
    """ Possible values for the property

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    enum_items_static: bpy_prop_collection[EnumPropertyItem]
    """ Possible values for the property (never calls optional dynamic generation of those)

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EnumPropertyItem(bpy_struct):
    """Definition of a choice in an RNA enum property"""

    description: str
    """ Description of the item's purpose

    :type: str
    """

    icon: typing.Literal[
        "NONE",
        "QUESTION",
        "ERROR",
        "CANCEL",
        "TRIA_RIGHT",
        "TRIA_DOWN",
        "TRIA_LEFT",
        "TRIA_UP",
        "ARROW_LEFTRIGHT",
        "PLUS",
        "DISCLOSURE_TRI_DOWN",
        "DISCLOSURE_TRI_RIGHT",
        "RADIOBUT_OFF",
        "RADIOBUT_ON",
        "MENU_PANEL",
        "BLENDER",
        "GRIP",
        "DOT",
        "COLLAPSEMENU",
        "X",
        "GO_LEFT",
        "PLUG",
        "UI",
        "NODE",
        "NODE_SEL",
        "FULLSCREEN",
        "SPLITSCREEN",
        "RIGHTARROW_THIN",
        "BORDERMOVE",
        "VIEWZOOM",
        "ZOOMIN",
        "ZOOMOUT",
        "PANEL_CLOSE",
        "COPY_ID",
        "EYEDROPPER",
        "LINK_AREA",
        "AUTO",
        "CHECKBOX_DEHLT",
        "CHECKBOX_HLT",
        "UNLOCKED",
        "LOCKED",
        "UNPINNED",
        "PINNED",
        "SCREEN_BACK",
        "RIGHTARROW",
        "DOWNARROW_HLT",
        "DOTSUP",
        "DOTSDOWN",
        "LINK",
        "INLINK",
        "PLUGIN",
        "HELP",
        "GHOST_ENABLED",
        "COLOR",
        "LINKED",
        "UNLINKED",
        "HAND",
        "ZOOM_ALL",
        "ZOOM_SELECTED",
        "ZOOM_PREVIOUS",
        "ZOOM_IN",
        "ZOOM_OUT",
        "RENDER_REGION",
        "BORDER_RECT",
        "BORDER_LASSO",
        "FREEZE",
        "STYLUS_PRESSURE",
        "GHOST_DISABLED",
        "NEW",
        "FILE_TICK",
        "QUIT",
        "URL",
        "RECOVER_LAST",
        "FULLSCREEN_ENTER",
        "FULLSCREEN_EXIT",
        "BLANK1",
        "LAMP",
        "MATERIAL",
        "TEXTURE",
        "ANIM",
        "WORLD",
        "SCENE",
        "EDIT",
        "GAME",
        "RADIO",
        "SCRIPT",
        "PARTICLES",
        "PHYSICS",
        "SPEAKER",
        "TEXTURE_SHADED",
        "VIEW3D",
        "IPO",
        "OOPS",
        "BUTS",
        "FILESEL",
        "IMAGE_COL",
        "INFO",
        "SEQUENCE",
        "TEXT",
        "IMASEL",
        "SOUND",
        "ACTION",
        "NLA",
        "SCRIPTWIN",
        "TIME",
        "NODETREE",
        "LOGIC",
        "CONSOLE",
        "PREFERENCES",
        "CLIP",
        "ASSET_MANAGER",
        "OBJECT_DATAMODE",
        "EDITMODE_HLT",
        "FACESEL_HLT",
        "VPAINT_HLT",
        "TPAINT_HLT",
        "WPAINT_HLT",
        "SCULPTMODE_HLT",
        "POSE_HLT",
        "PARTICLEMODE",
        "LIGHTPAINT",
        "SCENE_DATA",
        "RENDERLAYERS",
        "WORLD_DATA",
        "OBJECT_DATA",
        "MESH_DATA",
        "CURVE_DATA",
        "META_DATA",
        "LATTICE_DATA",
        "LAMP_DATA",
        "MATERIAL_DATA",
        "TEXTURE_DATA",
        "ANIM_DATA",
        "CAMERA_DATA",
        "PARTICLE_DATA",
        "LIBRARY_DATA_DIRECT",
        "GROUP",
        "ARMATURE_DATA",
        "POSE_DATA",
        "BONE_DATA",
        "CONSTRAINT",
        "SHAPEKEY_DATA",
        "CONSTRAINT_BONE",
        "CAMERA_STEREO",
        "PACKAGE",
        "UGLYPACKAGE",
        "BRUSH_DATA",
        "IMAGE_DATA",
        "FILE",
        "FCURVE",
        "FONT_DATA",
        "RENDER_RESULT",
        "SURFACE_DATA",
        "EMPTY_DATA",
        "SETTINGS",
        "RENDER_ANIMATION",
        "RENDER_STILL",
        "LIBRARY_DATA_BROKEN",
        "BOIDS",
        "STRANDS",
        "LIBRARY_DATA_INDIRECT",
        "GREASEPENCIL",
        "LINE_DATA",
        "GROUP_BONE",
        "GROUP_VERTEX",
        "GROUP_VCOL",
        "GROUP_UVS",
        "RNA",
        "RNA_ADD",
        "OUTLINER_OB_EMPTY",
        "OUTLINER_OB_MESH",
        "OUTLINER_OB_CURVE",
        "OUTLINER_OB_LATTICE",
        "OUTLINER_OB_META",
        "OUTLINER_OB_LAMP",
        "OUTLINER_OB_CAMERA",
        "OUTLINER_OB_ARMATURE",
        "OUTLINER_OB_FONT",
        "OUTLINER_OB_SURFACE",
        "OUTLINER_OB_SPEAKER",
        "OUTLINER_OB_FORCE_FIELD",
        "OUTLINER_OB_GROUP_INSTANCE",
        "RESTRICT_COLOR_OFF",
        "RESTRICT_COLOR_ON",
        "RESTRICT_VIEW_OFF",
        "RESTRICT_VIEW_ON",
        "RESTRICT_SELECT_OFF",
        "RESTRICT_SELECT_ON",
        "RESTRICT_RENDER_OFF",
        "RESTRICT_RENDER_ON",
        "OUTLINER_DATA_EMPTY",
        "OUTLINER_DATA_MESH",
        "OUTLINER_DATA_CURVE",
        "OUTLINER_DATA_LATTICE",
        "OUTLINER_DATA_META",
        "OUTLINER_DATA_LAMP",
        "OUTLINER_DATA_CAMERA",
        "OUTLINER_DATA_ARMATURE",
        "OUTLINER_DATA_FONT",
        "OUTLINER_DATA_SURFACE",
        "OUTLINER_DATA_SPEAKER",
        "OUTLINER_DATA_POSE",
        "MESH_PLANE",
        "MESH_CUBE",
        "MESH_CIRCLE",
        "MESH_UVSPHERE",
        "MESH_ICOSPHERE",
        "MESH_GRID",
        "MESH_MONKEY",
        "MESH_CYLINDER",
        "MESH_TORUS",
        "MESH_CONE",
        "MESH_CAPSULE",
        "LAMP_POINT",
        "LAMP_SUN",
        "LAMP_SPOT",
        "LAMP_HEMI",
        "LAMP_AREA",
        "META_EMPTY",
        "META_PLANE",
        "META_CUBE",
        "META_BALL",
        "META_ELLIPSOID",
        "META_CAPSULE",
        "SURFACE_NCURVE",
        "SURFACE_NCIRCLE",
        "SURFACE_NSURFACE",
        "SURFACE_NCYLINDER",
        "SURFACE_NSPHERE",
        "SURFACE_NTORUS",
        "CURVE_BEZCURVE",
        "CURVE_BEZCIRCLE",
        "CURVE_NCURVE",
        "CURVE_NCIRCLE",
        "CURVE_PATH",
        "COLOR_RED",
        "COLOR_GREEN",
        "COLOR_BLUE",
        "TRIA_RIGHT_BAR",
        "TRIA_DOWN_BAR",
        "TRIA_LEFT_BAR",
        "TRIA_UP_BAR",
        "FORCE_FORCE",
        "FORCE_WIND",
        "FORCE_VORTEX",
        "FORCE_MAGNETIC",
        "FORCE_HARMONIC",
        "FORCE_CHARGE",
        "FORCE_LENNARDJONES",
        "FORCE_TEXTURE",
        "FORCE_CURVE",
        "FORCE_BOID",
        "FORCE_TURBULENCE",
        "FORCE_DRAG",
        "FORCE_SMOKEFLOW",
        "NODE_INSERT_ON",
        "NODE_INSERT_OFF",
        "MODIFIER",
        "MOD_WAVE",
        "MOD_BUILD",
        "MOD_DECIM",
        "MOD_MIRROR",
        "MOD_SOFT",
        "MOD_SUBSURF",
        "HOOK",
        "MOD_PHYSICS",
        "MOD_PARTICLES",
        "MOD_BOOLEAN",
        "MOD_EDGESPLIT",
        "MOD_ARRAY",
        "MOD_UVPROJECT",
        "MOD_DISPLACE",
        "MOD_CURVE",
        "MOD_LATTICE",
        "CONSTRAINT_DATA",
        "MOD_ARMATURE",
        "MOD_SHRINKWRAP",
        "MOD_CAST",
        "MOD_MESHDEFORM",
        "MOD_BEVEL",
        "MOD_SMOOTH",
        "MOD_SIMPLEDEFORM",
        "MOD_MASK",
        "MOD_CLOTH",
        "MOD_EXPLODE",
        "MOD_FLUIDSIM",
        "MOD_MULTIRES",
        "MOD_SMOKE",
        "MOD_SOLIDIFY",
        "MOD_SCREW",
        "MOD_VERTEX_WEIGHT",
        "MOD_DYNAMICPAINT",
        "MOD_REMESH",
        "MOD_OCEAN",
        "MOD_WARP",
        "MOD_SKIN",
        "MOD_TRIANGULATE",
        "MOD_WIREFRAME",
        "MOD_DATA_TRANSFER",
        "MOD_NORMALEDIT",
        "REC",
        "PLAY",
        "FF",
        "REW",
        "PAUSE",
        "PREV_KEYFRAME",
        "NEXT_KEYFRAME",
        "PLAY_AUDIO",
        "PLAY_REVERSE",
        "PREVIEW_RANGE",
        "ACTION_TWEAK",
        "PMARKER_ACT",
        "PMARKER_SEL",
        "PMARKER",
        "MARKER_HLT",
        "MARKER",
        "SPACE2",
        "SPACE3",
        "KEYINGSET",
        "KEY_DEHLT",
        "KEY_HLT",
        "MUTE_IPO_OFF",
        "MUTE_IPO_ON",
        "VISIBLE_IPO_OFF",
        "VISIBLE_IPO_ON",
        "DRIVER",
        "SOLO_OFF",
        "SOLO_ON",
        "FRAME_PREV",
        "FRAME_NEXT",
        "NLA_PUSHDOWN",
        "IPO_CONSTANT",
        "IPO_LINEAR",
        "IPO_BEZIER",
        "IPO_SINE",
        "IPO_QUAD",
        "IPO_CUBIC",
        "IPO_QUART",
        "IPO_QUINT",
        "IPO_EXPO",
        "IPO_CIRC",
        "IPO_BOUNCE",
        "IPO_ELASTIC",
        "IPO_BACK",
        "IPO_EASE_IN",
        "IPO_EASE_OUT",
        "IPO_EASE_IN_OUT",
        "NORMALIZE_FCURVES",
        "VERTEXSEL",
        "EDGESEL",
        "FACESEL",
        "LOOPSEL",
        "ROTATE",
        "CURSOR",
        "ROTATECOLLECTION",
        "ROTATECENTER",
        "ROTACTIVE",
        "ALIGN",
        "SMOOTHCURVE",
        "SPHERECURVE",
        "ROOTCURVE",
        "SHARPCURVE",
        "LINCURVE",
        "NOCURVE",
        "RNDCURVE",
        "PROP_OFF",
        "PROP_ON",
        "PROP_CON",
        "SCULPT_DYNTOPO",
        "PARTICLE_POINT",
        "PARTICLE_TIP",
        "PARTICLE_PATH",
        "MAN_TRANS",
        "MAN_ROT",
        "MAN_SCALE",
        "MANIPUL",
        "SNAP_OFF",
        "SNAP_ON",
        "SNAP_NORMAL",
        "SNAP_GRID",
        "SNAP_VERTEX",
        "SNAP_EDGE",
        "SNAP_FACE",
        "SNAP_VOLUME",
        "SNAP_INCREMENT",
        "STICKY_UVS_LOC",
        "STICKY_UVS_DISABLE",
        "STICKY_UVS_VERT",
        "CLIPUV_DEHLT",
        "CLIPUV_HLT",
        "SNAP_PEEL_OBJECT",
        "GRID",
        "PASTEDOWN",
        "COPYDOWN",
        "PASTEFLIPUP",
        "PASTEFLIPDOWN",
        "SNAP_SURFACE",
        "AUTOMERGE_ON",
        "AUTOMERGE_OFF",
        "RETOPO",
        "UV_VERTEXSEL",
        "UV_EDGESEL",
        "UV_FACESEL",
        "UV_ISLANDSEL",
        "UV_SYNC_SELECT",
        "BBOX",
        "WIRE",
        "SOLID",
        "SMOOTH",
        "POTATO",
        "ORTHO",
        "LOCKVIEW_OFF",
        "LOCKVIEW_ON",
        "AXIS_SIDE",
        "AXIS_FRONT",
        "AXIS_TOP",
        "NDOF_DOM",
        "NDOF_TURN",
        "NDOF_FLY",
        "NDOF_TRANS",
        "LAYER_USED",
        "LAYER_ACTIVE",
        "SORTALPHA",
        "SORTBYEXT",
        "SORTTIME",
        "SORTSIZE",
        "LONGDISPLAY",
        "SHORTDISPLAY",
        "GHOST",
        "IMGDISPLAY",
        "SAVE_AS",
        "SAVE_COPY",
        "BOOKMARKS",
        "FONTPREVIEW",
        "FILTER",
        "NEWFOLDER",
        "OPEN_RECENT",
        "FILE_PARENT",
        "FILE_REFRESH",
        "FILE_FOLDER",
        "FILE_BLANK",
        "FILE_BLEND",
        "FILE_IMAGE",
        "FILE_MOVIE",
        "FILE_SCRIPT",
        "FILE_SOUND",
        "FILE_FONT",
        "FILE_TEXT",
        "RECOVER_AUTO",
        "SAVE_PREFS",
        "LINK_BLEND",
        "APPEND_BLEND",
        "IMPORT",
        "EXPORT",
        "EXTERNAL_DATA",
        "LOAD_FACTORY",
        "LOOP_BACK",
        "LOOP_FORWARDS",
        "BACK",
        "FORWARD",
        "FILE_HIDDEN",
        "FILE_BACKUP",
        "DISK_DRIVE",
        "MATPLANE",
        "MATSPHERE",
        "MATCUBE",
        "MONKEY",
        "HAIR",
        "ALIASED",
        "ANTIALIASED",
        "MAT_SPHERE_SKY",
        "WORDWRAP_OFF",
        "WORDWRAP_ON",
        "SYNTAX_OFF",
        "SYNTAX_ON",
        "LINENUMBERS_OFF",
        "LINENUMBERS_ON",
        "SCRIPTPLUGINS",
        "SEQ_SEQUENCER",
        "SEQ_PREVIEW",
        "SEQ_LUMA_WAVEFORM",
        "SEQ_CHROMA_SCOPE",
        "SEQ_HISTOGRAM",
        "SEQ_SPLITVIEW",
        "IMAGE_RGB",
        "IMAGE_RGB_ALPHA",
        "IMAGE_ALPHA",
        "IMAGE_ZDEPTH",
        "IMAGEFILE",
        "BRUSH_ADD",
        "BRUSH_BLOB",
        "BRUSH_BLUR",
        "BRUSH_CLAY",
        "BRUSH_CLAY_STRIPS",
        "BRUSH_CLONE",
        "BRUSH_CREASE",
        "BRUSH_DARKEN",
        "BRUSH_FILL",
        "BRUSH_FLATTEN",
        "BRUSH_GRAB",
        "BRUSH_INFLATE",
        "BRUSH_LAYER",
        "BRUSH_LIGHTEN",
        "BRUSH_MASK",
        "BRUSH_MIX",
        "BRUSH_MULTIPLY",
        "BRUSH_NUDGE",
        "BRUSH_PINCH",
        "BRUSH_SCRAPE",
        "BRUSH_SCULPT_DRAW",
        "BRUSH_SMEAR",
        "BRUSH_SMOOTH",
        "BRUSH_SNAKE_HOOK",
        "BRUSH_SOFTEN",
        "BRUSH_SUBTRACT",
        "BRUSH_TEXDRAW",
        "BRUSH_TEXFILL",
        "BRUSH_TEXMASK",
        "BRUSH_THUMB",
        "BRUSH_ROTATE",
        "BRUSH_VERTEXDRAW",
        "MATCAP_01",
        "MATCAP_02",
        "MATCAP_03",
        "MATCAP_04",
        "MATCAP_05",
        "MATCAP_06",
        "MATCAP_07",
        "MATCAP_08",
        "MATCAP_09",
        "MATCAP_10",
        "MATCAP_11",
        "MATCAP_12",
        "MATCAP_13",
        "MATCAP_14",
        "MATCAP_15",
        "MATCAP_16",
        "MATCAP_17",
        "MATCAP_18",
        "MATCAP_19",
        "MATCAP_20",
        "MATCAP_21",
        "MATCAP_22",
        "MATCAP_23",
        "MATCAP_24",
        "SMALL_TRI_RIGHT_VEC",
        "KEYTYPE_KEYFRAME_VEC",
        "KEYTYPE_BREAKDOWN_VEC",
        "KEYTYPE_EXTREME_VEC",
        "KEYTYPE_JITTER_VEC",
        "KEYTYPE_MOVING_HOLD_VEC",
        "COLORSET_01_VEC",
        "COLORSET_02_VEC",
        "COLORSET_03_VEC",
        "COLORSET_04_VEC",
        "COLORSET_05_VEC",
        "COLORSET_06_VEC",
        "COLORSET_07_VEC",
        "COLORSET_08_VEC",
        "COLORSET_09_VEC",
        "COLORSET_10_VEC",
        "COLORSET_11_VEC",
        "COLORSET_12_VEC",
        "COLORSET_13_VEC",
        "COLORSET_14_VEC",
        "COLORSET_15_VEC",
        "COLORSET_16_VEC",
        "COLORSET_17_VEC",
        "COLORSET_18_VEC",
        "COLORSET_19_VEC",
        "COLORSET_20_VEC",
    ]
    """ Icon of the item

    :type: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC']
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    name: str
    """ Human readable name

    :type: str
    """

    value: int
    """ Value of the item

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EnvironmentMap(bpy_struct):
    """Environment map created by the renderer and cached for subsequent renders"""

    auto_update: bool
    """ True if the cube map is updated every frame

    :type: bool
    """

    clip_end: float
    """ Objects further than this are not visible to map

    :type: float
    """

    clip_start: float
    """ Objects nearer than this are not visible to map

    :type: float
    """

    depth: int
    """ Number of times a map will be rendered recursively (mirror effects)

    :type: int
    """

    filtering: typing.Literal["NONE", "LINEAR", "MIPMAP"]
    """ Texture filtering method

    :type: typing.Literal['NONE','LINEAR','MIPMAP']
    """

    is_valid: bool
    """ True if this map is ready for use, False if it needs rendering

    :type: bool
    """

    layers_ignore: bpy_prop_array[bool]
    """ Hide objects on these layers when generating the Environment Map

    :type: bpy_prop_array[bool]
    """

    lod_factor: float
    """ The factor applied to distance computed in Lod

    :type: float
    """

    mapping: typing.Literal["CUBE", "PLANE"]
    """ 

    :type: typing.Literal['CUBE','PLANE']
    """

    mode: typing.Literal["REFLECTION", "REFRACTION"]
    """ Texture rendering method

    :type: typing.Literal['REFLECTION','REFRACTION']
    """

    resolution: int
    """ Pixel resolution of the rendered environment map

    :type: int
    """

    source: typing.Literal["STATIC", "ANIMATED", "IMAGE_FILE", "REALTIME"]
    """ 

    :type: typing.Literal['STATIC','ANIMATED','IMAGE_FILE','REALTIME']
    """

    viewpoint_object: Object | None
    """ Object to use as the environment map's viewpoint location

    :type: Object | None
    """

    zoom: float
    """ 

    :type: float
    """

    def clear(self):
        """Discard the environment map and free it from memory"""

    def save(
        self,
        filepath: str,
        scene: Scene | None = None,
        layout: collections.abc.Iterable[float] | None = (
            0.0,
            0.0,
            1.0,
            0.0,
            2.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            2.0,
            1.0,
        ),
    ):
        """Save the environment map to disc using the scene render settings

        :param filepath: File path, Location of the output file
        :type filepath: str
        :param scene: Overrides the scene from which image parameters are taken
        :type scene: Scene | None
        :param layout: File layout, Flat array describing the X,Y position of each cube face in the output image, where 1 is the size of a face - order is [+Z -Z +Y -X -Y +X] (use -1 to skip a face)
        :type layout: collections.abc.Iterable[float] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class EnvironmentMapTexture(Texture, ID, bpy_struct):
    """Environment map texture"""

    environment_map: EnvironmentMap
    """ Get the environment map associated with this texture

    :type: EnvironmentMap
    """

    filter_eccentricity: int
    """ Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_probes: int
    """ Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_size: float
    """ Multiply the filter size used by MIP Map and Interpolation

    :type: float
    """

    filter_type: typing.Literal["BOX", "EWA", "FELINE", "AREA"]
    """ Texture filter to use for sampling image

    :type: typing.Literal['BOX','EWA','FELINE','AREA']
    """

    image: Image | None
    """ Source image file to read the environment map from

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    use_filter_size_min: bool
    """ Use Filter Size as a minimal filter value in pixels

    :type: bool
    """

    use_mipmap: bool
    """ Use auto-generated MIP maps for the image

    :type: bool
    """

    use_mipmap_gauss: bool
    """ Use Gauss filter to sample down MIP maps

    :type: bool
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Event(bpy_struct):
    """Window Manager Event"""

    alt: bool
    """ True when the Alt/Option key is held

    :type: bool
    """

    ascii: str
    """ Single ASCII character for this event

    :type: str
    """

    ctrl: bool
    """ True when the Ctrl key is held

    :type: bool
    """

    is_mouse_absolute: bool
    """ The last motion event was an absolute input

    :type: bool
    """

    is_tablet: bool
    """ The event has tablet data

    :type: bool
    """

    mouse_prev_x: int
    """ The window relative horizontal location of the mouse

    :type: int
    """

    mouse_prev_y: int
    """ The window relative vertical location of the mouse

    :type: int
    """

    mouse_region_x: int
    """ The region relative horizontal location of the mouse

    :type: int
    """

    mouse_region_y: int
    """ The region relative vertical location of the mouse

    :type: int
    """

    mouse_x: int
    """ The window relative horizontal location of the mouse

    :type: int
    """

    mouse_y: int
    """ The window relative vertical location of the mouse

    :type: int
    """

    oskey: bool
    """ True when the Cmd key is held

    :type: bool
    """

    pressure: float
    """ The pressure of the tablet or 1.0 if no tablet present

    :type: float
    """

    shift: bool
    """ True when the Shift key is held

    :type: bool
    """

    tilt: bpy_prop_array[float]
    """ The pressure of the tablet or zeroes if no tablet present

    :type: bpy_prop_array[float]
    """

    type: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ 

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    unicode: str
    """ Single unicode character for this event

    :type: str
    """

    value: typing.Literal[
        "ANY",
        "NOTHING",
        "PRESS",
        "RELEASE",
        "CLICK",
        "DOUBLE_CLICK",
        "CLICK_DRAG",
        "NORTH",
        "NORTH_EAST",
        "EAST",
        "SOUTH_EAST",
        "SOUTH",
        "SOUTH_WEST",
        "WEST",
        "NORTH_WEST",
    ]
    """ The type of event, only applies to some

    :type: typing.Literal['ANY','NOTHING','PRESS','RELEASE','CLICK','DOUBLE_CLICK','CLICK_DRAG','NORTH','NORTH_EAST','EAST','SOUTH_EAST','SOUTH','SOUTH_WEST','WEST','NORTH_WEST']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ExplodeModifier(Modifier, bpy_struct):
    """Explosion effect modifier based on a particle system"""

    particle_uv: str
    """ UV map to change with particle age

    :type: str
    """

    protect: float
    """ Clean vertex group edges

    :type: float
    """

    show_alive: bool
    """ Show mesh when particles are alive

    :type: bool
    """

    show_dead: bool
    """ Show mesh when particles are dead

    :type: bool
    """

    show_unborn: bool
    """ Show mesh when particles are unborn

    :type: bool
    """

    use_edge_cut: bool
    """ Cut face edges for nicer shrapnel

    :type: bool
    """

    use_size: bool
    """ Use particle size for the shrapnel

    :type: bool
    """

    vertex_group: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ExpressionController(Controller, bpy_struct):
    """Controller passing on events based on the evaluation of an expression"""

    expression: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FCurve(bpy_struct):
    """F-Curve defining values of a period of time"""

    array_index: int
    """ Index to the specific property affected by F-Curve if applicable

    :type: int
    """

    auto_smoothing: typing.Literal["NONE", "CONT_ACCEL"]
    """ Algorithm used to compute automatic handles

    :type: typing.Literal['NONE','CONT_ACCEL']
    """

    color: bpy_prop_array[float]
    """ Color of the F-Curve in the Graph Editor

    :type: bpy_prop_array[float]
    """

    color_mode: typing.Literal["AUTO_RAINBOW", "AUTO_RGB", "AUTO_YRGB", "CUSTOM"]
    """ Method used to determine color of F-Curve in Graph Editor

    :type: typing.Literal['AUTO_RAINBOW','AUTO_RGB','AUTO_YRGB','CUSTOM']
    """

    data_path: str
    """ RNA Path to property affected by F-Curve

    :type: str
    """

    driver: Driver
    """ Channel Driver (only set for Driver F-Curves)

    :type: Driver
    """

    extrapolation: typing.Literal["CONSTANT", "LINEAR"]
    """ Method used for evaluating value of F-Curve outside first and last keyframes

    :type: typing.Literal['CONSTANT','LINEAR']
    """

    group: ActionGroup | None
    """ Action Group that this F-Curve belongs to

    :type: ActionGroup | None
    """

    hide: bool
    """ F-Curve and its keyframes are hidden in the Graph Editor graphs

    :type: bool
    """

    is_valid: bool
    """ False when F-Curve could not be evaluated in past, so should be skipped when evaluating

    :type: bool
    """

    keyframe_points: FCurveKeyframePoints
    """ User-editable keyframes

    :type: FCurveKeyframePoints
    """

    lock: bool
    """ F-Curve's settings cannot be edited

    :type: bool
    """

    modifiers: FCurveModifiers
    """ Modifiers affecting the shape of the F-Curve

    :type: FCurveModifiers
    """

    mute: bool
    """ F-Curve is not evaluated

    :type: bool
    """

    sampled_points: bpy_prop_collection[FCurveSample]
    """ Sampled animation data

    :type: bpy_prop_collection[FCurveSample]
    """

    select: bool
    """ F-Curve is selected for editing

    :type: bool
    """

    def evaluate(self, frame: float | None) -> float:
        """Evaluate F-Curve

        :param frame: Frame, Evaluate F-Curve at given frame
        :type frame: float | None
        :return: Value, Value of F-Curve specific frame
        :rtype: float
        """

    def update(self):
        """Ensure keyframes are sorted in chronological order and handles are set correctly"""

    def range(self) -> bpy_prop_array[float]:
        """Get the time extents for F-Curve

        :return: Range, Min/Max values
        :rtype: bpy_prop_array[float]
        """

    def update_autoflags(self, data: typing.Any):
        """Update FCurve flags set automatically from affected property (currently, integer/discrete flags set when the property is not a float)

        :param data: Data, Data containing the property controlled by given FCurve
        :type data: typing.Any
        """

    def convert_to_samples(self, start: int | None, end: int | None):
        """Convert current FCurve from keyframes to sample points, if necessary

        :param start: Start Frame
        :type start: int | None
        :param end: End Frame
        :type end: int | None
        """

    def convert_to_keyframes(self, start: int | None, end: int | None):
        """Convert current FCurve from sample points to keyframes (linear interpolation), if necessary

        :param start: Start Frame
        :type start: int | None
        :param end: End Frame
        :type end: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FCurveSample(bpy_struct):
    """Sample point for F-Curve"""

    co: bpy_prop_array[float]
    """ Point coordinates

    :type: bpy_prop_array[float]
    """

    select: bool
    """ Selection status

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FFmpegSettings(bpy_struct):
    """FFmpeg related settings for the scene"""

    audio_bitrate: int
    """ Audio bitrate (kb/s)

    :type: int
    """

    audio_channels: typing.Literal[
        "MONO", "STEREO", "SURROUND4", "SURROUND51", "SURROUND71"
    ]
    """ Audio channel count

    :type: typing.Literal['MONO','STEREO','SURROUND4','SURROUND51','SURROUND71']
    """

    audio_codec: typing.Literal[
        "NONE", "AAC", "AC3", "FLAC", "MP2", "MP3", "PCM", "VORBIS"
    ]
    """ FFmpeg audio codec to use

    :type: typing.Literal['NONE','AAC','AC3','FLAC','MP2','MP3','PCM','VORBIS']
    """

    audio_mixrate: int
    """ Audio samplerate(samples/s)

    :type: int
    """

    audio_volume: float
    """ Audio volume

    :type: float
    """

    buffersize: int
    """ Rate control: buffer size (kb)

    :type: int
    """

    codec: typing.Literal[
        "NONE",
        "DNXHD",
        "DV",
        "FFV1",
        "FLASH",
        "H264",
        "HUFFYUV",
        "MPEG1",
        "MPEG2",
        "MPEG4",
        "PNG",
        "QTRLE",
        "THEORA",
        "WEBM",
    ]
    """ FFmpeg codec to use for video output

    :type: typing.Literal['NONE','DNXHD','DV','FFV1','FLASH','H264','HUFFYUV','MPEG1','MPEG2','MPEG4','PNG','QTRLE','THEORA','WEBM']
    """

    constant_rate_factor: typing.Literal[
        "NONE",
        "LOSSLESS",
        "PERC_LOSSLESS",
        "HIGH",
        "MEDIUM",
        "LOW",
        "VERYLOW",
        "LOWEST",
    ]
    """ Constant Rate Factor (CRF); tradeoff between video quality and file size

    :type: typing.Literal['NONE','LOSSLESS','PERC_LOSSLESS','HIGH','MEDIUM','LOW','VERYLOW','LOWEST']
    """

    ffmpeg_preset: typing.Literal["BEST", "GOOD", "REALTIME"]
    """ Tradeoff between encoding speed and compression ratio

    :type: typing.Literal['BEST','GOOD','REALTIME']
    """

    format: typing.Literal[
        "MPEG1", "MPEG2", "MPEG4", "AVI", "QUICKTIME", "DV", "OGG", "MKV", "FLASH"
    ]
    """ Output file container

    :type: typing.Literal['MPEG1','MPEG2','MPEG4','AVI','QUICKTIME','DV','OGG','MKV','FLASH']
    """

    gopsize: int
    """ Distance between key frames, also known as GOP size; influences file size and seekability

    :type: int
    """

    max_b_frames: int
    """ Maximum number of B-frames between non-B-frames; influences file size and seekability

    :type: int
    """

    maxrate: int
    """ Rate control: max rate (kb/s)

    :type: int
    """

    minrate: int
    """ Rate control: min rate (kb/s)

    :type: int
    """

    muxrate: int
    """ Mux rate (bits/s(!))

    :type: int
    """

    packetsize: int
    """ Mux packet size (byte)

    :type: int
    """

    use_autosplit: bool
    """ Autosplit output at 2GB boundary

    :type: bool
    """

    use_lossless_output: bool
    """ Use lossless output for video streams

    :type: bool
    """

    use_max_b_frames: bool
    """ Set a maximum number of B-frames

    :type: bool
    """

    video_bitrate: int
    """ Video bitrate (kb/s)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FILEBROWSER_UL_dir(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifier(bpy_struct):
    """Modifier for values of F-Curve"""

    active: bool | None
    """ F-Curve Modifier is the one being edited

    :type: bool | None
    """

    blend_in: float
    """ Number of frames from start frame for influence to take effect

    :type: float
    """

    blend_out: float
    """ Number of frames from end frame for influence to fade out

    :type: float
    """

    frame_end: float
    """ Frame that modifier's influence ends (if Restrict Frame Range is in use)

    :type: float
    """

    frame_start: float
    """ Frame that modifier's influence starts (if Restrict Frame Range is in use)

    :type: float
    """

    influence: float
    """ Amount of influence F-Curve Modifier will have when not fading in/out

    :type: float
    """

    is_valid: bool
    """ F-Curve Modifier has invalid settings and will not be evaluated

    :type: bool
    """

    mute: bool
    """ F-Curve Modifier will not be evaluated

    :type: bool
    """

    show_expanded: bool
    """ F-Curve Modifier's panel is expanded in UI

    :type: bool
    """

    type: typing.Literal[
        "NULL",
        "GENERATOR",
        "FNGENERATOR",
        "ENVELOPE",
        "CYCLES",
        "NOISE",
        "LIMITS",
        "STEPPED",
    ]
    """ F-Curve Modifier Type

    :type: typing.Literal['NULL','GENERATOR','FNGENERATOR','ENVELOPE','CYCLES','NOISE','LIMITS','STEPPED']
    """

    use_influence: bool
    """ F-Curve Modifier's effects will be tempered by a default factor

    :type: bool
    """

    use_restricted_range: bool
    """ F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierCycles(FModifier, bpy_struct):
    """Repeat the values of the modified F-Curve"""

    cycles_after: int
    """ Maximum number of cycles to allow after last keyframe (0 = infinite)

    :type: int
    """

    cycles_before: int
    """ Maximum number of cycles to allow before first keyframe (0 = infinite)

    :type: int
    """

    mode_after: typing.Literal["NONE", "REPEAT", "REPEAT_OFFSET", "MIRROR"]
    """ Cycling mode to use after last keyframe

    :type: typing.Literal['NONE','REPEAT','REPEAT_OFFSET','MIRROR']
    """

    mode_before: typing.Literal["NONE", "REPEAT", "REPEAT_OFFSET", "MIRROR"]
    """ Cycling mode to use before first keyframe

    :type: typing.Literal['NONE','REPEAT','REPEAT_OFFSET','MIRROR']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierEnvelope(FModifier, bpy_struct):
    """Scale the values of the modified F-Curve"""

    control_points: FModifierEnvelopeControlPoints
    """ Control points defining the shape of the envelope

    :type: FModifierEnvelopeControlPoints
    """

    default_max: float
    """ Upper distance from Reference Value for 1:1 default influence

    :type: float
    """

    default_min: float
    """ Lower distance from Reference Value for 1:1 default influence

    :type: float
    """

    reference_value: float
    """ Value that envelope's influence is centered around / based on

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierEnvelopeControlPoint(bpy_struct):
    """Control point for envelope F-Modifier"""

    frame: float
    """ Frame this control-point occurs on

    :type: float
    """

    max: float
    """ Upper bound of envelope at this control-point

    :type: float
    """

    min: float
    """ Lower bound of envelope at this control-point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierFunctionGenerator(FModifier, bpy_struct):
    """Generate values using a Built-In Function"""

    amplitude: float
    """ Scale factor determining the maximum/minimum values

    :type: float
    """

    function_type: typing.Literal["SIN", "COS", "TAN", "SQRT", "LN", "SINC"]
    """ Type of built-in function to use

    :type: typing.Literal['SIN','COS','TAN','SQRT','LN','SINC']
    """

    phase_multiplier: float
    """ Scale factor determining the 'speed' of the function

    :type: float
    """

    phase_offset: float
    """ Constant factor to offset time by for function

    :type: float
    """

    use_additive: bool
    """ Values generated by this modifier are applied on top of the existing values instead of overwriting them

    :type: bool
    """

    value_offset: float
    """ Constant factor to offset values by

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierGenerator(FModifier, bpy_struct):
    """Deterministically generate values for the modified F-Curve"""

    coefficients: bpy_prop_array[float]
    """ Coefficients for 'x' (starting from lowest power of x^0)

    :type: bpy_prop_array[float]
    """

    mode: typing.Literal["POLYNOMIAL", "POLYNOMIAL_FACTORISED"]
    """ Type of generator to use

    :type: typing.Literal['POLYNOMIAL','POLYNOMIAL_FACTORISED']
    """

    poly_order: int
    """ The highest power of 'x' for this polynomial (number of coefficients - 1)

    :type: int
    """

    use_additive: bool
    """ Values generated by this modifier are applied on top of the existing values instead of overwriting them

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierLimits(FModifier, bpy_struct):
    """Limit the time/value ranges of the modified F-Curve"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierNoise(FModifier, bpy_struct):
    """Give randomness to the modified F-Curve"""

    blend_type: typing.Literal["REPLACE", "ADD", "SUBTRACT", "MULTIPLY"]
    """ Method of modifying the existing F-Curve

    :type: typing.Literal['REPLACE','ADD','SUBTRACT','MULTIPLY']
    """

    depth: int
    """ Amount of fine level detail present in the noise

    :type: int
    """

    offset: float
    """ Time offset for the noise effect

    :type: float
    """

    phase: float
    """ A random seed for the noise effect

    :type: float
    """

    scale: float
    """ Scaling (in time) of the noise

    :type: float
    """

    strength: float
    """ Amplitude of the noise - the amount that it modifies the underlying curve

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierPython(FModifier, bpy_struct):
    """Perform user-defined operation on the modified F-Curve"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FModifierStepped(FModifier, bpy_struct):
    """Hold each interpolated value from the F-Curve for several frames without changing the timing"""

    frame_end: float
    """ Frame that modifier's influence ends (if applicable)

    :type: float
    """

    frame_offset: float
    """ Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)

    :type: float
    """

    frame_start: float
    """ Frame that modifier's influence starts (if applicable)

    :type: float
    """

    frame_step: float
    """ Number of frames to hold each value

    :type: float
    """

    use_frame_end: bool
    """ Restrict modifier to only act before its 'end' frame

    :type: bool
    """

    use_frame_start: bool
    """ Restrict modifier to only act after its 'start' frame

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FieldSettings(bpy_struct):
    """Field settings for an object in physics simulation"""

    apply_to_location: bool
    """ Effect particles' location

    :type: bool
    """

    apply_to_rotation: bool
    """ Effect particles' dynamic rotation

    :type: bool
    """

    distance_max: float
    """ Maximum distance for the field to work

    :type: float
    """

    distance_min: float
    """ Minimum distance for the field's fall-off

    :type: float
    """

    falloff_power: float
    """ 

    :type: float
    """

    falloff_type: typing.Literal["SPHERE", "TUBE", "CONE"]
    """ 

    :type: typing.Literal['SPHERE','TUBE','CONE']
    """

    flow: float
    """ Convert effector force into air flow velocity

    :type: float
    """

    guide_clump_amount: float
    """ Amount of clumping

    :type: float
    """

    guide_clump_shape: float
    """ Shape of clumping

    :type: float
    """

    guide_free: float
    """ Guide-free time from particle life's end

    :type: float
    """

    guide_kink_amplitude: float
    """ The amplitude of the offset

    :type: float
    """

    guide_kink_axis: typing.Literal["X", "Y", "Z"]
    """ Which axis to use for offset

    :type: typing.Literal['X','Y','Z']
    """

    guide_kink_frequency: float
    """ The frequency of the offset (1/total length)

    :type: float
    """

    guide_kink_shape: float
    """ Adjust the offset to the beginning/end

    :type: float
    """

    guide_kink_type: typing.Literal[
        "NONE", "CURL", "RADIAL", "WAVE", "BRAID", "ROTATION", "ROLL"
    ]
    """ Type of periodic offset on the curve

    :type: typing.Literal['NONE','CURL','RADIAL','WAVE','BRAID','ROTATION','ROLL']
    """

    guide_minimum: float
    """ The distance from which particles are affected fully

    :type: float
    """

    harmonic_damping: float
    """ Damping of the harmonic force

    :type: float
    """

    inflow: float
    """ Inwards component of the vortex force

    :type: float
    """

    linear_drag: float
    """ Drag component proportional to velocity

    :type: float
    """

    noise: float
    """ Amount of noise for the force strength

    :type: float
    """

    quadratic_drag: float
    """ Drag component proportional to the square of velocity

    :type: float
    """

    radial_falloff: float
    """ Radial falloff power (real gravitational falloff = 2)

    :type: float
    """

    radial_max: float
    """ Maximum radial distance for the field to work

    :type: float
    """

    radial_min: float
    """ Minimum radial distance for the field's fall-off

    :type: float
    """

    rest_length: float
    """ Rest length of the harmonic force

    :type: float
    """

    seed: int
    """ Seed of the noise

    :type: int
    """

    shape: typing.Literal["POINT", "PLANE", "SURFACE", "POINTS"]
    """ Which direction is used to calculate the effector force

    :type: typing.Literal['POINT','PLANE','SURFACE','POINTS']
    """

    size: float
    """ Size of the turbulence

    :type: float
    """

    source_object: Object | None
    """ Select domain object of the smoke simulation

    :type: Object | None
    """

    strength: float
    """ Strength of force field

    :type: float
    """

    texture: Texture | None
    """ Texture to use as force

    :type: Texture | None
    """

    texture_mode: typing.Literal["RGB", "GRADIENT", "CURL"]
    """ How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)

    :type: typing.Literal['RGB','GRADIENT','CURL']
    """

    texture_nabla: float
    """ Defines size of derivative offset used for calculating gradient and curl

    :type: float
    """

    type: typing.Literal[
        "NONE",
        "FORCE",
        "WIND",
        "VORTEX",
        "MAGNET",
        "HARMONIC",
        "CHARGE",
        "LENNARDJ",
        "TEXTURE",
        "GUIDE",
        "BOID",
        "TURBULENCE",
        "DRAG",
        "SMOKE_FLOW",
    ]
    """ Type of field

    :type: typing.Literal['NONE','FORCE','WIND','VORTEX','MAGNET','HARMONIC','CHARGE','LENNARDJ','TEXTURE','GUIDE','BOID','TURBULENCE','DRAG','SMOKE_FLOW']
    """

    use_2d_force: bool
    """ Apply force only in 2D

    :type: bool
    """

    use_absorption: bool
    """ Force gets absorbed by collision objects

    :type: bool
    """

    use_global_coords: bool
    """ Use effector/global coordinates for turbulence

    :type: bool
    """

    use_gravity_falloff: bool
    """ Multiply force by 1/distance²

    :type: bool
    """

    use_guide_path_add: bool
    """ Based on distance/falloff it adds a portion of the entire path

    :type: bool
    """

    use_guide_path_weight: bool
    """ Use curve weights to influence the particle influence along the curve

    :type: bool
    """

    use_max_distance: bool
    """ Use a maximum distance for the field to work

    :type: bool
    """

    use_min_distance: bool
    """ Use a minimum distance for the field's fall-off

    :type: bool
    """

    use_multiple_springs: bool
    """ Every point is effected by multiple springs

    :type: bool
    """

    use_object_coords: bool
    """ Use object/global coordinates for texture

    :type: bool
    """

    use_radial_max: bool
    """ Use a maximum radial distance for the field to work

    :type: bool
    """

    use_radial_min: bool
    """ Use a minimum radial distance for the field's fall-off

    :type: bool
    """

    use_root_coords: bool
    """ Texture coordinates from root particle locations

    :type: bool
    """

    use_smoke_density: bool
    """ Adjust force strength based on smoke density

    :type: bool
    """

    z_direction: typing.Literal["BOTH", "POSITIVE", "NEGATIVE"]
    """ Effect in full or only positive/negative Z direction

    :type: typing.Literal['BOTH','POSITIVE','NEGATIVE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FileBrowserFSMenuEntry(bpy_struct):
    """File Select Parameters"""

    is_valid: bool
    """ Whether this path is currently reachable

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    path: str
    """ 

    :type: str
    """

    use_save: bool
    """ Whether this path is saved in bookmarks, or generated from OS

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FileSelectParams(bpy_struct):
    """File Select Parameters"""

    directory: str
    """ Directory displayed in the file browser

    :type: str
    """

    display_size: typing.Literal["TINY", "SMALL", "NORMAL", "LARGE"]
    """ Change the size of the display (width of columns or thumbnails size)

    :type: typing.Literal['TINY','SMALL','NORMAL','LARGE']
    """

    display_type: typing.Literal["LIST_SHORT", "LIST_LONG", "THUMBNAIL"]
    """ Display mode for the file list

    :type: typing.Literal['LIST_SHORT','LIST_LONG','THUMBNAIL']
    """

    filename: str
    """ Active file in the file browser

    :type: str
    """

    filter_glob: str
    """ UNIX shell-like filename patterns matching, supports wildcards ('*') and list of patterns separated by ';'

    :type: str
    """

    filter_id: set[
        typing.Literal[
            "ACTION",
            "ARMATURE",
            "BRUSH",
            "CAMERA",
            "CACHEFILE",
            "CURVE",
            "GREASE_PENCIL",
            "GROUP",
            "IMAGE",
            "LAMP",
            "LINESTYLE",
            "LATTICE",
            "MATERIAL",
            "METABALL",
            "MOVIE_CLIP",
            "MESH",
            "MASK",
            "NODE_TREE",
            "OBJECT",
            "PARTICLE_SETTINGS",
            "PALETTE",
            "PAINT_CURVE",
            "SCENE",
            "SPEAKER",
            "SOUND",
            "TEXTURE",
            "TEXT",
            "FONT",
            "WORLD",
        ]
    ]
    """ Which ID types to show/hide, when browsing a library

    :type: set[typing.Literal['ACTION','ARMATURE','BRUSH','CAMERA','CACHEFILE','CURVE','GREASE_PENCIL','GROUP','IMAGE','LAMP','LINESTYLE','LATTICE','MATERIAL','METABALL','MOVIE_CLIP','MESH','MASK','NODE_TREE','OBJECT','PARTICLE_SETTINGS','PALETTE','PAINT_CURVE','SCENE','SPEAKER','SOUND','TEXTURE','TEXT','FONT','WORLD']]
    """

    filter_id_category: set[
        typing.Literal[
            "SCENE",
            "ANIMATION",
            "OBJECT",
            "GEOMETRY",
            "SHADING",
            "IMAGE",
            "ENVIRONMENT",
            "MISC",
        ]
    ]
    """ Which ID categories to show/hide, when browsing a library

    :type: set[typing.Literal['SCENE','ANIMATION','OBJECT','GEOMETRY','SHADING','IMAGE','ENVIRONMENT','MISC']]
    """

    filter_search: str
    """ Filter by name, supports '*' wildcard

    :type: str
    """

    recursion_level: typing.Literal["NONE", "BLEND", "ALL_1", "ALL_2", "ALL_3"]
    """ Numbers of dirtree levels to show simultaneously

    :type: typing.Literal['NONE','BLEND','ALL_1','ALL_2','ALL_3']
    """

    show_hidden: bool
    """ Show hidden dot files

    :type: bool
    """

    sort_method: typing.Literal[
        "FILE_SORT_ALPHA", "FILE_SORT_EXTENSION", "FILE_SORT_TIME", "FILE_SORT_SIZE"
    ]
    """ 

    :type: typing.Literal['FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE']
    """

    title: str
    """ Title for the file browser

    :type: str
    """

    use_filter: bool
    """ Enable filtering of files

    :type: bool
    """

    use_filter_backup: bool
    """ Show .blend1, .blend2, etc. files

    :type: bool
    """

    use_filter_blender: bool
    """ Show .blend files

    :type: bool
    """

    use_filter_blendid: bool
    """ Show .blend files items (objects, materials, etc.)

    :type: bool
    """

    use_filter_folder: bool
    """ Show folders

    :type: bool
    """

    use_filter_font: bool
    """ Show font files

    :type: bool
    """

    use_filter_image: bool
    """ Show image files

    :type: bool
    """

    use_filter_movie: bool
    """ Show movie files

    :type: bool
    """

    use_filter_script: bool
    """ Show script files

    :type: bool
    """

    use_filter_sound: bool
    """ Show sound files

    :type: bool
    """

    use_filter_text: bool
    """ Show text files

    :type: bool
    """

    use_library_browsing: bool
    """ Whether we may browse blender files' content or not

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Filter2DActuator(Actuator, bpy_struct):
    """Actuator to apply screen graphic effects"""

    filter_pass: int
    """ Set filter order

    :type: int
    """

    glsl_shader: Text | None
    """ 

    :type: Text | None
    """

    mode: typing.Literal[
        "ENABLE",
        "DISABLE",
        "REMOVE",
        "MOTIONBLUR",
        "BLUR",
        "SHARPEN",
        "DILATION",
        "EROSION",
        "LAPLACIAN",
        "SOBEL",
        "PREWITT",
        "GRAYSCALE",
        "SEPIA",
        "INVERT",
        "CUSTOMFILTER",
    ]
    """ 

    :type: typing.Literal['ENABLE','DISABLE','REMOVE','MOTIONBLUR','BLUR','SHARPEN','DILATION','EROSION','LAPLACIAN','SOBEL','PREWITT','GRAYSCALE','SEPIA','INVERT','CUSTOMFILTER']
    """

    motion_blur_factor: float
    """ Motion blur factor

    :type: float
    """

    use_mipmap: bool
    """ Enable MipMap for rendered texture

    :type: bool
    """

    use_motion_blur: bool
    """ Enable/Disable Motion Blur

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FloatProperty(Property, bpy_struct):
    """RNA floating pointer number property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: float
    """ Default value for this number

    :type: float
    """

    default_array: bpy_prop_array[float]
    """ Default value for this array

    :type: bpy_prop_array[float]
    """

    hard_max: float
    """ Maximum value used by buttons

    :type: float
    """

    hard_min: float
    """ Minimum value used by buttons

    :type: float
    """

    is_array: bool
    """ 

    :type: bool
    """

    precision: int
    """ Number of digits after the dot used by buttons

    :type: int
    """

    soft_max: float
    """ Maximum value used by buttons

    :type: float
    """

    soft_min: float
    """ Minimum value used by buttons

    :type: float
    """

    step: float
    """ Step size used by number buttons, for floats 1/100th of the step size

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FloorConstraint(Constraint, bpy_struct):
    """Use the target object for location limitation"""

    floor_location: typing.Literal[
        "FLOOR_X",
        "FLOOR_Y",
        "FLOOR_Z",
        "FLOOR_NEGATIVE_X",
        "FLOOR_NEGATIVE_Y",
        "FLOOR_NEGATIVE_Z",
    ]
    """ Location of target that object will not pass through

    :type: typing.Literal['FLOOR_X','FLOOR_Y','FLOOR_Z','FLOOR_NEGATIVE_X','FLOOR_NEGATIVE_Y','FLOOR_NEGATIVE_Z']
    """

    offset: float
    """ Offset of floor from object origin

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_rotation: bool
    """ Use the target's rotation to determine floor

    :type: bool
    """

    use_sticky: bool
    """ Immobilize object while constrained

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FluidFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for the fluid in the simulation"""

    initial_velocity: bpy_prop_array[float]
    """ Initial velocity of fluid

    :type: bpy_prop_array[float]
    """

    use: bool
    """ Object contributes to the fluid simulation

    :type: bool
    """

    use_animated_mesh: bool
    """ Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)

    :type: bool
    """

    volume_initialization: typing.Literal["VOLUME", "SHELL", "BOTH"]
    """ Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)

    :type: typing.Literal['VOLUME','SHELL','BOTH']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FluidSettings(bpy_struct):
    """Fluid simulation settings for an object taking part in the simulation"""

    type: typing.Literal[
        "NONE",
        "DOMAIN",
        "FLUID",
        "OBSTACLE",
        "INFLOW",
        "OUTFLOW",
        "PARTICLE",
        "CONTROL",
    ]
    """ Type of participation in the fluid simulation

    :type: typing.Literal['NONE','DOMAIN','FLUID','OBSTACLE','INFLOW','OUTFLOW','PARTICLE','CONTROL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FluidSimulationModifier(Modifier, bpy_struct):
    """Fluid simulation modifier"""

    settings: FluidSettings
    """ Settings for how this object is used in the fluid simulation

    :type: FluidSettings
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FluidVertexVelocity(bpy_struct):
    """Velocity of a simulated fluid mesh"""

    velocity: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FollowPathConstraint(Constraint, bpy_struct):
    """Lock motion to the target path"""

    forward_axis: typing.Literal[
        "FORWARD_X",
        "FORWARD_Y",
        "FORWARD_Z",
        "TRACK_NEGATIVE_X",
        "TRACK_NEGATIVE_Y",
        "TRACK_NEGATIVE_Z",
    ]
    """ Axis that points forward along the path

    :type: typing.Literal['FORWARD_X','FORWARD_Y','FORWARD_Z','TRACK_NEGATIVE_X','TRACK_NEGATIVE_Y','TRACK_NEGATIVE_Z']
    """

    offset: float
    """ Offset from the position corresponding to the time frame

    :type: float
    """

    offset_factor: float
    """ Percentage value defining target position along length of curve

    :type: float
    """

    target: Object | None
    """ Target Curve object

    :type: Object | None
    """

    up_axis: typing.Literal["UP_X", "UP_Y", "UP_Z"]
    """ Axis that points upward

    :type: typing.Literal['UP_X','UP_Y','UP_Z']
    """

    use_curve_follow: bool
    """ Object will follow the heading and banking of the curve

    :type: bool
    """

    use_curve_radius: bool
    """ Object is scaled by the curve radius

    :type: bool
    """

    use_fixed_location: bool
    """ Object will stay locked to a single point somewhere along the length of the curve regardless of time

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FollowTrackConstraint(Constraint, bpy_struct):
    """Lock motion to the target motion track"""

    camera: Object | None
    """ Camera to which motion is parented (if empty active scene camera is used)

    :type: Object | None
    """

    clip: MovieClip | None
    """ Movie Clip to get tracking data from

    :type: MovieClip | None
    """

    depth_object: Object | None
    """ Object used to define depth in camera space by projecting onto surface of this object

    :type: Object | None
    """

    frame_method: typing.Literal["STRETCH", "FIT", "CROP"]
    """ How the footage fits in the camera frame

    :type: typing.Literal['STRETCH','FIT','CROP']
    """

    object: str
    """ Movie tracking object to follow (if empty, camera object is used)

    :type: str
    """

    track: str
    """ Movie tracking track to follow

    :type: str
    """

    use_3d_position: bool
    """ Use 3D position of track to parent to

    :type: bool
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    use_undistorted_position: bool
    """ Parent to undistorted position of 2D track

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FreestyleLineSet(bpy_struct):
    """Line set for associating lines and style parameters"""

    edge_type_combination: typing.Literal["OR", "AND"]
    """ Specify a logical combination of selection conditions on feature edge types

    :type: typing.Literal['OR','AND']
    """

    edge_type_negation: typing.Literal["INCLUSIVE", "EXCLUSIVE"]
    """ Specify either inclusion or exclusion of feature edges selected by edge types

    :type: typing.Literal['INCLUSIVE','EXCLUSIVE']
    """

    exclude_border: bool
    """ Exclude border edges

    :type: bool
    """

    exclude_contour: bool
    """ Exclude contours

    :type: bool
    """

    exclude_crease: bool
    """ Exclude crease edges

    :type: bool
    """

    exclude_edge_mark: bool
    """ Exclude edge marks

    :type: bool
    """

    exclude_external_contour: bool
    """ Exclude external contours

    :type: bool
    """

    exclude_material_boundary: bool
    """ Exclude edges at material boundaries

    :type: bool
    """

    exclude_ridge_valley: bool
    """ Exclude ridges and valleys

    :type: bool
    """

    exclude_silhouette: bool
    """ Exclude silhouette edges

    :type: bool
    """

    exclude_suggestive_contour: bool
    """ Exclude suggestive contours

    :type: bool
    """

    face_mark_condition: typing.Literal["ONE", "BOTH"]
    """ Specify a feature edge selection condition based on face marks

    :type: typing.Literal['ONE','BOTH']
    """

    face_mark_negation: typing.Literal["INCLUSIVE", "EXCLUSIVE"]
    """ Specify either inclusion or exclusion of feature edges selected by face marks

    :type: typing.Literal['INCLUSIVE','EXCLUSIVE']
    """

    group: Group | None
    """ A group of objects based on which feature edges are selected

    :type: Group | None
    """

    group_negation: typing.Literal["INCLUSIVE", "EXCLUSIVE"]
    """ Specify either inclusion or exclusion of feature edges belonging to a group of objects

    :type: typing.Literal['INCLUSIVE','EXCLUSIVE']
    """

    linestyle: FreestyleLineStyle
    """ Line style settings

    :type: FreestyleLineStyle
    """

    name: str
    """ Line set name

    :type: str
    """

    qi_end: int
    """ Last QI value of the QI range

    :type: int
    """

    qi_start: int
    """ First QI value of the QI range

    :type: int
    """

    select_border: bool
    """ Select border edges (open mesh edges)

    :type: bool
    """

    select_by_edge_types: bool
    """ Select feature edges based on edge types

    :type: bool
    """

    select_by_face_marks: bool
    """ Select feature edges by face marks

    :type: bool
    """

    select_by_group: bool
    """ Select feature edges based on a group of objects

    :type: bool
    """

    select_by_image_border: bool
    """ Select feature edges by image border (less memory consumption)

    :type: bool
    """

    select_by_visibility: bool
    """ Select feature edges based on visibility

    :type: bool
    """

    select_contour: bool
    """ Select contours (outer silhouettes of each object)

    :type: bool
    """

    select_crease: bool
    """ Select crease edges (those between two faces making an angle smaller than the Crease Angle)

    :type: bool
    """

    select_edge_mark: bool
    """ Select edge marks (edges annotated by Freestyle edge marks)

    :type: bool
    """

    select_external_contour: bool
    """ Select external contours (outer silhouettes of occluding and occluded objects)

    :type: bool
    """

    select_material_boundary: bool
    """ Select edges at material boundaries

    :type: bool
    """

    select_ridge_valley: bool
    """ Select ridges and valleys (boundary lines between convex and concave areas of surface)

    :type: bool
    """

    select_silhouette: bool
    """ Select silhouettes (edges at the boundary of visible and hidden faces)

    :type: bool
    """

    select_suggestive_contour: bool
    """ Select suggestive contours (almost silhouette/contour edges)

    :type: bool
    """

    show_render: bool
    """ Enable or disable this line set during stroke rendering

    :type: bool
    """

    visibility: typing.Literal["VISIBLE", "HIDDEN", "RANGE"]
    """ Determine how to use visibility for feature edge selection

    :type: typing.Literal['VISIBLE','HIDDEN','RANGE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FreestyleLineStyle(ID, bpy_struct):
    """Freestyle line style, reusable by multiple line sets"""

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    alpha: float
    """ Base alpha transparency, possibly modified by alpha transparency modifiers

    :type: float
    """

    alpha_modifiers: LineStyleAlphaModifiers
    """ List of alpha transparency modifiers

    :type: LineStyleAlphaModifiers
    """

    angle_max: float
    """ Maximum 2D angle for splitting chains

    :type: float
    """

    angle_min: float
    """ Minimum 2D angle for splitting chains

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    caps: typing.Literal["BUTT", "ROUND", "SQUARE"]
    """ Select the shape of both ends of strokes

    :type: typing.Literal['BUTT','ROUND','SQUARE']
    """

    chain_count: int
    """ Chain count for the selection of first N chains

    :type: int
    """

    chaining: typing.Literal["PLAIN", "SKETCHY"]
    """ Select the way how feature edges are jointed to form chains

    :type: typing.Literal['PLAIN','SKETCHY']
    """

    color: bpy_prop_array[float]
    """ Base line color, possibly modified by line color modifiers

    :type: bpy_prop_array[float]
    """

    color_modifiers: LineStyleColorModifiers
    """ List of line color modifiers

    :type: LineStyleColorModifiers
    """

    dash1: int
    """ Length of the 1st dash for dashed lines

    :type: int
    """

    dash2: int
    """ Length of the 2nd dash for dashed lines

    :type: int
    """

    dash3: int
    """ Length of the 3rd dash for dashed lines

    :type: int
    """

    gap1: int
    """ Length of the 1st gap for dashed lines

    :type: int
    """

    gap2: int
    """ Length of the 2nd gap for dashed lines

    :type: int
    """

    gap3: int
    """ Length of the 3rd gap for dashed lines

    :type: int
    """

    geometry_modifiers: LineStyleGeometryModifiers
    """ List of stroke geometry modifiers

    :type: LineStyleGeometryModifiers
    """

    integration_type: typing.Literal["MEAN", "MIN", "MAX", "FIRST", "LAST"]
    """ Select the way how the sort key is computed for each chain

    :type: typing.Literal['MEAN','MIN','MAX','FIRST','LAST']
    """

    length_max: float
    """ Maximum curvilinear 2D length for the selection of chains

    :type: float
    """

    length_min: float
    """ Minimum curvilinear 2D length for the selection of chains

    :type: float
    """

    material_boundary: bool
    """ If true, chains of feature edges are split at material boundaries

    :type: bool
    """

    node_tree: ShaderNodeTree | None
    """ Node tree for node-based shaders

    :type: ShaderNodeTree | None
    """

    panel: typing.Literal[
        "STROKES", "COLOR", "ALPHA", "THICKNESS", "GEOMETRY", "TEXTURE"
    ]
    """ Select the property panel to be shown

    :type: typing.Literal['STROKES','COLOR','ALPHA','THICKNESS','GEOMETRY','TEXTURE']
    """

    rounds: int
    """ Number of rounds in a sketchy multiple touch

    :type: int
    """

    sort_key: typing.Literal[
        "DISTANCE_FROM_CAMERA", "2D_LENGTH", "PROJECTED_X", "PROJECTED_Y"
    ]
    """ Select the sort key to determine the stacking order of chains

    :type: typing.Literal['DISTANCE_FROM_CAMERA','2D_LENGTH','PROJECTED_X','PROJECTED_Y']
    """

    sort_order: typing.Literal["DEFAULT", "REVERSE"]
    """ Select the sort order

    :type: typing.Literal['DEFAULT','REVERSE']
    """

    split_dash1: int
    """ Length of the 1st dash for splitting

    :type: int
    """

    split_dash2: int
    """ Length of the 2nd dash for splitting

    :type: int
    """

    split_dash3: int
    """ Length of the 3rd dash for splitting

    :type: int
    """

    split_gap1: int
    """ Length of the 1st gap for splitting

    :type: int
    """

    split_gap2: int
    """ Length of the 2nd gap for splitting

    :type: int
    """

    split_gap3: int
    """ Length of the 3rd gap for splitting

    :type: int
    """

    split_length: float
    """ Curvilinear 2D length for chain splitting

    :type: float
    """

    texture_slots: LineStyleTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: LineStyleTextureSlots
    """

    texture_spacing: float
    """ Spacing for textures along stroke length

    :type: float
    """

    thickness: float
    """ Base line thickness, possibly modified by line thickness modifiers

    :type: float
    """

    thickness_modifiers: LineStyleThicknessModifiers
    """ List of line thickness modifiers

    :type: LineStyleThicknessModifiers
    """

    thickness_position: typing.Literal["CENTER", "INSIDE", "OUTSIDE", "RELATIVE"]
    """ Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)

    :type: typing.Literal['CENTER','INSIDE','OUTSIDE','RELATIVE']
    """

    thickness_ratio: float
    """ A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness

    :type: float
    """

    use_angle_max: bool
    """ Split chains at points with angles larger than the maximum 2D angle

    :type: bool
    """

    use_angle_min: bool
    """ Split chains at points with angles smaller than the minimum 2D angle

    :type: bool
    """

    use_chain_count: bool
    """ Enable the selection of first N chains

    :type: bool
    """

    use_chaining: bool
    """ Enable chaining of feature edges

    :type: bool
    """

    use_dashed_line: bool
    """ Enable or disable dashed line

    :type: bool
    """

    use_length_max: bool
    """ Enable the selection of chains by a maximum 2D length

    :type: bool
    """

    use_length_min: bool
    """ Enable the selection of chains by a minimum 2D length

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes for the line style

    :type: bool
    """

    use_same_object: bool
    """ If true, only feature edges of the same object are joined

    :type: bool
    """

    use_sorting: bool
    """ Arrange the stacking order of strokes

    :type: bool
    """

    use_split_length: bool
    """ Enable chain splitting by curvilinear 2D length

    :type: bool
    """

    use_split_pattern: bool
    """ Enable chain splitting by dashed line patterns

    :type: bool
    """

    use_texture: bool
    """ Enable or disable textured strokes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FreestyleModuleSettings(bpy_struct):
    """Style module configuration for specifying a style module"""

    script: Text | None
    """ Python script to define a style module

    :type: Text | None
    """

    use: bool
    """ Enable or disable this style module during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class FreestyleSettings(bpy_struct):
    """Freestyle settings for a SceneRenderLayer data-block"""

    crease_angle: float
    """ Angular threshold for detecting crease edges

    :type: float
    """

    kr_derivative_epsilon: float
    """ Kr derivative epsilon for computing suggestive contours

    :type: float
    """

    linesets: Linesets
    """ 

    :type: Linesets
    """

    mode: typing.Literal["SCRIPT", "EDITOR"]
    """ Select the Freestyle control mode

    :type: typing.Literal['SCRIPT','EDITOR']
    """

    modules: FreestyleModules
    """ A list of style modules (to be applied from top to bottom)

    :type: FreestyleModules
    """

    sphere_radius: float
    """ Sphere radius for computing curvatures

    :type: float
    """

    use_advanced_options: bool
    """ Enable advanced edge detection options (sphere radius and Kr derivative epsilon)

    :type: bool
    """

    use_culling: bool
    """ If enabled, out-of-view edges are ignored

    :type: bool
    """

    use_material_boundaries: bool
    """ Enable material boundaries

    :type: bool
    """

    use_ridges_and_valleys: bool
    """ Enable ridges and valleys

    :type: bool
    """

    use_smoothness: bool
    """ Take face smoothness into account in view map calculation

    :type: bool
    """

    use_suggestive_contours: bool
    """ Enable suggestive contours

    :type: bool
    """

    use_view_map_cache: bool
    """ Keep the computed view map and avoid re-calculating it if mesh geometry is unchanged

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Function(bpy_struct):
    """RNA function definition"""

    description: str
    """ Description of the Function's purpose

    :type: str
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    is_registered: bool
    """ Function is registered as callback as part of type registration

    :type: bool
    """

    is_registered_optional: bool
    """ Function is optionally registered as callback part of type registration

    :type: bool
    """

    parameters: bpy_prop_collection[Property]
    """ Parameters for the function

    :type: bpy_prop_collection[Property]
    """

    use_self: bool
    """ Function does not pass its self as an argument (becomes a static method in python)

    :type: bool
    """

    use_self_type: bool
    """ Function passes its self type as an argument (becomes a class method in python if use_self is false)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPENCIL_UL_brush(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPENCIL_UL_layer(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPENCIL_UL_palettecolor(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPUDOFSettings(bpy_struct):
    """Settings for GPU based depth of field"""

    blades: int
    """ Blades for dof effect

    :type: int
    """

    focal_length: float
    """ Focal length for dof effect

    :type: float
    """

    focus_distance: float
    """ Viewport depth of field focus distance

    :type: float
    """

    fstop: float
    """ F-stop for dof effect

    :type: float
    """

    is_hq_supported: bool
    """ Use high quality depth of field

    :type: bool
    """

    sensor: float
    """ Size of sensor

    :type: float
    """

    use_high_quality: bool
    """ Use high quality depth of field

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPUFXSettings(bpy_struct):
    """Settings for GPU based compositing"""

    dof: GPUDOFSettings
    """ 

    :type: GPUDOFSettings
    """

    ssao: GPUSSAOSettings
    """ 

    :type: GPUSSAOSettings
    """

    use_dof: bool
    """ Use depth of field on viewport using the values from active camera

    :type: bool
    """

    use_ssao: bool
    """ Use screen space ambient occlusion of field on viewport

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPUSSAOSettings(bpy_struct):
    """Settings for GPU based screen space ambient occlusion"""

    attenuation: float
    """ Attenuation constant

    :type: float
    """

    color: bpy_prop_array[float]
    """ Color for screen space ambient occlusion effect

    :type: bpy_prop_array[float]
    """

    distance_max: float
    """ Distance of object that contribute to the SSAO effect

    :type: float
    """

    factor: float
    """ Strength of the SSAO effect

    :type: float
    """

    samples: int
    """ Number of samples

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilBrush(bpy_struct):
    """Collection of brushes being used to control the line style of new strokes"""

    angle: float
    """ Direction of the stroke at which brush gives maximal thickness (0° for horizontal)

    :type: float
    """

    angle_factor: float
    """ Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction

    :type: float
    """

    curve_jitter: CurveMapping
    """ Curve used for the jitter effect

    :type: CurveMapping
    """

    curve_sensitivity: CurveMapping
    """ Curve used for the sensitivity

    :type: CurveMapping
    """

    curve_strength: CurveMapping
    """ Curve used for the strength

    :type: CurveMapping
    """

    jitter: float
    """ Jitter factor for new strokes

    :type: float
    """

    line_width: int
    """ Thickness of strokes (in pixels)

    :type: int
    """

    name: str
    """ Brush name

    :type: str
    """

    pen_sensitivity_factor: float
    """ Pressure sensitivity factor for new strokes

    :type: float
    """

    pen_smooth_factor: float
    """ Amount of smoothing to apply to newly created strokes, to reduce jitter/noise

    :type: float
    """

    pen_smooth_steps: int
    """ Number of times to smooth newly created strokes

    :type: int
    """

    pen_subdivision_steps: int
    """ Number of times to subdivide newly created strokes, for less jagged strokes

    :type: int
    """

    random_press: float
    """ Randomness factor for pressure and strength in new strokes

    :type: float
    """

    random_subdiv: float
    """ Randomness factor for new strokes after subdivision

    :type: float
    """

    strength: float
    """ Color strength for new strokes (affect alpha factor of color)

    :type: float
    """

    use_jitter_pressure: bool
    """ Use tablet pressure for jitter

    :type: bool
    """

    use_pressure: bool
    """ Use tablet pressure

    :type: bool
    """

    use_random_pressure: bool
    """ Use random value for pressure

    :type: bool
    """

    use_random_strength: bool
    """ Use random value for strength

    :type: bool
    """

    use_strength_pressure: bool
    """ Use tablet pressure for color strength

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilFrame(bpy_struct):
    """Collection of related sketches on a particular frame"""

    frame_number: int
    """ The frame on which this sketch appears

    :type: int
    """

    is_edited: bool
    """ Frame is being edited (painted on)

    :type: bool
    """

    select: bool
    """ Frame is selected for editing in the Dope Sheet

    :type: bool
    """

    strokes: GPencilStrokes
    """ Freehand curves defining the sketch on this frame

    :type: GPencilStrokes
    """

    def clear(self):
        """Remove all the grease pencil frame data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilInterpolateSettings(bpy_struct):
    """Settings for Grease Pencil interpolation tools"""

    amplitude: float
    """ Amount to boost elastic bounces for 'elastic' easing

    :type: float
    """

    back: float
    """ Amount of overshoot for 'back' easing

    :type: float
    """

    easing: typing.Literal["AUTO", "EASE_IN", "EASE_OUT", "EASE_IN_OUT"]
    """ Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to

    :type: typing.Literal['AUTO','EASE_IN','EASE_OUT','EASE_IN_OUT']
    """

    interpolate_all_layers: bool
    """ Interpolate all layers, not only active

    :type: bool
    """

    interpolate_selected_only: bool
    """ Interpolate only selected strokes in the original frame

    :type: bool
    """

    interpolation_curve: CurveMapping
    """ Custom curve to control 'sequence' interpolation between Grease Pencil frames

    :type: CurveMapping
    """

    period: float
    """ Time between bounces for elastic easing

    :type: float
    """

    type: typing.Literal[
        "LINEAR",
        "CUSTOM",
        "SINE",
        "QUAD",
        "CUBIC",
        "QUART",
        "QUINT",
        "EXPO",
        "CIRC",
        "BACK",
        "BOUNCE",
        "ELASTIC",
    ]
    """ Interpolation method to use the next time 'Interpolate Sequence' is run

    :type: typing.Literal['LINEAR','CUSTOM','SINE','QUAD','CUBIC','QUART','QUINT','EXPO','CIRC','BACK','BOUNCE','ELASTIC']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilLayer(bpy_struct):
    """Collection of related sketches"""

    active_frame: GPencilFrame | None
    """ Frame currently being displayed for this layer

    :type: GPencilFrame | None
    """

    after_color: bpy_prop_array[float]
    """ Base color for ghosts after the active frame

    :type: bpy_prop_array[float]
    """

    before_color: bpy_prop_array[float]
    """ Base color for ghosts before the active frame

    :type: bpy_prop_array[float]
    """

    frames: GPencilFrames
    """ Sketches for this layer on different frames

    :type: GPencilFrames
    """

    ghost_after_range: int
    """ Maximum number of frames to show after current frame (0 = show only the next sketch, -1 = don't show any frames after current)

    :type: int
    """

    ghost_before_range: int
    """ Maximum number of frames to show before current frame (0 = show only the previous sketch, -1 = don't show any frames before current)

    :type: int
    """

    hide: bool
    """ Set layer Visibility

    :type: bool
    """

    info: str
    """ Layer name

    :type: str
    """

    is_parented: bool
    """ True when the layer parent object is set

    :type: bool
    """

    line_change: int
    """ Thickness change to apply to current strokes (in pixels)

    :type: int
    """

    lock: bool
    """ Protect layer from further editing and/or frame changes

    :type: bool
    """

    lock_frame: bool
    """ Lock current frame displayed by layer

    :type: bool
    """

    matrix_inverse: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Parent inverse transformation matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    opacity: float
    """ Layer Opacity

    :type: float
    """

    parent: Object | None
    """ Parent Object

    :type: Object | None
    """

    parent_bone: str
    """ Name of parent bone in case of a bone parenting relation

    :type: str
    """

    parent_type: typing.Literal["OBJECT", "ARMATURE", "BONE"]
    """ Type of parent relation

    :type: typing.Literal['OBJECT','ARMATURE','BONE']
    """

    select: bool
    """ Layer is selected for editing in the Dope Sheet

    :type: bool
    """

    show_points: bool
    """ Draw the points which make up the strokes (for debugging purposes)

    :type: bool
    """

    show_x_ray: bool
    """ Make the layer draw in front of objects

    :type: bool
    """

    tint_color: bpy_prop_array[float]
    """ Color for tinting stroke colors

    :type: bpy_prop_array[float]
    """

    tint_factor: float
    """ Factor of tinting color

    :type: float
    """

    unlock_color: bool
    """ Unprotect selected colors from further editing and/or frame changes

    :type: bool
    """

    use_ghost_custom_colors: bool
    """ Use custom colors for ghost frames

    :type: bool
    """

    use_ghosts_always: bool
    """ Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)

    :type: bool
    """

    use_onion_skinning: bool
    """ Ghost frames on either side of frame

    :type: bool
    """

    use_volumetric_strokes: bool
    """ Draw strokes as a series of circular blobs, resulting in a volumetric effect

    :type: bool
    """

    def clear(self):
        """Remove all the grease pencil layer data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilPalette(bpy_struct):
    """Collection of related palettes"""

    colors: GPencilPaletteColors
    """ Colors of the palette

    :type: GPencilPaletteColors
    """

    name: str
    """ Palette name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilPaletteColor(bpy_struct):
    """Collection of related colors"""

    alpha: float
    """ Color Opacity

    :type: float
    """

    color: bpy_prop_array[float]
    """ Color for strokes

    :type: bpy_prop_array[float]
    """

    fill_alpha: float
    """ Opacity for filling region bounded by each stroke

    :type: float
    """

    fill_color: bpy_prop_array[float]
    """ Color for filling region bounded by each stroke

    :type: bpy_prop_array[float]
    """

    ghost: bool
    """ Display strokes using this color when showing onion skins

    :type: bool
    """

    hide: bool
    """ Set color Visibility

    :type: bool
    """

    is_fill_visible: bool
    """ True when opacity of fill is set high enough to be visible

    :type: bool
    """

    is_stroke_visible: bool
    """ True when opacity of stroke is set high enough to be visible

    :type: bool
    """

    lock: bool
    """ Protect color from further editing and/or frame changes

    :type: bool
    """

    name: str
    """ Color name

    :type: str
    """

    use_hq_fill: bool
    """ Fill strokes using high quality to avoid glitches (slower fps during animation play)

    :type: bool
    """

    use_volumetric_strokes: bool
    """ Draw strokes as a series of circular blobs, resulting in a volumetric effect

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilSculptBrush(bpy_struct):
    """Stroke editing brush"""

    affect_pressure: bool
    """ Affect pressure values as well when smoothing strokes

    :type: bool
    """

    direction: typing.Literal["ADD", "SUBTRACT"]
    """ 

    :type: typing.Literal['ADD','SUBTRACT']
    """

    size: int
    """ Radius of the brush in pixels

    :type: int
    """

    strength: float
    """ Brush strength

    :type: float
    """

    use_falloff: bool
    """ Strength of brush decays with distance from cursor

    :type: bool
    """

    use_pressure_strength: bool
    """ Enable tablet pressure sensitivity for strength

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilSculptSettings(bpy_struct):
    """Properties for Grease Pencil stroke sculpting tool"""

    affect_position: bool
    """ The brush affects the position of the point

    :type: bool
    """

    affect_strength: bool
    """ The brush affects the color strength of the point

    :type: bool
    """

    affect_thickness: bool
    """ The brush affects the thickness of the point

    :type: bool
    """

    brush: GPencilSculptBrush
    """ 

    :type: GPencilSculptBrush
    """

    lockaxis: typing.Literal[
        "GP_LOCKAXIS_NONE", "GP_LOCKAXIS_X", "GP_LOCKAXIS_Y", "GP_LOCKAXIS_Z"
    ]
    """ 

    :type: typing.Literal['GP_LOCKAXIS_NONE','GP_LOCKAXIS_X','GP_LOCKAXIS_Y','GP_LOCKAXIS_Z']
    """

    selection_alpha: float
    """ Alpha value for selected vertices

    :type: float
    """

    tool: typing.Literal[
        "SMOOTH",
        "THICKNESS",
        "STRENGTH",
        "GRAB",
        "PUSH",
        "TWIST",
        "PINCH",
        "RANDOMIZE",
        "CLONE",
    ]
    """ 

    :type: typing.Literal['SMOOTH','THICKNESS','STRENGTH','GRAB','PUSH','TWIST','PINCH','RANDOMIZE','CLONE']
    """

    use_select_mask: bool
    """ Only sculpt selected stroke points

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilStroke(bpy_struct):
    """Freehand curve defining part of a sketch"""

    color: GPencilPaletteColor
    """ Color from palette used in Stroke

    :type: GPencilPaletteColor
    """

    colorname: str
    """ Palette color name

    :type: str
    """

    draw_cyclic: bool
    """ Enable cyclic drawing, closing the stroke

    :type: bool
    """

    draw_mode: typing.Literal["SCREEN", "3DSPACE", "2DSPACE", "2DIMAGE"]
    """ 

    :type: typing.Literal['SCREEN','3DSPACE','2DSPACE','2DIMAGE']
    """

    line_width: int
    """ Thickness of stroke (in pixels)

    :type: int
    """

    points: GPencilStrokePoints
    """ Stroke data points

    :type: GPencilStrokePoints
    """

    select: bool
    """ Stroke is selected for viewport editing

    :type: bool
    """

    triangles: bpy_prop_collection[GPencilTriangle]
    """ Triangulation data for HQ fill

    :type: bpy_prop_collection[GPencilTriangle]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilStrokePoint(bpy_struct):
    """Data point for freehand stroke curve"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    pressure: float
    """ Pressure of tablet at point when drawing it

    :type: float
    """

    select: bool
    """ Point is selected for viewport editing

    :type: bool
    """

    strength: float
    """ Color intensity (alpha factor)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GPencilTriangle(bpy_struct):
    """Triangulation data for HQ fill"""

    v1: int
    """ First triangle vertex index

    :type: int
    """

    v2: int
    """ Second triangle vertex index

    :type: int
    """

    v3: int
    """ Third triangle vertex index

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameActuator(Actuator, bpy_struct):
    filename: str
    """ The file to use, depending on the mode (e.g. the blend file to load or a destination for saving a screenshot) - use the "//" prefix for a relative path

    :type: str
    """

    mode: typing.Literal["START", "RESTART", "QUIT", "SAVECFG", "LOADCFG", "SCREENSHOT"]
    """ 

    :type: typing.Literal['START','RESTART','QUIT','SAVECFG','LOADCFG','SCREENSHOT']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameBooleanProperty(GameProperty, bpy_struct):
    """Game engine user defined Boolean property"""

    value: bool
    """ Property value

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameCameraViewportData(bpy_struct):
    """Game custom camera viewport settings"""

    bottom_ratio: float
    """ Set camera viewport bottom to a ratio of the entire viewport height

    :type: float
    """

    left_ratio: float
    """ Set camera viewport left to a ratio of the entire viewport width

    :type: float
    """

    right_ratio: float
    """ Set camera viewport right to a ratio of the entire viewport width

    :type: float
    """

    top_ratio: float
    """ Set camera viewport top to a ratio of the entire viewport height

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameFloatProperty(GameProperty, bpy_struct):
    """Game engine user defined floating point number property"""

    value: float
    """ Property value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameIntProperty(GameProperty, bpy_struct):
    """Game engine user defined integer number property"""

    value: int
    """ Property value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameObjectSettings(bpy_struct):
    """Game engine related settings for the object"""

    activity_culling: ObjectActivityCulling
    """ 

    :type: ObjectActivityCulling
    """

    actuators: bpy_prop_collection[Actuator]
    """ Game engine actuators to act on events

    :type: bpy_prop_collection[Actuator]
    """

    angular_velocity_max: float
    """ Clamp angular velocity to this maximum speed, in angle per second

    :type: float
    """

    angular_velocity_min: float
    """ Clamp angular velocity to this minimum speed (except when totally still), in angle per second

    :type: float
    """

    collision_bounds_type: typing.Literal[
        "BOX",
        "SPHERE",
        "CYLINDER",
        "CONE",
        "CONVEX_HULL",
        "TRIANGLE_MESH",
        "CAPSULE",
        "Empty",
    ]
    """ Select the collision shape that better fits the object

    :type: typing.Literal['BOX','SPHERE','CYLINDER','CONE','CONVEX_HULL','TRIANGLE_MESH','CAPSULE','Empty']
    """

    collision_group: bpy_prop_array[bool]
    """ The collision group of the object

    :type: bpy_prop_array[bool]
    """

    collision_margin: float
    """ Extra margin around object for collision detection, small amount required for stability. In most cases margin can be set to 0.0 for static/not moving objects.If you have jittering, decrease the margin

    :type: float
    """

    collision_mask: bpy_prop_array[bool]
    """ The groups this object can collide with

    :type: bpy_prop_array[bool]
    """

    components: bpy_prop_collection[PythonComponent]
    """ Game engine components

    :type: bpy_prop_collection[PythonComponent]
    """

    controllers: bpy_prop_collection[Controller]
    """ Game engine controllers to process events, connecting sensors to actuators

    :type: bpy_prop_collection[Controller]
    """

    damping: float
    """ General movement damping

    :type: float
    """

    elasticity: float
    """ Elasticity of collisions

    :type: float
    """

    fall_speed: float
    """ Maximum speed at which the character will fall

    :type: float
    """

    fh_damping: float
    """ Damping of the spring force, when inside the physics distance area

    :type: float
    """

    fh_distance: float
    """ Distance of the physics area

    :type: float
    """

    fh_force: float
    """ Upward spring force, when inside the physics distance area

    :type: float
    """

    form_factor: float
    """ Form factor scales the inertia tensor

    :type: float
    """

    friction: float
    """ Coulomb friction coefficient, when inside the physics distance area

    :type: float
    """

    friction_coefficients: bpy_prop_array[float]
    """ Relative friction coefficients in the in the X, Y and Z directions, when anisotropic friction is enabled

    :type: bpy_prop_array[float]
    """

    jump_max: int
    """ The maximum number of jumps the character can make before it hits the ground

    :type: int
    """

    jump_speed: float
    """ Upward velocity applied to the character when jumping

    :type: float
    """

    lock_location_x: bool
    """ Disable simulation of linear motion along the X axis

    :type: bool
    """

    lock_location_y: bool
    """ Disable simulation of linear motion along the Y axis

    :type: bool
    """

    lock_location_z: bool
    """ Disable simulation of linear motion along the Z axis

    :type: bool
    """

    lock_rotation_x: bool
    """ Disable simulation of angular motion along the X axis

    :type: bool
    """

    lock_rotation_y: bool
    """ Disable simulation of angular motion along the Y axis

    :type: bool
    """

    lock_rotation_z: bool
    """ Disable simulation of angular motion along the Z axis

    :type: bool
    """

    mass: float
    """ Mass of the object

    :type: float
    """

    max_slope: float
    """ Maximum slope angle which the character will climb

    :type: float
    """

    obstacle_radius: float
    """ Radius of object representation in obstacle simulation

    :type: float
    """

    physics_type: typing.Literal[
        "NO_COLLISION",
        "STATIC",
        "DYNAMIC",
        "RIGID_BODY",
        "SOFT_BODY",
        "OCCLUDER",
        "SENSOR",
        "NAVMESH",
        "CHARACTER",
    ]
    """ Select the type of physical representation

    :type: typing.Literal['NO_COLLISION','STATIC','DYNAMIC','RIGID_BODY','SOFT_BODY','OCCLUDER','SENSOR','NAVMESH','CHARACTER']
    """

    predefined_bound: Mesh | None
    """ Predefined mesh bounding volume used when Auto Update Bound is disable

    :type: Mesh | None
    """

    properties: bpy_prop_collection[GameProperty]
    """ Game engine properties

    :type: bpy_prop_collection[GameProperty]
    """

    radius: float
    """ Radius of bounding sphere and material physics

    :type: float
    """

    rolling_friction: float
    """ Coulomb friction coefficient of rounded shapes

    :type: float
    """

    rotation_damping: float
    """ General rotation damping

    :type: float
    """

    sensors: bpy_prop_collection[Sensor]
    """ Game engine sensor to detect events

    :type: bpy_prop_collection[Sensor]
    """

    show_actuators: bool
    """ Shows actuators for this object in the user interface

    :type: bool
    """

    show_controllers: bool
    """ Shows controllers for this object in the user interface

    :type: bool
    """

    show_debug_state: bool
    """ Print state debug info in the game engine

    :type: bool
    """

    show_sensors: bool
    """ Shows sensors for this object in the user interface

    :type: bool
    """

    show_state_panel: bool
    """ Show state panel

    :type: bool
    """

    soft_body: GameSoftBodySettings
    """ Settings for Bullet soft body simulation

    :type: GameSoftBodySettings
    """

    states_initial: bpy_prop_array[bool]
    """ Initial state when the game starts

    :type: bpy_prop_array[bool]
    """

    states_visible: bpy_prop_array[bool]
    """ State determining which controllers are displayed

    :type: bpy_prop_array[bool]
    """

    step_height: float
    """ Maximum height of steps the character can run over

    :type: float
    """

    use_actor: bool
    """ Object is detected by the Near and Radar sensor

    :type: bool
    """

    use_all_states: bool
    """ Set all state bits

    :type: bool
    """

    use_anisotropic_friction: bool
    """ Enable anisotropic friction

    :type: bool
    """

    use_collision_bounds: bool
    """ Specify a collision bounds type other than the default

    :type: bool
    """

    use_collision_compound: bool
    """ Add children to form a compound collision object

    :type: bool
    """

    use_fh_normal: bool
    """ Align dynamic game objects along the surface normal, when inside the physics distance area

    :type: bool
    """

    use_ghost: bool
    """ Object does not react to collisions, like a ghost

    :type: bool
    """

    use_obstacle_create: bool
    """ Create representation for obstacle simulation

    :type: bool
    """

    use_physics_fh: bool
    """ React to force field physics settings

    :type: bool
    """

    use_rotate_from_normal: bool
    """ Use face normal to rotate object, so that it points away from the surface

    :type: bool
    """

    use_sleep: bool
    """ Disable auto (de)activation in physics simulation

    :type: bool
    """

    used_states: bpy_prop_array[bool]
    """ States which are being used by controllers

    :type: bpy_prop_array[bool]
    """

    velocity_max: float
    """ Clamp velocity to this maximum speed, in distance per second

    :type: float
    """

    velocity_min: float
    """ Clamp velocity to this minimum speed (except when totally still), in distance per second

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameProperty(bpy_struct):
    """Game engine user defined object property"""

    name: str
    """ Available as GameObject attributes in the game engine's python API

    :type: str
    """

    show_debug: bool
    """ Print debug information for this property

    :type: bool
    """

    type: typing.Literal["BOOL", "INT", "FLOAT", "STRING", "TIMER"]
    """ 

    :type: typing.Literal['BOOL','INT','FLOAT','STRING','TIMER']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameSoftBodySettings(bpy_struct):
    """Soft body simulation settings for an object in the game engine"""

    cluster_iterations: int
    """ Number of cluster iterations

    :type: int
    """

    cluster_solver_iterations: int
    """ Cluster solver iterations

    :type: int
    """

    collision_margin: float
    """ Collision margin for soft body. Small value makes the algorithm unstable

    :type: float
    """

    drift_solver_iterations: int
    """ Drift solver iterations

    :type: int
    """

    dynamic_friction: float
    """ Dynamic Friction

    :type: float
    """

    kahr: float
    """ Anchors hardness

    :type: float
    """

    kchr: float
    """ Rigid contacts hardness

    :type: float
    """

    kdg: float
    """ Drag coeffient

    :type: float
    """

    kdp: float
    """ Damping coefficient

    :type: float
    """

    kkhr: float
    """ Kinetic contacts hardness

    :type: float
    """

    klf: float
    """ Lift coefficient

    :type: float
    """

    kpr: float
    """ Pressure coefficient

    :type: float
    """

    kshr: float
    """ Soft contacts hardness

    :type: float
    """

    ksk_split_cl: float
    """ Kinetic impulse split

    :type: float
    """

    kskhr_cl: float
    """ Soft vs kinetic hardness

    :type: float
    """

    ksr_split_cl: float
    """ Rigid impulse split

    :type: float
    """

    ksrhr_cl: float
    """ Soft vs rigid hardness

    :type: float
    """

    kss_split_cl: float
    """ Soft impulse split

    :type: float
    """

    ksshr_cl: float
    """ Soft vs soft hardness

    :type: float
    """

    kvc: float
    """ Volume conservation coefficient

    :type: float
    """

    kvcf: float
    """ Velocity correction factor

    :type: float
    """

    linear_stiffness: float
    """ Linear stiffness of the soft body links

    :type: float
    """

    position_solver_iterations: int
    """ Position solver iterations

    :type: int
    """

    shape_threshold: float
    """ Shape matching threshold

    :type: float
    """

    use_bending_constraints: bool
    """ Enable bending constraints

    :type: bool
    """

    use_cluster_rigid_to_softbody: bool
    """ Enable cluster collision between soft and rigid body

    :type: bool
    """

    use_cluster_soft_to_softbody: bool
    """ Enable cluster collision between soft and soft body

    :type: bool
    """

    use_shape_match: bool
    """ Enable soft body shape matching goal

    :type: bool
    """

    velocity_solver_iterations: int
    """ Position solver iterations

    :type: int
    """

    weld_threshold: float
    """ Welding threshold: distance between nearby vertices to be considered equal => set to 0.0 to disable welding test and speed up scene loading (ok if the mesh has no duplicates)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameStringProperty(GameProperty, bpy_struct):
    """Game engine user defined text string property"""

    value: str
    """ Property value

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GameTimerProperty(GameProperty, bpy_struct):
    """Game engine user defined timer property"""

    value: float
    """ Property value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GammaCrossSequence(EffectSequence, Sequence, bpy_struct):
    """Gamma Cross Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GaussianBlurSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a gaussian blur"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    size_x: float
    """ Size of the blur along X axis

    :type: float
    """

    size_y: float
    """ Size of the blur along Y axis

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GlowSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a glow effect"""

    blur_radius: float
    """ Radius of glow effect

    :type: float
    """

    boost_factor: float
    """ Brightness multiplier

    :type: float
    """

    clamp: float
    """ Brightness limit of intensity

    :type: float
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    quality: int
    """ Accuracy of the blur effect

    :type: int
    """

    threshold: float
    """ Minimum intensity to trigger a glow

    :type: float
    """

    use_only_boost: bool
    """ Show the glow buffer only

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class GreasePencil(ID, bpy_struct):
    """Freehand annotation sketchbook"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    layers: GreasePencilLayers
    """ 

    :type: GreasePencilLayers
    """

    palettes: GreasePencilPalettes
    """ 

    :type: GreasePencilPalettes
    """

    show_stroke_direction: bool
    """ Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points

    :type: bool
    """

    use_onion_skinning: bool
    """ Show ghosts of the frames before and after the current frame, toggle to enable on active layer or disable all

    :type: bool
    """

    use_stroke_edit_mode: bool
    """ Edit Grease Pencil strokes instead of viewport data

    :type: bool
    """

    def clear(self):
        """Remove all the grease pencil data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Group(ID, bpy_struct):
    """Group of Object data-blocks"""

    dupli_offset: bpy_prop_array[float]
    """ Offset from the origin to use when instancing as DupliGroup

    :type: bpy_prop_array[float]
    """

    layers: bpy_prop_array[bool]
    """ Layers visible when this group is instanced as a dupli

    :type: bpy_prop_array[bool]
    """

    objects: GroupObjects
    """ A collection of this groups objects

    :type: GroupObjects
    """

    users_dupli_group: typing.Any
    """ The dupli group this group is used in
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Header(bpy_struct):
    """Editor header containing UI elements"""

    bl_idname: str
    """ If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is "OBJECT_HT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_HT_hello"

    :type: str
    """

    bl_space_type: typing.Literal[
        "EMPTY",
        "VIEW_3D",
        "IMAGE_EDITOR",
        "NODE_EDITOR",
        "SEQUENCE_EDITOR",
        "CLIP_EDITOR",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "TEXT_EDITOR",
        "LOGIC_EDITOR",
        "CONSOLE",
        "INFO",
        "OUTLINER",
        "PROPERTIES",
        "FILE_BROWSER",
        "USER_PREFERENCES",
    ]
    """ The space where the header is going to be used in

    :type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES']
    """

    layout: UILayout
    """ Structure of the header in the UI

    :type: UILayout
    """

    def draw(self, context: Context):
        """Draw UI elements into the header UI layout

        :param context:
        :type context: Context
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class HemiLamp(Lamp, ID, bpy_struct):
    """180 degree constant lamp"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Histogram(bpy_struct):
    """Statistical view of the levels of color in an image"""

    mode: typing.Literal["LUMA", "RGB", "R", "G", "B", "A"]
    """ Channels to display when drawing the histogram

    :type: typing.Literal['LUMA','RGB','R','G','B','A']
    """

    show_line: bool
    """ Display lines rather than filled shapes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class HookModifier(Modifier, bpy_struct):
    """Hook modifier to modify the location of vertices"""

    center: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    falloff_curve: CurveMapping
    """ Custom Lamp Falloff Curve

    :type: CurveMapping
    """

    falloff_radius: float
    """ If not zero, the distance from the hook where influence ends

    :type: float
    """

    falloff_type: typing.Literal[
        "NONE",
        "CURVE",
        "SMOOTH",
        "SPHERE",
        "ROOT",
        "INVERSE_SQUARE",
        "SHARP",
        "LINEAR",
        "CONSTANT",
    ]
    """ 

    :type: typing.Literal['NONE','CURVE','SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR','CONSTANT']
    """

    matrix_inverse: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Reverse the transformation between this object and its target

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    object: Object | None
    """ Parent Object for hook, also recalculates and clears offset

    :type: Object | None
    """

    strength: float
    """ Relative force of the hook

    :type: float
    """

    subtarget: str
    """ Name of Parent Bone for hook (if applicable), also recalculates and clears offset

    :type: str
    """

    use_falloff_uniform: bool
    """ Compensate for non-uniform object scale

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class HueCorrectModifier(SequenceModifier, bpy_struct):
    """Hue correction modifier for sequence strip"""

    curve_mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ID(bpy_struct):
    """Base type for data-blocks, defining a unique name, linking from other libraries and garbage collection"""

    is_library_indirect: bool
    """ Is this ID block linked indirectly

    :type: bool
    """

    is_updated: bool
    """ Data-block is tagged for recalculation

    :type: bool
    """

    is_updated_data: bool
    """ Data-block data is tagged for recalculation

    :type: bool
    """

    library: Library
    """ Library file the data-block is linked from

    :type: Library
    """

    name: str
    """ Unique data-block ID name

    :type: str
    """

    preview: ImagePreview
    """ Preview image and icon of this data-block (None if not supported for this type of data)

    :type: ImagePreview
    """

    tag: bool
    """ Tools can use this to tag data for their own purposes (initial state is undefined)

    :type: bool
    """

    use_fake_user: bool
    """ Save this data-block even if it has no users

    :type: bool
    """

    users: int
    """ Number of times this data-block is referenced

    :type: int
    """

    def copy(self) -> typing_extensions.Self:
        """Create a copy of this data-block (not supported for all data-blocks)

        :return: New copy of the ID
        :rtype: typing_extensions.Self
        """

    def user_clear(self):
        """Clear the user count of a data-block so its not saved, on reload the data will be removedThis function is for advanced use only, misuse can crash blender since the user
        count is used to prevent data being removed when it is used.

        """

    def user_remap(self, new_id: typing_extensions.Self):
        """Replace all usage in the .blend file of this ID by new given one

        :param new_id: New ID to use
        :type new_id: typing_extensions.Self
        """

    def make_local(self, clear_proxy: bool | None = True) -> typing_extensions.Self:
        """Make this datablock local, return local one (may be a copy of the original, in case it is also indirectly used)

        :param clear_proxy: Whether to clear proxies (the default behavior, note that if object has to be duplicated to be made local, proxies are always cleared)
        :type clear_proxy: bool | None
        :return: This ID, or the new ID if it was copied
        :rtype: typing_extensions.Self
        """

    def user_of_id(self, id: typing_extensions.Self) -> int:
        """Count the number of times that ID uses/references given one

        :param id: ID to count usages
        :type id: typing_extensions.Self
        :return: Number of usages/references of given id by current data-block
        :rtype: int
        """

    def animation_data_create(self) -> AnimData:
        """Create animation data to this ID, note that not all ID types support this

        :return: New animation data or NULL
        :rtype: AnimData
        """

    def animation_data_clear(self):
        """Clear animation on this this ID"""

    def update_tag(
        self, refresh: set[typing.Literal["OBJECT", "DATA", "TIME"]] | None = {}
    ):
        """Tag the ID to update its display data, e.g. when calling `bpy.types.Scene.update`

        :param refresh: Type of updates to perform
        :type refresh: set[typing.Literal['OBJECT','DATA','TIME']] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class IDPropertyWrapPtr(bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class IKParam(bpy_struct):
    """Base type for IK solver parameters"""

    ik_solver: typing.Literal["LEGACY", "ITASC"]
    """ IK solver for which these parameters are defined

    :type: typing.Literal['LEGACY','ITASC']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Image(ID, bpy_struct):
    """Image data-block referencing an external or packed image"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    bindcode: bpy_prop_array[int]
    """ OpenGL bindcode

    :type: bpy_prop_array[int]
    """

    channels: int
    """ Number of channels in pixels buffer

    :type: int
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    depth: int
    """ Image bit depth

    :type: int
    """

    display_aspect: bpy_prop_array[float]
    """ Display Aspect for this image, does not affect rendering

    :type: bpy_prop_array[float]
    """

    field_order: typing.Literal["EVEN", "ODD"]
    """ Order of video fields (select which lines are displayed first)

    :type: typing.Literal['EVEN','ODD']
    """

    file_format: typing.Literal[
        "BMP",
        "IRIS",
        "PNG",
        "JPEG",
        "JPEG2000",
        "TARGA",
        "TARGA_RAW",
        "CINEON",
        "DPX",
        "OPEN_EXR_MULTILAYER",
        "OPEN_EXR",
        "HDR",
        "TIFF",
        "AVI_JPEG",
        "AVI_RAW",
        "FRAMESERVER",
        "FFMPEG",
    ]
    """ Format used for re-saving this file

    :type: typing.Literal['BMP','IRIS','PNG','JPEG','JPEG2000','TARGA','TARGA_RAW','CINEON','DPX','OPEN_EXR_MULTILAYER','OPEN_EXR','HDR','TIFF','AVI_JPEG','AVI_RAW','FRAMESERVER','FFMPEG']
    """

    filepath: str
    """ Image/Movie file name

    :type: str
    """

    filepath_raw: str
    """ Image/Movie file name (without data refreshing)

    :type: str
    """

    fps: int
    """ Speed of the animation in frames per second

    :type: int
    """

    frame_duration: int
    """ Duration (in frames) of the image (1 when not a video/sequence)

    :type: int
    """

    frame_end: int
    """ End frame of an animated texture

    :type: int
    """

    frame_start: int
    """ Start frame of an animated texture

    :type: int
    """

    generated_color: bpy_prop_array[float]
    """ Fill color for the generated image

    :type: bpy_prop_array[float]
    """

    generated_height: int
    """ Generated image height

    :type: int
    """

    generated_type: typing.Literal["BLANK", "UV_GRID", "COLOR_GRID"]
    """ Generated image type

    :type: typing.Literal['BLANK','UV_GRID','COLOR_GRID']
    """

    generated_width: int
    """ Generated image width

    :type: int
    """

    has_data: bool
    """ True if the image data is loaded into memory

    :type: bool
    """

    is_dirty: bool
    """ Image has changed and is not saved

    :type: bool
    """

    is_float: bool
    """ True if this image is stored in float buffer

    :type: bool
    """

    is_multiview: bool
    """ Image has more than one view

    :type: bool
    """

    is_stereo_3d: bool
    """ Image has left and right views

    :type: bool
    """

    mapping: typing.Literal["UV", "REFLECTION"]
    """ Mapping type to use for this image in the game engine

    :type: typing.Literal['UV','REFLECTION']
    """

    packed_file: PackedFile
    """ First packed file of the image

    :type: PackedFile
    """

    packed_files: bpy_prop_collection[ImagePackedFile]
    """ Collection of packed images

    :type: bpy_prop_collection[ImagePackedFile]
    """

    pixels: float
    """ Image pixels in floating point values

    :type: float
    """

    render_slots: RenderSlots
    """ Render slots of the image

    :type: RenderSlots
    """

    resolution: bpy_prop_array[float]
    """ X/Y pixels per meter

    :type: bpy_prop_array[float]
    """

    size: bpy_prop_array[int]
    """ Width and height in pixels, zero when image data cant be loaded

    :type: bpy_prop_array[int]
    """

    source: typing.Literal["FILE", "SEQUENCE", "MOVIE", "GENERATED", "VIEWER"]
    """ Where the image comes from

    :type: typing.Literal['FILE','SEQUENCE','MOVIE','GENERATED','VIEWER']
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3d

    :type: Stereo3dFormat
    """

    tiles_x: int
    """ Degree of repetition in the X direction

    :type: int
    """

    tiles_y: int
    """ Degree of repetition in the Y direction

    :type: int
    """

    type: typing.Literal[
        "IMAGE", "MULTILAYER", "UV_TEST", "RENDER_RESULT", "COMPOSITING"
    ]
    """ How to generate the image

    :type: typing.Literal['IMAGE','MULTILAYER','UV_TEST','RENDER_RESULT','COMPOSITING']
    """

    use_alpha: bool
    """ Use the alpha channel information from the image or make image fully opaque

    :type: bool
    """

    use_animation: bool
    """ Use as animated texture in the game engine

    :type: bool
    """

    use_clamp_x: bool
    """ Disable texture repeating horizontally

    :type: bool
    """

    use_clamp_y: bool
    """ Disable texture repeating vertically

    :type: bool
    """

    use_deinterlace: bool
    """ Deinterlace movie file on load

    :type: bool
    """

    use_fields: bool
    """ Use fields of the image

    :type: bool
    """

    use_generated_float: bool
    """ Generate floating point buffer

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_tiles: bool
    """ Use of tilemode for faces (default shift-LMB to pick the tile for selected faces)

    :type: bool
    """

    use_view_as_render: bool
    """ Apply render part of display transformation when displaying this image on the screen

    :type: bool
    """

    views_format: typing.Literal["INDIVIDUAL", "STEREO_3D"]
    """ Mode to load image views

    :type: typing.Literal['INDIVIDUAL','STEREO_3D']
    """

    def save_render(self, filepath: str, scene: Scene | None = None):
        """Save image to a specific path using a scenes render settings

        :param filepath: Save path
        :type filepath: str
        :param scene: Scene to take image parameters from
        :type scene: Scene | None
        """

    def save(self):
        """Save image to its source path"""

    def pack(
        self, as_png: bool | None = False, data: str = "", data_len: int | None = 0
    ):
        """Pack an image as embedded data into the .blend file

        :param as_png: as_png, Pack the image as PNG (needed for generated/dirty images)
        :type as_png: bool | None
        :param data: data, Raw data (bytes, exact content of the embedded file)
        :type data: str
        :param data_len: data_len, length of given data (mandatory if data is provided)
        :type data_len: int | None
        """

    def unpack(
        self,
        method: typing.Literal[
            "USE_LOCAL", "WRITE_LOCAL", "USE_ORIGINAL", "WRITE_ORIGINAL"
        ]
        | None = "USE_LOCAL",
    ):
        """Save an image packed in the .blend file to disk

        :param method: method, How to unpack
        :type method: typing.Literal['USE_LOCAL','WRITE_LOCAL','USE_ORIGINAL','WRITE_ORIGINAL'] | None
        """

    def reload(self):
        """Reload the image from its source path"""

    def update(self):
        """Update the display image from the floating point buffer"""

    def scale(self, width: int | None, height: int | None):
        """Scale the image in pixels

        :param width: Width
        :type width: int | None
        :param height: Height
        :type height: int | None
        """

    def gl_touch(
        self, frame: int | None = 0, filter: int | None = 9985, mag: int | None = 9729
    ) -> int:
        """Delay the image from being cleaned from the cache due inactivity

        :param frame: Frame, Frame of image sequence or movie
        :type frame: int | None
        :param filter: Filter, The texture minifying function to use if the image wasn't loaded
        :type filter: int | None
        :param mag: Magnification, The texture magnification function to use if the image wasn't loaded
        :type mag: int | None
        :return: Error, OpenGL error value
        :rtype: int
        """

    def gl_load(
        self, frame: int | None = 0, filter: int | None = 9985, mag: int | None = 9729
    ) -> int:
        """Load the image into OpenGL graphics memory

        :param frame: Frame, Frame of image sequence or movie
        :type frame: int | None
        :param filter: Filter, The texture minifying function
        :type filter: int | None
        :param mag: Magnification, The texture magnification function
        :type mag: int | None
        :return: Error, OpenGL error value
        :rtype: int
        """

    def gl_free(self):
        """Free the image from OpenGL graphics memory"""

    def filepath_from_user(self, image_user: ImageUser | None = None) -> str:
        """Return the absolute path to the filepath of an image frame specified by the image user

        :param image_user: Image user of the image to get filepath for
        :type image_user: ImageUser | None
        :return: File Path, The resulting filepath from the image and it's user
        :rtype: str
        """

    def buffers_free(self):
        """Free the image buffers from memory"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImageFormatSettings(bpy_struct):
    """Settings for image formats"""

    cineon_black: int
    """ Log conversion reference blackpoint

    :type: int
    """

    cineon_gamma: float
    """ Log conversion gamma

    :type: float
    """

    cineon_white: int
    """ Log conversion reference whitepoint

    :type: int
    """

    color_depth: typing.Literal["8", "10", "12", "16", "32"]
    """ Bit depth per channel

    :type: typing.Literal['8','10','12','16','32']
    """

    color_mode: typing.Literal["BW", "RGB", "RGBA"]
    """ Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels

    :type: typing.Literal['BW','RGB','RGBA']
    """

    compression: int
    """ Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output

    :type: int
    """

    display_settings: ColorManagedDisplaySettings
    """ Settings of device saved image would be displayed on

    :type: ColorManagedDisplaySettings
    """

    exr_codec: typing.Literal[
        "NONE", "PXR24", "ZIP", "PIZ", "RLE", "ZIPS", "B44", "B44A", "DWAA"
    ]
    """ Codec settings for OpenEXR

    :type: typing.Literal['NONE','PXR24','ZIP','PIZ','RLE','ZIPS','B44','B44A','DWAA']
    """

    file_format: typing.Literal[
        "BMP",
        "IRIS",
        "PNG",
        "JPEG",
        "JPEG2000",
        "TARGA",
        "TARGA_RAW",
        "CINEON",
        "DPX",
        "OPEN_EXR_MULTILAYER",
        "OPEN_EXR",
        "HDR",
        "TIFF",
        "AVI_JPEG",
        "AVI_RAW",
        "FRAMESERVER",
        "FFMPEG",
    ]
    """ File format to save the rendered images as

    :type: typing.Literal['BMP','IRIS','PNG','JPEG','JPEG2000','TARGA','TARGA_RAW','CINEON','DPX','OPEN_EXR_MULTILAYER','OPEN_EXR','HDR','TIFF','AVI_JPEG','AVI_RAW','FRAMESERVER','FFMPEG']
    """

    jpeg2k_codec: typing.Literal["JP2", "J2K"]
    """ Codec settings for Jpeg2000

    :type: typing.Literal['JP2','J2K']
    """

    quality: int
    """ Quality for image formats that support lossy compression

    :type: int
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3d

    :type: Stereo3dFormat
    """

    tiff_codec: typing.Literal["NONE", "DEFLATE", "LZW", "PACKBITS"]
    """ Compression mode for TIFF

    :type: typing.Literal['NONE','DEFLATE','LZW','PACKBITS']
    """

    use_cineon_log: bool
    """ Convert to logarithmic color space

    :type: bool
    """

    use_jpeg2k_cinema_48: bool
    """ Use Openjpeg Cinema Preset (48fps)

    :type: bool
    """

    use_jpeg2k_cinema_preset: bool
    """ Use Openjpeg Cinema Preset

    :type: bool
    """

    use_jpeg2k_ycc: bool
    """ Save luminance-chrominance-chrominance channels instead of RGB colors

    :type: bool
    """

    use_preview: bool
    """ When rendering animations, save JPG preview images in same directory

    :type: bool
    """

    use_zbuffer: bool
    """ Save the z-depth per pixel (32 bit unsigned int z-buffer)

    :type: bool
    """

    view_settings: ColorManagedViewSettings
    """ Color management settings applied on image before saving

    :type: ColorManagedViewSettings
    """

    views_format: typing.Literal["INDIVIDUAL", "STEREO_3D"]
    """ Format of multiview media

    :type: typing.Literal['INDIVIDUAL','STEREO_3D']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImagePackedFile(bpy_struct):
    filepath: str
    """ 

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    def save(self):
        """Save the packed file to its filepath"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImagePaint(Paint, bpy_struct):
    """Properties of image and texture painting mode"""

    canvas: Image | None
    """ Image used as canvas

    :type: Image | None
    """

    clone_image: Image | None
    """ Image used as clone source

    :type: Image | None
    """

    dither: float
    """ Amount of dithering when painting on byte images

    :type: float
    """

    invert_stencil: bool
    """ Invert the stencil layer

    :type: bool
    """

    missing_materials: bool
    """ The mesh is missing materials

    :type: bool
    """

    missing_stencil: bool
    """ Image Painting does not have a stencil

    :type: bool
    """

    missing_texture: bool
    """ Image Painting does not have a texture to paint on

    :type: bool
    """

    missing_uvs: bool
    """ A UV layer is missing on the mesh

    :type: bool
    """

    mode: typing.Literal["MATERIAL", "IMAGE"]
    """ Mode of operation for projection painting

    :type: typing.Literal['MATERIAL','IMAGE']
    """

    normal_angle: int
    """ Paint most on faces pointing towards the view according to this angle

    :type: int
    """

    screen_grab_size: bpy_prop_array[int]
    """ Size to capture the image for re-projecting

    :type: bpy_prop_array[int]
    """

    seam_bleed: int
    """ Extend paint beyond the faces UVs to reduce seams (in pixels, slower)

    :type: int
    """

    stencil_color: bpy_prop_array[float]
    """ Stencil color in the viewport

    :type: bpy_prop_array[float]
    """

    stencil_image: Image | None
    """ Image used as stencil

    :type: Image | None
    """

    use_backface_culling: bool
    """ Ignore faces pointing away from the view (faster)

    :type: bool
    """

    use_clone_layer: bool
    """ Use another UV map as clone source, otherwise use the 3D cursor as the source

    :type: bool
    """

    use_normal_falloff: bool
    """ Paint most on faces pointing towards the view

    :type: bool
    """

    use_occlude: bool
    """ Only paint onto the faces directly under the brush (slower)

    :type: bool
    """

    use_stencil_layer: bool
    """ Set the mask layer from the UV map buttons

    :type: bool
    """

    def detect_data(self) -> bool:
        """Check if required texpaint data exist

        :return:
        :rtype: bool
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImagePreview(bpy_struct):
    """Preview image and icon"""

    icon_id: int
    """ Unique integer identifying this preview as an icon (zero means invalid)

    :type: int
    """

    icon_pixels: int
    """ Icon pixels, as bytes (always RGBA 32bits)

    :type: int
    """

    icon_pixels_float: float
    """ Icon pixels components, as floats (RGBA concatenated values)

    :type: float
    """

    icon_size: bpy_prop_array[int]
    """ Width and height in pixels

    :type: bpy_prop_array[int]
    """

    image_pixels: int
    """ Image pixels, as bytes (always RGBA 32bits)

    :type: int
    """

    image_pixels_float: float
    """ Image pixels components, as floats (RGBA concatenated values)

    :type: float
    """

    image_size: bpy_prop_array[int]
    """ Width and height in pixels

    :type: bpy_prop_array[int]
    """

    is_icon_custom: bool
    """ True if this preview icon has been modified by py script,and is no more auto-generated by Blender

    :type: bool
    """

    is_image_custom: bool
    """ True if this preview image has been modified by py script,and is no more auto-generated by Blender

    :type: bool
    """

    def reload(self):
        """Reload the preview from its source path"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImageSequence(Sequence, bpy_struct):
    """Sequence strip to load one or more images"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    directory: str
    """ 

    :type: str
    """

    elements: SequenceElements
    """ 

    :type: SequenceElements
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3d

    :type: Stereo3dFormat
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    views_format: typing.Literal["INDIVIDUAL", "STEREO_3D"]
    """ Mode to load image views

    :type: typing.Literal['INDIVIDUAL','STEREO_3D']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImageTexture(Texture, ID, bpy_struct):
    checker_distance: float
    """ Distance between checker tiles

    :type: float
    """

    crop_max_x: float
    """ Maximum X value to crop the image

    :type: float
    """

    crop_max_y: float
    """ Maximum Y value to crop the image

    :type: float
    """

    crop_min_x: float
    """ Minimum X value to crop the image

    :type: float
    """

    crop_min_y: float
    """ Minimum Y value to crop the image

    :type: float
    """

    extension: typing.Literal["EXTEND", "CLIP", "CLIP_CUBE", "REPEAT", "CHECKER"]
    """ How the image is extrapolated past its original bounds

    :type: typing.Literal['EXTEND','CLIP','CLIP_CUBE','REPEAT','CHECKER']
    """

    filter_eccentricity: int
    """ Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_probes: int
    """ Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_size: float
    """ Multiply the filter size used by MIP Map and Interpolation

    :type: float
    """

    filter_type: typing.Literal["BOX", "EWA", "FELINE", "AREA"]
    """ Texture filter to use for sampling image

    :type: typing.Literal['BOX','EWA','FELINE','AREA']
    """

    image: Image | None
    """ 

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    invert_alpha: bool
    """ Invert all the alpha values in the image

    :type: bool
    """

    repeat_x: int
    """ Repetition multiplier in the X direction

    :type: int
    """

    repeat_y: int
    """ Repetition multiplier in the Y direction

    :type: int
    """

    use_alpha: bool
    """ Use the alpha channel information in the image

    :type: bool
    """

    use_calculate_alpha: bool
    """ Calculate an alpha channel based on RGB values in the image

    :type: bool
    """

    use_checker_even: bool
    """ Even checker tiles

    :type: bool
    """

    use_checker_odd: bool
    """ Odd checker tiles

    :type: bool
    """

    use_derivative_map: bool
    """ Use red and green as derivative values

    :type: bool
    """

    use_filter_size_min: bool
    """ Use Filter Size as a minimal filter value in pixels

    :type: bool
    """

    use_flip_axis: bool
    """ Flip the texture's X and Y axis

    :type: bool
    """

    use_interpolation: bool
    """ Interpolate pixels using selected filter

    :type: bool
    """

    use_mipmap: bool
    """ Use auto-generated MIP maps for the image

    :type: bool
    """

    use_mipmap_gauss: bool
    """ Use Gauss filter to sample down MIP maps

    :type: bool
    """

    use_mirror_x: bool
    """ Mirror the image repetition on the X direction

    :type: bool
    """

    use_mirror_y: bool
    """ Mirror the image repetition on the Y direction

    :type: bool
    """

    use_normal_map: bool
    """ Use image RGB values for normal mapping

    :type: bool
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImageUser(bpy_struct):
    """Parameters defining how an Image data-block is used by another data-block"""

    fields_per_frame: int
    """ Number of fields per rendered frame (2 fields is 1 image)

    :type: int
    """

    frame_current: int
    """ Current frame number in image sequence or movie

    :type: int
    """

    frame_duration: int
    """ Number of images of a movie to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the movie/sequence, assuming first picture has a #1

    :type: int
    """

    multilayer_layer: int
    """ Layer in multilayer image

    :type: int
    """

    multilayer_pass: int
    """ Pass in multilayer image

    :type: int
    """

    multilayer_view: int
    """ View in multilayer image

    :type: int
    """

    use_auto_refresh: bool
    """ Always refresh image on frame changes

    :type: bool
    """

    use_cyclic: bool
    """ Cycle the images in the movie

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ImapaintToolCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current image paint brush"""

    has_accumulate: bool
    """ 

    :type: bool
    """

    has_radius: bool
    """ 

    :type: bool
    """

    has_space_attenuation: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class InflowFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for objects adding fluids in the simulation"""

    inflow_velocity: bpy_prop_array[float]
    """ Initial velocity of fluid

    :type: bpy_prop_array[float]
    """

    use: bool
    """ Object contributes to the fluid simulation

    :type: bool
    """

    use_animated_mesh: bool
    """ Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)

    :type: bool
    """

    use_local_coords: bool
    """ Use local coordinates for inflow (e.g. for rotating objects)

    :type: bool
    """

    volume_initialization: typing.Literal["VOLUME", "SHELL", "BOTH"]
    """ Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)

    :type: typing.Literal['VOLUME','SHELL','BOTH']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class IntProperty(Property, bpy_struct):
    """RNA integer number property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: int
    """ Default value for this number

    :type: int
    """

    default_array: bpy_prop_array[int]
    """ Default value for this array

    :type: bpy_prop_array[int]
    """

    hard_max: int
    """ Maximum value used by buttons

    :type: int
    """

    hard_min: int
    """ Minimum value used by buttons

    :type: int
    """

    is_array: bool
    """ 

    :type: bool
    """

    soft_max: int
    """ Maximum value used by buttons

    :type: int
    """

    soft_min: int
    """ Minimum value used by buttons

    :type: int
    """

    step: int
    """ Step size used by number buttons, for floats 1/100th of the step size

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Itasc(IKParam, bpy_struct):
    """Parameters for the iTaSC IK solver"""

    damping_epsilon: float
    """ Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)

    :type: float
    """

    damping_max: float
    """ Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)

    :type: float
    """

    feedback: float
    """ Feedback coefficient for error correction, average response time is 1/feedback (default=20)

    :type: float
    """

    iterations: int
    """ Maximum number of iterations for convergence in case of reiteration

    :type: int
    """

    mode: typing.Literal["ANIMATION", "SIMULATION"]
    """ 

    :type: typing.Literal['ANIMATION','SIMULATION']
    """

    precision: float
    """ Precision of convergence in case of reiteration

    :type: float
    """

    reiteration_method: typing.Literal["NEVER", "INITIAL", "ALWAYS"]
    """ Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames

    :type: typing.Literal['NEVER','INITIAL','ALWAYS']
    """

    solver: typing.Literal["SDLS", "DLS"]
    """ Solving method selection: automatic damping or manual damping

    :type: typing.Literal['SDLS','DLS']
    """

    step_count: int
    """ Divide the frame interval into this many steps

    :type: int
    """

    step_max: float
    """ Higher bound for timestep in second in case of automatic substeps

    :type: float
    """

    step_min: float
    """ Lower bound for timestep in second in case of automatic substeps

    :type: float
    """

    use_auto_step: bool
    """ Automatically determine the optimal number of steps for best performance/accuracy trade off

    :type: bool
    """

    velocity_max: float
    """ Maximum joint velocity in rad/s (default=50)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class JoystickSensor(Sensor, bpy_struct):
    """Sensor to detect joystick events"""

    axis_direction: typing.Literal["RIGHTAXIS", "UPAXIS", "LEFTAXIS", "DOWNAXIS"]
    """ The direction of the stick

    :type: typing.Literal['RIGHTAXIS','UPAXIS','LEFTAXIS','DOWNAXIS']
    """

    axis_number: typing.Literal["LEFT_STICK", "RIGHT_STICK"]
    """ Which Stick to use

    :type: typing.Literal['LEFT_STICK','RIGHT_STICK']
    """

    axis_threshold: int
    """ Threshold minimum to detect the stick/trigger

    :type: int
    """

    axis_trigger_number: typing.Literal[
        "LEFT_SHOULDER_TRIGGER", "RIGHT_SHOULDER_TRIGGER"
    ]
    """ Which trigger to detect

    :type: typing.Literal['LEFT_SHOULDER_TRIGGER','RIGHT_SHOULDER_TRIGGER']
    """

    button_number: typing.Literal[
        "BUTTON_A",
        "BUTTON_B",
        "BUTTON_X",
        "BUTTON_Y",
        "BUTTON_BACK",
        "BUTTON_GUIDE",
        "BUTTON_START",
        "BUTTON_STICK_LEFT",
        "BUTTON_STICK_RIGHT",
        "BUTTON_SHOULDER_LEFT",
        "BUTTON_SHOULDER_RIGHT",
        "BUTTON_DPAD_UP",
        "BUTTON_DPAD_DOWN",
        "BUTTON_DPAD_LEFT",
        "BUTTON_DPAD_RIGHT",
    ]
    """ Which button to use

    :type: typing.Literal['BUTTON_A','BUTTON_B','BUTTON_X','BUTTON_Y','BUTTON_BACK','BUTTON_GUIDE','BUTTON_START','BUTTON_STICK_LEFT','BUTTON_STICK_RIGHT','BUTTON_SHOULDER_LEFT','BUTTON_SHOULDER_RIGHT','BUTTON_DPAD_UP','BUTTON_DPAD_DOWN','BUTTON_DPAD_LEFT','BUTTON_DPAD_RIGHT']
    """

    event_type: typing.Literal[
        "STICK_DIRECTIONS", "STICK_AXIS", "SHOULDER_TRIGGERS", "BUTTONS"
    ]
    """ The type of event this joystick sensor is triggered on

    :type: typing.Literal['STICK_DIRECTIONS','STICK_AXIS','SHOULDER_TRIGGERS','BUTTONS']
    """

    joystick_index: int
    """ Which joystick to use

    :type: int
    """

    single_axis_number: typing.Literal[
        "LEFT_STICK_HORIZONTAL",
        "LEFT_STICK_VERTICAL",
        "RIGHT_STICK_HORIZONTAL",
        "RIGHT_STICK_VERTICAL",
    ]
    """ Which stick single axis (vertical/horizontal/other) to detect

    :type: typing.Literal['LEFT_STICK_HORIZONTAL','LEFT_STICK_VERTICAL','RIGHT_STICK_HORIZONTAL','RIGHT_STICK_VERTICAL']
    """

    use_all_events: bool
    """ Triggered by all events on this joystick's current type (axis/button)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Key(ID, bpy_struct):
    """Shape keys data-block containing different shapes of geometric data-blocks"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    eval_time: float
    """ Evaluation time for absolute shape keys

    :type: float
    """

    key_blocks: bpy_prop_collection[ShapeKey]
    """ Shape keys

    :type: bpy_prop_collection[ShapeKey]
    """

    reference_key: ShapeKey
    """ 

    :type: ShapeKey
    """

    use_relative: bool
    """ Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time

    :type: bool
    """

    user: ID
    """ Data-block using these shape keys

    :type: ID
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyConfig(bpy_struct):
    """Input configuration, including keymaps"""

    is_user_defined: bool
    """ Indicates that a keyconfig was defined by the user

    :type: bool
    """

    keymaps: KeyMaps
    """ Key maps configured as part of this configuration

    :type: KeyMaps
    """

    name: str
    """ Name of the key configuration

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyMap(bpy_struct):
    """Input configuration, including keymaps"""

    is_modal: bool
    """ Indicates that a keymap is used for translate modal events for an operator

    :type: bool
    """

    is_user_modified: bool
    """ Keymap is defined by the user

    :type: bool
    """

    keymap_items: KeyMapItems
    """ Items in the keymap, linking an operator to an input event

    :type: KeyMapItems
    """

    name: str
    """ Name of the key map

    :type: str
    """

    region_type: typing.Literal[
        "WINDOW",
        "HEADER",
        "CHANNELS",
        "TEMPORARY",
        "UI",
        "TOOLS",
        "TOOL_PROPS",
        "PREVIEW",
    ]
    """ Optional region type keymap is associated with

    :type: typing.Literal['WINDOW','HEADER','CHANNELS','TEMPORARY','UI','TOOLS','TOOL_PROPS','PREVIEW']
    """

    show_expanded_children: bool
    """ Children expanded in the user interface

    :type: bool
    """

    show_expanded_items: bool
    """ Expanded in the user interface

    :type: bool
    """

    space_type: typing.Literal[
        "EMPTY",
        "VIEW_3D",
        "IMAGE_EDITOR",
        "NODE_EDITOR",
        "SEQUENCE_EDITOR",
        "CLIP_EDITOR",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "TEXT_EDITOR",
        "LOGIC_EDITOR",
        "CONSOLE",
        "INFO",
        "OUTLINER",
        "PROPERTIES",
        "FILE_BROWSER",
        "USER_PREFERENCES",
    ]
    """ Optional space type keymap is associated with

    :type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES']
    """

    def active(self) -> typing_extensions.Self:
        """active

        :return: Key Map, Active key map
        :rtype: typing_extensions.Self
        """

    def restore_to_default(self):
        """restore_to_default"""

    def restore_item_to_default(self, item: KeyMapItem):
        """restore_item_to_default

        :param item: Item
        :type item: KeyMapItem
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyMapItem(bpy_struct):
    """Item in a Key Map"""

    active: bool | None
    """ Activate or deactivate item

    :type: bool | None
    """

    alt: bool
    """ Alt key pressed

    :type: bool
    """

    any: bool
    """ Any modifier keys pressed

    :type: bool
    """

    ctrl: bool
    """ Control key pressed

    :type: bool
    """

    id: int
    """ ID of the item

    :type: int
    """

    idname: str
    """ Identifier of operator to call on input event

    :type: str
    """

    is_user_defined: bool
    """ Is this keymap item user defined (doesn't just replace a builtin item)

    :type: bool
    """

    is_user_modified: bool
    """ Is this keymap item modified by the user

    :type: bool
    """

    key_modifier: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Regular key pressed as a modifier

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    map_type: typing.Literal["KEYBOARD", "TWEAK", "MOUSE", "NDOF", "TEXTINPUT", "TIMER"]
    """ Type of event mapping

    :type: typing.Literal['KEYBOARD','TWEAK','MOUSE','NDOF','TEXTINPUT','TIMER']
    """

    name: str
    """ Name of operator (translated) to call on input event

    :type: str
    """

    oskey: bool
    """ Operating system key pressed

    :type: bool
    """

    properties: OperatorProperties
    """ Properties to set when the operator is called

    :type: OperatorProperties
    """

    propvalue: typing.Literal["NONE"]
    """ The value this event translates to in a modal keymap

    :type: typing.Literal['NONE']
    """

    shift: bool
    """ Shift key pressed

    :type: bool
    """

    show_expanded: bool
    """ Show key map event and property details in the user interface

    :type: bool
    """

    type: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Type of event

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    value: typing.Literal[
        "ANY",
        "NOTHING",
        "PRESS",
        "RELEASE",
        "CLICK",
        "DOUBLE_CLICK",
        "CLICK_DRAG",
        "NORTH",
        "NORTH_EAST",
        "EAST",
        "SOUTH_EAST",
        "SOUTH",
        "SOUTH_WEST",
        "WEST",
        "NORTH_WEST",
    ]
    """ 

    :type: typing.Literal['ANY','NOTHING','PRESS','RELEASE','CLICK','DOUBLE_CLICK','CLICK_DRAG','NORTH','NORTH_EAST','EAST','SOUTH_EAST','SOUTH','SOUTH_WEST','WEST','NORTH_WEST']
    """

    def compare(self, item: typing_extensions.Self | None) -> bool:
        """compare

        :param item: Item
        :type item: typing_extensions.Self | None
        :return: Comparison result
        :rtype: bool
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyboardSensor(Sensor, bpy_struct):
    """Sensor to detect keyboard events"""

    key: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ 

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    log: str
    """ Property that indicates whether to log keystrokes as a string

    :type: str
    """

    modifier_key_1: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Modifier key code

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    modifier_key_2: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Modifier key code

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    target: str
    """ Property that receives the keystrokes in case a string is logged

    :type: str
    """

    use_all_keys: bool
    """ Trigger this sensor on any keystroke

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Keyframe(bpy_struct):
    """Bezier curve point with two handles defining a Keyframe on an F-Curve"""

    amplitude: float
    """ Amount to boost elastic bounces for 'elastic' easing

    :type: float
    """

    back: float
    """ Amount of overshoot for 'back' easing

    :type: float
    """

    co: bpy_prop_array[float]
    """ Coordinates of the control point

    :type: bpy_prop_array[float]
    """

    easing: typing.Literal["AUTO", "EASE_IN", "EASE_OUT", "EASE_IN_OUT"]
    """ Which ends of the segment between this and the next keyframe easing interpolation is applied to

    :type: typing.Literal['AUTO','EASE_IN','EASE_OUT','EASE_IN_OUT']
    """

    handle_left: bpy_prop_array[float]
    """ Coordinates of the left handle (before the control point)

    :type: bpy_prop_array[float]
    """

    handle_left_type: typing.Literal[
        "FREE", "VECTOR", "ALIGNED", "AUTO", "AUTO_CLAMPED"
    ]
    """ Handle types

    :type: typing.Literal['FREE','VECTOR','ALIGNED','AUTO','AUTO_CLAMPED']
    """

    handle_right: bpy_prop_array[float]
    """ Coordinates of the right handle (after the control point)

    :type: bpy_prop_array[float]
    """

    handle_right_type: typing.Literal[
        "FREE", "VECTOR", "ALIGNED", "AUTO", "AUTO_CLAMPED"
    ]
    """ Handle types

    :type: typing.Literal['FREE','VECTOR','ALIGNED','AUTO','AUTO_CLAMPED']
    """

    interpolation: typing.Literal[
        "CONSTANT",
        "LINEAR",
        "BEZIER",
        "SINE",
        "QUAD",
        "CUBIC",
        "QUART",
        "QUINT",
        "EXPO",
        "CIRC",
        "BACK",
        "BOUNCE",
        "ELASTIC",
    ]
    """ Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe

    :type: typing.Literal['CONSTANT','LINEAR','BEZIER','SINE','QUAD','CUBIC','QUART','QUINT','EXPO','CIRC','BACK','BOUNCE','ELASTIC']
    """

    period: float
    """ Time between bounces for elastic easing

    :type: float
    """

    select_control_point: bool
    """ Control point selection status

    :type: bool
    """

    select_left_handle: bool
    """ Left handle selection status

    :type: bool
    """

    select_right_handle: bool
    """ Right handle selection status

    :type: bool
    """

    type: typing.Literal["KEYFRAME", "BREAKDOWN", "MOVING_HOLD", "EXTREME", "JITTER"]
    """ Type of keyframe (for visual purposes only)

    :type: typing.Literal['KEYFRAME','BREAKDOWN','MOVING_HOLD','EXTREME','JITTER']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSet(bpy_struct):
    """Settings that should be keyframed together"""

    bl_description: str
    """ A short description of the keying set

    :type: str
    """

    bl_idname: str
    """ If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    is_path_absolute: bool
    """ Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)

    :type: bool
    """

    paths: KeyingSetPaths
    """ Keying Set Paths to define settings that get keyframed together

    :type: KeyingSetPaths
    """

    type_info: KeyingSetInfo
    """ Callback function defines for built-in Keying Sets

    :type: KeyingSetInfo
    """

    use_insertkey_needed: bool
    """ Only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_needed: bool
    """ Override default setting to only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_visual: bool
    """ Override default setting to insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_override_xyz_to_rgb: bool
    """ Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis

    :type: bool
    """

    use_insertkey_visual: bool
    """ Insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_xyz_to_rgb: bool
    """ Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis

    :type: bool
    """

    def refresh(self):
        """Refresh Keying Set to ensure that it is valid for the current context (call before each use of one)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSetInfo(bpy_struct):
    """Callback function defines for builtin Keying Sets"""

    bl_description: str
    """ A short description of the keying set

    :type: str
    """

    bl_idname: str
    """ If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: set[
        typing.Literal["INSERTKEY_NEEDED", "INSERTKEY_VISUAL", "INSERTKEY_XYZ_TO_RGB"]
    ]
    """ Keying Set options to use when inserting keyframes

    :type: set[typing.Literal['INSERTKEY_NEEDED','INSERTKEY_VISUAL','INSERTKEY_XYZ_TO_RGB']]
    """

    def poll(self, context: Context) -> bool:
        """Test if Keying Set can be used or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def iterator(self, context: Context, ks: KeyingSet | None):
        """Call generate() on the structs which have properties to be keyframed

        :param context:
        :type context: Context
        :param ks:
        :type ks: KeyingSet | None
        """

    def generate(self, context: Context, ks: KeyingSet | None, data: typing.Any):
        """Add Paths to the Keying Set to keyframe the properties of the given data

        :param context:
        :type context: Context
        :param ks:
        :type ks: KeyingSet | None
        :param data:
        :type data: typing.Any
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KeyingSetPath(bpy_struct):
    """Path to a setting for use in a Keying Set"""

    array_index: int
    """ Index to the specific setting if applicable

    :type: int
    """

    data_path: str
    """ Path to property setting

    :type: str
    """

    group: str
    """ Name of Action Group to assign setting(s) for this path to

    :type: str
    """

    group_method: typing.Literal["NAMED", "NONE", "KEYINGSET"]
    """ Method used to define which Group-name to use

    :type: typing.Literal['NAMED','NONE','KEYINGSET']
    """

    id: ID | None
    """ ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)

    :type: ID | None
    """

    id_type: typing.Literal[
        "ACTION",
        "ARMATURE",
        "BRUSH",
        "CAMERA",
        "CACHEFILE",
        "CURVE",
        "FONT",
        "GREASEPENCIL",
        "GROUP",
        "IMAGE",
        "KEY",
        "LAMP",
        "LIBRARY",
        "LINESTYLE",
        "LATTICE",
        "MASK",
        "MATERIAL",
        "META",
        "MESH",
        "MOVIECLIP",
        "NODETREE",
        "OBJECT",
        "PAINTCURVE",
        "PALETTE",
        "PARTICLE",
        "SCENE",
        "SCREEN",
        "SOUND",
        "SPEAKER",
        "TEXT",
        "TEXTURE",
        "WINDOWMANAGER",
        "WORLD",
    ]
    """ Type of ID-block that can be used

    :type: typing.Literal['ACTION','ARMATURE','BRUSH','CAMERA','CACHEFILE','CURVE','FONT','GREASEPENCIL','GROUP','IMAGE','KEY','LAMP','LIBRARY','LINESTYLE','LATTICE','MASK','MATERIAL','META','MESH','MOVIECLIP','NODETREE','OBJECT','PAINTCURVE','PALETTE','PARTICLE','SCENE','SCREEN','SOUND','SPEAKER','TEXT','TEXTURE','WINDOWMANAGER','WORLD']
    """

    use_entire_array: bool
    """ When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used

    :type: bool
    """

    use_insertkey_needed: bool
    """ Only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_needed: bool
    """ Override default setting to only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_visual: bool
    """ Override default setting to insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_override_xyz_to_rgb: bool
    """ Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis

    :type: bool
    """

    use_insertkey_visual: bool
    """ Insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_xyz_to_rgb: bool
    """ Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class KinematicConstraint(Constraint, bpy_struct):
    """Inverse Kinematics"""

    chain_count: int
    """ How many bones are included in the IK effect - 0 uses all bones

    :type: int
    """

    distance: float
    """ Radius of limiting sphere

    :type: float
    """

    ik_type: typing.Literal["COPY_POSE", "DISTANCE"]
    """ 

    :type: typing.Literal['COPY_POSE','DISTANCE']
    """

    iterations: int
    """ Maximum number of solving iterations

    :type: int
    """

    limit_mode: typing.Literal[
        "LIMITDIST_INSIDE", "LIMITDIST_OUTSIDE", "LIMITDIST_ONSURFACE"
    ]
    """ Distances in relation to sphere of influence to allow

    :type: typing.Literal['LIMITDIST_INSIDE','LIMITDIST_OUTSIDE','LIMITDIST_ONSURFACE']
    """

    lock_location_x: bool
    """ Constraint position along X axis

    :type: bool
    """

    lock_location_y: bool
    """ Constraint position along Y axis

    :type: bool
    """

    lock_location_z: bool
    """ Constraint position along Z axis

    :type: bool
    """

    lock_rotation_x: bool
    """ Constraint rotation along X axis

    :type: bool
    """

    lock_rotation_y: bool
    """ Constraint rotation along Y axis

    :type: bool
    """

    lock_rotation_z: bool
    """ Constraint rotation along Z axis

    :type: bool
    """

    orient_weight: float
    """ For Tree-IK: Weight of orientation control for this target

    :type: float
    """

    pole_angle: float
    """ Pole rotation offset

    :type: float
    """

    pole_subtarget: str
    """ 

    :type: str
    """

    pole_target: Object | None
    """ Object for pole rotation

    :type: Object | None
    """

    reference_axis: typing.Literal["BONE", "TARGET"]
    """ Constraint axis Lock options relative to Bone or Target reference

    :type: typing.Literal['BONE','TARGET']
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_location: bool
    """ Chain follows position of target

    :type: bool
    """

    use_rotation: bool
    """ Chain follows rotation of target

    :type: bool
    """

    use_stretch: bool
    """ Enable IK Stretching

    :type: bool
    """

    use_tail: bool
    """ Include bone's tail as last element in chain

    :type: bool
    """

    weight: float
    """ For Tree-IK: Weight of position control for this target

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Lamp(ID, bpy_struct):
    """Lamp data-block for lighting a scene"""

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color: bpy_prop_array[float]
    """ Light color

    :type: bpy_prop_array[float]
    """

    cycles: CyclesLampSettings
    """ Cycles lamp settings

    :type: CyclesLampSettings
    """

    distance: float
    """ Falloff distance - the light is at half the original intensity at this point

    :type: float
    """

    energy: float
    """ Amount of light that the lamp emits

    :type: float
    """

    node_tree: NodeTree
    """ Node tree for node based lamps

    :type: NodeTree
    """

    texture_slots: LampTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: LampTextureSlots
    """

    type: typing.Literal["POINT", "SUN", "SPOT", "HEMI", "AREA"]
    """ Type of Lamp

    :type: typing.Literal['POINT','SUN','SPOT','HEMI','AREA']
    """

    use_diffuse: bool
    """ Do diffuse shading

    :type: bool
    """

    use_negative: bool
    """ Cast negative light

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes to render the lamp

    :type: bool
    """

    use_own_layer: bool
    """ Illuminate objects only on the same layers the lamp is on

    :type: bool
    """

    use_specular: bool
    """ Create specular highlights

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LampSkySettings(bpy_struct):
    """Sky related settings for a sun lamp"""

    atmosphere_distance_factor: float
    """ Multiplier to convert blender units to physical distance

    :type: float
    """

    atmosphere_extinction: float
    """ Extinction scattering contribution factor

    :type: float
    """

    atmosphere_inscattering: float
    """ Scatter contribution factor

    :type: float
    """

    atmosphere_turbidity: float
    """ Sky turbidity

    :type: float
    """

    backscattered_light: float
    """ Backscattered light

    :type: float
    """

    horizon_brightness: float
    """ Horizon brightness

    :type: float
    """

    sky_blend: float
    """ Blend factor with sky

    :type: float
    """

    sky_blend_type: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Blend mode for combining sun sky with world sky

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    sky_color_space: typing.Literal["SMPTE", "REC709", "CIE"]
    """ Color space to use for internal XYZ->RGB color conversion

    :type: typing.Literal['SMPTE','REC709','CIE']
    """

    sky_exposure: float
    """ Strength of sky shading exponential exposure correction

    :type: float
    """

    spread: float
    """ Horizon Spread

    :type: float
    """

    sun_brightness: float
    """ Sun brightness

    :type: float
    """

    sun_intensity: float
    """ Sun intensity

    :type: float
    """

    sun_size: float
    """ Sun size

    :type: float
    """

    use_atmosphere: bool
    """ Apply sun effect on atmosphere

    :type: bool
    """

    use_sky: bool
    """ Apply sun effect on sky

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LampTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Lamp data-block"""

    color_factor: float
    """ Amount texture affects color values

    :type: float
    """

    lod_bias: float
    """ Amount bias on mipmapping

    :type: float
    """

    object: Object | None
    """ Object to use for mapping with Object texture coordinates

    :type: Object | None
    """

    shadow_factor: float
    """ Amount texture affects shadow

    :type: float
    """

    texture_coords: typing.Literal["GLOBAL", "VIEW", "OBJECT"]
    """ 

    :type: typing.Literal['GLOBAL','VIEW','OBJECT']
    """

    use_map_color: bool
    """ Let the texture affect the basic color of the lamp

    :type: bool
    """

    use_map_shadow: bool
    """ Let the texture affect the shadow color of the lamp

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LaplacianDeformModifier(Modifier, bpy_struct):
    """Mesh deform modifier"""

    is_bind: bool
    """ Whether geometry has been bound to anchors

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    vertex_group: str
    """ Name of Vertex Group which determines Anchors

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LaplacianSmoothModifier(Modifier, bpy_struct):
    """Smoothing effect modifier"""

    iterations: int
    """ 

    :type: int
    """

    lambda_border: float
    """ Lambda factor in border

    :type: float
    """

    lambda_factor: float
    """ Smooth factor effect

    :type: float
    """

    use_normalized: bool
    """ Improve and stabilize the enhanced shape

    :type: bool
    """

    use_volume_preserve: bool
    """ Apply volume preservation after smooth

    :type: bool
    """

    use_x: bool
    """ Smooth object along X axis

    :type: bool
    """

    use_y: bool
    """ Smooth object along Y axis

    :type: bool
    """

    use_z: bool
    """ Smooth object along Z axis

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Lattice(ID, bpy_struct):
    """Lattice data-block defining a grid for deforming other objects"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    interpolation_type_u: typing.Literal[
        "KEY_LINEAR", "KEY_CARDINAL", "KEY_CATMULL_ROM", "KEY_BSPLINE"
    ]
    """ 

    :type: typing.Literal['KEY_LINEAR','KEY_CARDINAL','KEY_CATMULL_ROM','KEY_BSPLINE']
    """

    interpolation_type_v: typing.Literal[
        "KEY_LINEAR", "KEY_CARDINAL", "KEY_CATMULL_ROM", "KEY_BSPLINE"
    ]
    """ 

    :type: typing.Literal['KEY_LINEAR','KEY_CARDINAL','KEY_CATMULL_ROM','KEY_BSPLINE']
    """

    interpolation_type_w: typing.Literal[
        "KEY_LINEAR", "KEY_CARDINAL", "KEY_CATMULL_ROM", "KEY_BSPLINE"
    ]
    """ 

    :type: typing.Literal['KEY_LINEAR','KEY_CARDINAL','KEY_CATMULL_ROM','KEY_BSPLINE']
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    points: bpy_prop_collection[LatticePoint]
    """ Points of the lattice

    :type: bpy_prop_collection[LatticePoint]
    """

    points_u: int
    """ Point in U direction (can't be changed when there are shape keys)

    :type: int
    """

    points_v: int
    """ Point in V direction (can't be changed when there are shape keys)

    :type: int
    """

    points_w: int
    """ Point in W direction (can't be changed when there are shape keys)

    :type: int
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    use_outside: bool
    """ Only draw, and take into account, the outer vertices

    :type: bool
    """

    vertex_group: str
    """ Vertex group to apply the influence of the lattice

    :type: str
    """

    def transform(
        self,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None,
        shape_keys: bool | None = False,
    ):
        """Transform lattice by a matrix

        :param matrix: Matrix
        :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LatticeModifier(Modifier, bpy_struct):
    """Lattice deformation modifier"""

    object: Object | None
    """ Lattice object to deform with

    :type: Object | None
    """

    strength: float
    """ Strength of modifier effect

    :type: float
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LatticePoint(bpy_struct):
    """Point in the lattice grid"""

    co: bpy_prop_array[float]
    """ Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)

    :type: bpy_prop_array[float]
    """

    co_deform: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    groups: bpy_prop_collection[VertexGroupElement]
    """ Weights for the vertex groups this point is member of

    :type: bpy_prop_collection[VertexGroupElement]
    """

    select: bool
    """ Selection status

    :type: bool
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Library(ID, bpy_struct):
    """External .blend file from which data is linked"""

    filepath: str
    """ Path to the library .blend file

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    parent: typing_extensions.Self
    """ 

    :type: typing_extensions.Self
    """

    version: bpy_prop_array[int]
    """ Version of Blender the library .blend was saved with

    :type: bpy_prop_array[int]
    """

    users_id: typing.Any
    """ ID data blocks which use this library
(readonly)"""

    def reload(self):
        """Reload this library and all its linked data-blocks"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LimitDistanceConstraint(Constraint, bpy_struct):
    """Limit the distance from target object"""

    distance: float
    """ Radius of limiting sphere

    :type: float
    """

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    limit_mode: typing.Literal[
        "LIMITDIST_INSIDE", "LIMITDIST_OUTSIDE", "LIMITDIST_ONSURFACE"
    ]
    """ Distances in relation to sphere of influence to allow

    :type: typing.Literal['LIMITDIST_INSIDE','LIMITDIST_OUTSIDE','LIMITDIST_ONSURFACE']
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_transform_limit: bool
    """ Transforms are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LimitLocationConstraint(Constraint, bpy_struct):
    """Limit the location of the constrained object"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_max_z: bool
    """ Use the maximum Z value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_min_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transforms are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LimitRotationConstraint(Constraint, bpy_struct):
    """Limit the rotation of the constrained object"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_limit_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_limit_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_limit_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transforms are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LimitScaleConstraint(Constraint, bpy_struct):
    """Limit the scaling of the constrained object"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_max_z: bool
    """ Use the maximum Z value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_min_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transforms are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier(LineStyleModifier, bpy_struct):
    """Base type to define alpha transparency modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_AlongStroke(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency along stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_CreaseAngle(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the angle between two adjacent faces"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_Curvature_3D(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the radial curvature of 3D mesh surfaces"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_DistanceFromCamera(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on the distance from the camera"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_DistanceFromObject(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on the distance from an object"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object | None
    """ Target object from which the distance is measured

    :type: Object | None
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_Material(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on a material attribute"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    material_attribute: typing.Literal[
        "LINE",
        "LINE_R",
        "LINE_G",
        "LINE_B",
        "LINE_A",
        "DIFF",
        "DIFF_R",
        "DIFF_G",
        "DIFF_B",
        "SPEC",
        "SPEC_R",
        "SPEC_G",
        "SPEC_B",
        "SPEC_HARD",
        "ALPHA",
    ]
    """ Specify which material attribute is used

    :type: typing.Literal['LINE','LINE_R','LINE_G','LINE_B','LINE_A','DIFF','DIFF_R','DIFF_G','DIFF_B','SPEC','SPEC_R','SPEC_G','SPEC_B','SPEC_HARD','ALPHA']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_Noise(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleAlphaModifier_Tangent(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the direction of the stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier(LineStyleModifier, bpy_struct):
    """Base type to define line color modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_AlongStroke(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color along stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_CreaseAngle(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the underlying crease angle"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_Curvature_3D(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the radial curvature of 3D mesh surfaces"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_DistanceFromCamera(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the distance from the camera"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_DistanceFromObject(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the distance from an object"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object | None
    """ Target object from which the distance is measured

    :type: Object | None
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_Material(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on a material attribute"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    material_attribute: typing.Literal[
        "LINE",
        "LINE_R",
        "LINE_G",
        "LINE_B",
        "LINE_A",
        "DIFF",
        "DIFF_R",
        "DIFF_G",
        "DIFF_B",
        "SPEC",
        "SPEC_R",
        "SPEC_G",
        "SPEC_B",
        "SPEC_HARD",
        "ALPHA",
    ]
    """ Specify which material attribute is used

    :type: typing.Literal['LINE','LINE_R','LINE_G','LINE_B','LINE_A','DIFF','DIFF_R','DIFF_G','DIFF_B','SPEC','SPEC_R','SPEC_G','SPEC_B','SPEC_HARD','ALPHA']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_ramp: bool
    """ Use color ramp to map the BW average into an RGB color

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_Noise(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleColorModifier_Tangent(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the direction of a stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier(LineStyleModifier, bpy_struct):
    """Base type to define stroke geometry modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_2DOffset(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add two-dimensional offsets to stroke backbone geometry"""

    end: float
    """ Displacement that is applied from the end of the stroke

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    start: float
    """ Displacement that is applied from the beginning of the stroke

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    x: float
    """ Displacement that is applied to the X coordinates of stroke vertices

    :type: float
    """

    y: float
    """ Displacement that is applied to the Y coordinates of stroke vertices

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_2DTransform(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Apply two-dimensional scaling and rotation to stroke backbone geometry"""

    angle: float
    """ Rotation angle

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    pivot: typing.Literal["CENTER", "START", "END", "PARAM", "ABSOLUTE"]
    """ Pivot of scaling and rotation operations

    :type: typing.Literal['CENTER','START','END','PARAM','ABSOLUTE']
    """

    pivot_u: float
    """ Pivot in terms of the stroke point parameter u (0 <= u <= 1)

    :type: float
    """

    pivot_x: float
    """ 2D X coordinate of the absolute pivot

    :type: float
    """

    pivot_y: float
    """ 2D Y coordinate of the absolute pivot

    :type: float
    """

    scale_x: float
    """ Scaling factor that is applied along the X axis

    :type: float
    """

    scale_y: float
    """ Scaling factor that is applied along the Y axis

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_BackboneStretcher(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Stretch the beginning and the end of stroke backbone"""

    backbone_length: float
    """ Amount of backbone stretching

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_BezierCurve(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Replace stroke backbone geometry by a Bezier curve approximation of the original backbone geometry"""

    error: float
    """ Maximum distance allowed between the new Bezier curve and the original backbone geometry

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_Blueprint(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Produce a blueprint using circular, elliptic, and square contour strokes"""

    backbone_length: float
    """ Amount of backbone stretching

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    random_backbone: int
    """ Randomness of the backbone stretching

    :type: int
    """

    random_center: int
    """ Randomness of the center

    :type: int
    """

    random_radius: int
    """ Randomness of the radius

    :type: int
    """

    rounds: int
    """ Number of rounds in contour strokes

    :type: int
    """

    shape: typing.Literal["CIRCLES", "ELLIPSES", "SQUARES"]
    """ Select the shape of blueprint contour strokes

    :type: typing.Literal['CIRCLES','ELLIPSES','SQUARES']
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_GuidingLines(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Modify the stroke geometry so that it corresponds to its main direction line"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    offset: float
    """ Displacement that is applied to the main direction line along its normal

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_PerlinNoise1D(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add one-dimensional Perlin noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the Perlin noise

    :type: float
    """

    angle: float
    """ Displacement direction

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    frequency: float
    """ Frequency of the Perlin noise

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the Perlin noise)

    :type: int
    """

    seed: int
    """ Seed for random number generation (if negative, time is used as a seed instead)

    :type: int
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_PerlinNoise2D(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add two-dimensional Perlin noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the Perlin noise

    :type: float
    """

    angle: float
    """ Displacement direction

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    frequency: float
    """ Frequency of the Perlin noise

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the Perlin noise)

    :type: int
    """

    seed: int
    """ Seed for random number generation (if negative, time is used as a seed instead)

    :type: int
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_Polygonalization(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Modify the stroke geometry so that it looks more 'polygonal'"""

    error: float
    """ Maximum distance between the original stroke and its polygonal approximation

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_Sampling(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Specify a new sampling value that determines the resolution of stroke polylines"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    sampling: float
    """ New sampling value to be used for subsequent modifiers

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_Simplification(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Simplify the stroke set"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    tolerance: float
    """ Distance below which segments will be merged

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_SinusDisplacement(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add sinus displacement to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the sinus displacement

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    phase: float
    """ Phase of the sinus displacement

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    wavelength: float
    """ Wavelength of the sinus displacement

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_SpatialNoise(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add spatial noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the spatial noise

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the spatial noise)

    :type: int
    """

    scale: float
    """ Scale of the spatial noise

    :type: float
    """

    smooth: bool
    """ If true, the spatial noise is smooth

    :type: bool
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_pure_random: bool
    """ If true, the spatial noise does not show any coherence

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleGeometryModifier_TipRemover(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Remove a piece of stroke at the beginning and the end of stroke backbone"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    tip_length: float
    """ Length of tips to be removed

    :type: float
    """

    type: typing.Literal[
        "2D_OFFSET",
        "2D_TRANSFORM",
        "BACKBONE_STRETCHER",
        "BEZIER_CURVE",
        "BLUEPRINT",
        "GUIDING_LINES",
        "PERLIN_NOISE_1D",
        "PERLIN_NOISE_2D",
        "POLYGONIZATION",
        "SAMPLING",
        "SIMPLIFICATION",
        "SINUS_DISPLACEMENT",
        "SPATIAL_NOISE",
        "TIP_REMOVER",
    ]
    """ Type of the modifier

    :type: typing.Literal['2D_OFFSET','2D_TRANSFORM','BACKBONE_STRETCHER','BEZIER_CURVE','BLUEPRINT','GUIDING_LINES','PERLIN_NOISE_1D','PERLIN_NOISE_2D','POLYGONIZATION','SAMPLING','SIMPLIFICATION','SINUS_DISPLACEMENT','SPATIAL_NOISE','TIP_REMOVER']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleModifier(bpy_struct):
    """Base type to define modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a LineStyle data-block"""

    alpha_factor: float
    """ Amount texture affects alpha

    :type: float
    """

    diffuse_color_factor: float
    """ Amount texture affects diffuse color

    :type: float
    """

    mapping: typing.Literal["FLAT", "CUBE", "TUBE", "SPHERE"]
    """ 

    :type: typing.Literal['FLAT','CUBE','TUBE','SPHERE']
    """

    mapping_x: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_y: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_z: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    texture_coords: typing.Literal["WINDOW", "GLOBAL", "ALONG_STROKE", "ORCO"]
    """ Texture coordinates used to map the texture onto the background

    :type: typing.Literal['WINDOW','GLOBAL','ALONG_STROKE','ORCO']
    """

    use_map_alpha: bool
    """ The texture affects the alpha value

    :type: bool
    """

    use_map_color_diffuse: bool
    """ The texture affects basic color of the stroke

    :type: bool
    """

    use_tips: bool
    """ Lower half of the texture is for tips of the stroke

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier(LineStyleModifier, bpy_struct):
    """Base type to define line thickness modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_AlongStroke(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness along stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_Calligraphy(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness so that stroke looks like made with a calligraphic pen"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    orientation: float
    """ Angle of the main direction

    :type: float
    """

    thickness_max: float
    """ Maximum thickness in the main direction

    :type: float
    """

    thickness_min: float
    """ Minimum thickness in the direction perpendicular to the main direction

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_CreaseAngle(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on the angle between two adjacent faces"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_Curvature_3D(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on the radial curvature of 3D mesh surfaces"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_DistanceFromCamera(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on the distance from the camera"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_DistanceFromObject(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on the distance from an object"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object | None
    """ Target object from which the distance is measured

    :type: Object | None
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_Material(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on a material attribute"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    material_attribute: typing.Literal[
        "LINE",
        "LINE_R",
        "LINE_G",
        "LINE_B",
        "LINE_A",
        "DIFF",
        "DIFF_R",
        "DIFF_G",
        "DIFF_B",
        "SPEC",
        "SPEC_R",
        "SPEC_G",
        "SPEC_B",
        "SPEC_HARD",
        "ALPHA",
    ]
    """ Specify which material attribute is used

    :type: typing.Literal['LINE','LINE_R','LINE_G','LINE_B','LINE_A','DIFF','DIFF_R','DIFF_G','DIFF_B','SPEC','SPEC_R','SPEC_G','SPEC_B','SPEC_HARD','ALPHA']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_Noise(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_asymmetric: bool
    """ Allow thickness to be assigned asymmetrically

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LineStyleThicknessModifier_Tangent(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Thickness based on the direction of the stroke"""

    blend: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DIFFERENCE",
        "MINIMUM",
        "MAXIMUM",
    ]
    """ Specify how the modifier value is blended into the base value

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','DIVIDE','DIFFERENCE','MINIMUM','MAXIMUM']
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: typing.Literal["LINEAR", "CURVE"]
    """ Select the mapping type

    :type: typing.Literal['LINEAR','CURVE']
    """

    name: str
    """ Name of the modifier

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: typing.Literal[
        "ALONG_STROKE",
        "CALLIGRAPHY",
        "CREASE_ANGLE",
        "CURVATURE_3D",
        "DISTANCE_FROM_CAMERA",
        "DISTANCE_FROM_OBJECT",
        "MATERIAL",
        "NOISE",
        "TANGENT",
    ]
    """ Type of the modifier

    :type: typing.Literal['ALONG_STROKE','CALLIGRAPHY','CREASE_ANGLE','CURVATURE_3D','DISTANCE_FROM_CAMERA','DISTANCE_FROM_OBJECT','MATERIAL','NOISE','TANGENT']
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LockedTrackConstraint(Constraint, bpy_struct):
    """Point toward the target along the track axis, while locking the other axis"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    lock_axis: typing.Literal["LOCK_X", "LOCK_Y", "LOCK_Z"]
    """ Axis that points upward

    :type: typing.Literal['LOCK_X','LOCK_Y','LOCK_Z']
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    track_axis: typing.Literal[
        "TRACK_X",
        "TRACK_Y",
        "TRACK_Z",
        "TRACK_NEGATIVE_X",
        "TRACK_NEGATIVE_Y",
        "TRACK_NEGATIVE_Z",
    ]
    """ Axis that points to the target object

    :type: typing.Literal['TRACK_X','TRACK_Y','TRACK_Z','TRACK_NEGATIVE_X','TRACK_NEGATIVE_Y','TRACK_NEGATIVE_Z']
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class LodLevel(bpy_struct):
    distance: float
    """ Distance to begin using this level of detail

    :type: float
    """

    object: Object | None
    """ Object to use for this level of detail

    :type: Object | None
    """

    object_hysteresis_percentage: int
    """ Minimum distance change required to transition to the previous level of detail

    :type: int
    """

    use_material: bool
    """ Use the material from this object at this level of detail

    :type: bool
    """

    use_mesh: bool
    """ Use the mesh from this object at this level of detail

    :type: bool
    """

    use_object_hysteresis: bool
    """ Override LoD Hysteresis scene setting for this LoD level

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MASK_UL_layers(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MATERIAL_UL_matslots(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MESH_UL_shape_keys(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MESH_UL_uvmaps_vcols(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MESH_UL_vgroups(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Macro(bpy_struct):
    """Storage of a macro operator being executed, or registered after execution"""

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: set[
        typing.Literal[
            "REGISTER",
            "UNDO",
            "UNDO_GROUPED",
            "BLOCKING",
            "MACRO",
            "GRAB_CURSOR",
            "PRESET",
            "INTERNAL",
        ]
    ]
    """ Options for this operator type

    :type: set[typing.Literal['REGISTER','UNDO','UNDO_GROUPED','BLOCKING','MACRO','GRAB_CURSOR','PRESET','INTERNAL']]
    """

    bl_translation_context: str
    """ 

    :type: str
    """

    bl_undo_group: str
    """ 

    :type: str
    """

    name: str
    """ 

    :type: str
    """

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    def report(
        self,
        type: set[
            typing.Literal[
                "DEBUG",
                "INFO",
                "OPERATOR",
                "PROPERTY",
                "WARNING",
                "ERROR",
                "ERROR_INVALID_INPUT",
                "ERROR_INVALID_CONTEXT",
                "ERROR_OUT_OF_MEMORY",
            ]
        ]
        | None,
        message: str,
    ):
        """report

        :param type: Type
        :type type: set[typing.Literal['DEBUG','INFO','OPERATOR','PROPERTY','WARNING','ERROR','ERROR_INVALID_INPUT','ERROR_INVALID_CONTEXT','ERROR_OUT_OF_MEMORY']] | None
        :param message: Report Message
        :type message: str
        """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Test if the operator can be called or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def draw(self, context: Context):
        """Draw function for the operator

        :param context:
        :type context: Context
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MagicTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    noise_depth: int
    """ Depth of the noise

    :type: int
    """

    turbulence: float
    """ Turbulence of the noise

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaintainVolumeConstraint(Constraint, bpy_struct):
    """Maintain a constant volume along a single scaling axis"""

    free_axis: typing.Literal["SAMEVOL_X", "SAMEVOL_Y", "SAMEVOL_Z"]
    """ The free scaling axis of the object

    :type: typing.Literal['SAMEVOL_X','SAMEVOL_Y','SAMEVOL_Z']
    """

    volume: float
    """ Volume of the bone at rest

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MarbleTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    marble_type: typing.Literal["SOFT", "SHARP", "SHARPER"]
    """ 

    :type: typing.Literal['SOFT','SHARP','SHARPER']
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_basis_2: typing.Literal["SIN", "SAW", "TRI"]
    """ 

    :type: typing.Literal['SIN','SAW','TRI']
    """

    noise_depth: int
    """ Depth of the cloud calculation

    :type: int
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: typing.Literal["SOFT_NOISE", "HARD_NOISE"]
    """ 

    :type: typing.Literal['SOFT_NOISE','HARD_NOISE']
    """

    turbulence: float
    """ Turbulence of the bandnoise and ringnoise types

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Mask(ID, bpy_struct):
    """Mask data-block defining mask for compositing"""

    active_layer_index: int | None
    """ Index of active layer in list of all mask's layers

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    frame_end: int
    """ Final frame of the mask (used for sequencer)

    :type: int
    """

    frame_start: int
    """ First frame of the mask (used for sequencer)

    :type: int
    """

    layers: MaskLayers
    """ Collection of layers which defines this mask

    :type: MaskLayers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskLayer(bpy_struct):
    """Single layer used for masking pixels"""

    alpha: float
    """ Render Opacity

    :type: float
    """

    blend: typing.Literal[
        "MERGE_ADD",
        "MERGE_SUBTRACT",
        "ADD",
        "SUBTRACT",
        "LIGHTEN",
        "DARKEN",
        "MUL",
        "REPLACE",
        "DIFFERENCE",
    ]
    """ Method of blending mask layers

    :type: typing.Literal['MERGE_ADD','MERGE_SUBTRACT','ADD','SUBTRACT','LIGHTEN','DARKEN','MUL','REPLACE','DIFFERENCE']
    """

    falloff: typing.Literal[
        "SMOOTH", "SPHERE", "ROOT", "INVERSE_SQUARE", "SHARP", "LINEAR"
    ]
    """ Falloff type the feather

    :type: typing.Literal['SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR']
    """

    hide: bool
    """ Restrict visibility in the viewport

    :type: bool
    """

    hide_render: bool
    """ Restrict renderability

    :type: bool
    """

    hide_select: bool
    """ Restrict selection in the viewport

    :type: bool
    """

    invert: bool
    """ Invert the mask black/white

    :type: bool
    """

    name: str
    """ Unique name of layer

    :type: str
    """

    select: bool
    """ Layer is selected for editing in the Dope Sheet

    :type: bool
    """

    splines: MaskSplines
    """ Collection of splines which defines this layer

    :type: MaskSplines
    """

    use_fill_holes: bool
    """ Calculate holes when filling overlapping curves

    :type: bool
    """

    use_fill_overlap: bool
    """ Calculate self intersections and overlap before filling

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskModifier(Modifier, bpy_struct):
    """Mask modifier to hide parts of the mesh"""

    armature: Object | None
    """ Armature to use as source of bones to mask

    :type: Object | None
    """

    invert_vertex_group: bool
    """ Use vertices that are not part of region defined

    :type: bool
    """

    mode: typing.Literal["VERTEX_GROUP", "ARMATURE"]
    """ 

    :type: typing.Literal['VERTEX_GROUP','ARMATURE']
    """

    threshold: float
    """ Weights over this threshold remain

    :type: float
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskParent(bpy_struct):
    """Parenting settings for masking element"""

    id: ID | None
    """ ID-block to which masking element would be parented to or to it's property

    :type: ID | None
    """

    id_type: typing.Literal["MOVIECLIP"]
    """ Type of ID-block that can be used

    :type: typing.Literal['MOVIECLIP']
    """

    parent: str
    """ Name of parent object in specified data-block to which parenting happens

    :type: str
    """

    sub_parent: str
    """ Name of parent sub-object in specified data-block to which parenting happens

    :type: str
    """

    type: typing.Literal["POINT_TRACK", "PLANE_TRACK"]
    """ Parent Type

    :type: typing.Literal['POINT_TRACK','PLANE_TRACK']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSequence(Sequence, bpy_struct):
    """Sequence strip to load a video from a mask"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    mask: Mask | None
    """ Mask that this sequence uses

    :type: Mask | None
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSpline(bpy_struct):
    """Single spline used for defining mask shape"""

    offset_mode: typing.Literal["EVEN", "SMOOTH"]
    """ The method used for calculating the feather offset

    :type: typing.Literal['EVEN','SMOOTH']
    """

    points: MaskSplinePoints
    """ Collection of points

    :type: MaskSplinePoints
    """

    use_cyclic: bool
    """ Make this spline a closed loop

    :type: bool
    """

    use_fill: bool
    """ Make this spline filled

    :type: bool
    """

    use_self_intersection_check: bool
    """ Prevent feather from self-intersections

    :type: bool
    """

    weight_interpolation: typing.Literal["LINEAR", "EASE"]
    """ The type of weight interpolation for spline

    :type: typing.Literal['LINEAR','EASE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSplinePoint(bpy_struct):
    """Single point in spline used for defining mask"""

    co: bpy_prop_array[float]
    """ Coordinates of the control point

    :type: bpy_prop_array[float]
    """

    feather_points: bpy_prop_collection[MaskSplinePointUW]
    """ Points defining feather

    :type: bpy_prop_collection[MaskSplinePointUW]
    """

    handle_left: bpy_prop_array[float]
    """ Coordinates of the first handle

    :type: bpy_prop_array[float]
    """

    handle_left_type: typing.Literal[
        "AUTO", "VECTOR", "ALIGNED", "ALIGNED_DOUBLESIDE", "FREE"
    ]
    """ Handle type

    :type: typing.Literal['AUTO','VECTOR','ALIGNED','ALIGNED_DOUBLESIDE','FREE']
    """

    handle_right: bpy_prop_array[float]
    """ Coordinates of the second handle

    :type: bpy_prop_array[float]
    """

    handle_right_type: typing.Literal[
        "AUTO", "VECTOR", "ALIGNED", "ALIGNED_DOUBLESIDE", "FREE"
    ]
    """ Handle type

    :type: typing.Literal['AUTO','VECTOR','ALIGNED','ALIGNED_DOUBLESIDE','FREE']
    """

    handle_type: typing.Literal[
        "AUTO", "VECTOR", "ALIGNED", "ALIGNED_DOUBLESIDE", "FREE"
    ]
    """ Handle type

    :type: typing.Literal['AUTO','VECTOR','ALIGNED','ALIGNED_DOUBLESIDE','FREE']
    """

    parent: MaskParent
    """ 

    :type: MaskParent
    """

    select: bool
    """ Selection status

    :type: bool
    """

    weight: float
    """ Weight of the point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaskSplinePointUW(bpy_struct):
    """Single point in spline segment defining feather"""

    select: bool
    """ Selection status

    :type: bool
    """

    u: float
    """ U coordinate of point along spline segment

    :type: float
    """

    weight: float
    """ Weight of feather point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Material(ID, bpy_struct):
    """Material data-block to define the appearance of geometric objects for rendering"""

    active_node_material: typing_extensions.Self | None
    """ Active node material

    :type: typing_extensions.Self | None
    """

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    alpha: float
    """ Alpha transparency of the material

    :type: float
    """

    ambient: float
    """ Amount of global ambient color the material receives

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    cycles: CyclesMaterialSettings
    """ Cycles material settings

    :type: CyclesMaterialSettings
    """

    darkness: float
    """ Minnaert darkness

    :type: float
    """

    depth_transp_factor: float
    """ Amount of transparency depending on the depth

    :type: float
    """

    diffuse_color: bpy_prop_array[float]
    """ Diffuse color of the material

    :type: bpy_prop_array[float]
    """

    diffuse_fresnel: float
    """ Power of Fresnel

    :type: float
    """

    diffuse_fresnel_factor: float
    """ Blending factor of Fresnel

    :type: float
    """

    diffuse_intensity: float
    """ Amount of diffuse reflection

    :type: float
    """

    diffuse_ramp: ColorRamp
    """ Color ramp used to affect diffuse shading

    :type: ColorRamp
    """

    diffuse_ramp_blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Blending method of the ramp and the diffuse color

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    diffuse_ramp_factor: float
    """ Blending factor (also uses alpha in Colorband)

    :type: float
    """

    diffuse_ramp_input: typing.Literal["SHADER", "ENERGY", "NORMAL", "RESULT"]
    """ How the ramp maps on the surface

    :type: typing.Literal['SHADER','ENERGY','NORMAL','RESULT']
    """

    diffuse_shader: typing.Literal[
        "LAMBERT", "OREN_NAYAR", "TOON", "MINNAERT", "FRESNEL"
    ]
    """ 

    :type: typing.Literal['LAMBERT','OREN_NAYAR','TOON','MINNAERT','FRESNEL']
    """

    diffuse_toon_size: float
    """ Size of diffuse toon area

    :type: float
    """

    diffuse_toon_smooth: float
    """ Smoothness of diffuse toon area

    :type: float
    """

    emit: float
    """ Amount of light to emit

    :type: float
    """

    game_settings: MaterialGameSettings
    """ Game material settings

    :type: MaterialGameSettings
    """

    halo: MaterialHalo
    """ Halo settings for the material

    :type: MaterialHalo
    """

    invert_z: bool
    """ Render material's faces with an inverted Z buffer (scanline only)

    :type: bool
    """

    light_group: Group | None
    """ Limit lighting to lamps in this Group

    :type: Group | None
    """

    line_color: bpy_prop_array[float]
    """ Line color used for Freestyle line rendering

    :type: bpy_prop_array[float]
    """

    line_priority: int
    """ The line color of a higher priority is used at material boundaries

    :type: int
    """

    mirror_color: bpy_prop_array[float]
    """ Mirror color of the material

    :type: bpy_prop_array[float]
    """

    node_tree: ShaderNodeTree | None
    """ Node tree for node based materials

    :type: ShaderNodeTree | None
    """

    offset_z: float
    """ Give faces an artificial offset in the Z buffer for Z transparency

    :type: float
    """

    paint_active_slot: int
    """ Index of active texture paint slot

    :type: int
    """

    paint_clone_slot: int
    """ Index of clone texture paint slot

    :type: int
    """

    pass_index: int
    """ Index number for the "Material Index" render pass

    :type: int
    """

    preview_render_type: typing.Literal[
        "FLAT", "SPHERE", "CUBE", "MONKEY", "HAIR", "SPHERE_A"
    ]
    """ Type of preview render

    :type: typing.Literal['FLAT','SPHERE','CUBE','MONKEY','HAIR','SPHERE_A']
    """

    raytrace_mirror: MaterialRaytraceMirror
    """ Raytraced reflection settings for the material

    :type: MaterialRaytraceMirror
    """

    raytrace_transparency: MaterialRaytraceTransparency
    """ Raytraced transparency settings for the material

    :type: MaterialRaytraceTransparency
    """

    roughness: float
    """ Oren-Nayar Roughness

    :type: float
    """

    shadow_buffer_bias: float
    """ Factor to multiply shadow buffer bias with (0 is ignore)

    :type: float
    """

    shadow_cast_alpha: float
    """ Shadow casting alpha, in use for Irregular and Deep shadow buffer

    :type: float
    """

    shadow_only_type: typing.Literal[
        "SHADOW_ONLY_OLD", "SHADOW_ONLY", "SHADOW_ONLY_SHADED"
    ]
    """ How to draw shadows

    :type: typing.Literal['SHADOW_ONLY_OLD','SHADOW_ONLY','SHADOW_ONLY_SHADED']
    """

    shadow_ray_bias: float
    """ Shadow raytracing bias to prevent terminator problems on shadow boundary

    :type: float
    """

    specular_alpha: float
    """ Alpha transparency for specular areas

    :type: float
    """

    specular_color: bpy_prop_array[float]
    """ Specular color of the material

    :type: bpy_prop_array[float]
    """

    specular_hardness: int
    """ How hard (sharp) the specular reflection is

    :type: int
    """

    specular_intensity: float
    """ How intense (bright) the specular reflection is

    :type: float
    """

    specular_ior: float
    """ Specular index of refraction

    :type: float
    """

    specular_ramp: ColorRamp
    """ Color ramp used to affect specular shading

    :type: ColorRamp
    """

    specular_ramp_blend: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Blending method of the ramp and the specular color

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    specular_ramp_factor: float
    """ Blending factor (also uses alpha in Colorband)

    :type: float
    """

    specular_ramp_input: typing.Literal["SHADER", "ENERGY", "NORMAL", "RESULT"]
    """ How the ramp maps on the surface

    :type: typing.Literal['SHADER','ENERGY','NORMAL','RESULT']
    """

    specular_shader: typing.Literal["COOKTORR", "PHONG", "BLINN", "TOON", "WARDISO"]
    """ 

    :type: typing.Literal['COOKTORR','PHONG','BLINN','TOON','WARDISO']
    """

    specular_slope: float
    """ The standard deviation of surface slope

    :type: float
    """

    specular_toon_size: float
    """ Size of specular toon area

    :type: float
    """

    specular_toon_smooth: float
    """ Smoothness of specular toon area

    :type: float
    """

    strand: MaterialStrand
    """ Strand settings for the material

    :type: MaterialStrand
    """

    subsurface_scattering: MaterialSubsurfaceScattering
    """ Subsurface scattering settings for the material

    :type: MaterialSubsurfaceScattering
    """

    texture_paint_images: bpy_prop_collection[Image]
    """ Texture images used for texture painting

    :type: bpy_prop_collection[Image]
    """

    texture_paint_slots: bpy_prop_collection[TexPaintSlot]
    """ Texture slots defining the mapping and influence of textures

    :type: bpy_prop_collection[TexPaintSlot]
    """

    texture_slots: MaterialTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: MaterialTextureSlots
    """

    translucency: float
    """ Amount of diffuse shading on the back side

    :type: float
    """

    transparency_method: typing.Literal["MASK", "Z_TRANSPARENCY", "RAYTRACE"]
    """ Method to use for rendering transparency

    :type: typing.Literal['MASK','Z_TRANSPARENCY','RAYTRACE']
    """

    type: typing.Literal["SURFACE", "WIRE", "VOLUME", "HALO"]
    """ Material type defining how the object is rendered

    :type: typing.Literal['SURFACE','WIRE','VOLUME','HALO']
    """

    use_cast_approximate: bool
    """ Allow this material to cast shadows when using approximate ambient occlusion

    :type: bool
    """

    use_cast_buffer_shadows: bool
    """ Allow this material to cast shadows from shadow buffer lamps

    :type: bool
    """

    use_cast_shadows: bool
    """ Allow this material to cast shadows

    :type: bool
    """

    use_cast_shadows_only: bool
    """ Make objects with this material appear invisible (not rendered), only casting shadows

    :type: bool
    """

    use_constant_lamp: bool
    """ Use constant values for lamps

    :type: bool
    """

    use_constant_material: bool
    """ Use constant values for material

    :type: bool
    """

    use_constant_mist: bool
    """ Use constant values for mist

    :type: bool
    """

    use_constant_texture: bool
    """ Use constant values for textures

    :type: bool
    """

    use_constant_texture_uv: bool
    """ Use constant values for textures uv transformation

    :type: bool
    """

    use_constant_world: bool
    """ Use constant values for world

    :type: bool
    """

    use_cubic: bool
    """ Use cubic interpolation for diffuse values, for smoother transitions

    :type: bool
    """

    use_depth_transparency: bool
    """ Render material as transparent depending on the depth

    :type: bool
    """

    use_diffuse_ramp: bool
    """ Toggle diffuse ramp operations

    :type: bool
    """

    use_face_texture: bool
    """ Replace the object's base color with color from UV map image textures

    :type: bool
    """

    use_face_texture_alpha: bool
    """ Replace the object's base alpha value with alpha from UV map image textures

    :type: bool
    """

    use_full_oversampling: bool
    """ Force this material to render full shading/textures for all anti-aliasing samples

    :type: bool
    """

    use_instancing: bool
    """ Use special vertex shader for instancing rendering in game engine

    :type: bool
    """

    use_light_group_exclusive: bool
    """ Material uses the light group exclusively - these lamps are excluded from other scene lighting

    :type: bool
    """

    use_light_group_local: bool
    """ When linked in, material uses local light group with the same name

    :type: bool
    """

    use_mist: bool
    """ Use mist with this material (in world settings)

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes to render the material

    :type: bool
    """

    use_object_color: bool
    """ Modulate the result with a per-object color

    :type: bool
    """

    use_only_shadow: bool
    """ Render shadows as the material's alpha value, making the material transparent except for shadowed areas

    :type: bool
    """

    use_ray_shadow_bias: bool
    """ Prevent raytraced shadow errors on surfaces with smooth shaded normals (terminator problem)

    :type: bool
    """

    use_raytrace: bool
    """ Include this material and geometry that uses it in raytracing calculations

    :type: bool
    """

    use_shadeless: bool
    """ Make this material insensitive to light or shadow

    :type: bool
    """

    use_shadows: bool
    """ Allow this material to receive shadows

    :type: bool
    """

    use_sky: bool
    """ Render this material with zero alpha, with sky background in place (scanline only)

    :type: bool
    """

    use_specular_ramp: bool
    """ Toggle specular ramp operations

    :type: bool
    """

    use_tangent_shading: bool
    """ Use the material's tangent vector instead of the normal for shading - for anisotropic shading effects

    :type: bool
    """

    use_textures: bpy_prop_array[bool]
    """ Enable/Disable each texture

    :type: bpy_prop_array[bool]
    """

    use_transparency: bool
    """ Render material as transparent

    :type: bool
    """

    use_transparent_shadows: bool
    """ Allow this object to receive transparent shadows cast through other objects

    :type: bool
    """

    use_uv_project: bool
    """ Use to ensure UV interpolation is correct for camera projections (use with UV project modifier)

    :type: bool
    """

    use_vertex_color_light: bool
    """ Add vertex colors as additional lighting

    :type: bool
    """

    use_vertex_color_paint: bool
    """ Replace object base color with vertex colors (multiply with 'texture face' face assigned textures)

    :type: bool
    """

    volume: MaterialVolume
    """ Volume settings for the material

    :type: MaterialVolume
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialGameSettings(bpy_struct):
    """Game Engine settings for a Material data-block"""

    alpha_blend: typing.Literal[
        "OPAQUE", "ADD", "CLIP", "ALPHA", "ALPHA_SORT", "ALPHA_ANTIALIASING"
    ]
    """ Blend Mode for Transparent Faces

    :type: typing.Literal['OPAQUE','ADD','CLIP','ALPHA','ALPHA_SORT','ALPHA_ANTIALIASING']
    """

    face_orientation: typing.Literal["NORMAL", "HALO", "BILLBOARD", "SHADOW"]
    """ Especial face orientation options

    :type: typing.Literal['NORMAL','HALO','BILLBOARD','SHADOW']
    """

    invisible: bool
    """ Make face invisible

    :type: bool
    """

    physics: bool
    """ Use physics for this materials

    :type: bool
    """

    use_backface_culling: bool
    """ Hide Back of the face in Game Engine

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialHalo(bpy_struct):
    """Halo particle effect settings for a Material data-block"""

    add: float
    """ Strength of the add effect

    :type: float
    """

    flare_boost: float
    """ Give the flare extra strength

    :type: float
    """

    flare_seed: int
    """ Offset in the flare seed table

    :type: int
    """

    flare_size: float
    """ Factor by which the flare is larger than the halo

    :type: float
    """

    flare_subflare_count: int
    """ Number of sub-flares

    :type: int
    """

    flare_subflare_size: float
    """ Dimension of the sub-flares, dots and circles

    :type: float
    """

    hardness: int
    """ Hardness of the halo

    :type: int
    """

    line_count: int
    """ Number of star shaped lines rendered over the halo

    :type: int
    """

    ring_count: int
    """ Number of rings rendered over the halo

    :type: int
    """

    seed: int
    """ Randomize ring dimension and line location

    :type: int
    """

    size: float
    """ Dimension of the halo

    :type: float
    """

    star_tip_count: int
    """ Number of points on the star shaped halo

    :type: int
    """

    use_extreme_alpha: bool
    """ Use extreme alpha

    :type: bool
    """

    use_flare_mode: bool
    """ Render halo as a lens flare

    :type: bool
    """

    use_lines: bool
    """ Render star shaped lines over halo

    :type: bool
    """

    use_ring: bool
    """ Render rings over halo

    :type: bool
    """

    use_shaded: bool
    """ Let halo receive light and shadows from external objects

    :type: bool
    """

    use_soft: bool
    """ Soften the edges of halos at intersections with other geometry

    :type: bool
    """

    use_star: bool
    """ Render halo as a star

    :type: bool
    """

    use_texture: bool
    """ Give halo a texture

    :type: bool
    """

    use_vertex_normal: bool
    """ Use the vertex normal to specify the dimension of the halo

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialRaytraceMirror(bpy_struct):
    """Raytraced reflection settings for a Material data-block"""

    depth: int
    """ Maximum allowed number of light inter-reflections

    :type: int
    """

    distance: float
    """ Maximum distance of reflected rays (reflections further than this range fade to sky color or material color)

    :type: float
    """

    fade_to: typing.Literal["FADE_TO_SKY", "FADE_TO_MATERIAL"]
    """ The color that rays with no intersection within the Max Distance take (material color can be best for indoor scenes, sky color for outdoor)

    :type: typing.Literal['FADE_TO_SKY','FADE_TO_MATERIAL']
    """

    fresnel: float
    """ Power of Fresnel for mirror reflection

    :type: float
    """

    fresnel_factor: float
    """ Blending factor for Fresnel

    :type: float
    """

    gloss_anisotropic: float
    """ The shape of the reflection, from 0.0 (circular) to 1.0 (fully stretched along the tangent

    :type: float
    """

    gloss_factor: float
    """ The shininess of the reflection (values < 1.0 give diffuse, blurry reflections)

    :type: float
    """

    gloss_samples: int
    """ Number of cone samples averaged for blurry reflections

    :type: int
    """

    gloss_threshold: float
    """ Threshold for adaptive sampling (if a sample contributes less than this amount [as a percentage], sampling is stopped)

    :type: float
    """

    reflect_factor: float
    """ Amount of mirror reflection for raytrace

    :type: float
    """

    use: bool
    """ Enable raytraced reflections

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialRaytraceTransparency(bpy_struct):
    """Raytraced refraction settings for a Material data-block"""

    depth: int
    """ Maximum allowed number of light inter-refractions

    :type: int
    """

    depth_max: float
    """ Maximum depth for light to travel through the transparent material before becoming fully filtered (0.0 is disabled)

    :type: float
    """

    falloff: float
    """ Falloff power for transmissivity filter effect (1.0 is linear)

    :type: float
    """

    filter: float
    """ Amount to blend in the material's diffuse color in raytraced transparency (simulating absorption)

    :type: float
    """

    fresnel: float
    """ Power of Fresnel for transparency (Ray or ZTransp)

    :type: float
    """

    fresnel_factor: float
    """ Blending factor for Fresnel

    :type: float
    """

    gloss_factor: float
    """ The clarity of the refraction. Values < 1.0 give diffuse, blurry refractions

    :type: float
    """

    gloss_samples: int
    """ Number of cone samples averaged for blurry refractions

    :type: int
    """

    gloss_threshold: float
    """ Threshold for adaptive sampling. If a sample contributes less than this amount (as a percentage), sampling is stopped

    :type: float
    """

    ior: float
    """ Angular index of refraction for raytraced refraction

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialSlot(bpy_struct):
    """Material slot in an object"""

    link: typing.Literal["OBJECT", "DATA"]
    """ Link material to object or the object's data

    :type: typing.Literal['OBJECT','DATA']
    """

    material: Material | None
    """ Material data-block used by this material slot

    :type: Material | None
    """

    name: str
    """ Material slot name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialStrand(bpy_struct):
    """Strand settings for a Material data-block"""

    blend_distance: float
    """ Worldspace distance over which to blend in the surface normal

    :type: float
    """

    root_size: float
    """ Start size of strands in pixels or Blender units

    :type: float
    """

    shape: float
    """ Positive values make strands rounder, negative ones make strands spiky

    :type: float
    """

    size_min: float
    """ Minimum size of strands in pixels

    :type: float
    """

    tip_size: float
    """ End size of strands in pixels or Blender units

    :type: float
    """

    use_blender_units: bool
    """ Use Blender units for widths instead of pixels

    :type: bool
    """

    use_surface_diffuse: bool
    """ Make diffuse shading more similar to shading the surface

    :type: bool
    """

    use_tangent_shading: bool
    """ Use direction of strands as normal for tangent-shading

    :type: bool
    """

    uv_layer: str
    """ Name of UV map to override

    :type: str
    """

    width_fade: float
    """ Transparency along the width of the strand

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialSubsurfaceScattering(bpy_struct):
    """Diffuse subsurface scattering settings for a Material data-block"""

    back: float
    """ Back scattering weight

    :type: float
    """

    color: bpy_prop_array[float]
    """ Scattering color

    :type: bpy_prop_array[float]
    """

    color_factor: float
    """ Blend factor for SSS colors

    :type: float
    """

    error_threshold: float
    """ Error tolerance (low values are slower and higher quality)

    :type: float
    """

    front: float
    """ Front scattering weight

    :type: float
    """

    ior: float
    """ Index of refraction (higher values are denser)

    :type: float
    """

    radius: bpy_prop_array[float]
    """ Mean red/green/blue scattering path length

    :type: bpy_prop_array[float]
    """

    scale: float
    """ Object scale factor

    :type: float
    """

    texture_factor: float
    """ Texture scattering blend factor

    :type: float
    """

    use: bool
    """ Enable diffuse subsurface scattering effects in a material

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Material data-block"""

    alpha_factor: float
    """ Amount texture affects alpha

    :type: float
    """

    ambient_factor: float
    """ Amount texture affects ambient

    :type: float
    """

    bump_method: typing.Literal[
        "BUMP_ORIGINAL",
        "BUMP_COMPATIBLE",
        "BUMP_LOW_QUALITY",
        "BUMP_MEDIUM_QUALITY",
        "BUMP_BEST_QUALITY",
    ]
    """ Method to use for bump mapping

    :type: typing.Literal['BUMP_ORIGINAL','BUMP_COMPATIBLE','BUMP_LOW_QUALITY','BUMP_MEDIUM_QUALITY','BUMP_BEST_QUALITY']
    """

    bump_objectspace: typing.Literal[
        "BUMP_VIEWSPACE", "BUMP_OBJECTSPACE", "BUMP_TEXTURESPACE"
    ]
    """ Space to apply bump mapping in

    :type: typing.Literal['BUMP_VIEWSPACE','BUMP_OBJECTSPACE','BUMP_TEXTURESPACE']
    """

    density_factor: float
    """ Amount texture affects density

    :type: float
    """

    diffuse_color_factor: float
    """ Amount texture affects diffuse color

    :type: float
    """

    diffuse_factor: float
    """ Amount texture affects diffuse reflectivity

    :type: float
    """

    displacement_factor: float
    """ Amount texture displaces the surface

    :type: float
    """

    emission_color_factor: float
    """ Amount texture affects emission color

    :type: float
    """

    emission_factor: float
    """ Amount texture affects emission

    :type: float
    """

    emit_factor: float
    """ Amount texture affects emission

    :type: float
    """

    hardness_factor: float
    """ Amount texture affects hardness

    :type: float
    """

    ior: float
    """ Indice of refraction

    :type: float
    """

    lod_bias: float
    """ Amount bias on mipmapping

    :type: float
    """

    mapping: typing.Literal["FLAT", "CUBE", "TUBE", "SPHERE"]
    """ 

    :type: typing.Literal['FLAT','CUBE','TUBE','SPHERE']
    """

    mapping_x: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_y: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_z: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mirror_factor: float
    """ Amount texture affects mirror color

    :type: float
    """

    normal_factor: float
    """ Amount texture affects normal values

    :type: float
    """

    normal_map_space: typing.Literal["CAMERA", "WORLD", "OBJECT", "TANGENT"]
    """ Set space of normal map image

    :type: typing.Literal['CAMERA','WORLD','OBJECT','TANGENT']
    """

    object: Object | None
    """ Object to use for mapping with Object texture coordinates

    :type: Object | None
    """

    parallax_bump_scale: float
    """ Height of SPOM

    :type: float
    """

    parallax_component: typing.Literal["RED", "GREEN", "BLUE", "ALPHA"]
    """ The color component to extract the height information from

    :type: typing.Literal['RED','GREEN','BLUE','ALPHA']
    """

    parallax_steps: float
    """ Number of steps taken to achieve result

    :type: float
    """

    parallax_uv_discard: bool
    """ To discard parallax UV at edges

    :type: bool
    """

    raymir_factor: float
    """ Amount texture affects ray mirror

    :type: float
    """

    reflection_color_factor: float
    """ Amount texture affects color of out-scattered light

    :type: float
    """

    reflection_factor: float
    """ Amount texture affects brightness of out-scattered light

    :type: float
    """

    refraction_ratio: float
    """ Amount refraction mixed with reflection

    :type: float
    """

    scattering_factor: float
    """ Amount texture affects scattering

    :type: float
    """

    specular_color_factor: float
    """ Amount texture affects specular color

    :type: float
    """

    specular_factor: float
    """ Amount texture affects specular reflectivity

    :type: float
    """

    texture_coords: typing.Literal[
        "GLOBAL",
        "OBJECT",
        "UV",
        "ORCO",
        "STRAND",
        "WINDOW",
        "NORMAL",
        "REFLECTION",
        "STRESS",
        "TANGENT",
    ]
    """ 

    :type: typing.Literal['GLOBAL','OBJECT','UV','ORCO','STRAND','WINDOW','NORMAL','REFLECTION','STRESS','TANGENT']
    """

    translucency_factor: float
    """ Amount texture affects translucency

    :type: float
    """

    transmission_color_factor: float
    """ Amount texture affects result color after light has been scattered/absorbed

    :type: float
    """

    use: bool
    """ Enable this material texture slot

    :type: bool
    """

    use_from_dupli: bool
    """ Dupli's instanced from verts, faces or particles, inherit texture coordinate from their parent

    :type: bool
    """

    use_from_original: bool
    """ Dupli's derive their object coordinates from the original object's transformation

    :type: bool
    """

    use_map_alpha: bool
    """ The texture affects the alpha value

    :type: bool
    """

    use_map_ambient: bool
    """ The texture affects the value of ambient

    :type: bool
    """

    use_map_color_diffuse: bool
    """ The texture affects basic color of the material

    :type: bool
    """

    use_map_color_emission: bool
    """ The texture affects the color of emission

    :type: bool
    """

    use_map_color_reflection: bool
    """ The texture affects the color of scattered light

    :type: bool
    """

    use_map_color_spec: bool
    """ The texture affects the specularity color

    :type: bool
    """

    use_map_color_transmission: bool
    """ The texture affects the result color after other light has been scattered/absorbed

    :type: bool
    """

    use_map_density: bool
    """ The texture affects the volume's density

    :type: bool
    """

    use_map_diffuse: bool
    """ The texture affects the value of diffuse reflectivity

    :type: bool
    """

    use_map_displacement: bool
    """ Let the texture displace the surface

    :type: bool
    """

    use_map_emission: bool
    """ The texture affects the volume's emission

    :type: bool
    """

    use_map_emit: bool
    """ The texture affects the emit value

    :type: bool
    """

    use_map_hardness: bool
    """ The texture affects the hardness value

    :type: bool
    """

    use_map_mirror: bool
    """ The texture affects the mirror color

    :type: bool
    """

    use_map_normal: bool
    """ The texture affects the rendered normal

    :type: bool
    """

    use_map_parallax: bool
    """ The texture affects the relief depth

    :type: bool
    """

    use_map_raymir: bool
    """ The texture affects the ray-mirror value

    :type: bool
    """

    use_map_reflect: bool
    """ The texture affects the reflected light's brightness

    :type: bool
    """

    use_map_scatter: bool
    """ The texture affects the volume's scattering

    :type: bool
    """

    use_map_specular: bool
    """ The texture affects the value of specular reflectivity

    :type: bool
    """

    use_map_to_bounds: bool
    """ Map coordinates in object bounds

    :type: bool
    """

    use_map_translucency: bool
    """ The texture affects the translucency value

    :type: bool
    """

    use_map_warp: bool
    """ Let the texture warp texture coordinates of next channels

    :type: bool
    """

    use_parallax_uv: bool
    """ This is necessary for proper use of the parallax mapping

    :type: bool
    """

    uv_layer: str
    """ UV map to use for mapping with UV texture coordinates

    :type: str
    """

    warp_factor: float
    """ Amount texture affects texture coordinates of next channels

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MaterialVolume(bpy_struct):
    """Volume rendering settings for a Material data-block"""

    asymmetry: float
    """ Back scattering (-1.0) to Forward scattering (1.0) and the range in between

    :type: float
    """

    cache_resolution: int
    """ Resolution of the voxel grid, low resolutions are faster, high resolutions use more memory

    :type: int
    """

    density: float
    """ The base density of the volume

    :type: float
    """

    density_scale: float
    """ Multiplier for the material's density

    :type: float
    """

    depth_threshold: float
    """ Stop ray marching early if transmission drops below this luminance - higher values give speedups in dense volumes at the expense of accuracy

    :type: float
    """

    emission: float
    """ Amount of light that gets emitted by the volume

    :type: float
    """

    emission_color: bpy_prop_array[float]
    """ Color of emitted light

    :type: bpy_prop_array[float]
    """

    light_method: typing.Literal[
        "SHADELESS",
        "SHADOWED",
        "SHADED",
        "MULTIPLE_SCATTERING",
        "SHADED_PLUS_MULTIPLE_SCATTERING",
    ]
    """ Method of shading, attenuating, and scattering light through the volume

    :type: typing.Literal['SHADELESS','SHADOWED','SHADED','MULTIPLE_SCATTERING','SHADED_PLUS_MULTIPLE_SCATTERING']
    """

    ms_diffusion: float
    """ Diffusion factor, the strength of the blurring effect

    :type: float
    """

    ms_intensity: float
    """ Multiplier for multiple scattered light energy

    :type: float
    """

    ms_spread: float
    """ Proportional distance over which the light is diffused

    :type: float
    """

    reflection: float
    """ Multiplier to make out-scattered light brighter or darker (non-physically correct)

    :type: float
    """

    reflection_color: bpy_prop_array[float]
    """ Color of light scattered out of the volume (does not affect transmission)

    :type: bpy_prop_array[float]
    """

    scattering: float
    """ Amount of light that gets scattered out by the volume - the more out-scattering, the shallower the light will penetrate

    :type: float
    """

    step_method: typing.Literal["RANDOMIZED", "CONSTANT"]
    """ Method of calculating the steps through the volume

    :type: typing.Literal['RANDOMIZED','CONSTANT']
    """

    step_size: float
    """ Distance between subsequent volume depth samples

    :type: float
    """

    transmission_color: bpy_prop_array[float]
    """ Result color of the volume, after other light has been scattered/absorbed

    :type: bpy_prop_array[float]
    """

    use_external_shadows: bool
    """ Receive shadows from sources outside the volume (temporary)

    :type: bool
    """

    use_light_cache: bool
    """ Pre-calculate the shading information into a voxel grid, speeds up shading at slightly less accuracy

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Menu(bpy_struct):
    """Editor menu containing buttons"""

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is "OBJECT_MT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_MT_hello")

    :type: str
    """

    bl_label: str
    """ The menu label

    :type: str
    """

    bl_translation_context: str | typing.Any
    """ 

    :type: str | typing.Any
    """

    layout: UILayout
    """ Defines the structure of the menu in the UI

    :type: UILayout
    """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """If this method returns a non-null output, then the menu can be drawn

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def draw(self, context: Context):
        """Draw UI elements into the menu UI layout

        :param context:
        :type context: Context
        """

    def draw_preset(self, context):
        """Define these on the subclass:
        - preset_operator (string)
        - preset_subdir (string)Optionally:
        - preset_extensions (set of strings)
        - preset_operator_defaults (dict of keyword args)

                :param context:
        """

    def path_menu(
        self,
        searchpaths: list[str] | None,
        operator: str | None,
        *,
        props_default: dict | None = None,
        prop_filepath: str | None = "filepath",
        filter_ext: collections.abc.Callable | None = None,
        filter_path=None,
        display_name: collections.abc.Callable | None = None,
    ):
        """Populate a menu from a list of paths.

                :param searchpaths: Paths to scan.
                :type searchpaths: list[str] | None
                :param operator: The operator id to use with each file.
                :type operator: str | None
                :param props_default: Properties to assign to each operator.
                :type props_default: dict | None
                :param prop_filepath: Optional operator filepath property (defaults to "filepath").
                :type prop_filepath: str | None
                :param filter_ext: Optional callback that takes the file extensions.

        Returning false excludes the file from the list.
                :type filter_ext: collections.abc.Callable | None
                :param filter_path:
                :param display_name: Optional callback that takes the full path, returns the name to display.
                :type display_name: collections.abc.Callable | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    @classmethod
    def append(cls, draw_func):
        """

        :param draw_func:
        """

    @classmethod
    def prepend(cls, draw_func):
        """

        :param draw_func:
        """

    @classmethod
    def remove(cls, draw_func):
        """

        :param draw_func:
        """

class Mesh(ID, bpy_struct):
    """Mesh data-block defining geometric surfaces"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    auto_smooth_angle: float
    """ Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)

    :type: float
    """

    auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    cycles: CyclesMeshSettings
    """ Cycles mesh settings

    :type: CyclesMeshSettings
    """

    edges: MeshEdges
    """ Edges of the mesh

    :type: MeshEdges
    """

    has_custom_normals: bool
    """ True if there are custom split normals data in this mesh

    :type: bool
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    loops: MeshLoops
    """ Loops of the mesh (polygon corners)

    :type: MeshLoops
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    polygon_layers_float: PolygonFloatProperties
    """ 

    :type: PolygonFloatProperties
    """

    polygon_layers_int: PolygonIntProperties
    """ 

    :type: PolygonIntProperties
    """

    polygon_layers_string: PolygonStringProperties
    """ 

    :type: PolygonStringProperties
    """

    polygons: MeshPolygons
    """ Polygons of the mesh

    :type: MeshPolygons
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    show_double_sided: bool
    """ Display the mesh with double or single sided lighting (OpenGL only)

    :type: bool
    """

    show_edge_bevel_weight: bool
    """ Display weights created for the Bevel modifier

    :type: bool
    """

    show_edge_crease: bool
    """ Display creases created for Subdivision Surface modifier

    :type: bool
    """

    show_edge_seams: bool
    """ Display UV unwrapping seams

    :type: bool
    """

    show_edge_sharp: bool
    """ Display sharp edges, used with the Edge Split modifier

    :type: bool
    """

    show_edges: bool
    """ Display selected edges using highlights in the 3D view and UV editor

    :type: bool
    """

    show_extra_edge_angle: bool
    """ Display selected edge angle, using global values when set in the transform panel

    :type: bool
    """

    show_extra_edge_length: bool
    """ Display selected edge lengths, using global values when set in the transform panel

    :type: bool
    """

    show_extra_face_angle: bool
    """ Display the angles in the selected edges, using global values when set in the transform panel

    :type: bool
    """

    show_extra_face_area: bool
    """ Display the area of selected faces, using global values when set in the transform panel

    :type: bool
    """

    show_extra_indices: bool
    """ Display the index numbers of selected vertices, edges, and faces

    :type: bool
    """

    show_faces: bool
    """ Display all faces as shades in the 3D view and UV editor

    :type: bool
    """

    show_freestyle_edge_marks: bool
    """ Display Freestyle edge marks, used with the Freestyle renderer

    :type: bool
    """

    show_freestyle_face_marks: bool
    """ Display Freestyle face marks, used with the Freestyle renderer

    :type: bool
    """

    show_normal_face: bool
    """ Display face normals as lines

    :type: bool
    """

    show_normal_loop: bool
    """ Display vertex-per-face normals as lines

    :type: bool
    """

    show_normal_vertex: bool
    """ Display vertex normals as lines

    :type: bool
    """

    show_statvis: bool
    """ Display statistical information about the mesh

    :type: bool
    """

    show_weight: bool
    """ Draw weights in editmode

    :type: bool
    """

    skin_vertices: bpy_prop_collection[MeshSkinVertexLayer]
    """ All skin vertices

    :type: bpy_prop_collection[MeshSkinVertexLayer]
    """

    tessface_uv_textures: TessfaceUVTextures
    """ All UV maps for tessellated faces (read-only, for use by renderers)

    :type: TessfaceUVTextures
    """

    tessface_vertex_colors: VertexColors
    """ All tessellated face colors (read-only, for use by renderers)

    :type: VertexColors
    """

    tessfaces: MeshTessFaces
    """ Tessellated faces of the mesh (derived from polygons)

    :type: MeshTessFaces
    """

    texco_mesh: typing_extensions.Self | None
    """ Derive texture coordinates from another mesh

    :type: typing_extensions.Self | None
    """

    texspace_location: bpy_prop_array[float]
    """ Texture space location

    :type: bpy_prop_array[float]
    """

    texspace_size: bpy_prop_array[float]
    """ Texture space size

    :type: bpy_prop_array[float]
    """

    texture_mesh: typing_extensions.Self | None
    """ Use another mesh for texture indices (vertex indices must be aligned)

    :type: typing_extensions.Self | None
    """

    total_edge_sel: int
    """ Selected edge count in editmode

    :type: int
    """

    total_face_sel: int
    """ Selected face count in editmode

    :type: int
    """

    total_vert_sel: int
    """ Selected vertex count in editmode

    :type: int
    """

    use_auto_smooth: bool
    """ Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available

    :type: bool
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    use_customdata_edge_bevel: bool
    """ 

    :type: bool
    """

    use_customdata_edge_crease: bool
    """ 

    :type: bool
    """

    use_customdata_vertex_bevel: bool
    """ 

    :type: bool
    """

    use_mirror_topology: bool
    """ Use topology based mirroring (for when both sides of mesh have matching, unique topology)

    :type: bool
    """

    use_mirror_x: bool
    """ X Axis mirror editing

    :type: bool
    """

    use_paint_mask: bool
    """ Face selection masking for painting

    :type: bool
    """

    use_paint_mask_vertex: bool
    """ Vertex selection masking for painting (weight paint only)

    :type: bool
    """

    uv_layer_clone: MeshUVLoopLayer | None
    """ UV loop layer to be used as cloning source

    :type: MeshUVLoopLayer | None
    """

    uv_layer_clone_index: int
    """ Clone UV loop layer index

    :type: int
    """

    uv_layer_stencil: MeshUVLoopLayer | None
    """ UV loop layer to mask the painted area

    :type: MeshUVLoopLayer | None
    """

    uv_layer_stencil_index: int
    """ Mask UV loop layer index

    :type: int
    """

    uv_layers: UVLoopLayers
    """ All UV loop layers

    :type: UVLoopLayers
    """

    uv_texture_clone: MeshTexturePolyLayer | None
    """ UV map to be used as cloning source

    :type: MeshTexturePolyLayer | None
    """

    uv_texture_clone_index: int
    """ Clone UV map index

    :type: int
    """

    uv_texture_stencil: MeshTexturePolyLayer | None
    """ UV map to mask the painted area

    :type: MeshTexturePolyLayer | None
    """

    uv_texture_stencil_index: int
    """ Mask UV map index

    :type: int
    """

    uv_textures: UVTextures
    """ All UV maps

    :type: UVTextures
    """

    vertex_colors: LoopColors
    """ All vertex colors

    :type: LoopColors
    """

    vertex_layers_float: VertexFloatProperties
    """ 

    :type: VertexFloatProperties
    """

    vertex_layers_int: VertexIntProperties
    """ 

    :type: VertexIntProperties
    """

    vertex_layers_string: VertexStringProperties
    """ 

    :type: VertexStringProperties
    """

    vertex_paint_masks: bpy_prop_collection[MeshPaintMaskLayer]
    """ Vertex paint mask

    :type: bpy_prop_collection[MeshPaintMaskLayer]
    """

    vertices: MeshVertices
    """ Vertices of the mesh

    :type: MeshVertices
    """

    edge_keys: typing.Any
    """ (readonly)"""

    def transform(
        self,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None,
        shape_keys: bool | None = False,
    ):
        """Transform mesh vertices by a matrix (Warning: inverts normals if matrix is negative)

        :param matrix: Matrix
        :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | None
        """

    def flip_normals(self):
        """Invert winding of all polygons (clears tessellation, does not handle custom normals)"""

    def calc_normals(self):
        """Calculate vertex normals"""

    def create_normals_split(self):
        """Empty split vertex normals"""

    def calc_normals_split(self):
        """Calculate split vertex normals, which preserve sharp edges"""

    def free_normals_split(self):
        """Free split vertex normals"""

    def split_faces(self, free_loop_normals: bool | None = True):
        """Split faces based on the edge angle

        :param free_loop_normals: Free Loop Notmals, Free loop normals custom data layer
        :type free_loop_normals: bool | None
        """

    def calc_tangents(self, uvmap: str = ""):
        """Compute tangents and bitangent signs, to be used together with the split normals to get a complete tangent space for normal mapping (split normals are also computed if not yet present)

        :param uvmap: Name of the UV map to use for tangent space computation
        :type uvmap: str
        """

    def free_tangents(self):
        """Free tangents"""

    def calc_tessface(self, free_mpoly: bool | None = False):
        """Calculate face tessellation (supports editmode too)

        :param free_mpoly: Free MPoly, Free data used by polygons and loops. WARNING: This destructive operation removes regular faces, only used on temporary mesh data-blocks to reduce memory footprint of render engines and export scripts
        :type free_mpoly: bool | None
        """

    def calc_smooth_groups(self, use_bitflags: bool | None = False):
        """Calculate smooth groups from sharp edges

                :param use_bitflags: Produce bitflags groups instead of simple numeric values
                :type use_bitflags: bool | None
                :return: poly_groups, Smooth Groups, int array of 1 items in [-inf, inf]

        groups, Total number of groups, int in [0, inf]
        """

    def normals_split_custom_set(
        self, normals: list[list[float]] | tuple[tuple[float, float, float]] | None
    ):
        """Define custom split normals of this mesh (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: list[list[float]] | tuple[tuple[float, float, float]] | None
        """

    def normals_split_custom_set_from_vertices(
        self, normals: list[list[float]] | tuple[tuple[float, float, float]] | None
    ):
        """Define custom split normals of this mesh, from vertices' normals (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: list[list[float]] | tuple[tuple[float, float, float]] | None
        """

    def update(
        self, calc_edges: bool | None = False, calc_tessface: bool | None = False
    ):
        """update

        :param calc_edges: Calculate Edges, Force recalculation of edges
        :type calc_edges: bool | None
        :param calc_tessface: Calculate Tessellation, Force recalculation of tessellation faces
        :type calc_tessface: bool | None
        """

    def unit_test_compare(self, mesh: typing_extensions.Self | None = None) -> str:
        """unit_test_compare

        :param mesh: Mesh to compare to
        :type mesh: typing_extensions.Self | None
        :return: Return value, String description of result of comparison
        :rtype: str
        """

    def validate(
        self, verbose: bool | None = False, clean_customdata: bool | None = True
    ) -> bool:
        """Validate geometry, return True when the mesh has had invalid geometry corrected/removed

        :param verbose: Verbose, Output information about the errors found
        :type verbose: bool | None
        :param clean_customdata: Clean Custom Data, Remove temp/cached custom-data layers, like e.g. normals...
        :type clean_customdata: bool | None
        :return: Result
        :rtype: bool
        """

    def validate_material_indices(self) -> bool:
        """Validate material indices of polygons, return True when the mesh has had invalid indices corrected (to default 0)

        :return: Result
        :rtype: bool
        """

    def from_pydata(
        self, vertices: list | None, edges: list | None, faces: list | None
    ):
        """Make a mesh from a list of vertices/edges/faces
        Until we have a nicer way to make geometry, use this.

                :param vertices: float triplets each representing (X, Y, Z)
        eg: [(0.0, 1.0, 0.5), ...].
                :type vertices: list | None
                :param edges: int pairs, each pair contains two indices to the
        vertices argument. eg: [(1, 2), ...]
                :type edges: list | None
                :param faces: iterator of faces, each faces contains three or more indices to
        the vertices argument. eg: [(5, 6, 8, 9), (1, 2, 3), ...]
                :type faces: list | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshCacheModifier(Modifier, bpy_struct):
    """Cache Mesh"""

    cache_format: typing.Literal["MDD", "PC2"]
    """ 

    :type: typing.Literal['MDD','PC2']
    """

    deform_mode: typing.Literal["OVERWRITE", "INTEGRATE"]
    """ 

    :type: typing.Literal['OVERWRITE','INTEGRATE']
    """

    eval_factor: float
    """ Evaluation time in seconds

    :type: float
    """

    eval_frame: float
    """ The frame to evaluate (starting at 0)

    :type: float
    """

    eval_time: float
    """ Evaluation time in seconds

    :type: float
    """

    factor: float
    """ Influence of the deformation

    :type: float
    """

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    flip_axis: set[typing.Literal["X", "Y", "Z"]]
    """ 

    :type: set[typing.Literal['X','Y','Z']]
    """

    forward_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ 

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    frame_scale: float
    """ Evaluation time in seconds

    :type: float
    """

    frame_start: float
    """ Add this to the start frame

    :type: float
    """

    interpolation: typing.Literal["NONE", "LINEAR"]
    """ 

    :type: typing.Literal['NONE','LINEAR']
    """

    play_mode: typing.Literal["SCENE", "CUSTOM"]
    """ 

    :type: typing.Literal['SCENE','CUSTOM']
    """

    time_mode: typing.Literal["FRAME", "TIME", "FACTOR"]
    """ Method to control playback time

    :type: typing.Literal['FRAME','TIME','FACTOR']
    """

    up_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ 

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshColor(bpy_struct):
    """Vertex colors for a face in a Mesh"""

    color1: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    color2: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    color3: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    color4: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshColorLayer(bpy_struct):
    """Layer of vertex colors in a Mesh data-block"""

    active: bool | None
    """ Sets the layer as active for display and editing

    :type: bool | None
    """

    active_render: bool | None
    """ Sets the layer as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshColor]
    """ 

    :type: bpy_prop_collection[MeshColor]
    """

    name: str
    """ Name of Vertex color layer

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshDeformModifier(Modifier, bpy_struct):
    """Mesh deformation modifier to deform with other meshes"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bound: bool
    """ Whether geometry has been bound to control cage

    :type: bool
    """

    object: Object | None
    """ Mesh object to deform with

    :type: Object | None
    """

    precision: int
    """ The grid size for binding

    :type: int
    """

    use_dynamic_bind: bool
    """ Recompute binding dynamically on top of other deformers (slower and more memory consuming)

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshEdge(bpy_struct):
    """Edge in a Mesh data-block"""

    bevel_weight: float
    """ Weight used by the Bevel modifier

    :type: float
    """

    crease: float
    """ Weight used by the Subdivision Surface modifier for creasing

    :type: float
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this edge

    :type: int
    """

    is_loose: bool
    """ Loose edge

    :type: bool
    """

    select: bool
    """ 

    :type: bool
    """

    use_edge_sharp: bool
    """ Sharp edge for the Edge Split modifier

    :type: bool
    """

    use_freestyle_mark: bool
    """ Edge mark for Freestyle line rendering

    :type: bool
    """

    use_seam: bool
    """ Seam edge for UV unwrapping

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Vertex indices

    :type: bpy_prop_array[int]
    """

    key: typing.Any
    """ (readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshLoop(bpy_struct):
    """Loop in a Mesh data-block"""

    bitangent: bpy_prop_array[float]
    """ Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, use it only if really needed, slower access than bitangent_sign)

    :type: bpy_prop_array[float]
    """

    bitangent_sign: float
    """ Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))

    :type: float
    """

    edge_index: int
    """ Edge index

    :type: int
    """

    index: int
    """ Index of this loop

    :type: int
    """

    normal: bpy_prop_array[float]
    """ Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)

    :type: bpy_prop_array[float]
    """

    tangent: bpy_prop_array[float]
    """ Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)

    :type: bpy_prop_array[float]
    """

    vertex_index: int
    """ Vertex index

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshLoopColor(bpy_struct):
    """Vertex loop colors in a Mesh"""

    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshLoopColorLayer(bpy_struct):
    """Layer of vertex colors in a Mesh data-block"""

    active: bool | None
    """ Sets the layer as active for display and editing

    :type: bool | None
    """

    active_render: bool | None
    """ Sets the layer as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshLoopColor]
    """ 

    :type: bpy_prop_collection[MeshLoopColor]
    """

    name: str
    """ Name of Vertex color layer

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPaintMaskLayer(bpy_struct):
    """Per-vertex paint mask data"""

    data: bpy_prop_collection[MeshPaintMaskProperty]
    """ 

    :type: bpy_prop_collection[MeshPaintMaskProperty]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPaintMaskProperty(bpy_struct):
    """Floating point paint mask value"""

    value: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygon(bpy_struct):
    """Polygon in a Mesh data-block"""

    area: float
    """ Read only area of this polygon

    :type: float
    """

    center: bpy_prop_array[float]
    """ Center of this polygon

    :type: bpy_prop_array[float]
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this polygon

    :type: int
    """

    loop_start: int
    """ Index of the first loop of this polygon

    :type: int
    """

    loop_total: int
    """ Number of loops used by this polygon

    :type: int
    """

    material_index: int
    """ 

    :type: int
    """

    normal: bpy_prop_array[float]
    """ Local space unit length normal vector for this polygon

    :type: bpy_prop_array[float]
    """

    select: bool
    """ 

    :type: bool
    """

    use_freestyle_mark: bool
    """ Face mark for Freestyle line rendering

    :type: bool
    """

    use_smooth: bool
    """ 

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Vertex indices

    :type: bpy_prop_array[int]
    """

    edge_keys: typing.Any
    """ (readonly)"""

    loop_indices: typing.Any
    """ (readonly)"""

    def flip(self):
        """Invert winding of this polygon (flip its normal)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonFloatProperty(bpy_struct):
    """User defined floating point number value in a float properties layer"""

    value: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonFloatPropertyLayer(bpy_struct):
    """User defined layer of floating point number values"""

    data: bpy_prop_collection[MeshPolygonFloatProperty]
    """ 

    :type: bpy_prop_collection[MeshPolygonFloatProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonIntProperty(bpy_struct):
    """User defined integer number value in an integer properties layer"""

    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonIntPropertyLayer(bpy_struct):
    """User defined layer of integer number values"""

    data: bpy_prop_collection[MeshPolygonIntProperty]
    """ 

    :type: bpy_prop_collection[MeshPolygonIntProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonStringProperty(bpy_struct):
    """User defined string text value in a string properties layer"""

    value: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshPolygonStringPropertyLayer(bpy_struct):
    """User defined layer of string text values"""

    data: bpy_prop_collection[MeshPolygonStringProperty]
    """ 

    :type: bpy_prop_collection[MeshPolygonStringProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshSequenceCacheModifier(Modifier, bpy_struct):
    """Cache Mesh"""

    cache_file: CacheFile | None
    """ 

    :type: CacheFile | None
    """

    object_path: str
    """ Path to the object in the Alembic archive used to lookup geometric data

    :type: str
    """

    read_data: set[typing.Literal["VERT", "POLY", "UV", "COLOR"]]
    """ 

    :type: set[typing.Literal['VERT','POLY','UV','COLOR']]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshSkinVertex(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    radius: bpy_prop_array[float]
    """ Radius of the skin

    :type: bpy_prop_array[float]
    """

    use_loose: bool
    """ If vertex has multiple adjacent edges, it is hulled to them directly

    :type: bool
    """

    use_root: bool
    """ Vertex is a root for rotation calculations and armature generation, setting this flag does not clear other roots in the same mesh island

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshSkinVertexLayer(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    data: bpy_prop_collection[MeshSkinVertex]
    """ 

    :type: bpy_prop_collection[MeshSkinVertex]
    """

    name: str
    """ Name of skin layer

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshStatVis(bpy_struct):
    distort_max: float
    """ Maximum angle to display

    :type: float
    """

    distort_min: float
    """ Minimum angle to display

    :type: float
    """

    overhang_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ 

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    overhang_max: float
    """ Maximum angle to display

    :type: float
    """

    overhang_min: float
    """ Minimum angle to display

    :type: float
    """

    sharp_max: float
    """ Maximum angle to display

    :type: float
    """

    sharp_min: float
    """ Minimum angle to display

    :type: float
    """

    thickness_max: float
    """ Maximum for measuring thickness

    :type: float
    """

    thickness_min: float
    """ Minimum for measuring thickness

    :type: float
    """

    thickness_samples: int
    """ Number of samples to test per face

    :type: int
    """

    type: typing.Literal["OVERHANG", "THICKNESS", "INTERSECT", "DISTORT", "SHARP"]
    """ Type of data to visualize/check

    :type: typing.Literal['OVERHANG','THICKNESS','INTERSECT','DISTORT','SHARP']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTessFace(bpy_struct):
    """TessFace in a Mesh data-block"""

    area: float
    """ Read only area of this face

    :type: float
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this face

    :type: int
    """

    material_index: int
    """ 

    :type: int
    """

    normal: bpy_prop_array[float]
    """ Local space unit length normal vector for this face

    :type: bpy_prop_array[float]
    """

    select: bool
    """ 

    :type: bool
    """

    split_normals: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ Local space unit length split normals vectors of the vertices of this face (must be computed beforehand using calc_normals_split or calc_tangents, and then calc_tessface)

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    use_smooth: bool
    """ 

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Vertex indices

    :type: bpy_prop_array[int]
    """

    vertices_raw: bpy_prop_array[int]
    """ Fixed size vertex indices array

    :type: bpy_prop_array[int]
    """

    center: typing.Any
    """ The midpoint of the face.
(readonly)"""

    edge_keys: typing.Any
    """ (readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTextureFace(bpy_struct):
    """UV map and image texture for a face"""

    image: Image | None
    """ 

    :type: Image | None
    """

    uv: list[list[float]] | tuple[
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
    ]
    """ 

    :type: list[list[float]] | tuple[tuple[float, float], tuple[float, float], tuple[float, float], tuple[float, float]]
    """

    uv1: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    uv2: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    uv3: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    uv4: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    uv_raw: bpy_prop_array[float]
    """ Fixed size UV coordinates array

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTextureFaceLayer(bpy_struct):
    """UV map with assigned image textures in a Mesh data-block"""

    active: bool | None
    """ Set the map as active for display and editing

    :type: bool | None
    """

    active_clone: bool | None
    """ Set the map as active for cloning

    :type: bool | None
    """

    active_render: bool | None
    """ Set the map as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshTextureFace]
    """ 

    :type: bpy_prop_collection[MeshTextureFace]
    """

    name: str
    """ Name of UV map

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTexturePoly(bpy_struct):
    """UV map and image texture for a face"""

    image: Image | None
    """ 

    :type: Image | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshTexturePolyLayer(bpy_struct):
    """UV map with assigned image textures in a Mesh data-block"""

    active: bool | None
    """ Set the map as active for display and editing

    :type: bool | None
    """

    active_clone: bool | None
    """ Set the map as active for cloning

    :type: bool | None
    """

    active_render: bool | None
    """ Set the map as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshTexturePoly]
    """ 

    :type: bpy_prop_collection[MeshTexturePoly]
    """

    name: str
    """ Name of UV map

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshUVLoop(bpy_struct):
    pin_uv: bool
    """ 

    :type: bool
    """

    select: bool
    """ 

    :type: bool
    """

    select_edge: bool
    """ 

    :type: bool
    """

    uv: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshUVLoopLayer(bpy_struct):
    data: bpy_prop_collection[MeshUVLoop]
    """ 

    :type: bpy_prop_collection[MeshUVLoop]
    """

    name: str
    """ Name of UV map

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertex(bpy_struct):
    """Vertex in a Mesh data-block"""

    bevel_weight: float
    """ Weight used by the Bevel modifier 'Only Vertices' option

    :type: float
    """

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    groups: bpy_prop_collection[VertexGroupElement]
    """ Weights for the vertex groups this vertex is member of

    :type: bpy_prop_collection[VertexGroupElement]
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this vertex

    :type: int
    """

    normal: bpy_prop_array[float]
    """ Vertex Normal

    :type: bpy_prop_array[float]
    """

    select: bool
    """ 

    :type: bool
    """

    undeformed_co: bpy_prop_array[float]
    """ For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexFloatProperty(bpy_struct):
    """User defined floating point number value in a float properties layer"""

    value: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexFloatPropertyLayer(bpy_struct):
    """User defined layer of floating point number values"""

    data: bpy_prop_collection[MeshVertexFloatProperty]
    """ 

    :type: bpy_prop_collection[MeshVertexFloatProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexIntProperty(bpy_struct):
    """User defined integer number value in an integer properties layer"""

    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexIntPropertyLayer(bpy_struct):
    """User defined layer of integer number values"""

    data: bpy_prop_collection[MeshVertexIntProperty]
    """ 

    :type: bpy_prop_collection[MeshVertexIntProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexStringProperty(bpy_struct):
    """User defined string text value in a string properties layer"""

    value: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MeshVertexStringPropertyLayer(bpy_struct):
    """User defined layer of string text values"""

    data: bpy_prop_collection[MeshVertexStringProperty]
    """ 

    :type: bpy_prop_collection[MeshVertexStringProperty]
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MessageActuator(Actuator, bpy_struct):
    body_message: str
    """ Optional, message body Text

    :type: str
    """

    body_property: str
    """ The message body will be set by the Property Value

    :type: str
    """

    body_type: typing.Literal["TEXT", "PROPERTY"]
    """ Toggle message type: either Text or a PropertyName

    :type: typing.Literal['TEXT','PROPERTY']
    """

    subject: str
    """ Optional, message subject (this is what can be filtered on)

    :type: str
    """

    to_property: str
    """ Optional, send message to objects with this name only, or empty to broadcast

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MessageSensor(Sensor, bpy_struct):
    """Sensor to detect incoming messages"""

    subject: str
    """ Optional subject filter: only accept messages with this subject, or empty to accept all

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MetaBall(ID, bpy_struct):
    """Metaball data-block to defined blobby surfaces"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    cycles: CyclesMeshSettings
    """ Cycles mesh settings

    :type: CyclesMeshSettings
    """

    elements: MetaBallElements
    """ Meta elements

    :type: MetaBallElements
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    render_resolution: float
    """ Polygonization resolution in rendering

    :type: float
    """

    resolution: float
    """ Polygonization resolution in the 3D viewport

    :type: float
    """

    texspace_location: bpy_prop_array[float]
    """ Texture space location

    :type: bpy_prop_array[float]
    """

    texspace_size: bpy_prop_array[float]
    """ Texture space size

    :type: bpy_prop_array[float]
    """

    threshold: float
    """ Influence of meta elements

    :type: float
    """

    update_method: typing.Literal["UPDATE_ALWAYS", "HALFRES", "FAST", "NEVER"]
    """ Metaball edit update behavior

    :type: typing.Literal['UPDATE_ALWAYS','HALFRES','FAST','NEVER']
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    def transform(
        self,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None,
    ):
        """Transform meta elements by a matrix

        :param matrix: Matrix
        :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MetaElement(bpy_struct):
    """Blobby element in a Metaball data-block"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    hide: bool
    """ Hide element

    :type: bool
    """

    radius: float
    """ 

    :type: float
    """

    rotation: bpy_prop_array[float]
    """ Normalized quaternion rotation

    :type: bpy_prop_array[float]
    """

    size_x: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    size_y: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    size_z: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    stiffness: float
    """ Stiffness defines how much of the element to fill

    :type: float
    """

    type: typing.Literal["BALL", "CAPSULE", "PLANE", "ELLIPSOID", "CUBE"]
    """ Metaball types

    :type: typing.Literal['BALL','CAPSULE','PLANE','ELLIPSOID','CUBE']
    """

    use_negative: bool
    """ Set metaball as negative one

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MetaSequence(Sequence, bpy_struct):
    """Sequence strip to group other strips as a single sequence strip"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    sequences: bpy_prop_collection[Sequence]
    """ 

    :type: bpy_prop_collection[Sequence]
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MirrorModifier(Modifier, bpy_struct):
    """Mirroring modifier"""

    merge_threshold: float
    """ Distance within which mirrored vertices are merged

    :type: float
    """

    mirror_object: Object | None
    """ Object to use as mirror

    :type: Object | None
    """

    mirror_offset_u: float
    """ Amount to offset mirrored UVs flipping point from the 0.5 on the U axis

    :type: float
    """

    mirror_offset_v: float
    """ Amount to offset mirrored UVs flipping point from the 0.5 point on the V axis

    :type: float
    """

    offset_u: float
    """ Mirrored UV offset on the U axis

    :type: float
    """

    offset_v: float
    """ Mirrored UV offset on the V axis

    :type: float
    """

    use_clip: bool
    """ Prevent vertices from going through the mirror during transform

    :type: bool
    """

    use_mirror_merge: bool
    """ Merge vertices within the merge threshold

    :type: bool
    """

    use_mirror_u: bool
    """ Mirror the U texture coordinate around the flip offset point

    :type: bool
    """

    use_mirror_v: bool
    """ Mirror the V texture coordinate around the flip offset point

    :type: bool
    """

    use_mirror_vertex_groups: bool
    """ Mirror vertex groups (e.g. .R->.L)

    :type: bool
    """

    use_x: bool
    """ Enable X axis mirror

    :type: bool
    """

    use_y: bool
    """ Enable Y axis mirror

    :type: bool
    """

    use_z: bool
    """ Enable Z axis mirror

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Modifier(bpy_struct):
    """Modifier affecting the geometry data of an object"""

    name: str
    """ Modifier name

    :type: str
    """

    show_expanded: bool
    """ Set modifier expanded in the user interface

    :type: bool
    """

    show_in_editmode: bool
    """ Display modifier in Edit mode

    :type: bool
    """

    show_on_cage: bool
    """ Adjust edit cage to modifier result

    :type: bool
    """

    show_render: bool
    """ Use modifier during render

    :type: bool
    """

    show_viewport: bool
    """ Display modifier in viewport

    :type: bool
    """

    type: typing.Literal[
        "DATA_TRANSFER",
        "MESH_CACHE",
        "MESH_SEQUENCE_CACHE",
        "NORMAL_EDIT",
        "UV_PROJECT",
        "UV_WARP",
        "VERTEX_WEIGHT_EDIT",
        "VERTEX_WEIGHT_MIX",
        "VERTEX_WEIGHT_PROXIMITY",
        "ARRAY",
        "BEVEL",
        "BOOLEAN",
        "BUILD",
        "DECIMATE",
        "EDGE_SPLIT",
        "MASK",
        "MIRROR",
        "MULTIRES",
        "REMESH",
        "SCREW",
        "SKIN",
        "SOLIDIFY",
        "SUBSURF",
        "TRIANGULATE",
        "WIREFRAME",
        "ARMATURE",
        "CAST",
        "CORRECTIVE_SMOOTH",
        "CURVE",
        "DISPLACE",
        "HOOK",
        "LAPLACIANSMOOTH",
        "LAPLACIANDEFORM",
        "LATTICE",
        "MESH_DEFORM",
        "SHRINKWRAP",
        "SIMPLE_DEFORM",
        "SMOOTH",
        "SURFACE_DEFORM",
        "WARP",
        "WAVE",
        "CLOTH",
        "COLLISION",
        "DYNAMIC_PAINT",
        "EXPLODE",
        "FLUID_SIMULATION",
        "OCEAN",
        "PARTICLE_INSTANCE",
        "PARTICLE_SYSTEM",
        "SMOKE",
        "SOFT_BODY",
        "SURFACE",
    ]
    """ 

    :type: typing.Literal['DATA_TRANSFER','MESH_CACHE','MESH_SEQUENCE_CACHE','NORMAL_EDIT','UV_PROJECT','UV_WARP','VERTEX_WEIGHT_EDIT','VERTEX_WEIGHT_MIX','VERTEX_WEIGHT_PROXIMITY','ARRAY','BEVEL','BOOLEAN','BUILD','DECIMATE','EDGE_SPLIT','MASK','MIRROR','MULTIRES','REMESH','SCREW','SKIN','SOLIDIFY','SUBSURF','TRIANGULATE','WIREFRAME','ARMATURE','CAST','CORRECTIVE_SMOOTH','CURVE','DISPLACE','HOOK','LAPLACIANSMOOTH','LAPLACIANDEFORM','LATTICE','MESH_DEFORM','SHRINKWRAP','SIMPLE_DEFORM','SMOOTH','SURFACE_DEFORM','WARP','WAVE','CLOTH','COLLISION','DYNAMIC_PAINT','EXPLODE','FLUID_SIMULATION','OCEAN','PARTICLE_INSTANCE','PARTICLE_SYSTEM','SMOKE','SOFT_BODY','SURFACE']
    """

    use_apply_on_spline: bool
    """ Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MotionPath(bpy_struct):
    """Cache of the worldspace positions of an element over a frame range"""

    color: bpy_prop_array[float]
    """ Custom color for motion path

    :type: bpy_prop_array[float]
    """

    frame_end: int
    """ End frame of the stored range

    :type: int
    """

    frame_start: int
    """ Starting frame of the stored range

    :type: int
    """

    is_modified: bool
    """ Path is being edited

    :type: bool
    """

    length: int
    """ Number of frames cached

    :type: int
    """

    line_thickness: int
    """ Line thickness for drawing path

    :type: int
    """

    lines: bool
    """ Draw straight lines between keyframe points

    :type: bool
    """

    points: bpy_prop_collection[MotionPathVert]
    """ Cached positions per frame

    :type: bpy_prop_collection[MotionPathVert]
    """

    use_bone_head: bool
    """ For PoseBone paths, use the bone head location when calculating this path

    :type: bool
    """

    use_custom_color: bool
    """ Use custom color for this motion path

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MotionPathVert(bpy_struct):
    """Cached location on path"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    select: bool
    """ Path point is selected for editing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MouseActuator(Actuator, bpy_struct):
    local_x: bool
    """ Apply rotation locally

    :type: bool
    """

    local_y: bool
    """ Apply rotation locally

    :type: bool
    """

    max_x: float
    """ Maximum positive rotation allowed by X mouse movement (0 for infinite)

    :type: float
    """

    max_y: float
    """ Maximum positive rotation allowed by Y mouse movement (0 for infinite)

    :type: float
    """

    min_x: float
    """ Maximum negative rotation allowed by X mouse movement (0 for infinite)

    :type: float
    """

    min_y: float
    """ Maximum negative rotation allowed by Y mouse movement (0 for infinite)

    :type: float
    """

    mode: typing.Literal["VISIBILITY", "LOOK"]
    """ 

    :type: typing.Literal['VISIBILITY','LOOK']
    """

    object_axis_x: typing.Literal["OBJECT_AXIS_X", "OBJECT_AXIS_Y", "OBJECT_AXIS_Z"]
    """ Local object axis mouse movement in the X direction will apply to

    :type: typing.Literal['OBJECT_AXIS_X','OBJECT_AXIS_Y','OBJECT_AXIS_Z']
    """

    object_axis_y: typing.Literal["OBJECT_AXIS_X", "OBJECT_AXIS_Y", "OBJECT_AXIS_Z"]
    """ Local object axis mouse movement in the Y direction will apply to

    :type: typing.Literal['OBJECT_AXIS_X','OBJECT_AXIS_Y','OBJECT_AXIS_Z']
    """

    reset_x: bool
    """ Reset the cursor's X position to the center of the screen space after calculating

    :type: bool
    """

    reset_y: bool
    """ Reset the cursor's Y position to the center of the screen space after calculating

    :type: bool
    """

    sensitivity_x: float
    """ Sensitivity of the X axis

    :type: float
    """

    sensitivity_y: float
    """ Sensitivity of the Y axis

    :type: float
    """

    threshold_x: float
    """ Amount of X motion before mouse movement will register

    :type: float
    """

    threshold_y: float
    """ Amount of Y motion before mouse movement will register

    :type: float
    """

    use_axis_x: bool
    """ Calculate mouse movement on the X axis

    :type: bool
    """

    use_axis_y: bool
    """ Calculate mouse movement on the Y axis

    :type: bool
    """

    visible: bool
    """ Make mouse cursor visible

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MouseSensor(Sensor, bpy_struct):
    """Sensor to detect mouse events"""

    mask: bpy_prop_array[bool]
    """ Mask filter compared with object's collision group

    :type: bpy_prop_array[bool]
    """

    material: str
    """ Only look for objects with this material (blank = all objects)

    :type: str
    """

    mouse_event: typing.Literal[
        "LEFTCLICK",
        "MIDDLECLICK",
        "RIGHTCLICK",
        "WHEELUP",
        "WHEELDOWN",
        "MOVEMENT",
        "MOUSEOVER",
        "MOUSEOVERANY",
    ]
    """ Type of event this mouse sensor should trigger on

    :type: typing.Literal['LEFTCLICK','MIDDLECLICK','RIGHTCLICK','WHEELUP','WHEELDOWN','MOVEMENT','MOUSEOVER','MOUSEOVERANY']
    """

    property: str
    """ Only look for objects with this property (blank = all objects)

    :type: str
    """

    use_material: typing.Literal["PROPERTY", "MATERIAL"]
    """ Toggle collision on material or property

    :type: typing.Literal['PROPERTY','MATERIAL']
    """

    use_pulse: bool
    """ Moving the mouse over a different object generates a pulse

    :type: bool
    """

    use_x_ray: bool
    """ Toggle X-Ray option (see through objects that don't have the property)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovementSensor(Sensor, bpy_struct):
    """Sensor to detect if the owner has moved"""

    axis: typing.Literal[
        "XAXIS", "YAXIS", "ZAXIS", "NEGXAXIS", "NEGYAXIS", "NEGZAXIS", "ALLAXIS"
    ]
    """ Along which axis movement has to be detected

    :type: typing.Literal['XAXIS','YAXIS','ZAXIS','NEGXAXIS','NEGYAXIS','NEGZAXIS','ALLAXIS']
    """

    threshold: float
    """ Set Threshold

    :type: float
    """

    use_local: bool
    """ Toggle beetween local/global coordinates

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieClip(ID, bpy_struct):
    """MovieClip data-block referencing an external movie file"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    display_aspect: bpy_prop_array[float]
    """ Display Aspect for this clip, does not affect rendering

    :type: bpy_prop_array[float]
    """

    filepath: str
    """ Filename of the movie or sequence file

    :type: str
    """

    fps: float
    """ Detected frame rate of the movie clip in frames per second

    :type: float
    """

    frame_duration: int
    """ Detected duration of movie clip in frames

    :type: int
    """

    frame_offset: int
    """ Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)

    :type: int
    """

    frame_start: int
    """ Global scene frame number at which this movie starts playing (affects all data associated with a clip)

    :type: int
    """

    grease_pencil: GreasePencil | None
    """ Grease pencil data for this movie clip

    :type: GreasePencil | None
    """

    proxy: MovieClipProxy
    """ 

    :type: MovieClipProxy
    """

    size: bpy_prop_array[int]
    """ Width and height in pixels, zero when image data cant be loaded

    :type: bpy_prop_array[int]
    """

    source: typing.Literal["SEQUENCE", "MOVIE"]
    """ Where the clip comes from

    :type: typing.Literal['SEQUENCE','MOVIE']
    """

    tracking: MovieTracking
    """ 

    :type: MovieTracking
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this clip

    :type: bool
    """

    use_proxy_custom_directory: bool
    """ Create proxy images in a custom directory (default is movie location)

    :type: bool
    """

    def metadata(self) -> IDPropertyWrapPtr:
        """Retrieve metadata of the movie file

        :return: Dict-like object containing the metadata
        :rtype: IDPropertyWrapPtr
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieClipProxy(bpy_struct):
    """Proxy parameters for a movie clip"""

    build_100: bool
    """ Build proxy resolution 100% of the original footage dimension

    :type: bool
    """

    build_25: bool
    """ Build proxy resolution 25% of the original footage dimension

    :type: bool
    """

    build_50: bool
    """ Build proxy resolution 50% of the original footage dimension

    :type: bool
    """

    build_75: bool
    """ Build proxy resolution 75% of the original footage dimension

    :type: bool
    """

    build_free_run: bool
    """ Build free run time code index

    :type: bool
    """

    build_free_run_rec_date: bool
    """ Build free run time code index using Record Date/Time

    :type: bool
    """

    build_record_run: bool
    """ Build record run time code index

    :type: bool
    """

    build_undistorted_100: bool
    """ Build proxy resolution 100% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_25: bool
    """ Build proxy resolution 25% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_50: bool
    """ Build proxy resolution 50% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_75: bool
    """ Build proxy resolution 75% of the original undistorted footage dimension

    :type: bool
    """

    directory: str
    """ Location to store the proxy files

    :type: str
    """

    quality: int
    """ JPEG quality of proxy images

    :type: int
    """

    timecode: typing.Literal[
        "NONE", "RECORD_RUN", "FREE_RUN", "FREE_RUN_REC_DATE", "FREE_RUN_NO_GAPS"
    ]
    """ 

    :type: typing.Literal['NONE','RECORD_RUN','FREE_RUN','FREE_RUN_REC_DATE','FREE_RUN_NO_GAPS']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieClipScopes(bpy_struct):
    """Scopes for statistical view of a movie clip"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieClipSequence(Sequence, bpy_struct):
    """Sequence strip to load a video from the clip editor"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    fps: float
    """ Frames per second

    :type: float
    """

    stabilize2d: bool
    """ Use the 2D stabilized version of the clip

    :type: bool
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    undistort: bool
    """ Use the undistorted version of the clip

    :type: bool
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieClipUser(bpy_struct):
    """Parameters defining how a MovieClip data-block is used by another data-block"""

    frame_current: int
    """ Current frame number in movie or image sequence

    :type: int
    """

    proxy_render_size: typing.Literal[
        "PROXY_25", "PROXY_50", "PROXY_75", "PROXY_100", "FULL"
    ]
    """ Draw preview using full resolution or different proxy resolutions

    :type: typing.Literal['PROXY_25','PROXY_50','PROXY_75','PROXY_100','FULL']
    """

    use_render_undistorted: bool
    """ Render preview using undistorted proxy

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieReconstructedCamera(bpy_struct):
    """Match-moving reconstructed camera data from tracker"""

    average_error: float
    """ Average error of reconstruction

    :type: float
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Worldspace transformation matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieSequence(Sequence, bpy_struct):
    """Sequence strip to load a video"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    elements: bpy_prop_collection[SequenceElement]
    """ 

    :type: bpy_prop_collection[SequenceElement]
    """

    filepath: str
    """ 

    :type: str
    """

    fps: float
    """ Frames per second

    :type: float
    """

    mpeg_preseek: int
    """ For MPEG movies, preseek this many frames

    :type: int
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3d

    :type: Stereo3dFormat
    """

    stream_index: int
    """ For files with several movie streams, use the stream with the given index

    :type: int
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    views_format: typing.Literal["INDIVIDUAL", "STEREO_3D"]
    """ Mode to load movie views

    :type: typing.Literal['INDIVIDUAL','STEREO_3D']
    """

    def metadata(self) -> IDPropertyWrapPtr:
        """Retrieve metadata of the movie file

        :return: Dict-like object containing the metadata
        :rtype: IDPropertyWrapPtr
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTracking(bpy_struct):
    """Match-moving data for tracking"""

    active_object_index: int | None
    """ Index of active object

    :type: int | None
    """

    camera: MovieTrackingCamera
    """ 

    :type: MovieTrackingCamera
    """

    dopesheet: MovieTrackingDopesheet
    """ 

    :type: MovieTrackingDopesheet
    """

    objects: MovieTrackingObjects
    """ Collection of objects in this tracking data object

    :type: MovieTrackingObjects
    """

    plane_tracks: MovieTrackingPlaneTracks
    """ Collection of plane tracks in this tracking data object

    :type: MovieTrackingPlaneTracks
    """

    reconstruction: MovieTrackingReconstruction
    """ 

    :type: MovieTrackingReconstruction
    """

    settings: MovieTrackingSettings
    """ 

    :type: MovieTrackingSettings
    """

    stabilization: MovieTrackingStabilization
    """ 

    :type: MovieTrackingStabilization
    """

    tracks: MovieTrackingTracks
    """ Collection of tracks in this tracking data object

    :type: MovieTrackingTracks
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingCamera(bpy_struct):
    """Match-moving camera data for tracking"""

    distortion_model: typing.Literal["POLYNOMIAL", "DIVISION"]
    """ Distortion model used for camera lenses

    :type: typing.Literal['POLYNOMIAL','DIVISION']
    """

    division_k1: float
    """ First coefficient of second order division distortion

    :type: float
    """

    division_k2: float
    """ First coefficient of second order division distortion

    :type: float
    """

    focal_length: float
    """ Camera's focal length

    :type: float
    """

    focal_length_pixels: float
    """ Camera's focal length

    :type: float
    """

    k1: float
    """ First coefficient of third order polynomial radial distortion

    :type: float
    """

    k2: float
    """ Second coefficient of third order polynomial radial distortion

    :type: float
    """

    k3: float
    """ Third coefficient of third order polynomial radial distortion

    :type: float
    """

    pixel_aspect: float
    """ Pixel aspect ratio

    :type: float
    """

    principal: bpy_prop_array[float]
    """ Optical center of lens

    :type: bpy_prop_array[float]
    """

    sensor_width: float
    """ Width of CCD sensor in millimeters

    :type: float
    """

    units: typing.Literal["PIXELS", "MILLIMETERS"]
    """ Units used for camera focal length

    :type: typing.Literal['PIXELS','MILLIMETERS']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingDopesheet(bpy_struct):
    """Match-moving dopesheet data"""

    show_hidden: bool
    """ Include channels from objects/bone that aren't visible

    :type: bool
    """

    show_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    sort_method: typing.Literal["NAME", "LONGEST", "TOTAL", "AVERAGE_ERROR"]
    """ Method to be used to sort channels in dopesheet view

    :type: typing.Literal['NAME','LONGEST','TOTAL','AVERAGE_ERROR']
    """

    use_invert_sort: bool
    """ Invert sort order of dopesheet channels

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingMarker(bpy_struct):
    """Match-moving marker data for tracking"""

    co: bpy_prop_array[float]
    """ Marker position at frame in normalized coordinates

    :type: bpy_prop_array[float]
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    is_keyed: bool
    """ Whether the position of the marker is keyframed or tracked

    :type: bool
    """

    mute: bool
    """ Is marker muted for current frame

    :type: bool
    """

    pattern_bound_box: list[list[float]] | tuple[
        tuple[float, float], tuple[float, float]
    ]
    """ Pattern area bounding box in normalized coordinates

    :type: list[list[float]] | tuple[tuple[float, float], tuple[float, float]]
    """

    pattern_corners: list[list[float]] | tuple[
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
    ]
    """ Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position

    :type: list[list[float]] | tuple[tuple[float, float], tuple[float, float], tuple[float, float], tuple[float, float]]
    """

    search_max: bpy_prop_array[float]
    """ Right-bottom corner of search area in normalized coordinates relative to marker position

    :type: bpy_prop_array[float]
    """

    search_min: bpy_prop_array[float]
    """ Left-bottom corner of search area in normalized coordinates relative to marker position

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingObject(bpy_struct):
    """Match-moving object tracking and reconstruction data"""

    is_camera: bool
    """ Object is used for camera tracking

    :type: bool
    """

    keyframe_a: int
    """ First keyframe used for reconstruction initialization

    :type: int
    """

    keyframe_b: int
    """ Second keyframe used for reconstruction initialization

    :type: int
    """

    name: str
    """ Unique name of object

    :type: str
    """

    plane_tracks: MovieTrackingObjectPlaneTracks
    """ Collection of plane tracks in this tracking data object

    :type: MovieTrackingObjectPlaneTracks
    """

    reconstruction: MovieTrackingReconstruction
    """ 

    :type: MovieTrackingReconstruction
    """

    scale: float
    """ Scale of object solution in camera space

    :type: float
    """

    tracks: MovieTrackingObjectTracks
    """ Collection of tracks in this tracking data object

    :type: MovieTrackingObjectTracks
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingPlaneMarker(bpy_struct):
    """Match-moving plane marker data for tracking"""

    corners: list[list[float]] | tuple[
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
        tuple[float, float],
    ]
    """ Array of coordinates which represents UI rectangle corners in frame normalized coordinates

    :type: list[list[float]] | tuple[tuple[float, float], tuple[float, float], tuple[float, float], tuple[float, float]]
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    mute: bool
    """ Is marker muted for current frame

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingPlaneTrack(bpy_struct):
    """Match-moving plane track data for tracking"""

    image: Image | None
    """ Image displayed in the track during editing in clip editor

    :type: Image | None
    """

    image_opacity: float
    """ Opacity of the image

    :type: float
    """

    markers: MovieTrackingPlaneMarkers
    """ Collection of markers in track

    :type: MovieTrackingPlaneMarkers
    """

    name: str
    """ Unique name of track

    :type: str
    """

    select: bool
    """ Plane track is selected

    :type: bool
    """

    use_auto_keying: bool
    """ Automatic keyframe insertion when moving plane corners

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingReconstruction(bpy_struct):
    """Match-moving reconstruction data from tracker"""

    average_error: float
    """ Average error of reconstruction

    :type: float
    """

    cameras: MovieTrackingReconstructedCameras
    """ Collection of solved cameras

    :type: MovieTrackingReconstructedCameras
    """

    is_valid: bool
    """ Is tracking data contains valid reconstruction information

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingSettings(bpy_struct):
    """Match moving settings"""

    clean_action: typing.Literal["SELECT", "DELETE_TRACK", "DELETE_SEGMENTS"]
    """ Cleanup action to execute

    :type: typing.Literal['SELECT','DELETE_TRACK','DELETE_SEGMENTS']
    """

    clean_error: float
    """ Effect on tracks which have a larger re-projection error

    :type: float
    """

    clean_frames: int
    """ Effect on tracks which are tracked less than the specified amount of frames

    :type: int
    """

    default_correlation_min: float
    """ Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking

    :type: float
    """

    default_frames_limit: int
    """ Every tracking cycle, this number of frames are tracked

    :type: int
    """

    default_margin: int
    """ Default distance from image boundary at which marker stops tracking

    :type: int
    """

    default_motion_model: typing.Literal[
        "Perspective", "Affine", "LocRotScale", "LocScale", "LocRot", "Loc"
    ]
    """ Default motion model to use for tracking

    :type: typing.Literal['Perspective','Affine','LocRotScale','LocScale','LocRot','Loc']
    """

    default_pattern_match: typing.Literal["KEYFRAME", "PREV_FRAME"]
    """ Track pattern from given frame when tracking marker to next frame

    :type: typing.Literal['KEYFRAME','PREV_FRAME']
    """

    default_pattern_size: int
    """ Size of pattern area for newly created tracks

    :type: int
    """

    default_search_size: int
    """ Size of search area for newly created tracks

    :type: int
    """

    default_weight: float
    """ Influence of newly created track on a final solution

    :type: float
    """

    distance: float
    """ Distance between two bundles used for scene scaling

    :type: float
    """

    object_distance: float
    """ Distance between two bundles used for object scaling

    :type: float
    """

    refine_intrinsics: typing.Literal[
        "NONE",
        "FOCAL_LENGTH",
        "FOCAL_LENGTH_RADIAL_K1",
        "FOCAL_LENGTH_RADIAL_K1_K2",
        "FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2",
        "FOCAL_LENGTH_PRINCIPAL_POINT",
        "RADIAL_K1_K2",
    ]
    """ Refine intrinsics during camera solving

    :type: typing.Literal['NONE','FOCAL_LENGTH','FOCAL_LENGTH_RADIAL_K1','FOCAL_LENGTH_RADIAL_K1_K2','FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2','FOCAL_LENGTH_PRINCIPAL_POINT','RADIAL_K1_K2']
    """

    show_default_expanded: bool
    """ Show default options expanded in the user interface

    :type: bool
    """

    show_extra_expanded: bool
    """ Show extra options expanded in the user interface

    :type: bool
    """

    speed: typing.Literal["FASTEST", "DOUBLE", "REALTIME", "HALF", "QUARTER"]
    """ Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)

    :type: typing.Literal['FASTEST','DOUBLE','REALTIME','HALF','QUARTER']
    """

    use_default_blue_channel: bool
    """ Use blue channel from footage for tracking

    :type: bool
    """

    use_default_brute: bool
    """ Use a brute-force translation-only initialization when tracking

    :type: bool
    """

    use_default_green_channel: bool
    """ Use green channel from footage for tracking

    :type: bool
    """

    use_default_mask: bool
    """ Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking

    :type: bool
    """

    use_default_normalization: bool
    """ Normalize light intensities while tracking (slower)

    :type: bool
    """

    use_default_red_channel: bool
    """ Use red channel from footage for tracking

    :type: bool
    """

    use_keyframe_selection: bool
    """ Automatically select keyframes when solving camera/object motion

    :type: bool
    """

    use_tripod_solver: bool
    """ Use special solver to track a stable camera position, such as a tripod

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingStabilization(bpy_struct):
    """2D stabilization based on tracking markers"""

    active_rotation_track_index: int | None
    """ Index of active track in rotation stabilization tracks list

    :type: int | None
    """

    active_track_index: int | None
    """ Index of active track in translation stabilization tracks list

    :type: int | None
    """

    anchor_frame: int
    """ Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)

    :type: int
    """

    filter_type: typing.Literal["NEAREST", "BILINEAR", "BICUBIC"]
    """ Interpolation to use for sub-pixel shifts and rotations due to stabilization

    :type: typing.Literal['NEAREST','BILINEAR','BICUBIC']
    """

    influence_location: float
    """ Influence of stabilization algorithm on footage location

    :type: float
    """

    influence_rotation: float
    """ Influence of stabilization algorithm on footage rotation

    :type: float
    """

    influence_scale: float
    """ Influence of stabilization algorithm on footage scale

    :type: float
    """

    rotation_tracks: bpy_prop_collection[MovieTrackingTrack]
    """ Collection of tracks used for 2D stabilization (translation)

    :type: bpy_prop_collection[MovieTrackingTrack]
    """

    scale_max: float
    """ Limit the amount of automatic scaling

    :type: float
    """

    show_tracks_expanded: bool
    """ Show UI list of tracks participating in stabilization

    :type: bool
    """

    target_position: bpy_prop_array[float]
    """ Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)

    :type: bpy_prop_array[float]
    """

    target_rotation: float
    """ Rotation present on original shot, will be compensated (e.g. for deliberate tilting)

    :type: float
    """

    target_scale: float
    """ Explicitly scale resulting frame to compensate zoom of original shot

    :type: float
    """

    tracks: bpy_prop_collection[MovieTrackingTrack]
    """ Collection of tracks used for 2D stabilization (translation)

    :type: bpy_prop_collection[MovieTrackingTrack]
    """

    use_2d_stabilization: bool
    """ Use 2D stabilization for footage

    :type: bool
    """

    use_autoscale: bool
    """ Automatically scale footage to cover unfilled areas when stabilizing

    :type: bool
    """

    use_stabilize_rotation: bool
    """ Stabilize detected rotation around center of frame

    :type: bool
    """

    use_stabilize_scale: bool
    """ Compensate any scale changes relative to center of rotation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MovieTrackingTrack(bpy_struct):
    """Match-moving track data for tracking"""

    average_error: float
    """ Average error of re-projection

    :type: float
    """

    bundle: bpy_prop_array[float]
    """ Position of bundle reconstructed from this track

    :type: bpy_prop_array[float]
    """

    color: bpy_prop_array[float]
    """ Color of the track in the Movie Clip Editor and the 3D viewport after a solve

    :type: bpy_prop_array[float]
    """

    correlation_min: float
    """ Minimal value of correlation between matched pattern and reference that is still treated as successful tracking

    :type: float
    """

    frames_limit: int
    """ Every tracking cycle, this number of frames are tracked

    :type: int
    """

    grease_pencil: GreasePencil | None
    """ Grease pencil data for this track

    :type: GreasePencil | None
    """

    has_bundle: bool
    """ True if track has a valid bundle

    :type: bool
    """

    hide: bool
    """ Track is hidden

    :type: bool
    """

    lock: bool
    """ Track is locked and all changes to it are disabled

    :type: bool
    """

    margin: int
    """ Distance from image boundary at which marker stops tracking

    :type: int
    """

    markers: MovieTrackingMarkers
    """ Collection of markers in track

    :type: MovieTrackingMarkers
    """

    motion_model: typing.Literal[
        "Perspective", "Affine", "LocRotScale", "LocScale", "LocRot", "Loc"
    ]
    """ Default motion model to use for tracking

    :type: typing.Literal['Perspective','Affine','LocRotScale','LocScale','LocRot','Loc']
    """

    name: str
    """ Unique name of track

    :type: str
    """

    offset: bpy_prop_array[float]
    """ Offset of track from the parenting point

    :type: bpy_prop_array[float]
    """

    pattern_match: typing.Literal["KEYFRAME", "PREV_FRAME"]
    """ Track pattern from given frame when tracking marker to next frame

    :type: typing.Literal['KEYFRAME','PREV_FRAME']
    """

    select: bool
    """ Track is selected

    :type: bool
    """

    select_anchor: bool
    """ Track's anchor point is selected

    :type: bool
    """

    select_pattern: bool
    """ Track's pattern area is selected

    :type: bool
    """

    select_search: bool
    """ Track's search area is selected

    :type: bool
    """

    use_alpha_preview: bool
    """ Apply track's mask on displaying preview

    :type: bool
    """

    use_blue_channel: bool
    """ Use blue channel from footage for tracking

    :type: bool
    """

    use_brute: bool
    """ Use a brute-force translation only pre-track before refinement

    :type: bool
    """

    use_custom_color: bool
    """ Use custom color instead of theme-defined

    :type: bool
    """

    use_grayscale_preview: bool
    """ Display what the tracking algorithm sees in the preview

    :type: bool
    """

    use_green_channel: bool
    """ Use green channel from footage for tracking

    :type: bool
    """

    use_mask: bool
    """ Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking

    :type: bool
    """

    use_normalization: bool
    """ Normalize light intensities while tracking. Slower

    :type: bool
    """

    use_red_channel: bool
    """ Use red channel from footage for tracking

    :type: bool
    """

    weight: float
    """ Influence of this track on a final solution

    :type: float
    """

    weight_stab: float
    """ Influence of this track on 2D stabilization

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MulticamSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to perform multicam editing"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    input_count: int
    """ 

    :type: int
    """

    multicam_source: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MultiplySequence(EffectSequence, Sequence, bpy_struct):
    """Multiply Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MultiresModifier(Modifier, bpy_struct):
    """Multiresolution mesh modifier"""

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    is_external: bool
    """ Store multires displacements outside the .blend file, to save memory

    :type: bool
    """

    levels: int
    """ Number of subdivisions to use in the viewport

    :type: int
    """

    render_levels: int
    """ The subdivision level visible at render time

    :type: int
    """

    sculpt_levels: int
    """ Number of subdivisions to use in sculpt mode

    :type: int
    """

    show_only_control_edges: bool
    """ Skip drawing/rendering of interior subdivided edges

    :type: bool
    """

    subdivision_type: typing.Literal["CATMULL_CLARK", "SIMPLE"]
    """ Select type of subdivision algorithm

    :type: typing.Literal['CATMULL_CLARK','SIMPLE']
    """

    total_levels: int
    """ Number of subdivisions for which displacements are stored

    :type: int
    """

    use_subsurf_uv: bool
    """ Use subsurf to subdivide UVs

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class MusgraveTexture(Texture, ID, bpy_struct):
    """Procedural musgrave texture"""

    dimension_max: float
    """ Highest fractal dimension

    :type: float
    """

    gain: float
    """ The gain multiplier

    :type: float
    """

    lacunarity: float
    """ Gap between successive frequencies

    :type: float
    """

    musgrave_type: typing.Literal[
        "MULTIFRACTAL",
        "RIDGED_MULTIFRACTAL",
        "HYBRID_MULTIFRACTAL",
        "FBM",
        "HETERO_TERRAIN",
    ]
    """ Fractal noise algorithm

    :type: typing.Literal['MULTIFRACTAL','RIDGED_MULTIFRACTAL','HYBRID_MULTIFRACTAL','FBM','HETERO_TERRAIN']
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_intensity: float
    """ Intensity of the noise

    :type: float
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    octaves: float
    """ Number of frequencies used

    :type: float
    """

    offset: float
    """ The fractal offset

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NODE_UL_interface_sockets(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NandController(Controller, bpy_struct):
    """Controller passing on events based on a logical NAND operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NearSensor(Sensor, bpy_struct):
    """Sensor to detect nearby objects"""

    distance: float
    """ Trigger distance

    :type: float
    """

    property: str
    """ Only look for objects with this property (blank = all objects)

    :type: str
    """

    reset_distance: float
    """ The distance where the sensor forgets the actor

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NlaStrip(bpy_struct):
    """A container referencing an existing Action"""

    action: Action | None
    """ Action referenced by this strip

    :type: Action | None
    """

    action_frame_end: float
    """ Last frame from action to use

    :type: float
    """

    action_frame_start: float
    """ First frame from action to use

    :type: float
    """

    active: bool | None
    """ NLA Strip is active

    :type: bool | None
    """

    blend_in: float
    """ Number of frames at start of strip to fade in influence

    :type: float
    """

    blend_out: float
    """ 

    :type: float
    """

    blend_type: typing.Literal["REPLACE", "ADD", "SUBTRACT", "MULTIPLY"]
    """ Method used for combining strip's result with accumulated result

    :type: typing.Literal['REPLACE','ADD','SUBTRACT','MULTIPLY']
    """

    extrapolation: typing.Literal["NOTHING", "HOLD", "HOLD_FORWARD"]
    """ Action to take for gaps past the strip extents

    :type: typing.Literal['NOTHING','HOLD','HOLD_FORWARD']
    """

    fcurves: NlaStripFCurves
    """ F-Curves for controlling the strip's influence and timing

    :type: NlaStripFCurves
    """

    frame_end: float
    """ 

    :type: float
    """

    frame_start: float
    """ 

    :type: float
    """

    influence: float
    """ Amount the strip contributes to the current result

    :type: float
    """

    modifiers: bpy_prop_collection[FModifier]
    """ Modifiers affecting all the F-Curves in the referenced Action

    :type: bpy_prop_collection[FModifier]
    """

    mute: bool
    """ NLA Strip is not evaluated

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    repeat: float
    """ Number of times to repeat the action range

    :type: float
    """

    scale: float
    """ Scaling factor for action

    :type: float
    """

    select: bool
    """ NLA Strip is selected

    :type: bool
    """

    strip_time: float
    """ Frame of referenced Action to evaluate

    :type: float
    """

    strips: bpy_prop_collection[NlaStrip]
    """ NLA Strips that this strip acts as a container for (if it is of type Meta)

    :type: bpy_prop_collection[NlaStrip]
    """

    type: typing.Literal["CLIP", "TRANSITION", "META", "SOUND"]
    """ Type of NLA Strip

    :type: typing.Literal['CLIP','TRANSITION','META','SOUND']
    """

    use_animated_influence: bool
    """ Influence setting is controlled by an F-Curve rather than automatically determined

    :type: bool
    """

    use_animated_time: bool
    """ Strip time is controlled by an F-Curve rather than automatically determined

    :type: bool
    """

    use_animated_time_cyclic: bool
    """ Cycle the animated time within the action start & end

    :type: bool
    """

    use_auto_blend: bool
    """ Number of frames for Blending In/Out is automatically determined from overlapping strips

    :type: bool
    """

    use_reverse: bool
    """ NLA Strip is played back in reverse order (only when timing is automatically determined)

    :type: bool
    """

    use_sync_length: bool
    """ Update range of frames referenced from action after tweaking strip and its keyframes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NlaTrack(bpy_struct):
    """A animation layer containing Actions referenced as NLA strips"""

    active: bool | None
    """ NLA Track is active

    :type: bool | None
    """

    is_solo: bool
    """ NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)

    :type: bool
    """

    lock: bool
    """ NLA Track is locked

    :type: bool
    """

    mute: bool
    """ NLA Track is not evaluated

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ NLA Track is selected

    :type: bool
    """

    strips: NlaStrips
    """ NLA Strips on this NLA-track

    :type: NlaStrips
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Node(bpy_struct):
    """Node in a node tree"""

    bl_description: str
    """ 

    :type: str
    """

    bl_height_default: float
    """ 

    :type: float
    """

    bl_height_max: float
    """ 

    :type: float
    """

    bl_height_min: float
    """ 

    :type: float
    """

    bl_icon: typing.Literal[
        "NONE",
        "QUESTION",
        "ERROR",
        "CANCEL",
        "TRIA_RIGHT",
        "TRIA_DOWN",
        "TRIA_LEFT",
        "TRIA_UP",
        "ARROW_LEFTRIGHT",
        "PLUS",
        "DISCLOSURE_TRI_DOWN",
        "DISCLOSURE_TRI_RIGHT",
        "RADIOBUT_OFF",
        "RADIOBUT_ON",
        "MENU_PANEL",
        "BLENDER",
        "GRIP",
        "DOT",
        "COLLAPSEMENU",
        "X",
        "GO_LEFT",
        "PLUG",
        "UI",
        "NODE",
        "NODE_SEL",
        "FULLSCREEN",
        "SPLITSCREEN",
        "RIGHTARROW_THIN",
        "BORDERMOVE",
        "VIEWZOOM",
        "ZOOMIN",
        "ZOOMOUT",
        "PANEL_CLOSE",
        "COPY_ID",
        "EYEDROPPER",
        "LINK_AREA",
        "AUTO",
        "CHECKBOX_DEHLT",
        "CHECKBOX_HLT",
        "UNLOCKED",
        "LOCKED",
        "UNPINNED",
        "PINNED",
        "SCREEN_BACK",
        "RIGHTARROW",
        "DOWNARROW_HLT",
        "DOTSUP",
        "DOTSDOWN",
        "LINK",
        "INLINK",
        "PLUGIN",
        "HELP",
        "GHOST_ENABLED",
        "COLOR",
        "LINKED",
        "UNLINKED",
        "HAND",
        "ZOOM_ALL",
        "ZOOM_SELECTED",
        "ZOOM_PREVIOUS",
        "ZOOM_IN",
        "ZOOM_OUT",
        "RENDER_REGION",
        "BORDER_RECT",
        "BORDER_LASSO",
        "FREEZE",
        "STYLUS_PRESSURE",
        "GHOST_DISABLED",
        "NEW",
        "FILE_TICK",
        "QUIT",
        "URL",
        "RECOVER_LAST",
        "FULLSCREEN_ENTER",
        "FULLSCREEN_EXIT",
        "BLANK1",
        "LAMP",
        "MATERIAL",
        "TEXTURE",
        "ANIM",
        "WORLD",
        "SCENE",
        "EDIT",
        "GAME",
        "RADIO",
        "SCRIPT",
        "PARTICLES",
        "PHYSICS",
        "SPEAKER",
        "TEXTURE_SHADED",
        "VIEW3D",
        "IPO",
        "OOPS",
        "BUTS",
        "FILESEL",
        "IMAGE_COL",
        "INFO",
        "SEQUENCE",
        "TEXT",
        "IMASEL",
        "SOUND",
        "ACTION",
        "NLA",
        "SCRIPTWIN",
        "TIME",
        "NODETREE",
        "LOGIC",
        "CONSOLE",
        "PREFERENCES",
        "CLIP",
        "ASSET_MANAGER",
        "OBJECT_DATAMODE",
        "EDITMODE_HLT",
        "FACESEL_HLT",
        "VPAINT_HLT",
        "TPAINT_HLT",
        "WPAINT_HLT",
        "SCULPTMODE_HLT",
        "POSE_HLT",
        "PARTICLEMODE",
        "LIGHTPAINT",
        "SCENE_DATA",
        "RENDERLAYERS",
        "WORLD_DATA",
        "OBJECT_DATA",
        "MESH_DATA",
        "CURVE_DATA",
        "META_DATA",
        "LATTICE_DATA",
        "LAMP_DATA",
        "MATERIAL_DATA",
        "TEXTURE_DATA",
        "ANIM_DATA",
        "CAMERA_DATA",
        "PARTICLE_DATA",
        "LIBRARY_DATA_DIRECT",
        "GROUP",
        "ARMATURE_DATA",
        "POSE_DATA",
        "BONE_DATA",
        "CONSTRAINT",
        "SHAPEKEY_DATA",
        "CONSTRAINT_BONE",
        "CAMERA_STEREO",
        "PACKAGE",
        "UGLYPACKAGE",
        "BRUSH_DATA",
        "IMAGE_DATA",
        "FILE",
        "FCURVE",
        "FONT_DATA",
        "RENDER_RESULT",
        "SURFACE_DATA",
        "EMPTY_DATA",
        "SETTINGS",
        "RENDER_ANIMATION",
        "RENDER_STILL",
        "LIBRARY_DATA_BROKEN",
        "BOIDS",
        "STRANDS",
        "LIBRARY_DATA_INDIRECT",
        "GREASEPENCIL",
        "LINE_DATA",
        "GROUP_BONE",
        "GROUP_VERTEX",
        "GROUP_VCOL",
        "GROUP_UVS",
        "RNA",
        "RNA_ADD",
        "OUTLINER_OB_EMPTY",
        "OUTLINER_OB_MESH",
        "OUTLINER_OB_CURVE",
        "OUTLINER_OB_LATTICE",
        "OUTLINER_OB_META",
        "OUTLINER_OB_LAMP",
        "OUTLINER_OB_CAMERA",
        "OUTLINER_OB_ARMATURE",
        "OUTLINER_OB_FONT",
        "OUTLINER_OB_SURFACE",
        "OUTLINER_OB_SPEAKER",
        "OUTLINER_OB_FORCE_FIELD",
        "OUTLINER_OB_GROUP_INSTANCE",
        "RESTRICT_COLOR_OFF",
        "RESTRICT_COLOR_ON",
        "RESTRICT_VIEW_OFF",
        "RESTRICT_VIEW_ON",
        "RESTRICT_SELECT_OFF",
        "RESTRICT_SELECT_ON",
        "RESTRICT_RENDER_OFF",
        "RESTRICT_RENDER_ON",
        "OUTLINER_DATA_EMPTY",
        "OUTLINER_DATA_MESH",
        "OUTLINER_DATA_CURVE",
        "OUTLINER_DATA_LATTICE",
        "OUTLINER_DATA_META",
        "OUTLINER_DATA_LAMP",
        "OUTLINER_DATA_CAMERA",
        "OUTLINER_DATA_ARMATURE",
        "OUTLINER_DATA_FONT",
        "OUTLINER_DATA_SURFACE",
        "OUTLINER_DATA_SPEAKER",
        "OUTLINER_DATA_POSE",
        "MESH_PLANE",
        "MESH_CUBE",
        "MESH_CIRCLE",
        "MESH_UVSPHERE",
        "MESH_ICOSPHERE",
        "MESH_GRID",
        "MESH_MONKEY",
        "MESH_CYLINDER",
        "MESH_TORUS",
        "MESH_CONE",
        "MESH_CAPSULE",
        "LAMP_POINT",
        "LAMP_SUN",
        "LAMP_SPOT",
        "LAMP_HEMI",
        "LAMP_AREA",
        "META_EMPTY",
        "META_PLANE",
        "META_CUBE",
        "META_BALL",
        "META_ELLIPSOID",
        "META_CAPSULE",
        "SURFACE_NCURVE",
        "SURFACE_NCIRCLE",
        "SURFACE_NSURFACE",
        "SURFACE_NCYLINDER",
        "SURFACE_NSPHERE",
        "SURFACE_NTORUS",
        "CURVE_BEZCURVE",
        "CURVE_BEZCIRCLE",
        "CURVE_NCURVE",
        "CURVE_NCIRCLE",
        "CURVE_PATH",
        "COLOR_RED",
        "COLOR_GREEN",
        "COLOR_BLUE",
        "TRIA_RIGHT_BAR",
        "TRIA_DOWN_BAR",
        "TRIA_LEFT_BAR",
        "TRIA_UP_BAR",
        "FORCE_FORCE",
        "FORCE_WIND",
        "FORCE_VORTEX",
        "FORCE_MAGNETIC",
        "FORCE_HARMONIC",
        "FORCE_CHARGE",
        "FORCE_LENNARDJONES",
        "FORCE_TEXTURE",
        "FORCE_CURVE",
        "FORCE_BOID",
        "FORCE_TURBULENCE",
        "FORCE_DRAG",
        "FORCE_SMOKEFLOW",
        "NODE_INSERT_ON",
        "NODE_INSERT_OFF",
        "MODIFIER",
        "MOD_WAVE",
        "MOD_BUILD",
        "MOD_DECIM",
        "MOD_MIRROR",
        "MOD_SOFT",
        "MOD_SUBSURF",
        "HOOK",
        "MOD_PHYSICS",
        "MOD_PARTICLES",
        "MOD_BOOLEAN",
        "MOD_EDGESPLIT",
        "MOD_ARRAY",
        "MOD_UVPROJECT",
        "MOD_DISPLACE",
        "MOD_CURVE",
        "MOD_LATTICE",
        "CONSTRAINT_DATA",
        "MOD_ARMATURE",
        "MOD_SHRINKWRAP",
        "MOD_CAST",
        "MOD_MESHDEFORM",
        "MOD_BEVEL",
        "MOD_SMOOTH",
        "MOD_SIMPLEDEFORM",
        "MOD_MASK",
        "MOD_CLOTH",
        "MOD_EXPLODE",
        "MOD_FLUIDSIM",
        "MOD_MULTIRES",
        "MOD_SMOKE",
        "MOD_SOLIDIFY",
        "MOD_SCREW",
        "MOD_VERTEX_WEIGHT",
        "MOD_DYNAMICPAINT",
        "MOD_REMESH",
        "MOD_OCEAN",
        "MOD_WARP",
        "MOD_SKIN",
        "MOD_TRIANGULATE",
        "MOD_WIREFRAME",
        "MOD_DATA_TRANSFER",
        "MOD_NORMALEDIT",
        "REC",
        "PLAY",
        "FF",
        "REW",
        "PAUSE",
        "PREV_KEYFRAME",
        "NEXT_KEYFRAME",
        "PLAY_AUDIO",
        "PLAY_REVERSE",
        "PREVIEW_RANGE",
        "ACTION_TWEAK",
        "PMARKER_ACT",
        "PMARKER_SEL",
        "PMARKER",
        "MARKER_HLT",
        "MARKER",
        "SPACE2",
        "SPACE3",
        "KEYINGSET",
        "KEY_DEHLT",
        "KEY_HLT",
        "MUTE_IPO_OFF",
        "MUTE_IPO_ON",
        "VISIBLE_IPO_OFF",
        "VISIBLE_IPO_ON",
        "DRIVER",
        "SOLO_OFF",
        "SOLO_ON",
        "FRAME_PREV",
        "FRAME_NEXT",
        "NLA_PUSHDOWN",
        "IPO_CONSTANT",
        "IPO_LINEAR",
        "IPO_BEZIER",
        "IPO_SINE",
        "IPO_QUAD",
        "IPO_CUBIC",
        "IPO_QUART",
        "IPO_QUINT",
        "IPO_EXPO",
        "IPO_CIRC",
        "IPO_BOUNCE",
        "IPO_ELASTIC",
        "IPO_BACK",
        "IPO_EASE_IN",
        "IPO_EASE_OUT",
        "IPO_EASE_IN_OUT",
        "NORMALIZE_FCURVES",
        "VERTEXSEL",
        "EDGESEL",
        "FACESEL",
        "LOOPSEL",
        "ROTATE",
        "CURSOR",
        "ROTATECOLLECTION",
        "ROTATECENTER",
        "ROTACTIVE",
        "ALIGN",
        "SMOOTHCURVE",
        "SPHERECURVE",
        "ROOTCURVE",
        "SHARPCURVE",
        "LINCURVE",
        "NOCURVE",
        "RNDCURVE",
        "PROP_OFF",
        "PROP_ON",
        "PROP_CON",
        "SCULPT_DYNTOPO",
        "PARTICLE_POINT",
        "PARTICLE_TIP",
        "PARTICLE_PATH",
        "MAN_TRANS",
        "MAN_ROT",
        "MAN_SCALE",
        "MANIPUL",
        "SNAP_OFF",
        "SNAP_ON",
        "SNAP_NORMAL",
        "SNAP_GRID",
        "SNAP_VERTEX",
        "SNAP_EDGE",
        "SNAP_FACE",
        "SNAP_VOLUME",
        "SNAP_INCREMENT",
        "STICKY_UVS_LOC",
        "STICKY_UVS_DISABLE",
        "STICKY_UVS_VERT",
        "CLIPUV_DEHLT",
        "CLIPUV_HLT",
        "SNAP_PEEL_OBJECT",
        "GRID",
        "PASTEDOWN",
        "COPYDOWN",
        "PASTEFLIPUP",
        "PASTEFLIPDOWN",
        "SNAP_SURFACE",
        "AUTOMERGE_ON",
        "AUTOMERGE_OFF",
        "RETOPO",
        "UV_VERTEXSEL",
        "UV_EDGESEL",
        "UV_FACESEL",
        "UV_ISLANDSEL",
        "UV_SYNC_SELECT",
        "BBOX",
        "WIRE",
        "SOLID",
        "SMOOTH",
        "POTATO",
        "ORTHO",
        "LOCKVIEW_OFF",
        "LOCKVIEW_ON",
        "AXIS_SIDE",
        "AXIS_FRONT",
        "AXIS_TOP",
        "NDOF_DOM",
        "NDOF_TURN",
        "NDOF_FLY",
        "NDOF_TRANS",
        "LAYER_USED",
        "LAYER_ACTIVE",
        "SORTALPHA",
        "SORTBYEXT",
        "SORTTIME",
        "SORTSIZE",
        "LONGDISPLAY",
        "SHORTDISPLAY",
        "GHOST",
        "IMGDISPLAY",
        "SAVE_AS",
        "SAVE_COPY",
        "BOOKMARKS",
        "FONTPREVIEW",
        "FILTER",
        "NEWFOLDER",
        "OPEN_RECENT",
        "FILE_PARENT",
        "FILE_REFRESH",
        "FILE_FOLDER",
        "FILE_BLANK",
        "FILE_BLEND",
        "FILE_IMAGE",
        "FILE_MOVIE",
        "FILE_SCRIPT",
        "FILE_SOUND",
        "FILE_FONT",
        "FILE_TEXT",
        "RECOVER_AUTO",
        "SAVE_PREFS",
        "LINK_BLEND",
        "APPEND_BLEND",
        "IMPORT",
        "EXPORT",
        "EXTERNAL_DATA",
        "LOAD_FACTORY",
        "LOOP_BACK",
        "LOOP_FORWARDS",
        "BACK",
        "FORWARD",
        "FILE_HIDDEN",
        "FILE_BACKUP",
        "DISK_DRIVE",
        "MATPLANE",
        "MATSPHERE",
        "MATCUBE",
        "MONKEY",
        "HAIR",
        "ALIASED",
        "ANTIALIASED",
        "MAT_SPHERE_SKY",
        "WORDWRAP_OFF",
        "WORDWRAP_ON",
        "SYNTAX_OFF",
        "SYNTAX_ON",
        "LINENUMBERS_OFF",
        "LINENUMBERS_ON",
        "SCRIPTPLUGINS",
        "SEQ_SEQUENCER",
        "SEQ_PREVIEW",
        "SEQ_LUMA_WAVEFORM",
        "SEQ_CHROMA_SCOPE",
        "SEQ_HISTOGRAM",
        "SEQ_SPLITVIEW",
        "IMAGE_RGB",
        "IMAGE_RGB_ALPHA",
        "IMAGE_ALPHA",
        "IMAGE_ZDEPTH",
        "IMAGEFILE",
        "BRUSH_ADD",
        "BRUSH_BLOB",
        "BRUSH_BLUR",
        "BRUSH_CLAY",
        "BRUSH_CLAY_STRIPS",
        "BRUSH_CLONE",
        "BRUSH_CREASE",
        "BRUSH_DARKEN",
        "BRUSH_FILL",
        "BRUSH_FLATTEN",
        "BRUSH_GRAB",
        "BRUSH_INFLATE",
        "BRUSH_LAYER",
        "BRUSH_LIGHTEN",
        "BRUSH_MASK",
        "BRUSH_MIX",
        "BRUSH_MULTIPLY",
        "BRUSH_NUDGE",
        "BRUSH_PINCH",
        "BRUSH_SCRAPE",
        "BRUSH_SCULPT_DRAW",
        "BRUSH_SMEAR",
        "BRUSH_SMOOTH",
        "BRUSH_SNAKE_HOOK",
        "BRUSH_SOFTEN",
        "BRUSH_SUBTRACT",
        "BRUSH_TEXDRAW",
        "BRUSH_TEXFILL",
        "BRUSH_TEXMASK",
        "BRUSH_THUMB",
        "BRUSH_ROTATE",
        "BRUSH_VERTEXDRAW",
        "MATCAP_01",
        "MATCAP_02",
        "MATCAP_03",
        "MATCAP_04",
        "MATCAP_05",
        "MATCAP_06",
        "MATCAP_07",
        "MATCAP_08",
        "MATCAP_09",
        "MATCAP_10",
        "MATCAP_11",
        "MATCAP_12",
        "MATCAP_13",
        "MATCAP_14",
        "MATCAP_15",
        "MATCAP_16",
        "MATCAP_17",
        "MATCAP_18",
        "MATCAP_19",
        "MATCAP_20",
        "MATCAP_21",
        "MATCAP_22",
        "MATCAP_23",
        "MATCAP_24",
    ]
    """ The node icon

    :type: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24']
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ The node label

    :type: str
    """

    bl_static_type: typing.Literal["CUSTOM"]
    """ Node type (deprecated, use with care)

    :type: typing.Literal['CUSTOM']
    """

    bl_width_default: float
    """ 

    :type: float
    """

    bl_width_max: float
    """ 

    :type: float
    """

    bl_width_min: float
    """ 

    :type: float
    """

    color: bpy_prop_array[float]
    """ Custom color of the node body

    :type: bpy_prop_array[float]
    """

    dimensions: bpy_prop_array[float]
    """ Absolute bounding box dimensions of the node

    :type: bpy_prop_array[float]
    """

    height: float
    """ Height of the node

    :type: float
    """

    hide: bool
    """ 

    :type: bool
    """

    inputs: NodeInputs
    """ 

    :type: NodeInputs
    """

    internal_links: bpy_prop_collection[NodeLink]
    """ Internal input-to-output connections for muting

    :type: bpy_prop_collection[NodeLink]
    """

    label: str
    """ Optional custom node label

    :type: str
    """

    location: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    mute: bool
    """ 

    :type: bool
    """

    name: str
    """ Unique node identifier

    :type: str
    """

    outputs: NodeOutputs
    """ 

    :type: NodeOutputs
    """

    parent: typing_extensions.Self | None
    """ Parent this node is attached to

    :type: typing_extensions.Self | None
    """

    select: bool
    """ Node selection state

    :type: bool
    """

    shading_compatibility: set[typing.Literal["OLD_SHADING", "NEW_SHADING"]]
    """ 

    :type: set[typing.Literal['OLD_SHADING','NEW_SHADING']]
    """

    show_options: bool
    """ 

    :type: bool
    """

    show_preview: bool
    """ 

    :type: bool
    """

    show_texture: bool
    """ Draw node in viewport textured draw mode

    :type: bool
    """

    type: typing.Literal["CUSTOM"]
    """ Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)

    :type: typing.Literal['CUSTOM']
    """

    use_custom_color: bool
    """ Use custom color for the node

    :type: bool
    """

    width: float
    """ Width of the node

    :type: float
    """

    width_hidden: float
    """ Width of the node in hidden state

    :type: float
    """

    def socket_value_update(self, context: Context):
        """Update after property changes

        :param context:
        :type context: Context
        """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def poll(cls, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """

    def poll_instance(self, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    def insert_link(self, link: NodeLink):
        """Handle creation of a link to or from the node

        :param link: Link, Node link that will be inserted
        :type link: NodeLink
        """

    def init(self, context: Context):
        """Initialize a new instance of this node

        :param context:
        :type context: Context
        """

    def copy(self, node: typing_extensions.Self):
        """Initialize a new instance of this node from an existing node

        :param node: Node, Existing node to copy
        :type node: typing_extensions.Self
        """

    def free(self):
        """Clean up node on removal"""

    def draw_buttons(self, context: Context, layout: UILayout):
        """Draw node buttons

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    def draw_buttons_ext(self, context: Context, layout: UILayout):
        """Draw node buttons in the sidebar

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    def draw_label(self) -> str:
        """Returns a dynamic label string

        :return: Label
        :rtype: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeCustomGroup(Node, bpy_struct):
    """Base node type for custom registered node group types"""

    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    node_tree: NodeTree | None
    """ 

    :type: NodeTree | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeFrame(NodeInternal, Node, bpy_struct):
    label_size: int
    """ Font size to use for displaying the label

    :type: int
    """

    shrink: bool
    """ Shrink the frame to minimal bounding box

    :type: bool
    """

    text: Text | None
    """ 

    :type: Text | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeGroup(NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    node_tree: NodeTree | None
    """ 

    :type: NodeTree | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeGroupInput(NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeGroupOutput(NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    is_active_output: bool
    """ True if this node is used as the active group output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeInstanceHash(bpy_struct):
    """Hash table containing node instance data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeInternal(Node, bpy_struct):
    @classmethod
    def poll(cls, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """

    def poll_instance(self, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    def draw_buttons(self, context: Context, layout: UILayout):
        """Draw node buttons

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    def draw_buttons_ext(self, context: Context, layout: UILayout):
        """Draw node buttons in the sidebar

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeInternalSocketTemplate(bpy_struct):
    """Type and default value of a node socket"""

    identifier: str
    """ Identifier of the socket

    :type: str
    """

    name: str
    """ Name of the socket

    :type: str
    """

    type: typing.Literal[
        "CUSTOM", "VALUE", "INT", "BOOLEAN", "VECTOR", "STRING", "RGBA", "SHADER"
    ]
    """ Data type of the socket

    :type: typing.Literal['CUSTOM','VALUE','INT','BOOLEAN','VECTOR','STRING','RGBA','SHADER']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeLink(bpy_struct):
    """Link is valid"""

    from_node: Node
    """ 

    :type: Node
    """

    from_socket: NodeSocket
    """ 

    :type: NodeSocket
    """

    is_hidden: bool
    """ Link is hidden due to invisible sockets

    :type: bool
    """

    is_valid: bool
    """ 

    :type: bool
    """

    to_node: Node
    """ 

    :type: Node
    """

    to_socket: NodeSocket
    """ 

    :type: NodeSocket
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeOutputFileSlotFile(bpy_struct):
    """Single layer file slot of the file output node"""

    format: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    path: str
    """ Subpath used for this slot

    :type: str
    """

    use_node_format: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeOutputFileSlotLayer(bpy_struct):
    """Multilayer slot of the file output node"""

    name: str
    """ OpenEXR layer name used for this slot

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeReroute(NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSetting(bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocket(bpy_struct):
    """Input or output socket of a node"""

    bl_idname: str
    """ 

    :type: str
    """

    draw_shape: typing.Literal["CIRCLE", "SQUARE", "DIAMOND"]
    """ Socket shape

    :type: typing.Literal['CIRCLE','SQUARE','DIAMOND']
    """

    enabled: bool
    """ Enable the socket

    :type: bool
    """

    hide: bool
    """ Hide the socket

    :type: bool
    """

    hide_value: bool
    """ Hide the socket input value

    :type: bool
    """

    identifier: str
    """ Unique identifier for mapping sockets

    :type: str
    """

    is_linked: bool
    """ True if the socket is connected

    :type: bool
    """

    is_output: bool
    """ True if the socket is an output, otherwise input

    :type: bool
    """

    link_limit: int
    """ Max number of links allowed for this socket

    :type: int
    """

    name: str
    """ Socket name

    :type: str
    """

    node: Node
    """ Node owning this socket

    :type: Node
    """

    show_expanded: bool
    """ Socket links are expanded in the user interface

    :type: bool
    """

    type: typing.Literal[
        "CUSTOM", "VALUE", "INT", "BOOLEAN", "VECTOR", "STRING", "RGBA", "SHADER"
    ]
    """ Data type

    :type: typing.Literal['CUSTOM','VALUE','INT','BOOLEAN','VECTOR','STRING','RGBA','SHADER']
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    def draw(self, context: Context, layout: UILayout, node: Node, text: str):
        """Draw socket

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
        :type node: Node
        :param text: Text, Text label to draw alongside properties
        :type text: str
        """

    def draw_color(self, context: Context, node: Node) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :param node: Node, Node the socket belongs to
        :type node: Node
        :return: Color
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketBool(NodeSocketStandard, NodeSocket, bpy_struct):
    """Boolean value socket of a node"""

    default_value: bool
    """ Input value used for unconnected socket

    :type: bool
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketColor(NodeSocketStandard, NodeSocket, bpy_struct):
    """RGBA color socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloat(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloatAngle(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloatFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloatPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloatTime(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketFloatUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInt(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketIntFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketIntPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketIntUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterface(bpy_struct):
    """Parameters to define node sockets"""

    bl_socket_idname: str
    """ 

    :type: str
    """

    identifier: str
    """ Unique identifier for mapping sockets

    :type: str
    """

    is_output: bool
    """ True if the socket is an output, otherwise input

    :type: bool
    """

    name: str
    """ Socket name

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw template settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    def draw_color(self, context: Context) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :return: Color
        :rtype: bpy_prop_array[float]
        """

    def register_properties(self, data_rna_type: Struct | None):
        """Define RNA properties of a socket

        :param data_rna_type: Data RNA Type, RNA type for special socket properties
        :type data_rna_type: Struct | None
        """

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str
        """

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceBool(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Boolean value socket of a node"""

    default_value: bool
    """ Input value used for unconnected socket

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceColor(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """RGBA color socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloat(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloatAngle(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloatFactor(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloatPercentage(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloatTime(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceFloatUnsigned(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Floating point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceInt(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceIntFactor(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceIntPercentage(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceIntUnsigned(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceShader(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """Shader socket of a node"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceStandard(NodeSocketInterface, bpy_struct):
    type: typing.Literal[
        "CUSTOM", "VALUE", "INT", "BOOLEAN", "VECTOR", "STRING", "RGBA", "SHADER"
    ]
    """ Data type

    :type: typing.Literal['CUSTOM','VALUE','INT','BOOLEAN','VECTOR','STRING','RGBA','SHADER']
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw template settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """

    def draw_color(self, context: Context) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :return: Color
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceString(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """String socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVector(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorAcceleration(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorDirection(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorEuler(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorTranslation(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorVelocity(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketInterfaceVectorXYZ(
    NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketShader(NodeSocketStandard, NodeSocket, bpy_struct):
    """Shader socket of a node"""

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketStandard(NodeSocket, bpy_struct):
    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    def draw(self, context: Context, layout: UILayout, node: Node, text: str):
        """Draw socket

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
        :type node: Node
        :param text: Text, Text label to draw alongside properties
        :type text: str
        """

    def draw_color(self, context: Context, node: Node) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :param node: Node, Node the socket belongs to
        :type node: Node
        :return: Color
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketString(NodeSocketStandard, NodeSocket, bpy_struct):
    """String socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVector(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorAcceleration(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorDirection(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorEuler(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorTranslation(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorVelocity(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVectorXYZ(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeSocketVirtual(NodeSocketStandard, NodeSocket, bpy_struct):
    """Virtual socket of a node"""

    links: typing.Any
    """ List of node links from or to this socket
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeTree(ID, bpy_struct):
    """Node tree consisting of linked nodes used for shading, textures and compositing"""

    active_input: int | None
    """ Index of the active input

    :type: int | None
    """

    active_output: int | None
    """ Index of the active output

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    bl_description: str
    """ 

    :type: str
    """

    bl_icon: typing.Literal[
        "NONE",
        "QUESTION",
        "ERROR",
        "CANCEL",
        "TRIA_RIGHT",
        "TRIA_DOWN",
        "TRIA_LEFT",
        "TRIA_UP",
        "ARROW_LEFTRIGHT",
        "PLUS",
        "DISCLOSURE_TRI_DOWN",
        "DISCLOSURE_TRI_RIGHT",
        "RADIOBUT_OFF",
        "RADIOBUT_ON",
        "MENU_PANEL",
        "BLENDER",
        "GRIP",
        "DOT",
        "COLLAPSEMENU",
        "X",
        "GO_LEFT",
        "PLUG",
        "UI",
        "NODE",
        "NODE_SEL",
        "FULLSCREEN",
        "SPLITSCREEN",
        "RIGHTARROW_THIN",
        "BORDERMOVE",
        "VIEWZOOM",
        "ZOOMIN",
        "ZOOMOUT",
        "PANEL_CLOSE",
        "COPY_ID",
        "EYEDROPPER",
        "LINK_AREA",
        "AUTO",
        "CHECKBOX_DEHLT",
        "CHECKBOX_HLT",
        "UNLOCKED",
        "LOCKED",
        "UNPINNED",
        "PINNED",
        "SCREEN_BACK",
        "RIGHTARROW",
        "DOWNARROW_HLT",
        "DOTSUP",
        "DOTSDOWN",
        "LINK",
        "INLINK",
        "PLUGIN",
        "HELP",
        "GHOST_ENABLED",
        "COLOR",
        "LINKED",
        "UNLINKED",
        "HAND",
        "ZOOM_ALL",
        "ZOOM_SELECTED",
        "ZOOM_PREVIOUS",
        "ZOOM_IN",
        "ZOOM_OUT",
        "RENDER_REGION",
        "BORDER_RECT",
        "BORDER_LASSO",
        "FREEZE",
        "STYLUS_PRESSURE",
        "GHOST_DISABLED",
        "NEW",
        "FILE_TICK",
        "QUIT",
        "URL",
        "RECOVER_LAST",
        "FULLSCREEN_ENTER",
        "FULLSCREEN_EXIT",
        "BLANK1",
        "LAMP",
        "MATERIAL",
        "TEXTURE",
        "ANIM",
        "WORLD",
        "SCENE",
        "EDIT",
        "GAME",
        "RADIO",
        "SCRIPT",
        "PARTICLES",
        "PHYSICS",
        "SPEAKER",
        "TEXTURE_SHADED",
        "VIEW3D",
        "IPO",
        "OOPS",
        "BUTS",
        "FILESEL",
        "IMAGE_COL",
        "INFO",
        "SEQUENCE",
        "TEXT",
        "IMASEL",
        "SOUND",
        "ACTION",
        "NLA",
        "SCRIPTWIN",
        "TIME",
        "NODETREE",
        "LOGIC",
        "CONSOLE",
        "PREFERENCES",
        "CLIP",
        "ASSET_MANAGER",
        "OBJECT_DATAMODE",
        "EDITMODE_HLT",
        "FACESEL_HLT",
        "VPAINT_HLT",
        "TPAINT_HLT",
        "WPAINT_HLT",
        "SCULPTMODE_HLT",
        "POSE_HLT",
        "PARTICLEMODE",
        "LIGHTPAINT",
        "SCENE_DATA",
        "RENDERLAYERS",
        "WORLD_DATA",
        "OBJECT_DATA",
        "MESH_DATA",
        "CURVE_DATA",
        "META_DATA",
        "LATTICE_DATA",
        "LAMP_DATA",
        "MATERIAL_DATA",
        "TEXTURE_DATA",
        "ANIM_DATA",
        "CAMERA_DATA",
        "PARTICLE_DATA",
        "LIBRARY_DATA_DIRECT",
        "GROUP",
        "ARMATURE_DATA",
        "POSE_DATA",
        "BONE_DATA",
        "CONSTRAINT",
        "SHAPEKEY_DATA",
        "CONSTRAINT_BONE",
        "CAMERA_STEREO",
        "PACKAGE",
        "UGLYPACKAGE",
        "BRUSH_DATA",
        "IMAGE_DATA",
        "FILE",
        "FCURVE",
        "FONT_DATA",
        "RENDER_RESULT",
        "SURFACE_DATA",
        "EMPTY_DATA",
        "SETTINGS",
        "RENDER_ANIMATION",
        "RENDER_STILL",
        "LIBRARY_DATA_BROKEN",
        "BOIDS",
        "STRANDS",
        "LIBRARY_DATA_INDIRECT",
        "GREASEPENCIL",
        "LINE_DATA",
        "GROUP_BONE",
        "GROUP_VERTEX",
        "GROUP_VCOL",
        "GROUP_UVS",
        "RNA",
        "RNA_ADD",
        "OUTLINER_OB_EMPTY",
        "OUTLINER_OB_MESH",
        "OUTLINER_OB_CURVE",
        "OUTLINER_OB_LATTICE",
        "OUTLINER_OB_META",
        "OUTLINER_OB_LAMP",
        "OUTLINER_OB_CAMERA",
        "OUTLINER_OB_ARMATURE",
        "OUTLINER_OB_FONT",
        "OUTLINER_OB_SURFACE",
        "OUTLINER_OB_SPEAKER",
        "OUTLINER_OB_FORCE_FIELD",
        "OUTLINER_OB_GROUP_INSTANCE",
        "RESTRICT_COLOR_OFF",
        "RESTRICT_COLOR_ON",
        "RESTRICT_VIEW_OFF",
        "RESTRICT_VIEW_ON",
        "RESTRICT_SELECT_OFF",
        "RESTRICT_SELECT_ON",
        "RESTRICT_RENDER_OFF",
        "RESTRICT_RENDER_ON",
        "OUTLINER_DATA_EMPTY",
        "OUTLINER_DATA_MESH",
        "OUTLINER_DATA_CURVE",
        "OUTLINER_DATA_LATTICE",
        "OUTLINER_DATA_META",
        "OUTLINER_DATA_LAMP",
        "OUTLINER_DATA_CAMERA",
        "OUTLINER_DATA_ARMATURE",
        "OUTLINER_DATA_FONT",
        "OUTLINER_DATA_SURFACE",
        "OUTLINER_DATA_SPEAKER",
        "OUTLINER_DATA_POSE",
        "MESH_PLANE",
        "MESH_CUBE",
        "MESH_CIRCLE",
        "MESH_UVSPHERE",
        "MESH_ICOSPHERE",
        "MESH_GRID",
        "MESH_MONKEY",
        "MESH_CYLINDER",
        "MESH_TORUS",
        "MESH_CONE",
        "MESH_CAPSULE",
        "LAMP_POINT",
        "LAMP_SUN",
        "LAMP_SPOT",
        "LAMP_HEMI",
        "LAMP_AREA",
        "META_EMPTY",
        "META_PLANE",
        "META_CUBE",
        "META_BALL",
        "META_ELLIPSOID",
        "META_CAPSULE",
        "SURFACE_NCURVE",
        "SURFACE_NCIRCLE",
        "SURFACE_NSURFACE",
        "SURFACE_NCYLINDER",
        "SURFACE_NSPHERE",
        "SURFACE_NTORUS",
        "CURVE_BEZCURVE",
        "CURVE_BEZCIRCLE",
        "CURVE_NCURVE",
        "CURVE_NCIRCLE",
        "CURVE_PATH",
        "COLOR_RED",
        "COLOR_GREEN",
        "COLOR_BLUE",
        "TRIA_RIGHT_BAR",
        "TRIA_DOWN_BAR",
        "TRIA_LEFT_BAR",
        "TRIA_UP_BAR",
        "FORCE_FORCE",
        "FORCE_WIND",
        "FORCE_VORTEX",
        "FORCE_MAGNETIC",
        "FORCE_HARMONIC",
        "FORCE_CHARGE",
        "FORCE_LENNARDJONES",
        "FORCE_TEXTURE",
        "FORCE_CURVE",
        "FORCE_BOID",
        "FORCE_TURBULENCE",
        "FORCE_DRAG",
        "FORCE_SMOKEFLOW",
        "NODE_INSERT_ON",
        "NODE_INSERT_OFF",
        "MODIFIER",
        "MOD_WAVE",
        "MOD_BUILD",
        "MOD_DECIM",
        "MOD_MIRROR",
        "MOD_SOFT",
        "MOD_SUBSURF",
        "HOOK",
        "MOD_PHYSICS",
        "MOD_PARTICLES",
        "MOD_BOOLEAN",
        "MOD_EDGESPLIT",
        "MOD_ARRAY",
        "MOD_UVPROJECT",
        "MOD_DISPLACE",
        "MOD_CURVE",
        "MOD_LATTICE",
        "CONSTRAINT_DATA",
        "MOD_ARMATURE",
        "MOD_SHRINKWRAP",
        "MOD_CAST",
        "MOD_MESHDEFORM",
        "MOD_BEVEL",
        "MOD_SMOOTH",
        "MOD_SIMPLEDEFORM",
        "MOD_MASK",
        "MOD_CLOTH",
        "MOD_EXPLODE",
        "MOD_FLUIDSIM",
        "MOD_MULTIRES",
        "MOD_SMOKE",
        "MOD_SOLIDIFY",
        "MOD_SCREW",
        "MOD_VERTEX_WEIGHT",
        "MOD_DYNAMICPAINT",
        "MOD_REMESH",
        "MOD_OCEAN",
        "MOD_WARP",
        "MOD_SKIN",
        "MOD_TRIANGULATE",
        "MOD_WIREFRAME",
        "MOD_DATA_TRANSFER",
        "MOD_NORMALEDIT",
        "REC",
        "PLAY",
        "FF",
        "REW",
        "PAUSE",
        "PREV_KEYFRAME",
        "NEXT_KEYFRAME",
        "PLAY_AUDIO",
        "PLAY_REVERSE",
        "PREVIEW_RANGE",
        "ACTION_TWEAK",
        "PMARKER_ACT",
        "PMARKER_SEL",
        "PMARKER",
        "MARKER_HLT",
        "MARKER",
        "SPACE2",
        "SPACE3",
        "KEYINGSET",
        "KEY_DEHLT",
        "KEY_HLT",
        "MUTE_IPO_OFF",
        "MUTE_IPO_ON",
        "VISIBLE_IPO_OFF",
        "VISIBLE_IPO_ON",
        "DRIVER",
        "SOLO_OFF",
        "SOLO_ON",
        "FRAME_PREV",
        "FRAME_NEXT",
        "NLA_PUSHDOWN",
        "IPO_CONSTANT",
        "IPO_LINEAR",
        "IPO_BEZIER",
        "IPO_SINE",
        "IPO_QUAD",
        "IPO_CUBIC",
        "IPO_QUART",
        "IPO_QUINT",
        "IPO_EXPO",
        "IPO_CIRC",
        "IPO_BOUNCE",
        "IPO_ELASTIC",
        "IPO_BACK",
        "IPO_EASE_IN",
        "IPO_EASE_OUT",
        "IPO_EASE_IN_OUT",
        "NORMALIZE_FCURVES",
        "VERTEXSEL",
        "EDGESEL",
        "FACESEL",
        "LOOPSEL",
        "ROTATE",
        "CURSOR",
        "ROTATECOLLECTION",
        "ROTATECENTER",
        "ROTACTIVE",
        "ALIGN",
        "SMOOTHCURVE",
        "SPHERECURVE",
        "ROOTCURVE",
        "SHARPCURVE",
        "LINCURVE",
        "NOCURVE",
        "RNDCURVE",
        "PROP_OFF",
        "PROP_ON",
        "PROP_CON",
        "SCULPT_DYNTOPO",
        "PARTICLE_POINT",
        "PARTICLE_TIP",
        "PARTICLE_PATH",
        "MAN_TRANS",
        "MAN_ROT",
        "MAN_SCALE",
        "MANIPUL",
        "SNAP_OFF",
        "SNAP_ON",
        "SNAP_NORMAL",
        "SNAP_GRID",
        "SNAP_VERTEX",
        "SNAP_EDGE",
        "SNAP_FACE",
        "SNAP_VOLUME",
        "SNAP_INCREMENT",
        "STICKY_UVS_LOC",
        "STICKY_UVS_DISABLE",
        "STICKY_UVS_VERT",
        "CLIPUV_DEHLT",
        "CLIPUV_HLT",
        "SNAP_PEEL_OBJECT",
        "GRID",
        "PASTEDOWN",
        "COPYDOWN",
        "PASTEFLIPUP",
        "PASTEFLIPDOWN",
        "SNAP_SURFACE",
        "AUTOMERGE_ON",
        "AUTOMERGE_OFF",
        "RETOPO",
        "UV_VERTEXSEL",
        "UV_EDGESEL",
        "UV_FACESEL",
        "UV_ISLANDSEL",
        "UV_SYNC_SELECT",
        "BBOX",
        "WIRE",
        "SOLID",
        "SMOOTH",
        "POTATO",
        "ORTHO",
        "LOCKVIEW_OFF",
        "LOCKVIEW_ON",
        "AXIS_SIDE",
        "AXIS_FRONT",
        "AXIS_TOP",
        "NDOF_DOM",
        "NDOF_TURN",
        "NDOF_FLY",
        "NDOF_TRANS",
        "LAYER_USED",
        "LAYER_ACTIVE",
        "SORTALPHA",
        "SORTBYEXT",
        "SORTTIME",
        "SORTSIZE",
        "LONGDISPLAY",
        "SHORTDISPLAY",
        "GHOST",
        "IMGDISPLAY",
        "SAVE_AS",
        "SAVE_COPY",
        "BOOKMARKS",
        "FONTPREVIEW",
        "FILTER",
        "NEWFOLDER",
        "OPEN_RECENT",
        "FILE_PARENT",
        "FILE_REFRESH",
        "FILE_FOLDER",
        "FILE_BLANK",
        "FILE_BLEND",
        "FILE_IMAGE",
        "FILE_MOVIE",
        "FILE_SCRIPT",
        "FILE_SOUND",
        "FILE_FONT",
        "FILE_TEXT",
        "RECOVER_AUTO",
        "SAVE_PREFS",
        "LINK_BLEND",
        "APPEND_BLEND",
        "IMPORT",
        "EXPORT",
        "EXTERNAL_DATA",
        "LOAD_FACTORY",
        "LOOP_BACK",
        "LOOP_FORWARDS",
        "BACK",
        "FORWARD",
        "FILE_HIDDEN",
        "FILE_BACKUP",
        "DISK_DRIVE",
        "MATPLANE",
        "MATSPHERE",
        "MATCUBE",
        "MONKEY",
        "HAIR",
        "ALIASED",
        "ANTIALIASED",
        "MAT_SPHERE_SKY",
        "WORDWRAP_OFF",
        "WORDWRAP_ON",
        "SYNTAX_OFF",
        "SYNTAX_ON",
        "LINENUMBERS_OFF",
        "LINENUMBERS_ON",
        "SCRIPTPLUGINS",
        "SEQ_SEQUENCER",
        "SEQ_PREVIEW",
        "SEQ_LUMA_WAVEFORM",
        "SEQ_CHROMA_SCOPE",
        "SEQ_HISTOGRAM",
        "SEQ_SPLITVIEW",
        "IMAGE_RGB",
        "IMAGE_RGB_ALPHA",
        "IMAGE_ALPHA",
        "IMAGE_ZDEPTH",
        "IMAGEFILE",
        "BRUSH_ADD",
        "BRUSH_BLOB",
        "BRUSH_BLUR",
        "BRUSH_CLAY",
        "BRUSH_CLAY_STRIPS",
        "BRUSH_CLONE",
        "BRUSH_CREASE",
        "BRUSH_DARKEN",
        "BRUSH_FILL",
        "BRUSH_FLATTEN",
        "BRUSH_GRAB",
        "BRUSH_INFLATE",
        "BRUSH_LAYER",
        "BRUSH_LIGHTEN",
        "BRUSH_MASK",
        "BRUSH_MIX",
        "BRUSH_MULTIPLY",
        "BRUSH_NUDGE",
        "BRUSH_PINCH",
        "BRUSH_SCRAPE",
        "BRUSH_SCULPT_DRAW",
        "BRUSH_SMEAR",
        "BRUSH_SMOOTH",
        "BRUSH_SNAKE_HOOK",
        "BRUSH_SOFTEN",
        "BRUSH_SUBTRACT",
        "BRUSH_TEXDRAW",
        "BRUSH_TEXFILL",
        "BRUSH_TEXMASK",
        "BRUSH_THUMB",
        "BRUSH_ROTATE",
        "BRUSH_VERTEXDRAW",
        "MATCAP_01",
        "MATCAP_02",
        "MATCAP_03",
        "MATCAP_04",
        "MATCAP_05",
        "MATCAP_06",
        "MATCAP_07",
        "MATCAP_08",
        "MATCAP_09",
        "MATCAP_10",
        "MATCAP_11",
        "MATCAP_12",
        "MATCAP_13",
        "MATCAP_14",
        "MATCAP_15",
        "MATCAP_16",
        "MATCAP_17",
        "MATCAP_18",
        "MATCAP_19",
        "MATCAP_20",
        "MATCAP_21",
        "MATCAP_22",
        "MATCAP_23",
        "MATCAP_24",
    ]
    """ The node tree icon

    :type: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24']
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ The node tree label

    :type: str
    """

    grease_pencil: GreasePencil | None
    """ Grease Pencil data-block

    :type: GreasePencil | None
    """

    inputs: NodeTreeInputs
    """ Node tree inputs

    :type: NodeTreeInputs
    """

    links: NodeLinks
    """ 

    :type: NodeLinks
    """

    nodes: Nodes
    """ 

    :type: Nodes
    """

    outputs: NodeTreeOutputs
    """ Node tree outputs

    :type: NodeTreeOutputs
    """

    type: typing.Literal["SHADER", "TEXTURE", "COMPOSITING"]
    """ Node Tree type (deprecated, bl_idname is the actual node tree type identifier)

    :type: typing.Literal['SHADER','TEXTURE','COMPOSITING']
    """

    view_center: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    def interface_update(self, context: Context):
        """Updated node group interface

        :param context:
        :type context: Context
        """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Check visibility in the editor

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    @classmethod
    def get_from_context(cls, context: Context):
        """Get a node tree from the context

                :param context:
                :type context: Context
                :return: result_1, Active node tree from context, `NodeTree`

        result_2, ID data-block that owns the node tree, `ID`

        result_3, Original ID data-block selected from the context, `ID`
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NodeTreePath(bpy_struct):
    """Element of the node space tree path"""

    node_tree: NodeTree
    """ Base node tree from context

    :type: NodeTree
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NoiseTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NorController(Controller, bpy_struct):
    """Controller passing on events based on a logical NOR operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class NormalEditModifier(Modifier, bpy_struct):
    """Modifier affecting/generating custom normals"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    mix_factor: float
    """ How much of generated normals to mix with exiting ones

    :type: float
    """

    mix_limit: float
    """ Maximum angle between old and new normals

    :type: float
    """

    mix_mode: typing.Literal["COPY", "ADD", "SUB", "MUL"]
    """ How to mix generated normals with existing ones

    :type: typing.Literal['COPY','ADD','SUB','MUL']
    """

    mode: typing.Literal["RADIAL", "DIRECTIONAL"]
    """ How to affect (generate) normals

    :type: typing.Literal['RADIAL','DIRECTIONAL']
    """

    no_polynors_fix: bool
    """ Do not flip polygons when their normals are not consistent with their newly computed custom vertex normals

    :type: bool
    """

    offset: bpy_prop_array[float]
    """ Offset from object's center

    :type: bpy_prop_array[float]
    """

    target: Object | None
    """ Target object used to affect normals

    :type: Object | None
    """

    use_direction_parallel: bool
    """ Use same direction for all normals, from origin to target's center (Directional mode only)

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selecting/weighting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Object(ID, bpy_struct):
    """Object data-block defining an object in a scene"""

    active_material: Material | None
    """ Active material being displayed

    :type: Material | None
    """

    active_material_index: int | None
    """ Index of active material slot

    :type: int | None
    """

    active_shape_key: ShapeKey | None
    """ Current shape key

    :type: ShapeKey | None
    """

    active_shape_key_index: int | None
    """ Current shape key index

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    animation_visualization: AnimViz
    """ Animation data for this data-block

    :type: AnimViz
    """

    bound_box: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ Object's bounding box in object-space coordinates, all values are -1.0 when not available

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    collision: CollisionSettings
    """ Settings for using the object as a collider in physics simulation

    :type: CollisionSettings
    """

    color: bpy_prop_array[float]
    """ Object color and alpha, used when faces have the ObColor mode enabled

    :type: bpy_prop_array[float]
    """

    constraints: ObjectConstraints
    """ Constraints affecting the transformation of the object

    :type: ObjectConstraints
    """

    cycles: CyclesObjectSettings
    """ Cycles object settings

    :type: CyclesObjectSettings
    """

    cycles_visibility: CyclesVisibilitySettings
    """ Cycles visibility settings

    :type: CyclesVisibilitySettings
    """

    data: Armature | Camera | Curve | GreasePencil | Lattice | Mesh | MetaBall | Speaker | SurfaceCurve | TextCurve | None
    """ 

    :type: Armature | Camera | Curve | GreasePencil | Lattice | Mesh | MetaBall | Speaker | SurfaceCurve | TextCurve | None
    """

    delta_location: bpy_prop_array[float]
    """ Extra translation added to the location of the object

    :type: bpy_prop_array[float]
    """

    delta_rotation_euler: bpy_prop_array[float]
    """ Extra rotation added to the rotation of the object (when using Euler rotations)

    :type: bpy_prop_array[float]
    """

    delta_rotation_quaternion: bpy_prop_array[float]
    """ Extra rotation added to the rotation of the object (when using Quaternion rotations)

    :type: bpy_prop_array[float]
    """

    delta_scale: bpy_prop_array[float]
    """ Extra scaling added to the scale of the object

    :type: bpy_prop_array[float]
    """

    dimensions: bpy_prop_array[float]
    """ Absolute bounding box dimensions of the object

    :type: bpy_prop_array[float]
    """

    draw_bounds_type: typing.Literal["BOX", "SPHERE", "CYLINDER", "CONE", "CAPSULE"]
    """ Object boundary display type

    :type: typing.Literal['BOX','SPHERE','CYLINDER','CONE','CAPSULE']
    """

    draw_type: typing.Literal["BOUNDS", "WIRE", "SOLID", "TEXTURED"]
    """ Maximum draw type to display object with in viewport

    :type: typing.Literal['BOUNDS','WIRE','SOLID','TEXTURED']
    """

    dupli_faces_scale: float
    """ Scale the DupliFace objects

    :type: float
    """

    dupli_frames_end: int
    """ End frame for DupliFrames

    :type: int
    """

    dupli_frames_off: int
    """ Recurring frames to exclude from the Dupliframes

    :type: int
    """

    dupli_frames_on: int
    """ Number of frames to use between DupOff frames

    :type: int
    """

    dupli_frames_start: int
    """ Start frame for DupliFrames

    :type: int
    """

    dupli_group: Group | None
    """ Instance an existing group

    :type: Group | None
    """

    dupli_list: bpy_prop_collection[DupliObject]
    """ Object duplis

    :type: bpy_prop_collection[DupliObject]
    """

    dupli_type: typing.Literal["NONE", "FRAMES", "VERTS", "FACES", "GROUP"]
    """ If not None, object duplication method to use

    :type: typing.Literal['NONE','FRAMES','VERTS','FACES','GROUP']
    """

    empty_draw_size: float
    """ Size of display for empties in the viewport

    :type: float
    """

    empty_draw_type: typing.Literal[
        "PLAIN_AXES",
        "ARROWS",
        "SINGLE_ARROW",
        "CIRCLE",
        "CUBE",
        "SPHERE",
        "CONE",
        "IMAGE",
    ]
    """ Viewport display style for empties

    :type: typing.Literal['PLAIN_AXES','ARROWS','SINGLE_ARROW','CIRCLE','CUBE','SPHERE','CONE','IMAGE']
    """

    empty_image_offset: bpy_prop_array[float]
    """ Origin offset distance

    :type: bpy_prop_array[float]
    """

    field: FieldSettings
    """ Settings for using the object as a field in physics simulation

    :type: FieldSettings
    """

    game: GameObjectSettings
    """ Game engine related settings for the object

    :type: GameObjectSettings
    """

    grease_pencil: GreasePencil | None
    """ Grease Pencil data-block

    :type: GreasePencil | None
    """

    hide: bool
    """ Restrict visibility in the viewport

    :type: bool
    """

    hide_render: bool
    """ Restrict renderability

    :type: bool
    """

    hide_select: bool
    """ Restrict selection in the viewport

    :type: bool
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    is_duplicator: bool
    """ 

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Layers the object is on

    :type: bpy_prop_array[bool]
    """

    layers_local_view: bpy_prop_array[bool]
    """ 3D local view layers the object is on

    :type: bpy_prop_array[bool]
    """

    location: bpy_prop_array[float]
    """ Location of the object

    :type: bpy_prop_array[float]
    """

    lock_location: bpy_prop_array[bool]
    """ Lock editing of location in the interface

    :type: bpy_prop_array[bool]
    """

    lock_rotation: bpy_prop_array[bool]
    """ Lock editing of rotation in the interface

    :type: bpy_prop_array[bool]
    """

    lock_rotation_w: bool
    """ Lock editing of 'angle' component of four-component rotations in the interface

    :type: bool
    """

    lock_rotations_4d: bool
    """ Lock editing of four component rotations by components (instead of as Eulers)

    :type: bool
    """

    lock_scale: bpy_prop_array[bool]
    """ Lock editing of scale in the interface

    :type: bpy_prop_array[bool]
    """

    lod_factor: float
    """ The factor applied to distance computed in Lod

    :type: float
    """

    lod_levels: bpy_prop_collection[LodLevel]
    """ A collection of detail levels to automatically switch between

    :type: bpy_prop_collection[LodLevel]
    """

    material_slots: bpy_prop_collection[MaterialSlot]
    """ Material slots in the object

    :type: bpy_prop_collection[MaterialSlot]
    """

    matrix_basis: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    matrix_local: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Parent relative transformation matrix - WARNING: Only takes into account 'Object' parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    matrix_parent_inverse: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Inverse of object's parent matrix at time of parenting

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    matrix_world: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Worldspace transformation matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    mode: typing.Literal[
        "OBJECT",
        "EDIT",
        "POSE",
        "SCULPT",
        "VERTEX_PAINT",
        "WEIGHT_PAINT",
        "TEXTURE_PAINT",
        "PARTICLE_EDIT",
        "GPENCIL_EDIT",
    ]
    """ Object interaction mode

    :type: typing.Literal['OBJECT','EDIT','POSE','SCULPT','VERTEX_PAINT','WEIGHT_PAINT','TEXTURE_PAINT','PARTICLE_EDIT','GPENCIL_EDIT']
    """

    modifiers: ObjectModifiers
    """ Modifiers affecting the geometric data of the object

    :type: ObjectModifiers
    """

    motion_path: MotionPath
    """ Motion Path for this element

    :type: MotionPath
    """

    parent: typing_extensions.Self | None
    """ Parent Object

    :type: typing_extensions.Self | None
    """

    parent_bone: str
    """ Name of parent bone in case of a bone parenting relation

    :type: str
    """

    parent_type: typing.Literal[
        "OBJECT", "ARMATURE", "LATTICE", "VERTEX", "VERTEX_3", "BONE"
    ]
    """ Type of parent relation

    :type: typing.Literal['OBJECT','ARMATURE','LATTICE','VERTEX','VERTEX_3','BONE']
    """

    parent_vertices: bpy_prop_array[int]
    """ Indices of vertices in case of a vertex parenting relation

    :type: bpy_prop_array[int]
    """

    particle_systems: ParticleSystems
    """ Particle systems emitted from the object

    :type: ParticleSystems
    """

    pass_index: int
    """ Index number for the "Object Index" render pass

    :type: int
    """

    pose: Pose
    """ Current pose for armatures

    :type: Pose
    """

    pose_library: Action | None
    """ Action used as a pose library for armatures

    :type: Action | None
    """

    proxy: typing_extensions.Self
    """ Library object this proxy object controls

    :type: typing_extensions.Self
    """

    proxy_group: typing_extensions.Self
    """ Library group duplicator object this proxy object controls

    :type: typing_extensions.Self
    """

    rigid_body: RigidBodyObject
    """ Settings for rigid body simulation

    :type: RigidBodyObject
    """

    rigid_body_constraint: RigidBodyConstraint
    """ Constraint constraining rigid bodies

    :type: RigidBodyConstraint
    """

    rotation_axis_angle: bpy_prop_array[float]
    """ Angle of Rotation for Axis-Angle rotation representation

    :type: bpy_prop_array[float]
    """

    rotation_euler: bpy_prop_array[float]
    """ Rotation in Eulers

    :type: bpy_prop_array[float]
    """

    rotation_mode: typing.Literal[
        "QUATERNION", "XYZ", "XZY", "YXZ", "YZX", "ZXY", "ZYX", "AXIS_ANGLE"
    ]
    """ 

    :type: typing.Literal['QUATERNION','XYZ','XZY','YXZ','YZX','ZXY','ZYX','AXIS_ANGLE']
    """

    rotation_quaternion: bpy_prop_array[float]
    """ Rotation in Quaternions

    :type: bpy_prop_array[float]
    """

    scale: bpy_prop_array[float]
    """ Scaling of the object

    :type: bpy_prop_array[float]
    """

    select: bool
    """ Object selection state

    :type: bool
    """

    show_all_edges: bool
    """ Display all edges for mesh objects

    :type: bool
    """

    show_axis: bool
    """ Display the object's origin and axes

    :type: bool
    """

    show_bounds: bool
    """ Display the object's bounds

    :type: bool
    """

    show_name: bool
    """ Display the object's name

    :type: bool
    """

    show_only_shape_key: bool
    """ Always show the current Shape for this Object

    :type: bool
    """

    show_texture_space: bool
    """ Display the object's texture space

    :type: bool
    """

    show_transparent: bool
    """ Display material transparency in the object (unsupported for duplicator drawing)

    :type: bool
    """

    show_wire: bool
    """ Add the object's wireframe over solid drawing

    :type: bool
    """

    show_x_ray: bool
    """ Make the object draw in front of others (unsupported for duplicator drawing)

    :type: bool
    """

    slow_parent_offset: float
    """ Delay in the parent relationship

    :type: float
    """

    soft_body: SoftBodySettings
    """ Settings for soft body simulation

    :type: SoftBodySettings
    """

    track_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis that points in 'forward' direction (applies to DupliFrame when parent 'Follow' is enabled)

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    type: typing.Literal[
        "MESH",
        "CURVE",
        "SURFACE",
        "META",
        "FONT",
        "ARMATURE",
        "LATTICE",
        "EMPTY",
        "CAMERA",
        "LAMP",
        "SPEAKER",
    ]
    """ Type of Object

    :type: typing.Literal['MESH','CURVE','SURFACE','META','FONT','ARMATURE','LATTICE','EMPTY','CAMERA','LAMP','SPEAKER']
    """

    up_axis: typing.Literal["X", "Y", "Z"]
    """ Axis that points in the upward direction (applies to DupliFrame when parent 'Follow' is enabled)

    :type: typing.Literal['X','Y','Z']
    """

    use_dupli_faces_scale: bool
    """ Scale dupli based on face size

    :type: bool
    """

    use_dupli_frames_speed: bool
    """ Set dupliframes to use the current frame instead of parent curve's evaluation time

    :type: bool
    """

    use_dupli_vertices_rotation: bool
    """ Rotate dupli according to vertex normal

    :type: bool
    """

    use_dynamic_topology_sculpting: bool
    """ 

    :type: bool
    """

    use_extra_recalc_data: bool
    """ Refresh this object's data again on frame changes, dependency graph hack

    :type: bool
    """

    use_extra_recalc_object: bool
    """ Refresh this object again on frame changes, dependency graph hack

    :type: bool
    """

    use_shape_key_edit_mode: bool
    """ Apply shape keys in edit mode (for Meshes only)

    :type: bool
    """

    use_slow_parent: bool
    """ Create a delay in the parent relationship (beware: this isn't renderfarm safe and may be invalid after jumping around the timeline)

    :type: bool
    """

    vertex_groups: VertexGroups
    """ Vertex groups of the object

    :type: VertexGroups
    """

    children: typing.Any
    """ All the children of this object
(readonly)"""

    users_group: typing.Any
    """ The groups this object is in
(readonly)"""

    users_scene: typing.Any
    """ The scenes this object is in
(readonly)"""

    def convert_space(
        self,
        pose_bone: PoseBone | None = None,
        matrix: list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
        | None = (
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
        ),
        from_space: typing.Literal["WORLD", "POSE", "LOCAL_WITH_PARENT", "LOCAL"]
        | None = "WORLD",
        to_space: typing.Literal["WORLD", "POSE", "LOCAL_WITH_PARENT", "LOCAL"]
        | None = "WORLD",
    ) -> (
        list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
    ):
        """Convert (transform) the given matrix from one space to another

                :param pose_bone: Bone to use to define spaces (may be None, in which case only the two 'WORLD' and 'LOCAL' spaces are usable)
                :type pose_bone: PoseBone | None
                :param matrix: The matrix to transform
                :type matrix: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]] | None
                :param from_space: The space in which 'matrix' is currently

        WORLD World Space, The most global space in Blender.

        POSE Pose Space, The pose space of a bone (its armature's object space).

        LOCAL_WITH_PARENT Local With Parent, The local space of a bone's parent bone.

        LOCAL Local Space, The local space of an object/bone.
                :type from_space: typing.Literal['WORLD','POSE','LOCAL_WITH_PARENT','LOCAL'] | None
                :param to_space: The space to which you want to transform 'matrix'

        WORLD World Space, The most global space in Blender.

        POSE Pose Space, The pose space of a bone (its armature's object space).

        LOCAL_WITH_PARENT Local With Parent, The local space of a bone's parent bone.

        LOCAL Local Space, The local space of an object/bone.
                :type to_space: typing.Literal['WORLD','POSE','LOCAL_WITH_PARENT','LOCAL'] | None
                :return: The transformed matrix
                :rtype: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
        """

    def calc_matrix_camera(
        self,
        x: int | None = 1,
        y: int | None = 1,
        scale_x: float | None = 1.0,
        scale_y: float | None = 1.0,
    ) -> (
        list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
    ):
        """Generate the camera projection matrix of this object (mostly useful for Camera and Lamp types)

        :param x: Width of the render area
        :type x: int | None
        :param y: Height of the render area
        :type y: int | None
        :param scale_x: Width scaling factor
        :type scale_x: float | None
        :param scale_y: height scaling factor
        :type scale_y: float | None
        :return: The camera projection matrix
        :rtype: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
        """

    def camera_fit_coords(
        self, scene: Scene | None, coordinates: collections.abc.Iterable[float]
    ):
        """Compute the coordinate (and scale for ortho cameras) given object should be to 'see' all given coordinates

                :param scene: Scene to get render size information from, if available
                :type scene: Scene | None
                :param coordinates: Coordinates to fit in
                :type coordinates: collections.abc.Iterable[float]
                :return: co_return, The location to aim to be able to see all given points, float array of 3 items in [-inf, inf]

        scale_return, The ortho scale to aim to be able to see all given points (if relevant), float in [-inf, inf]
        """

    def to_mesh(
        self,
        scene: Scene,
        apply_modifiers: bool | None,
        settings: typing.Literal["PREVIEW", "RENDER"] | None,
        calc_tessface: bool | None = True,
        calc_undeformed: bool | None = False,
    ) -> Mesh:
        """Create a Mesh data-block with modifiers applied

                :param scene: Scene within which to evaluate modifiers
                :type scene: Scene
                :param apply_modifiers: Apply modifiers
                :type apply_modifiers: bool | None
                :param settings: Modifier settings to apply

        PREVIEW Preview, Apply modifier preview settings.

        RENDER Render, Apply modifier render settings.
                :type settings: typing.Literal['PREVIEW','RENDER'] | None
                :param calc_tessface: Calculate Tessellation, Calculate tessellation faces
                :type calc_tessface: bool | None
                :param calc_undeformed: Calculate Undeformed, Calculate undeformed vertex coordinates
                :type calc_undeformed: bool | None
                :return: Mesh created from object, remove it if it is only used for export
                :rtype: Mesh
        """

    def dupli_list_create(
        self,
        scene: Scene,
        settings: typing.Literal["VIEWPORT", "PREVIEW", "RENDER"] | None = "VIEWPORT",
    ):
        """Create a list of dupli objects for this object, needs to be freed manually with free_dupli_list to restore the objects real matrix and layers

                :param scene: Scene within which to evaluate duplis
                :type scene: Scene
                :param settings: Generate texture coordinates for rendering

        VIEWPORT Viewport, Generate duplis using viewport settings.

        PREVIEW Preview, Generate duplis using preview settings.

        RENDER Render, Generate duplis using render settings.
                :type settings: typing.Literal['VIEWPORT','PREVIEW','RENDER'] | None
        """

    def dupli_list_clear(self):
        """Free the list of dupli objects"""

    def find_armature(self) -> typing_extensions.Self:
        """Find armature influencing this object as a parent or via a modifier

        :return: Armature object influencing this object or NULL
        :rtype: typing_extensions.Self
        """

    def shape_key_add(
        self, name: str = "Key", from_mix: bool | None = True
    ) -> ShapeKey:
        """Add shape key to this object

        :param name: Unique name for the new keyblock
        :type name: str
        :param from_mix: Create new shape from existing mix of shapes
        :type from_mix: bool | None
        :return: New shape keyblock
        :rtype: ShapeKey
        """

    def shape_key_remove(self, key: ShapeKey):
        """Remove a Shape Key from this object

        :param key: Keyblock to be removed
        :type key: ShapeKey
        """

    def ray_cast(
        self,
        origin: collections.abc.Iterable[float] | None,
        direction: collections.abc.Iterable[float] | None,
        distance: float | None = 1.70141e38,
    ):
        """Cast a ray onto in object space

                :param origin:
                :type origin: collections.abc.Iterable[float] | None
                :param direction:
                :type direction: collections.abc.Iterable[float] | None
                :param distance: Maximum distance
                :type distance: float | None
                :return: result, boolean

        location, The hit location of this ray cast, float array of 3 items in [-inf, inf]

        normal, The face normal at the ray cast hit location, float array of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]
        """

    def closest_point_on_mesh(
        self,
        origin: collections.abc.Iterable[float] | None,
        distance: float | None = 1.84467e19,
    ):
        """Find the nearest point in object space

                :param origin:
                :type origin: collections.abc.Iterable[float] | None
                :param distance: Maximum distance
                :type distance: float | None
                :return: result, boolean

        location, The location on the object closest to the point, float array of 3 items in [-inf, inf]

        normal, The face normal at the closest point, float array of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]
        """

    def is_visible(self, scene: Scene) -> bool:
        """Determine if object is visible in a given scene

        :param scene:
        :type scene: Scene
        :return: Object visibility
        :rtype: bool
        """

    def is_modified(
        self, scene: Scene, settings: typing.Literal["PREVIEW", "RENDER"] | None
    ) -> bool:
        """Determine if this object is modified from the base mesh data

                :param scene:
                :type scene: Scene
                :param settings: Modifier settings to apply

        PREVIEW Preview, Apply modifier preview settings.

        RENDER Render, Apply modifier render settings.
                :type settings: typing.Literal['PREVIEW','RENDER'] | None
                :return: Object visibility
                :rtype: bool
        """

    def is_deform_modified(
        self, scene: Scene, settings: typing.Literal["PREVIEW", "RENDER"] | None
    ) -> bool:
        """Determine if this object is modified by a deformation from the base mesh data

                :param scene:
                :type scene: Scene
                :param settings: Modifier settings to apply

        PREVIEW Preview, Apply modifier preview settings.

        RENDER Render, Apply modifier render settings.
                :type settings: typing.Literal['PREVIEW','RENDER'] | None
                :return: Object visibility
                :rtype: bool
        """

    def update_from_editmode(self) -> bool:
        """Load the objects edit-mode data into the object data

        :return: Success
        :rtype: bool
        """

    def cache_release(self):
        """Release memory used by caches associated with this object. Intended to be used by render engines only"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectActivityCulling(bpy_struct):
    """Object activity culling info"""

    logic_radius: float
    """ Distance to begin suspend logic and animation of this object

    :type: float
    """

    physics_radius: float
    """ Distance to begin suspend physics of this object

    :type: float
    """

    use_logic: bool
    """ Suspend logic and animation of this object by its distance to nearest camera

    :type: bool
    """

    use_physics: bool
    """ Suspend physics of this object by its distance to nearest camera

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectActuator(Actuator, bpy_struct):
    """Actuator to control the object movement"""

    angular_velocity: bpy_prop_array[float]
    """ Angular velocity

    :type: bpy_prop_array[float]
    """

    damping: int
    """ Number of frames to reach the target velocity

    :type: int
    """

    derivate_coefficient: float
    """ Not required, high values can cause instability

    :type: float
    """

    force: bpy_prop_array[float]
    """ Force

    :type: bpy_prop_array[float]
    """

    force_max_x: float
    """ Upper limit for X force

    :type: float
    """

    force_max_y: float
    """ Upper limit for Y force

    :type: float
    """

    force_max_z: float
    """ Upper limit for Z force

    :type: float
    """

    force_min_x: float
    """ Lower limit for X force

    :type: float
    """

    force_min_y: float
    """ Lower limit for Y force

    :type: float
    """

    force_min_z: float
    """ Lower limit for Z force

    :type: float
    """

    integral_coefficient: float
    """ Low value (0.01) for slow response, high value (0.5) for fast response

    :type: float
    """

    linear_velocity: bpy_prop_array[float]
    """ Linear velocity (in Servo mode it sets the target relative linear velocity, it will be achieved by automatic application of force - Null velocity is a valid target)

    :type: bpy_prop_array[float]
    """

    mode: typing.Literal["OBJECT_NORMAL", "OBJECT_SERVO", "OBJECT_CHARACTER"]
    """ Specify the motion system

    :type: typing.Literal['OBJECT_NORMAL','OBJECT_SERVO','OBJECT_CHARACTER']
    """

    offset_location: bpy_prop_array[float]
    """ Location

    :type: bpy_prop_array[float]
    """

    offset_rotation: bpy_prop_array[float]
    """ Rotation

    :type: bpy_prop_array[float]
    """

    proportional_coefficient: float
    """ Typical value is 60x integral coefficient

    :type: float
    """

    reference_object: Object | None
    """ Reference object for velocity calculation, leave empty for world reference

    :type: Object | None
    """

    servo_mode: typing.Literal["SERVO_LINEAR", "SERVO_ANGULAR"]
    """ Specify the servo control system

    :type: typing.Literal['SERVO_LINEAR','SERVO_ANGULAR']
    """

    torque: bpy_prop_array[float]
    """ Torque

    :type: bpy_prop_array[float]
    """

    use_add_character_location: bool
    """ Toggle between ADD and SET character location

    :type: bool
    """

    use_add_linear_velocity: bool
    """ Toggles between ADD and SET linV

    :type: bool
    """

    use_character_jump: bool
    """ Make the character jump using the settings in the physics properties

    :type: bool
    """

    use_local_angular_velocity: bool
    """ Angular velocity is defined in local coordinates

    :type: bool
    """

    use_local_force: bool
    """ Force is defined in local coordinates

    :type: bool
    """

    use_local_linear_velocity: bool
    """ Velocity is defined in local coordinates

    :type: bool
    """

    use_local_location: bool
    """ Location is defined in local coordinates

    :type: bool
    """

    use_local_rotation: bool
    """ Rotation is defined in local coordinates

    :type: bool
    """

    use_local_torque: bool
    """ Torque is defined in local coordinates

    :type: bool
    """

    use_servo_limit_x: bool
    """ Set limit to force/torque along the X axis

    :type: bool
    """

    use_servo_limit_y: bool
    """ Set limit to force/torque along the Y axis

    :type: bool
    """

    use_servo_limit_z: bool
    """ Set limit to force/torque along the Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectBase(bpy_struct):
    """An object instance in a scene"""

    layers: bpy_prop_array[bool]
    """ Layers the object base is on

    :type: bpy_prop_array[bool]
    """

    layers_local_view: bpy_prop_array[bool]
    """ 3D local view layers the object base is on

    :type: bpy_prop_array[bool]
    """

    object: Object
    """ Object this base links to

    :type: Object
    """

    select: bool
    """ Object base selection state

    :type: bool
    """

    def layers_from_view(self, view: SpaceView3D):
        """Sets the object layers from a 3D View (use when adding an object in local view)

        :param view:
        :type view: SpaceView3D
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObjectSolverConstraint(Constraint, bpy_struct):
    """Lock motion to the reconstructed object movement"""

    camera: Object | None
    """ Camera to which motion is parented (if empty active scene camera is used)

    :type: Object | None
    """

    clip: MovieClip | None
    """ Movie Clip to get tracking data from

    :type: MovieClip | None
    """

    object: str
    """ Movie tracking object to follow

    :type: str
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ObstacleFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for obstacles in the simulation"""

    impact_factor: float
    """ This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)

    :type: float
    """

    partial_slip_factor: float
    """ Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip

    :type: float
    """

    slip_type: typing.Literal["NOSLIP", "PARTIALSLIP", "FREESLIP"]
    """ 

    :type: typing.Literal['NOSLIP','PARTIALSLIP','FREESLIP']
    """

    use: bool
    """ Object contributes to the fluid simulation

    :type: bool
    """

    use_animated_mesh: bool
    """ Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)

    :type: bool
    """

    volume_initialization: typing.Literal["VOLUME", "SHELL", "BOTH"]
    """ Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)

    :type: typing.Literal['VOLUME','SHELL','BOTH']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OceanModifier(Modifier, bpy_struct):
    """Simulate an ocean surface"""

    bake_foam_fade: float
    """ How much foam accumulates over time (baked ocean only)

    :type: float
    """

    choppiness: float
    """ Choppiness of the wave's crest (adds some horizontal component to the displacement)

    :type: float
    """

    damping: float
    """ Damp reflected waves going in opposite direction to the wind

    :type: float
    """

    depth: float
    """ Depth of the solid ground below the water surface

    :type: float
    """

    filepath: str
    """ Path to a folder to store external baked images

    :type: str
    """

    foam_coverage: float
    """ Amount of generated foam

    :type: float
    """

    foam_layer_name: str
    """ Name of the vertex color layer used for foam

    :type: str
    """

    frame_end: int
    """ End frame of the ocean baking

    :type: int
    """

    frame_start: int
    """ Start frame of the ocean baking

    :type: int
    """

    geometry_mode: typing.Literal["GENERATE", "DISPLACE"]
    """ Method of modifying geometry

    :type: typing.Literal['GENERATE','DISPLACE']
    """

    is_cached: bool
    """ Whether the ocean is using cached data or simulating

    :type: bool
    """

    random_seed: int
    """ Seed of the random generator

    :type: int
    """

    repeat_x: int
    """ Repetitions of the generated surface in X

    :type: int
    """

    repeat_y: int
    """ Repetitions of the generated surface in Y

    :type: int
    """

    resolution: int
    """ Resolution of the generated surface

    :type: int
    """

    size: float
    """ Surface scale factor (does not affect the height of the waves)

    :type: float
    """

    spatial_size: int
    """ Size of the simulation domain (in meters), and of the generated geometry (in BU)

    :type: int
    """

    time: float
    """ Current time of the simulation

    :type: float
    """

    use_foam: bool
    """ Generate foam mask as a vertex color channel

    :type: bool
    """

    use_normals: bool
    """ Output normals for bump mapping - disabling can speed up performance if its not needed

    :type: bool
    """

    wave_alignment: float
    """ How much the waves are aligned to each other

    :type: float
    """

    wave_direction: float
    """ Main direction of the waves when they are (partially) aligned

    :type: float
    """

    wave_scale: float
    """ Scale of the displacement effect

    :type: float
    """

    wave_scale_min: float
    """ Shortest allowed wavelength

    :type: float
    """

    wind_velocity: float
    """ Wind speed

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OceanTexData(bpy_struct):
    """Ocean Texture settings"""

    ocean_object: Object | None
    """ Object containing the ocean modifier

    :type: Object | None
    """

    output: typing.Literal["DISPLACEMENT", "FOAM", "JPLUS", "EMINUS", "EPLUS"]
    """ The data that is output by the texture

    :type: typing.Literal['DISPLACEMENT','FOAM','JPLUS','EMINUS','EPLUS']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OceanTexture(Texture, ID, bpy_struct):
    """Settings for the Ocean texture"""

    ocean: OceanTexData
    """ The ocean data associated with this texture

    :type: OceanTexData
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Operator(bpy_struct):
    """Storage of an operator being executed, or registered after execution"""

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: set[
        typing.Literal[
            "REGISTER",
            "UNDO",
            "UNDO_GROUPED",
            "BLOCKING",
            "MACRO",
            "GRAB_CURSOR",
            "PRESET",
            "INTERNAL",
        ]
    ]
    """ Options for this operator type

    :type: set[typing.Literal['REGISTER','UNDO','UNDO_GROUPED','BLOCKING','MACRO','GRAB_CURSOR','PRESET','INTERNAL']]
    """

    bl_translation_context: str
    """ 

    :type: str
    """

    bl_undo_group: str
    """ 

    :type: str
    """

    has_reports: bool
    """ Operator has a set of reports (warnings and errors) from last execution

    :type: bool
    """

    layout: UILayout
    """ 

    :type: UILayout
    """

    macros: bpy_prop_collection[Macro]
    """ 

    :type: bpy_prop_collection[Macro]
    """

    name: str
    """ 

    :type: str
    """

    options: OperatorOptions
    """ Runtime options

    :type: OperatorOptions
    """

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    bl_property: typing.Any
    """ The name of a property to use as this operators primary property.
Currently this is only used to select the default property when
expanding an operator into a menu.
:type: string"""

    is_registered: bool
    """ 

    :type: bool
    """

    def report(
        self,
        type: set[
            typing.Literal[
                "DEBUG",
                "INFO",
                "OPERATOR",
                "PROPERTY",
                "WARNING",
                "ERROR",
                "ERROR_INVALID_INPUT",
                "ERROR_INVALID_CONTEXT",
                "ERROR_OUT_OF_MEMORY",
            ]
        ]
        | None,
        message: str,
    ):
        """report

        :param type: Type
        :type type: set[typing.Literal['DEBUG','INFO','OPERATOR','PROPERTY','WARNING','ERROR','ERROR_INVALID_INPUT','ERROR_INVALID_CONTEXT','ERROR_OUT_OF_MEMORY']] | None
        :param message: Report Message
        :type message: str
        """

    def is_repeat(self) -> bool:
        """is_repeat

        :return: result
        :rtype: bool
        """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Test if the operator can be called or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def execute(
        self, context: Context
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Execute the operator

                :param context:
                :type context: Context
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    def check(self, context: Context) -> bool:
        """Check the operator settings, return True to signal a change to redraw

        :param context:
        :type context: Context
        :return: result
        :rtype: bool
        """

    def invoke(
        self, context: Context, event: Event
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Invoke the operator

                :param context:
                :type context: Context
                :param event:
                :type event: Event
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    def modal(
        self, context: Context, event: Event
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Modal operator function

                :param context:
                :type context: Context
                :param event:
                :type event: Event
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    def draw(self, context: Context):
        """Draw function for the operator

        :param context:
        :type context: Context
        """

    def cancel(self, context: Context):
        """Called when the operator is canceled

        :param context:
        :type context: Context
        """

    def as_keywords(self, ignore=()):
        """Return a copy of the properties as a dictionary

        :param ignore:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorFileListElement(PropertyGroup, bpy_struct):
    name: str
    """ Name of a file or directory within a file list

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorMacro(bpy_struct):
    """Storage of a sub operator in a macro after it has been added"""

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorMousePath(PropertyGroup, bpy_struct):
    """Mouse path values for operators that record such paths"""

    loc: bpy_prop_array[float]
    """ Mouse location

    :type: bpy_prop_array[float]
    """

    time: float
    """ Time of mouse location

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorOptions(bpy_struct):
    """Runtime options"""

    is_grab_cursor: bool
    """ True when the cursor is grabbed

    :type: bool
    """

    is_invoke: bool
    """ True when invoked (even if only the execute callbacks available)

    :type: bool
    """

    is_repeat: bool
    """ True when run from the redo panel

    :type: bool
    """

    use_cursor_region: bool
    """ Enable to use the region under the cursor for modal execution

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorProperties(bpy_struct):
    """Input properties of an Operator"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OperatorStrokeElement(PropertyGroup, bpy_struct):
    is_start: bool
    """ 

    :type: bool
    """

    location: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    mouse: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    pen_flip: bool
    """ 

    :type: bool
    """

    pressure: float
    """ Tablet pressure

    :type: float
    """

    size: float
    """ Brush Size in screen space

    :type: float
    """

    time: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OrController(Controller, bpy_struct):
    """Controller passing on events based on a logical OR operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OutflowFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for objects removing fluids from the simulation"""

    use: bool
    """ Object contributes to the fluid simulation

    :type: bool
    """

    use_animated_mesh: bool
    """ Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)

    :type: bool
    """

    volume_initialization: typing.Literal["VOLUME", "SHELL", "BOTH"]
    """ Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)

    :type: typing.Literal['VOLUME','SHELL','BOTH']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class OverDropSequence(EffectSequence, Sequence, bpy_struct):
    """Over Drop Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PARTICLE_UL_particle_systems(UIList, bpy_struct):
    def draw_item(
        self,
        context,
        layout,
        data,
        item,
        icon,
        active_data,
        active_propname,
        index,
        flt_flag,
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        :param flt_flag:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PHYSICS_UL_dynapaint_surfaces(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PackedFile(bpy_struct):
    """External file packed into the .blend file"""

    data: str
    """ Raw data (bytes, exact content of the embedded file)

    :type: str
    """

    size: int
    """ Size of packed file in bytes

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Paint(bpy_struct):
    brush: Brush | None
    """ Active Brush

    :type: Brush | None
    """

    cavity_curve: CurveMapping
    """ Editable cavity curve

    :type: CurveMapping
    """

    input_samples: int
    """ Average multiple input samples together to smooth the brush stroke

    :type: int
    """

    palette: Palette | None
    """ Active Palette

    :type: Palette | None
    """

    show_brush: bool
    """ 

    :type: bool
    """

    show_brush_on_surface: bool
    """ 

    :type: bool
    """

    show_low_resolution: bool
    """ For multires, show low resolution while navigating the view

    :type: bool
    """

    tile_offset: bpy_prop_array[float]
    """ Stride at which tiled strokes are copied

    :type: bpy_prop_array[float]
    """

    tile_x: bool
    """ Tile along X axis

    :type: bool
    """

    tile_y: bool
    """ Tile along Y axis

    :type: bool
    """

    tile_z: bool
    """ Tile along Z axis

    :type: bool
    """

    use_cavity: bool
    """ Mask painting according to mesh geometry cavity

    :type: bool
    """

    use_symmetry_feather: bool
    """ Reduce the strength of the brush where it overlaps symmetrical daubs

    :type: bool
    """

    use_symmetry_x: bool
    """ Mirror brush across the X axis

    :type: bool
    """

    use_symmetry_y: bool
    """ Mirror brush across the Y axis

    :type: bool
    """

    use_symmetry_z: bool
    """ Mirror brush across the Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PaintCurve(ID, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Palette(ID, bpy_struct):
    colors: PaletteColors
    """ 

    :type: PaletteColors
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PaletteColor(bpy_struct):
    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    strength: float
    """ 

    :type: float
    """

    weight: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Panel(bpy_struct):
    """Panel containing UI elements"""

    bl_category: str
    """ 

    :type: str
    """

    bl_context: str
    """ The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)

    :type: str
    """

    bl_idname: str
    """ If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is "OBJECT_PT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_PT_hello"

    :type: str
    """

    bl_label: str
    """ The panel label, shows up in the panel header at the right of the triangle used to collapse the panel

    :type: str
    """

    bl_options: set[typing.Literal["DEFAULT_CLOSED", "HIDE_HEADER"]]
    """ Options for this panel type

    :type: set[typing.Literal['DEFAULT_CLOSED','HIDE_HEADER']]
    """

    bl_region_type: typing.Literal[
        "WINDOW",
        "HEADER",
        "CHANNELS",
        "TEMPORARY",
        "UI",
        "TOOLS",
        "TOOL_PROPS",
        "PREVIEW",
    ]
    """ The region where the panel is going to be used in

    :type: typing.Literal['WINDOW','HEADER','CHANNELS','TEMPORARY','UI','TOOLS','TOOL_PROPS','PREVIEW']
    """

    bl_space_type: typing.Literal[
        "EMPTY",
        "VIEW_3D",
        "IMAGE_EDITOR",
        "NODE_EDITOR",
        "SEQUENCE_EDITOR",
        "CLIP_EDITOR",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "TEXT_EDITOR",
        "LOGIC_EDITOR",
        "CONSOLE",
        "INFO",
        "OUTLINER",
        "PROPERTIES",
        "FILE_BROWSER",
        "USER_PREFERENCES",
    ]
    """ The space where the panel is going to be used in

    :type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES']
    """

    bl_translation_context: str | typing.Any
    """ 

    :type: str | typing.Any
    """

    layout: UILayout
    """ Defines the structure of the panel in the UI

    :type: UILayout
    """

    text: str
    """ XXX todo

    :type: str
    """

    use_pin: bool
    """ 

    :type: bool
    """

    is_registered: bool
    """ 

    :type: bool
    """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """If this method returns a non-null output, then the panel can be drawn

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """

    def draw(self, context: Context):
        """Draw UI elements into the panel UI layout

        :param context:
        :type context: Context
        """

    def draw_header(self, context: Context):
        """Draw UI elements into the panel's header UI layout

        :param context:
        :type context: Context
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParentActuator(Actuator, bpy_struct):
    mode: typing.Literal["SETPARENT", "REMOVEPARENT"]
    """ 

    :type: typing.Literal['SETPARENT','REMOVEPARENT']
    """

    object: Object | None
    """ Set this object as parent

    :type: Object | None
    """

    use_compound: bool
    """ Add this object shape to the parent shape (only if the parent shape is already compound)

    :type: bool
    """

    use_ghost: bool
    """ Make this object ghost while parented

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Particle(bpy_struct):
    """Particle in a particle system"""

    alive_state: typing.Literal["DEAD", "UNBORN", "ALIVE", "DYING"]
    """ 

    :type: typing.Literal['DEAD','UNBORN','ALIVE','DYING']
    """

    angular_velocity: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    birth_time: float
    """ 

    :type: float
    """

    die_time: float
    """ 

    :type: float
    """

    hair_keys: bpy_prop_collection[ParticleHairKey]
    """ 

    :type: bpy_prop_collection[ParticleHairKey]
    """

    is_exist: bool
    """ 

    :type: bool
    """

    is_visible: bool
    """ 

    :type: bool
    """

    lifetime: float
    """ 

    :type: float
    """

    location: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    particle_keys: bpy_prop_collection[ParticleKey]
    """ 

    :type: bpy_prop_collection[ParticleKey]
    """

    prev_angular_velocity: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    prev_location: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    prev_rotation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    prev_velocity: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    rotation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    size: float
    """ 

    :type: float
    """

    velocity: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    def uv_on_emitter(self, modifier: ParticleSystemModifier) -> bpy_prop_array[float]:
        """Obtain uv for particle on derived mesh

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :return: uv
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleBrush(bpy_struct):
    """Particle editing brush"""

    count: int
    """ Particle count

    :type: int
    """

    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    length_mode: typing.Literal["GROW", "SHRINK"]
    """ 

    :type: typing.Literal['GROW','SHRINK']
    """

    puff_mode: typing.Literal["ADD", "SUB"]
    """ 

    :type: typing.Literal['ADD','SUB']
    """

    size: int
    """ Radius of the brush in pixels

    :type: int
    """

    steps: int
    """ Brush steps

    :type: int
    """

    strength: float
    """ Brush strength

    :type: float
    """

    use_puff_volume: bool
    """ Apply puff to unselected end-points (helps maintain hair volume when puffing root)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleDupliWeight(bpy_struct):
    """Weight of a particle dupliobject in a group"""

    count: int
    """ The number of times this object is repeated with respect to other objects

    :type: int
    """

    name: str
    """ Particle dupliobject name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleEdit(bpy_struct):
    """Properties of particle editing mode"""

    brush: ParticleBrush
    """ 

    :type: ParticleBrush
    """

    default_key_count: int
    """ How many keys to make new particles with

    :type: int
    """

    draw_step: int
    """ How many steps to draw the path with

    :type: int
    """

    emitter_distance: float
    """ Distance to keep particles away from the emitter

    :type: float
    """

    fade_frames: int
    """ How many frames to fade

    :type: int
    """

    is_editable: bool
    """ A valid edit mode exists

    :type: bool
    """

    is_hair: bool
    """ Editing hair

    :type: bool
    """

    object: Object
    """ The edited object

    :type: Object
    """

    select_mode: typing.Literal["PATH", "POINT", "TIP"]
    """ Particle select and display mode

    :type: typing.Literal['PATH','POINT','TIP']
    """

    shape_object: Object | None
    """ Outer shape to use for tools

    :type: Object | None
    """

    show_particles: bool
    """ Draw actual particles

    :type: bool
    """

    tool: typing.Literal[
        "NONE", "COMB", "SMOOTH", "ADD", "LENGTH", "PUFF", "CUT", "WEIGHT"
    ]
    """ 

    :type: typing.Literal['NONE','COMB','SMOOTH','ADD','LENGTH','PUFF','CUT','WEIGHT']
    """

    type: typing.Literal["PARTICLES", "SOFT_BODY", "CLOTH"]
    """ 

    :type: typing.Literal['PARTICLES','SOFT_BODY','CLOTH']
    """

    use_auto_velocity: bool
    """ Calculate point velocities automatically

    :type: bool
    """

    use_default_interpolate: bool
    """ Interpolate new particles from the existing ones

    :type: bool
    """

    use_emitter_deflect: bool
    """ Keep paths from intersecting the emitter

    :type: bool
    """

    use_fade_time: bool
    """ Fade paths and keys further away from current frame

    :type: bool
    """

    use_preserve_length: bool
    """ Keep path lengths constant

    :type: bool
    """

    use_preserve_root: bool
    """ Keep root keys unmodified

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleFluidSettings(FluidSettings, bpy_struct):
    """Fluid simulation settings for objects storing fluid particles generated by the simulation"""

    alpha_influence: float
    """ Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)

    :type: float
    """

    filepath: str
    """ Directory (and/or filename prefix) to store and load particles from

    :type: str
    """

    particle_influence: float
    """ Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger

    :type: float
    """

    show_tracer: bool
    """ Show tracer particles

    :type: bool
    """

    use_drops: bool
    """ Show drop particles

    :type: bool
    """

    use_floats: bool
    """ Show floating foam particles

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleHairKey(bpy_struct):
    """Particle key for hair particle system"""

    co: bpy_prop_array[float]
    """ Location of the hair key in object space

    :type: bpy_prop_array[float]
    """

    co_local: bpy_prop_array[float]
    """ Location of the hair key in its local coordinate system, relative to the emitting face

    :type: bpy_prop_array[float]
    """

    time: float
    """ Relative time of key over hair length

    :type: float
    """

    weight: float
    """ Weight for cloth simulation

    :type: float
    """

    def co_object(
        self, object: Object, modifier: ParticleSystemModifier, particle: Particle
    ) -> bpy_prop_array[float]:
        """Obtain hairkey location with particle and modifier data

        :param object: Object
        :type object: Object
        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: hair particle
        :type particle: Particle
        :return: Co, Exported hairkey location
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleInstanceModifier(Modifier, bpy_struct):
    """Particle system instancing modifier"""

    axis: typing.Literal["X", "Y", "Z"]
    """ Pole axis for rotation

    :type: typing.Literal['X','Y','Z']
    """

    index_layer_name: str
    """ Custom data layer name for the index

    :type: str
    """

    object: Object | None
    """ Object that has the particle system

    :type: Object | None
    """

    particle_amount: float
    """ Amount of particles to use for instancing

    :type: float
    """

    particle_offset: float
    """ Relative offset of particles to use for instancing, to avoid overlap of multiple instances

    :type: float
    """

    particle_system: ParticleSystem | None
    """ 

    :type: ParticleSystem | None
    """

    particle_system_index: int
    """ 

    :type: int
    """

    position: float
    """ Position along path

    :type: float
    """

    random_position: float
    """ Randomize position along path

    :type: float
    """

    random_rotation: float
    """ Randomize rotation around path

    :type: float
    """

    rotation: float
    """ Rotation around path

    :type: float
    """

    show_alive: bool
    """ Show instances when particles are alive

    :type: bool
    """

    show_dead: bool
    """ Show instances when particles are dead

    :type: bool
    """

    show_unborn: bool
    """ Show instances when particles are unborn

    :type: bool
    """

    space: typing.Literal["LOCAL", "WORLD"]
    """ Space to use for copying mesh data

    :type: typing.Literal['LOCAL','WORLD']
    """

    use_children: bool
    """ Create instances from child particles

    :type: bool
    """

    use_normal: bool
    """ Create instances from normal particles

    :type: bool
    """

    use_path: bool
    """ Create instances along particle paths

    :type: bool
    """

    use_preserve_shape: bool
    """ Don't stretch the object

    :type: bool
    """

    use_size: bool
    """ Use particle size to scale the instances

    :type: bool
    """

    value_layer_name: str
    """ Custom data layer name for the randomized value

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleKey(bpy_struct):
    """Key location for a particle over time"""

    angular_velocity: bpy_prop_array[float]
    """ Key angular velocity

    :type: bpy_prop_array[float]
    """

    location: bpy_prop_array[float]
    """ Key location

    :type: bpy_prop_array[float]
    """

    rotation: bpy_prop_array[float]
    """ Key rotation quaternion

    :type: bpy_prop_array[float]
    """

    time: float
    """ Time of key over the simulation

    :type: float
    """

    velocity: bpy_prop_array[float]
    """ Key velocity

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSettings(ID, bpy_struct):
    """Particle settings, reusable by multiple particle systems"""

    active_dupliweight: ParticleDupliWeight | None
    """ 

    :type: ParticleDupliWeight | None
    """

    active_dupliweight_index: int | None
    """ 

    :type: int | None
    """

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    adaptive_angle: int
    """ How many degrees path has to curve to make another render segment

    :type: int
    """

    adaptive_pixel: int
    """ How many pixels path has to cover to make another render segment

    :type: int
    """

    angular_velocity_factor: float
    """ Angular velocity amount (in radians per second)

    :type: float
    """

    angular_velocity_mode: typing.Literal[
        "NONE",
        "VELOCITY",
        "HORIZONTAL",
        "VERTICAL",
        "GLOBAL_X",
        "GLOBAL_Y",
        "GLOBAL_Z",
        "RAND",
    ]
    """ What axis is used to change particle rotation with time

    :type: typing.Literal['NONE','VELOCITY','HORIZONTAL','VERTICAL','GLOBAL_X','GLOBAL_Y','GLOBAL_Z','RAND']
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    apply_effector_to_children: bool
    """ Apply effectors to children

    :type: bool
    """

    apply_guide_to_children: bool
    """ 

    :type: bool
    """

    bending_random: float
    """ Random stiffness of hairs

    :type: float
    """

    billboard_align: typing.Literal["X", "Y", "Z", "VIEW", "VEL"]
    """ In respect to what the billboards are aligned

    :type: typing.Literal['X','Y','Z','VIEW','VEL']
    """

    billboard_animation: typing.Literal["NONE", "AGE", "FRAME", "ANGLE"]
    """ How to animate billboard textures

    :type: typing.Literal['NONE','AGE','FRAME','ANGLE']
    """

    billboard_object: Object | None
    """ Billboards face this object (default is active camera)

    :type: Object | None
    """

    billboard_offset: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    billboard_offset_split: typing.Literal["NONE", "LINEAR", "RANDOM"]
    """ How to offset billboard textures

    :type: typing.Literal['NONE','LINEAR','RANDOM']
    """

    billboard_size: bpy_prop_array[float]
    """ Scale billboards relative to particle size

    :type: bpy_prop_array[float]
    """

    billboard_tilt: float
    """ Tilt of the billboards

    :type: float
    """

    billboard_tilt_random: float
    """ Random tilt of the billboards

    :type: float
    """

    billboard_uv_split: int
    """ Number of rows/columns to split UV coordinates for billboards

    :type: int
    """

    billboard_velocity_head: float
    """ Scale billboards by velocity

    :type: float
    """

    billboard_velocity_tail: float
    """ Scale billboards by velocity

    :type: float
    """

    boids: BoidSettings
    """ 

    :type: BoidSettings
    """

    branch_threshold: float
    """ Threshold of branching

    :type: float
    """

    brownian_factor: float
    """ Amount of random, erratic particle movement

    :type: float
    """

    child_length: float
    """ Length of child paths

    :type: float
    """

    child_length_threshold: float
    """ Amount of particles left untouched by child path length

    :type: float
    """

    child_nbr: int
    """ Number of children/parent

    :type: int
    """

    child_parting_factor: float
    """ Create parting in the children based on parent strands

    :type: float
    """

    child_parting_max: float
    """ Maximum root to tip angle (tip distance/root distance for long hair)

    :type: float
    """

    child_parting_min: float
    """ Minimum root to tip angle (tip distance/root distance for long hair)

    :type: float
    """

    child_radius: float
    """ Radius of children around parent

    :type: float
    """

    child_roundness: float
    """ Roundness of children around parent

    :type: float
    """

    child_size: float
    """ A multiplier for the child particle size

    :type: float
    """

    child_size_random: float
    """ Random variation to the size of the child particles

    :type: float
    """

    child_type: typing.Literal["NONE", "SIMPLE", "INTERPOLATED"]
    """ Create child particles

    :type: typing.Literal['NONE','SIMPLE','INTERPOLATED']
    """

    clump_curve: CurveMapping
    """ Curve defining clump tapering

    :type: CurveMapping
    """

    clump_factor: float
    """ Amount of clumping

    :type: float
    """

    clump_noise_size: float
    """ Size of clump noise

    :type: float
    """

    clump_shape: float
    """ Shape of clumping

    :type: float
    """

    collision_group: Group | None
    """ Limit colliders to this Group

    :type: Group | None
    """

    color_maximum: float
    """ Maximum length of the particle color vector

    :type: float
    """

    count: int
    """ Total number of particles

    :type: int
    """

    courant_target: float
    """ The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range

    :type: float
    """

    create_long_hair_children: bool
    """ Calculate children that suit long hair well

    :type: bool
    """

    cycles: CyclesCurveSettings
    """ Cycles hair settings

    :type: CyclesCurveSettings
    """

    damping: float
    """ Amount of damping

    :type: float
    """

    distribution: typing.Literal["JIT", "RAND", "GRID"]
    """ How to distribute particles on selected element

    :type: typing.Literal['JIT','RAND','GRID']
    """

    drag_factor: float
    """ Amount of air-drag

    :type: float
    """

    draw_color: typing.Literal["NONE", "MATERIAL", "VELOCITY", "ACCELERATION"]
    """ Draw additional particle data as a color

    :type: typing.Literal['NONE','MATERIAL','VELOCITY','ACCELERATION']
    """

    draw_method: typing.Literal["NONE", "RENDER", "DOT", "CIRC", "CROSS", "AXIS"]
    """ How particles are drawn in viewport

    :type: typing.Literal['NONE','RENDER','DOT','CIRC','CROSS','AXIS']
    """

    draw_percentage: int
    """ Percentage of particles to display in 3D view

    :type: int
    """

    draw_size: int
    """ Size of particles on viewport in pixels (0=default)

    :type: int
    """

    draw_step: int
    """ How many steps paths are drawn with (power of 2)

    :type: int
    """

    dupli_group: Group | None
    """ Show Objects in this Group in place of particles

    :type: Group | None
    """

    dupli_object: Object | None
    """ Show this Object in place of particles

    :type: Object | None
    """

    dupli_weights: bpy_prop_collection[ParticleDupliWeight]
    """ Weights for all of the objects in the dupli group

    :type: bpy_prop_collection[ParticleDupliWeight]
    """

    effect_hair: float
    """ Hair stiffness for effectors

    :type: float
    """

    effector_amount: int
    """ How many particles are effectors (0 is all particles)

    :type: int
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    emit_from: typing.Literal["VERT", "FACE", "VOLUME"]
    """ Where to emit particles from

    :type: typing.Literal['VERT','FACE','VOLUME']
    """

    factor_random: float
    """ Give the starting velocity a random variation

    :type: float
    """

    fluid: SPHFluidSettings
    """ 

    :type: SPHFluidSettings
    """

    force_field_1: FieldSettings
    """ 

    :type: FieldSettings
    """

    force_field_2: FieldSettings
    """ 

    :type: FieldSettings
    """

    frame_end: float
    """ Frame number to stop emitting particles

    :type: float
    """

    frame_start: float
    """ Frame number to start emitting particles

    :type: float
    """

    grid_random: float
    """ Add random offset to the grid locations

    :type: float
    """

    grid_resolution: int
    """ The resolution of the particle grid

    :type: int
    """

    hair_length: float
    """ Length of the hair

    :type: float
    """

    hair_step: int
    """ Number of hair segments

    :type: int
    """

    hexagonal_grid: bool
    """ Create the grid in a hexagonal pattern

    :type: bool
    """

    integrator: typing.Literal["EULER", "VERLET", "MIDPOINT", "RK4"]
    """ Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)

    :type: typing.Literal['EULER','VERLET','MIDPOINT','RK4']
    """

    invert_grid: bool
    """ Invert what is considered object and what is not

    :type: bool
    """

    is_fluid: bool
    """ Particles were created by a fluid simulation

    :type: bool
    """

    jitter_factor: float
    """ Amount of jitter applied to the sampling

    :type: float
    """

    keyed_loops: int
    """ Number of times the keys are looped

    :type: int
    """

    keys_step: int
    """ 

    :type: int
    """

    kink: typing.Literal["NO", "CURL", "RADIAL", "WAVE", "BRAID", "SPIRAL"]
    """ Type of periodic offset on the path

    :type: typing.Literal['NO','CURL','RADIAL','WAVE','BRAID','SPIRAL']
    """

    kink_amplitude: float
    """ The amplitude of the offset

    :type: float
    """

    kink_amplitude_clump: float
    """ How much clump affects kink amplitude

    :type: float
    """

    kink_amplitude_random: float
    """ Random variation of the amplitude

    :type: float
    """

    kink_axis: typing.Literal["X", "Y", "Z"]
    """ Which axis to use for offset

    :type: typing.Literal['X','Y','Z']
    """

    kink_axis_random: float
    """ Random variation of the orientation

    :type: float
    """

    kink_extra_steps: int
    """ Extra steps for resolution of special kink features

    :type: int
    """

    kink_flat: float
    """ How flat the hairs are

    :type: float
    """

    kink_frequency: float
    """ The frequency of the offset (1/total length)

    :type: float
    """

    kink_shape: float
    """ Adjust the offset to the beginning/end

    :type: float
    """

    length_random: float
    """ Give path length a random variation

    :type: float
    """

    lifetime: float
    """ Life span of the particles

    :type: float
    """

    lifetime_random: float
    """ Give the particle life a random variation

    :type: float
    """

    line_length_head: float
    """ Length of the line's head

    :type: float
    """

    line_length_tail: float
    """ Length of the line's tail

    :type: float
    """

    lock_billboard: bool
    """ Lock the billboards align axis

    :type: bool
    """

    lock_boids_to_surface: bool
    """ Constrain boids to a surface

    :type: bool
    """

    mass: float
    """ Mass of the particles

    :type: float
    """

    material: int
    """ Index of material slot used for rendering particles

    :type: int
    """

    material_slot: typing.Literal["DUMMY"]
    """ Material slot used for rendering particles

    :type: typing.Literal['DUMMY']
    """

    normal_factor: float
    """ Let the surface normal give the particle a starting velocity

    :type: float
    """

    object_align_factor: bpy_prop_array[float]
    """ Let the emitter object orientation give the particle a starting velocity

    :type: bpy_prop_array[float]
    """

    object_factor: float
    """ Let the object give the particle a starting velocity

    :type: float
    """

    particle_factor: float
    """ Let the target particle give the particle a starting velocity

    :type: float
    """

    particle_size: float
    """ The size of the particles

    :type: float
    """

    path_end: float
    """ End time of drawn path

    :type: float
    """

    path_start: float
    """ Starting time of drawn path

    :type: float
    """

    phase_factor: float
    """ Rotation around the chosen orientation axis

    :type: float
    """

    phase_factor_random: float
    """ Randomize rotation around the chosen orientation axis

    :type: float
    """

    physics_type: typing.Literal["NO", "NEWTON", "KEYED", "BOIDS", "FLUID"]
    """ Particle physics type

    :type: typing.Literal['NO','NEWTON','KEYED','BOIDS','FLUID']
    """

    react_event: typing.Literal["DEATH", "COLLIDE", "NEAR"]
    """ The event of target particles to react on

    :type: typing.Literal['DEATH','COLLIDE','NEAR']
    """

    reactor_factor: float
    """ Let the vector away from the target particle's location give the particle a starting velocity

    :type: float
    """

    regrow_hair: bool
    """ Regrow hair for each frame

    :type: bool
    """

    render_step: int
    """ How many steps paths are rendered with (power of 2)

    :type: int
    """

    render_type: typing.Literal[
        "NONE", "HALO", "LINE", "PATH", "OBJECT", "GROUP", "BILLBOARD"
    ]
    """ How particles are rendered

    :type: typing.Literal['NONE','HALO','LINE','PATH','OBJECT','GROUP','BILLBOARD']
    """

    rendered_child_count: int
    """ Number of children/parent for rendering

    :type: int
    """

    rotation_factor_random: float
    """ Randomize particle orientation

    :type: float
    """

    rotation_mode: typing.Literal[
        "NONE",
        "NOR",
        "NOR_TAN",
        "VEL",
        "GLOB_X",
        "GLOB_Y",
        "GLOB_Z",
        "OB_X",
        "OB_Y",
        "OB_Z",
    ]
    """ Particle orientation axis (does not affect Explode modifier's results)

    :type: typing.Literal['NONE','NOR','NOR_TAN','VEL','GLOB_X','GLOB_Y','GLOB_Z','OB_X','OB_Y','OB_Z']
    """

    roughness_1: float
    """ Amount of location dependent rough

    :type: float
    """

    roughness_1_size: float
    """ Size of location dependent rough

    :type: float
    """

    roughness_2: float
    """ Amount of random rough

    :type: float
    """

    roughness_2_size: float
    """ Size of random rough

    :type: float
    """

    roughness_2_threshold: float
    """ Amount of particles left untouched by random rough

    :type: float
    """

    roughness_curve: CurveMapping
    """ Curve defining roughness

    :type: CurveMapping
    """

    roughness_end_shape: float
    """ Shape of end point rough

    :type: float
    """

    roughness_endpoint: float
    """ Amount of end point rough

    :type: float
    """

    show_guide_hairs: bool
    """ Show guide hairs

    :type: bool
    """

    show_hair_grid: bool
    """ Show hair simulation grid

    :type: bool
    """

    show_health: bool
    """ Draw boid health

    :type: bool
    """

    show_number: bool
    """ Show particle number

    :type: bool
    """

    show_size: bool
    """ Show particle size

    :type: bool
    """

    show_unborn: bool
    """ Show particles before they are emitted

    :type: bool
    """

    show_velocity: bool
    """ Show particle velocity

    :type: bool
    """

    simplify_rate: float
    """ Speed of simplification

    :type: float
    """

    simplify_refsize: int
    """ Reference size in pixels, after which simplification begins

    :type: int
    """

    simplify_transition: float
    """ Transition period for fading out strands

    :type: float
    """

    simplify_viewport: float
    """ Speed of Simplification

    :type: float
    """

    size_random: float
    """ Give the particle size a random variation

    :type: float
    """

    subframes: int
    """ Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))

    :type: int
    """

    tangent_factor: float
    """ Let the surface tangent give the particle a starting velocity

    :type: float
    """

    tangent_phase: float
    """ Rotate the surface tangent

    :type: float
    """

    texture_slots: ParticleSettingsTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: ParticleSettingsTextureSlots
    """

    time_tweak: float
    """ A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)

    :type: float
    """

    timestep: float
    """ The simulation timestep per frame (seconds per frame)

    :type: float
    """

    trail_count: int
    """ Number of trail particles

    :type: int
    """

    twist: float
    """ Number of turns around parent allong the strand

    :type: float
    """

    twist_curve: CurveMapping
    """ Curve defining twist

    :type: CurveMapping
    """

    type: typing.Literal["EMITTER", "HAIR"]
    """ Particle Type

    :type: typing.Literal['EMITTER','HAIR']
    """

    use_absolute_path_time: bool
    """ Path timing is in absolute frames

    :type: bool
    """

    use_adaptive_subframes: bool
    """ Automatically set the number of subframes

    :type: bool
    """

    use_advanced_hair: bool
    """ Use full physics calculations for growing hair

    :type: bool
    """

    use_clump_curve: bool
    """ Use a curve to define clump tapering

    :type: bool
    """

    use_clump_noise: bool
    """ Create random clumps around the parent

    :type: bool
    """

    use_dead: bool
    """ Show particles after they have died

    :type: bool
    """

    use_die_on_collision: bool
    """ Particles die when they collide with a deflector object

    :type: bool
    """

    use_dynamic_rotation: bool
    """ Particle rotations are affected by collisions and effectors

    :type: bool
    """

    use_emit_random: bool
    """ Emit in random order of elements

    :type: bool
    """

    use_even_distribution: bool
    """ Use even distribution from faces based on face areas or edge lengths

    :type: bool
    """

    use_global_dupli: bool
    """ Use object's global coordinates for duplication

    :type: bool
    """

    use_group_count: bool
    """ Use object multiple times in the same group

    :type: bool
    """

    use_group_pick_random: bool
    """ Pick objects from group randomly

    :type: bool
    """

    use_hair_bspline: bool
    """ Interpolate hair using B-Splines

    :type: bool
    """

    use_modifier_stack: bool
    """ Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)

    :type: bool
    """

    use_multiply_size_mass: bool
    """ Multiply mass by particle size

    :type: bool
    """

    use_parent_particles: bool
    """ Render parent particles

    :type: bool
    """

    use_react_multiple: bool
    """ React multiple times

    :type: bool
    """

    use_react_start_end: bool
    """ Give birth to unreacted particles eventually

    :type: bool
    """

    use_render_adaptive: bool
    """ Draw steps of the particle path

    :type: bool
    """

    use_render_emitter: bool
    """ Render emitter Object also

    :type: bool
    """

    use_rotation_dupli: bool
    """ Use object's rotation for duplication (global x-axis is aligned particle rotation axis)

    :type: bool
    """

    use_rotations: bool
    """ Calculate particle rotations

    :type: bool
    """

    use_roughness_curve: bool
    """ Use a curve to define roughness

    :type: bool
    """

    use_scale_dupli: bool
    """ Use object's scale for duplication

    :type: bool
    """

    use_self_effect: bool
    """ Particle effectors affect themselves

    :type: bool
    """

    use_simplify: bool
    """ Remove child strands as the object becomes smaller on the screen

    :type: bool
    """

    use_simplify_viewport: bool
    """ 

    :type: bool
    """

    use_size_deflect: bool
    """ Use particle's size in deflection

    :type: bool
    """

    use_strand_primitive: bool
    """ Use the strand primitive for rendering

    :type: bool
    """

    use_twist_curve: bool
    """ Use a curve to define twist

    :type: bool
    """

    use_velocity_length: bool
    """ Multiply line length by particle speed

    :type: bool
    """

    use_whole_group: bool
    """ Use whole group at once

    :type: bool
    """

    userjit: int
    """ Emission locations / face (0 = automatic)

    :type: int
    """

    virtual_parents: float
    """ Relative amount of virtual parents

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSettingsTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Particle Settings data-block"""

    clump_factor: float
    """ Amount texture affects child clump

    :type: float
    """

    damp_factor: float
    """ Amount texture affects particle damping

    :type: float
    """

    density_factor: float
    """ Amount texture affects particle density

    :type: float
    """

    field_factor: float
    """ Amount texture affects particle force fields

    :type: float
    """

    gravity_factor: float
    """ Amount texture affects particle gravity

    :type: float
    """

    kink_amp_factor: float
    """ Amount texture affects child kink amplitude

    :type: float
    """

    kink_freq_factor: float
    """ Amount texture affects child kink frequency

    :type: float
    """

    length_factor: float
    """ Amount texture affects child hair length

    :type: float
    """

    life_factor: float
    """ Amount texture affects particle life time

    :type: float
    """

    mapping: typing.Literal["FLAT", "CUBE", "TUBE", "SPHERE"]
    """ 

    :type: typing.Literal['FLAT','CUBE','TUBE','SPHERE']
    """

    mapping_x: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_y: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_z: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    object: Object | None
    """ Object to use for mapping with Object texture coordinates

    :type: Object | None
    """

    rough_factor: float
    """ Amount texture affects child roughness

    :type: float
    """

    size_factor: float
    """ Amount texture affects physical particle size

    :type: float
    """

    texture_coords: typing.Literal["GLOBAL", "OBJECT", "UV", "ORCO", "STRAND"]
    """ Texture coordinates used to map the texture onto the background

    :type: typing.Literal['GLOBAL','OBJECT','UV','ORCO','STRAND']
    """

    time_factor: float
    """ Amount texture affects particle emission time

    :type: float
    """

    twist_factor: float
    """ Amount texture affects child twist

    :type: float
    """

    use_map_clump: bool
    """ Affect the child clumping

    :type: bool
    """

    use_map_damp: bool
    """ Affect the particle velocity damping

    :type: bool
    """

    use_map_density: bool
    """ Affect the density of the particles

    :type: bool
    """

    use_map_field: bool
    """ Affect the particle force fields

    :type: bool
    """

    use_map_gravity: bool
    """ Affect the particle gravity

    :type: bool
    """

    use_map_kink_amp: bool
    """ Affect the child kink amplitude

    :type: bool
    """

    use_map_kink_freq: bool
    """ Affect the child kink frequency

    :type: bool
    """

    use_map_length: bool
    """ Affect the child hair length

    :type: bool
    """

    use_map_life: bool
    """ Affect the life time of the particles

    :type: bool
    """

    use_map_rough: bool
    """ Affect the child rough

    :type: bool
    """

    use_map_size: bool
    """ Affect the particle size

    :type: bool
    """

    use_map_time: bool
    """ Affect the emission time of the particles

    :type: bool
    """

    use_map_twist: bool
    """ Affect the child twist

    :type: bool
    """

    use_map_velocity: bool
    """ Affect the particle initial velocity

    :type: bool
    """

    uv_layer: str
    """ UV map to use for mapping with UV texture coordinates

    :type: str
    """

    velocity_factor: float
    """ Amount texture affects particle initial velocity

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSystem(bpy_struct):
    """Particle system in an object"""

    active_particle_target: ParticleTarget | None
    """ 

    :type: ParticleTarget | None
    """

    active_particle_target_index: int | None
    """ 

    :type: int | None
    """

    billboard_normal_uv: str
    """ UV map to control billboard normals

    :type: str
    """

    billboard_split_uv: str
    """ UV map to control billboard splitting

    :type: str
    """

    billboard_time_index_uv: str
    """ UV map to control billboard time index (X-Y)

    :type: str
    """

    child_particles: bpy_prop_collection[ChildParticle]
    """ Child particles generated by the particle system

    :type: bpy_prop_collection[ChildParticle]
    """

    child_seed: int
    """ Offset in the random number table for child particles, to get a different randomized result

    :type: int
    """

    cloth: ClothModifier
    """ Cloth dynamics for hair

    :type: ClothModifier
    """

    dt_frac: float
    """ The current simulation time step size, as a fraction of a frame

    :type: float
    """

    has_multiple_caches: bool
    """ Particle system has multiple point caches

    :type: bool
    """

    invert_vertex_group_clump: bool
    """ Negate the effect of the clump vertex group

    :type: bool
    """

    invert_vertex_group_density: bool
    """ Negate the effect of the density vertex group

    :type: bool
    """

    invert_vertex_group_field: bool
    """ Negate the effect of the field vertex group

    :type: bool
    """

    invert_vertex_group_kink: bool
    """ Negate the effect of the kink vertex group

    :type: bool
    """

    invert_vertex_group_length: bool
    """ Negate the effect of the length vertex group

    :type: bool
    """

    invert_vertex_group_rotation: bool
    """ Negate the effect of the rotation vertex group

    :type: bool
    """

    invert_vertex_group_roughness_1: bool
    """ Negate the effect of the roughness 1 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_2: bool
    """ Negate the effect of the roughness 2 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_end: bool
    """ Negate the effect of the roughness end vertex group

    :type: bool
    """

    invert_vertex_group_size: bool
    """ Negate the effect of the size vertex group

    :type: bool
    """

    invert_vertex_group_tangent: bool
    """ Negate the effect of the tangent vertex group

    :type: bool
    """

    invert_vertex_group_twist: bool
    """ Negate the effect of the twist vertex group

    :type: bool
    """

    invert_vertex_group_velocity: bool
    """ Negate the effect of the velocity vertex group

    :type: bool
    """

    is_editable: bool
    """ Particle system can be edited in particle mode

    :type: bool
    """

    is_edited: bool
    """ Particle system has been edited in particle mode

    :type: bool
    """

    is_global_hair: bool
    """ Hair keys are in global coordinate space

    :type: bool
    """

    name: str
    """ Particle system name

    :type: str
    """

    parent: Object | None
    """ Use this object's coordinate system instead of global coordinate system

    :type: Object | None
    """

    particles: bpy_prop_collection[Particle]
    """ Particles generated by the particle system

    :type: bpy_prop_collection[Particle]
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    reactor_target_object: Object | None
    """ For reactor systems, the object that has the target particle system (empty if same object)

    :type: Object | None
    """

    reactor_target_particle_system: int
    """ For reactor systems, index of particle system on the target object

    :type: int
    """

    seed: int
    """ Offset in the random number table, to get a different randomized result

    :type: int
    """

    settings: ParticleSettings
    """ Particle system settings

    :type: ParticleSettings
    """

    targets: bpy_prop_collection[ParticleTarget]
    """ Target particle systems

    :type: bpy_prop_collection[ParticleTarget]
    """

    use_hair_dynamics: bool
    """ Enable hair dynamics using cloth simulation

    :type: bool
    """

    use_keyed_timing: bool
    """ Use key times

    :type: bool
    """

    vertex_group_clump: str
    """ Vertex group to control clump

    :type: str
    """

    vertex_group_density: str
    """ Vertex group to control density

    :type: str
    """

    vertex_group_field: str
    """ Vertex group to control field

    :type: str
    """

    vertex_group_kink: str
    """ Vertex group to control kink

    :type: str
    """

    vertex_group_length: str
    """ Vertex group to control length

    :type: str
    """

    vertex_group_rotation: str
    """ Vertex group to control rotation

    :type: str
    """

    vertex_group_roughness_1: str
    """ Vertex group to control roughness 1

    :type: str
    """

    vertex_group_roughness_2: str
    """ Vertex group to control roughness 2

    :type: str
    """

    vertex_group_roughness_end: str
    """ Vertex group to control roughness end

    :type: str
    """

    vertex_group_size: str
    """ Vertex group to control size

    :type: str
    """

    vertex_group_tangent: str
    """ Vertex group to control tangent

    :type: str
    """

    vertex_group_twist: str
    """ Vertex group to control twist

    :type: str
    """

    vertex_group_velocity: str
    """ Vertex group to control velocity

    :type: str
    """

    def set_resolution(
        self,
        scene: Scene | None = None,
        object: Object | None = None,
        resolution: typing.Literal["PREVIEW", "RENDER"] | None = "PREVIEW",
    ):
        """Set the resolution to use for the number of particles

                :param scene: Scene
                :type scene: Scene | None
                :param object: Object
                :type object: Object | None
                :param resolution: Resolution settings to apply

        PREVIEW Preview, Apply modifier preview settings.

        RENDER Render, Apply modifier render settings.
                :type resolution: typing.Literal['PREVIEW','RENDER'] | None
        """

    def co_hair(
        self, object: Object, particle_no: int | None = 0, step: int | None = 0
    ) -> bpy_prop_array[float]:
        """Obtain cache hair data

        :param object: Object
        :type object: Object
        :param particle_no: Particle no
        :type particle_no: int | None
        :param step: step no
        :type step: int | None
        :return: Co, Exported hairkey location
        :rtype: bpy_prop_array[float]
        """

    def uv_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle | None = None,
        particle_no: int | None = 0,
        uv_no: int | None = 0,
    ) -> bpy_prop_array[float]:
        """Obtain uv for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle | None
        :param particle_no: Particle no
        :type particle_no: int | None
        :param uv_no: UV no
        :type uv_no: int | None
        :return: uv
        :rtype: bpy_prop_array[float]
        """

    def mcol_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle,
        particle_no: int | None = 0,
        vcol_no: int | None = 0,
    ) -> bpy_prop_array[float]:
        """Obtain mcol for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle
        :param particle_no: Particle no
        :type particle_no: int | None
        :param vcol_no: vcol no
        :type vcol_no: int | None
        :return: mcol
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleSystemModifier(Modifier, bpy_struct):
    """Particle system simulation modifier"""

    particle_system: ParticleSystem
    """ Particle System that this modifier controls

    :type: ParticleSystem
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ParticleTarget(bpy_struct):
    """Target particle system"""

    alliance: typing.Literal["FRIEND", "NEUTRAL", "ENEMY"]
    """ 

    :type: typing.Literal['FRIEND','NEUTRAL','ENEMY']
    """

    duration: float
    """ 

    :type: float
    """

    is_valid: bool
    """ Keyed particles target is valid

    :type: bool
    """

    name: str
    """ Particle target name

    :type: str
    """

    object: Object | None
    """ The object that has the target particle system (empty if same object)

    :type: Object | None
    """

    system: int
    """ The index of particle system on the target object

    :type: int
    """

    time: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PathCompare(bpy_struct):
    """Match paths against this value"""

    path: str
    """ 

    :type: str
    """

    use_glob: bool
    """ Enable wildcard globbing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PivotConstraint(Constraint, bpy_struct):
    """Rotate around a different point"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    offset: bpy_prop_array[float]
    """ Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point

    :type: bpy_prop_array[float]
    """

    rotation_range: typing.Literal["ALWAYS_ACTIVE", "NX", "NY", "NZ", "X", "Y", "Z"]
    """ Rotation range on which pivoting should occur

    :type: typing.Literal['ALWAYS_ACTIVE','NX','NY','NZ','X','Y','Z']
    """

    subtarget: str
    """ 

    :type: str
    """

    target: Object | None
    """ Target Object, defining the position of the pivot when defined

    :type: Object | None
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_relative_location: bool
    """ Offset will be an absolute point in space instead of relative to the target

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointCache(bpy_struct):
    """Active point cache for physics simulations"""

    compression: typing.Literal["NO", "LIGHT", "HEAVY"]
    """ Compression method to be used

    :type: typing.Literal['NO','LIGHT','HEAVY']
    """

    filepath: str
    """ Cache file path

    :type: str
    """

    frame_end: int
    """ Frame on which the simulation stops

    :type: int
    """

    frame_start: int
    """ Frame on which the simulation starts

    :type: int
    """

    frame_step: int
    """ Number of frames between cached frames

    :type: int
    """

    index: int
    """ Index number of cache files

    :type: int
    """

    info: str
    """ Info on current cache status

    :type: str
    """

    is_baked: bool
    """ 

    :type: bool
    """

    is_baking: bool
    """ 

    :type: bool
    """

    is_frame_skip: bool
    """ 

    :type: bool
    """

    is_outdated: bool
    """ 

    :type: bool
    """

    name: str
    """ Cache name

    :type: str
    """

    point_caches: PointCaches
    """ 

    :type: PointCaches
    """

    use_disk_cache: bool
    """ Save cache files to disk (.blend file must be saved first)

    :type: bool
    """

    use_external: bool
    """ Read cache from an external location

    :type: bool
    """

    use_library_path: bool
    """ Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointCacheItem(bpy_struct):
    """point cache for physics simulations"""

    compression: typing.Literal["NO", "LIGHT", "HEAVY"]
    """ Compression method to be used

    :type: typing.Literal['NO','LIGHT','HEAVY']
    """

    filepath: str
    """ Cache file path

    :type: str
    """

    frame_end: int
    """ Frame on which the simulation stops

    :type: int
    """

    frame_start: int
    """ Frame on which the simulation starts

    :type: int
    """

    frame_step: int
    """ Number of frames between cached frames

    :type: int
    """

    index: int
    """ Index number of cache files

    :type: int
    """

    info: str
    """ Info on current cache status

    :type: str
    """

    is_baked: bool
    """ 

    :type: bool
    """

    is_baking: bool
    """ 

    :type: bool
    """

    is_frame_skip: bool
    """ 

    :type: bool
    """

    is_outdated: bool
    """ 

    :type: bool
    """

    name: str
    """ Cache name

    :type: str
    """

    use_disk_cache: bool
    """ Save cache files to disk (.blend file must be saved first)

    :type: bool
    """

    use_external: bool
    """ Read cache from an external location

    :type: bool
    """

    use_library_path: bool
    """ Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointDensity(bpy_struct):
    """Point density settings"""

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    falloff: typing.Literal[
        "STANDARD",
        "SMOOTH",
        "SOFT",
        "CONSTANT",
        "ROOT",
        "PARTICLE_AGE",
        "PARTICLE_VELOCITY",
    ]
    """ Method of attenuating density by distance from the point

    :type: typing.Literal['STANDARD','SMOOTH','SOFT','CONSTANT','ROOT','PARTICLE_AGE','PARTICLE_VELOCITY']
    """

    falloff_curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    falloff_soft: float
    """ Softness of the 'soft' falloff option

    :type: float
    """

    falloff_speed_scale: float
    """ Multiplier to bring particle speed within an acceptable range

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise formula used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    object: Object | None
    """ Object to take point data from

    :type: Object | None
    """

    particle_cache_space: typing.Literal[
        "OBJECT_LOCATION", "OBJECT_SPACE", "WORLD_SPACE"
    ]
    """ Coordinate system to cache particles in

    :type: typing.Literal['OBJECT_LOCATION','OBJECT_SPACE','WORLD_SPACE']
    """

    particle_color_source: typing.Literal[
        "CONSTANT", "PARTICLE_AGE", "PARTICLE_SPEED", "PARTICLE_VELOCITY"
    ]
    """ Data to derive color results from

    :type: typing.Literal['CONSTANT','PARTICLE_AGE','PARTICLE_SPEED','PARTICLE_VELOCITY']
    """

    particle_system: ParticleSystem | None
    """ Particle System to render as points

    :type: ParticleSystem | None
    """

    point_source: typing.Literal["PARTICLE_SYSTEM", "OBJECT"]
    """ Point data to use as renderable point density

    :type: typing.Literal['PARTICLE_SYSTEM','OBJECT']
    """

    radius: float
    """ Radius from the shaded sample to look for points within

    :type: float
    """

    speed_scale: float
    """ Multiplier to bring particle speed within an acceptable range

    :type: float
    """

    turbulence_depth: int
    """ Level of detail in the added turbulent noise

    :type: int
    """

    turbulence_influence: typing.Literal[
        "STATIC", "PARTICLE_VELOCITY", "PARTICLE_AGE", "GLOBAL_TIME"
    ]
    """ Method for driving added turbulent noise

    :type: typing.Literal['STATIC','PARTICLE_VELOCITY','PARTICLE_AGE','GLOBAL_TIME']
    """

    turbulence_scale: float
    """ Scale of the added turbulent noise

    :type: float
    """

    turbulence_strength: float
    """ Strength of the added turbulent noise

    :type: float
    """

    use_falloff_curve: bool
    """ Use a custom falloff curve

    :type: bool
    """

    use_turbulence: bool
    """ Add directed noise to the density at render-time

    :type: bool
    """

    vertex_attribute_name: str
    """ Vertex attribute to use for color

    :type: str
    """

    vertex_cache_space: typing.Literal["OBJECT_LOCATION", "OBJECT_SPACE", "WORLD_SPACE"]
    """ Coordinate system to cache vertices in

    :type: typing.Literal['OBJECT_LOCATION','OBJECT_SPACE','WORLD_SPACE']
    """

    vertex_color_source: typing.Literal[
        "CONSTANT", "VERTEX_COLOR", "VERTEX_WEIGHT", "VERTEX_NORMAL"
    ]
    """ Data to derive color results from

    :type: typing.Literal['CONSTANT','VERTEX_COLOR','VERTEX_WEIGHT','VERTEX_NORMAL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointDensityTexture(Texture, ID, bpy_struct):
    """Settings for the Point Density texture"""

    point_density: PointDensity
    """ The point density settings associated with this texture

    :type: PointDensity
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointLamp(Lamp, ID, bpy_struct):
    """Omnidirectional point lamp"""

    compression_threshold: float
    """ Deep shadow map compression threshold

    :type: float
    """

    constant_coefficient: float
    """ Constant distance attenuation coefficient

    :type: float
    """

    cutoff_threshold: float
    """ Cutoff Threshold

    :type: float
    """

    falloff_curve: CurveMapping
    """ Custom Lamp Falloff Curve

    :type: CurveMapping
    """

    falloff_type: typing.Literal[
        "CONSTANT",
        "INVERSE_LINEAR",
        "INVERSE_SQUARE",
        "INVSQUARE_CUTOFF",
        "INVERSE_COEFFICIENTS",
        "CUSTOM_CURVE",
        "LINEAR_QUADRATIC_WEIGHTED",
    ]
    """ Intensity Decay with distance

    :type: typing.Literal['CONSTANT','INVERSE_LINEAR','INVERSE_SQUARE','INVSQUARE_CUTOFF','INVERSE_COEFFICIENTS','CUSTOM_CURVE','LINEAR_QUADRATIC_WEIGHTED']
    """

    ge_shadow_buffer_type: typing.Literal["SIMPLE", "VARIANCE"]
    """ The shadow mapping algorithm used

    :type: typing.Literal['SIMPLE','VARIANCE']
    """

    linear_attenuation: float
    """ Linear distance attenuation

    :type: float
    """

    linear_coefficient: float
    """ Linear distance attenuation coefficient

    :type: float
    """

    quadratic_attenuation: float
    """ Quadratic distance attenuation

    :type: float
    """

    quadratic_coefficient: float
    """ Quadratic distance attenuation coefficient

    :type: float
    """

    radius: float
    """ The ligth's radius

    :type: float
    """

    shadow_adaptive_threshold: float
    """ Threshold for Adaptive Sampling (Raytraced shadows)

    :type: float
    """

    shadow_buffer_bias: float
    """ Shadow buffer sampling bias

    :type: float
    """

    shadow_buffer_bleed_bias: float
    """ Bias for reducing light-bleed on variance shadow maps

    :type: float
    """

    shadow_buffer_clip_end: float
    """ Shadow map clip end, beyond which objects will not generate shadows

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_buffer_samples: int
    """ Number of shadow buffer samples

    :type: int
    """

    shadow_buffer_sharp: float
    """ Sharpness of buffer sampling

    :type: float
    """

    shadow_buffer_size: int
    """ Resolution of the shadow buffer, higher values give crisper shadows but use more memory

    :type: int
    """

    shadow_buffer_slope_bias: float
    """ Shadow buffer sampling slope bias

    :type: float
    """

    shadow_buffer_soft: float
    """ Size of shadow buffer sampling area

    :type: float
    """

    shadow_buffer_type: typing.Literal["REGULAR", "HALFWAY", "IRREGULAR", "DEEP"]
    """ Type of shadow buffer

    :type: typing.Literal['REGULAR','HALFWAY','IRREGULAR','DEEP']
    """

    shadow_color: bpy_prop_array[float]
    """ Color of shadows cast by the lamp

    :type: bpy_prop_array[float]
    """

    shadow_filter: typing.Literal["NONE", "PCF", "PCF_BAIL", "PCF_JITTER"]
    """ The shadow mapping filtering algorithm used

    :type: typing.Literal['NONE','PCF','PCF_BAIL','PCF_JITTER']
    """

    shadow_filter_type: typing.Literal["BOX", "TENT", "GAUSS"]
    """ Type of shadow filter (Buffer Shadows)

    :type: typing.Literal['BOX','TENT','GAUSS']
    """

    shadow_method: typing.Literal["NOSHADOW", "RAY_SHADOW"]
    """ 

    :type: typing.Literal['NOSHADOW','RAY_SHADOW']
    """

    shadow_ray_sample_method: typing.Literal["ADAPTIVE_QMC", "CONSTANT_QMC"]
    """ Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower

    :type: typing.Literal['ADAPTIVE_QMC','CONSTANT_QMC']
    """

    shadow_ray_samples: int
    """ Number of samples taken extra (samples x samples)

    :type: int
    """

    shadow_sample_buffers: typing.Literal["BUFFERS_1", "BUFFERS_4", "BUFFERS_9"]
    """ Number of shadow buffers to render for better AA, this increases memory usage

    :type: typing.Literal['BUFFERS_1','BUFFERS_4','BUFFERS_9']
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    show_shadow_box: bool
    """ Draw a box in 3D view to visualize which objects are contained in it

    :type: bool
    """

    static_shadow: bool
    """ Enable static shadows

    :type: bool
    """

    use_auto_clip_end: bool
    """ Automatic calculation of clipping-end, based on visible vertices

    :type: bool
    """

    use_auto_clip_start: bool
    """ Automatic calculation of clipping-start, based on visible vertices

    :type: bool
    """

    use_only_shadow: bool
    """ Cast shadows only, without illuminating objects

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_shadow_layer: bool
    """ Objects on the same layers only cast shadows

    :type: bool
    """

    use_sphere: bool
    """ Set light intensity to zero beyond lamp distance

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PointerProperty(Property, bpy_struct):
    """RNA pointer property to point to another RNA struct"""

    fixed_type: Struct
    """ Fixed pointer type, empty if variable type

    :type: Struct
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Pose(bpy_struct):
    """A collection of pose channels, including settings for animating bones"""

    animation_visualization: AnimViz
    """ Animation data for this data-block

    :type: AnimViz
    """

    bone_groups: BoneGroups
    """ Groups of the bones

    :type: BoneGroups
    """

    bones: bpy_prop_collection[PoseBone]
    """ Individual pose bones for the armature

    :type: bpy_prop_collection[PoseBone]
    """

    ik_param: IKParam
    """ Parameters for IK solver

    :type: IKParam
    """

    ik_solver: typing.Literal["LEGACY", "ITASC"]
    """ Selection of IK solver for IK chain

    :type: typing.Literal['LEGACY','ITASC']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PoseBone(bpy_struct):
    """Channel defining pose data for a bone in a Pose"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveiny: float
    """ Y-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveouty: float
    """ Y-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_custom_handle_end: typing_extensions.Self | None
    """ Bone that serves as the end handle for the B-Bone curve

    :type: typing_extensions.Self | None
    """

    bbone_custom_handle_start: typing_extensions.Self | None
    """ Bone that serves as the start handle for the B-Bone curve

    :type: typing_extensions.Self | None
    """

    bbone_easein: float
    """ Length of first Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bezier Handle (for B-Bones only)

    :type: float
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: float
    """ Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bbone_scaleout: float
    """ Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)

    :type: float
    """

    bone: Bone
    """ Bone associated with this PoseBone

    :type: Bone
    """

    bone_group: BoneGroup | None
    """ Bone Group this pose channel belongs to

    :type: BoneGroup | None
    """

    bone_group_index: int
    """ Bone Group this pose channel belongs to (0=no group)

    :type: int
    """

    child: typing_extensions.Self
    """ Child of this pose bone

    :type: typing_extensions.Self
    """

    constraints: PoseBoneConstraints
    """ Constraints that act on this PoseChannel

    :type: PoseBoneConstraints
    """

    custom_shape: Object | None
    """ Object that defines custom draw type for this bone

    :type: Object | None
    """

    custom_shape_scale: float
    """ Adjust the size of the custom shape

    :type: float
    """

    custom_shape_transform: typing_extensions.Self | None
    """ Bone that defines the display transform of this custom shape

    :type: typing_extensions.Self | None
    """

    head: bpy_prop_array[float]
    """ Location of head of the channel's bone

    :type: bpy_prop_array[float]
    """

    ik_linear_weight: float
    """ Weight of scale constraint for IK

    :type: float
    """

    ik_max_x: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_max_y: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_max_z: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_min_x: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_min_y: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_min_z: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_rotation_weight: float
    """ Weight of rotation constraint for IK

    :type: float
    """

    ik_stiffness_x: float
    """ IK stiffness around the X axis

    :type: float
    """

    ik_stiffness_y: float
    """ IK stiffness around the Y axis

    :type: float
    """

    ik_stiffness_z: float
    """ IK stiffness around the Z axis

    :type: float
    """

    ik_stretch: float
    """ Allow scaling of the bone for IK

    :type: float
    """

    is_in_ik_chain: bool
    """ Is part of an IK chain

    :type: bool
    """

    location: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    lock_ik_x: bool
    """ Disallow movement around the X axis

    :type: bool
    """

    lock_ik_y: bool
    """ Disallow movement around the Y axis

    :type: bool
    """

    lock_ik_z: bool
    """ Disallow movement around the Z axis

    :type: bool
    """

    lock_location: bpy_prop_array[bool]
    """ Lock editing of location in the interface

    :type: bpy_prop_array[bool]
    """

    lock_rotation: bpy_prop_array[bool]
    """ Lock editing of rotation in the interface

    :type: bpy_prop_array[bool]
    """

    lock_rotation_w: bool
    """ Lock editing of 'angle' component of four-component rotations in the interface

    :type: bool
    """

    lock_rotations_4d: bool
    """ Lock editing of four component rotations by components (instead of as Eulers)

    :type: bool
    """

    lock_scale: bpy_prop_array[bool]
    """ Lock editing of scale in the interface

    :type: bpy_prop_array[bool]
    """

    matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Final 4x4 matrix after constraints and drivers are applied (object space)

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    matrix_basis: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Alternative access to location/scale/rotation relative to the parent and own rest bone

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    matrix_channel: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ 4x4 matrix, before constraints

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    motion_path: MotionPath
    """ Motion Path for this element

    :type: MotionPath
    """

    name: str
    """ 

    :type: str
    """

    parent: typing_extensions.Self
    """ Parent of this pose bone

    :type: typing_extensions.Self
    """

    rotation_axis_angle: bpy_prop_array[float]
    """ Angle of Rotation for Axis-Angle rotation representation

    :type: bpy_prop_array[float]
    """

    rotation_euler: bpy_prop_array[float]
    """ Rotation in Eulers

    :type: bpy_prop_array[float]
    """

    rotation_mode: typing.Literal[
        "QUATERNION", "XYZ", "XZY", "YXZ", "YZX", "ZXY", "ZYX", "AXIS_ANGLE"
    ]
    """ 

    :type: typing.Literal['QUATERNION','XYZ','XZY','YXZ','YZX','ZXY','ZYX','AXIS_ANGLE']
    """

    rotation_quaternion: bpy_prop_array[float]
    """ Rotation in Quaternions

    :type: bpy_prop_array[float]
    """

    scale: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tail: bpy_prop_array[float]
    """ Location of tail of the channel's bone

    :type: bpy_prop_array[float]
    """

    use_bbone_custom_handles: bool
    """ Use custom reference bones as handles for B-Bones instead of next/previous bones, leave these blank to use only B-Bone offset properties to control the shape

    :type: bool
    """

    use_bbone_relative_end_handle: bool
    """ Treat custom end handle position as a relative value

    :type: bool
    """

    use_bbone_relative_start_handle: bool
    """ Treat custom start handle position as a relative value

    :type: bool
    """

    use_custom_shape_bone_size: bool
    """ Scale the custom object by the bone length

    :type: bool
    """

    use_ik_limit_x: bool
    """ Limit movement around the X axis

    :type: bool
    """

    use_ik_limit_y: bool
    """ Limit movement around the Y axis

    :type: bool
    """

    use_ik_limit_z: bool
    """ Limit movement around the Z axis

    :type: bool
    """

    use_ik_linear_control: bool
    """ Apply channel size as IK constraint if stretching is enabled

    :type: bool
    """

    use_ik_rotation_control: bool
    """ Apply channel rotation as IK constraint

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character
(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.
(readonly)"""

    children: typing.Any
    """ (readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.
(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.
(readonly)"""

    length: typing.Any
    """ The distance from head to tail,
when set the head is moved to fit the length."""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent
(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)
(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.
(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.
(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.
(readonly)"""

    def evaluate_envelope(self, point: collections.abc.Iterable[float] | None) -> float:
        """Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: collections.abc.Iterable[float] | None
        :return: Factor, Envelope factor
        :rtype: float
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Property(bpy_struct):
    """RNA property definition"""

    description: str
    """ Description of the property for tooltips

    :type: str
    """

    icon: typing.Literal[
        "NONE",
        "QUESTION",
        "ERROR",
        "CANCEL",
        "TRIA_RIGHT",
        "TRIA_DOWN",
        "TRIA_LEFT",
        "TRIA_UP",
        "ARROW_LEFTRIGHT",
        "PLUS",
        "DISCLOSURE_TRI_DOWN",
        "DISCLOSURE_TRI_RIGHT",
        "RADIOBUT_OFF",
        "RADIOBUT_ON",
        "MENU_PANEL",
        "BLENDER",
        "GRIP",
        "DOT",
        "COLLAPSEMENU",
        "X",
        "GO_LEFT",
        "PLUG",
        "UI",
        "NODE",
        "NODE_SEL",
        "FULLSCREEN",
        "SPLITSCREEN",
        "RIGHTARROW_THIN",
        "BORDERMOVE",
        "VIEWZOOM",
        "ZOOMIN",
        "ZOOMOUT",
        "PANEL_CLOSE",
        "COPY_ID",
        "EYEDROPPER",
        "LINK_AREA",
        "AUTO",
        "CHECKBOX_DEHLT",
        "CHECKBOX_HLT",
        "UNLOCKED",
        "LOCKED",
        "UNPINNED",
        "PINNED",
        "SCREEN_BACK",
        "RIGHTARROW",
        "DOWNARROW_HLT",
        "DOTSUP",
        "DOTSDOWN",
        "LINK",
        "INLINK",
        "PLUGIN",
        "HELP",
        "GHOST_ENABLED",
        "COLOR",
        "LINKED",
        "UNLINKED",
        "HAND",
        "ZOOM_ALL",
        "ZOOM_SELECTED",
        "ZOOM_PREVIOUS",
        "ZOOM_IN",
        "ZOOM_OUT",
        "RENDER_REGION",
        "BORDER_RECT",
        "BORDER_LASSO",
        "FREEZE",
        "STYLUS_PRESSURE",
        "GHOST_DISABLED",
        "NEW",
        "FILE_TICK",
        "QUIT",
        "URL",
        "RECOVER_LAST",
        "FULLSCREEN_ENTER",
        "FULLSCREEN_EXIT",
        "BLANK1",
        "LAMP",
        "MATERIAL",
        "TEXTURE",
        "ANIM",
        "WORLD",
        "SCENE",
        "EDIT",
        "GAME",
        "RADIO",
        "SCRIPT",
        "PARTICLES",
        "PHYSICS",
        "SPEAKER",
        "TEXTURE_SHADED",
        "VIEW3D",
        "IPO",
        "OOPS",
        "BUTS",
        "FILESEL",
        "IMAGE_COL",
        "INFO",
        "SEQUENCE",
        "TEXT",
        "IMASEL",
        "SOUND",
        "ACTION",
        "NLA",
        "SCRIPTWIN",
        "TIME",
        "NODETREE",
        "LOGIC",
        "CONSOLE",
        "PREFERENCES",
        "CLIP",
        "ASSET_MANAGER",
        "OBJECT_DATAMODE",
        "EDITMODE_HLT",
        "FACESEL_HLT",
        "VPAINT_HLT",
        "TPAINT_HLT",
        "WPAINT_HLT",
        "SCULPTMODE_HLT",
        "POSE_HLT",
        "PARTICLEMODE",
        "LIGHTPAINT",
        "SCENE_DATA",
        "RENDERLAYERS",
        "WORLD_DATA",
        "OBJECT_DATA",
        "MESH_DATA",
        "CURVE_DATA",
        "META_DATA",
        "LATTICE_DATA",
        "LAMP_DATA",
        "MATERIAL_DATA",
        "TEXTURE_DATA",
        "ANIM_DATA",
        "CAMERA_DATA",
        "PARTICLE_DATA",
        "LIBRARY_DATA_DIRECT",
        "GROUP",
        "ARMATURE_DATA",
        "POSE_DATA",
        "BONE_DATA",
        "CONSTRAINT",
        "SHAPEKEY_DATA",
        "CONSTRAINT_BONE",
        "CAMERA_STEREO",
        "PACKAGE",
        "UGLYPACKAGE",
        "BRUSH_DATA",
        "IMAGE_DATA",
        "FILE",
        "FCURVE",
        "FONT_DATA",
        "RENDER_RESULT",
        "SURFACE_DATA",
        "EMPTY_DATA",
        "SETTINGS",
        "RENDER_ANIMATION",
        "RENDER_STILL",
        "LIBRARY_DATA_BROKEN",
        "BOIDS",
        "STRANDS",
        "LIBRARY_DATA_INDIRECT",
        "GREASEPENCIL",
        "LINE_DATA",
        "GROUP_BONE",
        "GROUP_VERTEX",
        "GROUP_VCOL",
        "GROUP_UVS",
        "RNA",
        "RNA_ADD",
        "OUTLINER_OB_EMPTY",
        "OUTLINER_OB_MESH",
        "OUTLINER_OB_CURVE",
        "OUTLINER_OB_LATTICE",
        "OUTLINER_OB_META",
        "OUTLINER_OB_LAMP",
        "OUTLINER_OB_CAMERA",
        "OUTLINER_OB_ARMATURE",
        "OUTLINER_OB_FONT",
        "OUTLINER_OB_SURFACE",
        "OUTLINER_OB_SPEAKER",
        "OUTLINER_OB_FORCE_FIELD",
        "OUTLINER_OB_GROUP_INSTANCE",
        "RESTRICT_COLOR_OFF",
        "RESTRICT_COLOR_ON",
        "RESTRICT_VIEW_OFF",
        "RESTRICT_VIEW_ON",
        "RESTRICT_SELECT_OFF",
        "RESTRICT_SELECT_ON",
        "RESTRICT_RENDER_OFF",
        "RESTRICT_RENDER_ON",
        "OUTLINER_DATA_EMPTY",
        "OUTLINER_DATA_MESH",
        "OUTLINER_DATA_CURVE",
        "OUTLINER_DATA_LATTICE",
        "OUTLINER_DATA_META",
        "OUTLINER_DATA_LAMP",
        "OUTLINER_DATA_CAMERA",
        "OUTLINER_DATA_ARMATURE",
        "OUTLINER_DATA_FONT",
        "OUTLINER_DATA_SURFACE",
        "OUTLINER_DATA_SPEAKER",
        "OUTLINER_DATA_POSE",
        "MESH_PLANE",
        "MESH_CUBE",
        "MESH_CIRCLE",
        "MESH_UVSPHERE",
        "MESH_ICOSPHERE",
        "MESH_GRID",
        "MESH_MONKEY",
        "MESH_CYLINDER",
        "MESH_TORUS",
        "MESH_CONE",
        "MESH_CAPSULE",
        "LAMP_POINT",
        "LAMP_SUN",
        "LAMP_SPOT",
        "LAMP_HEMI",
        "LAMP_AREA",
        "META_EMPTY",
        "META_PLANE",
        "META_CUBE",
        "META_BALL",
        "META_ELLIPSOID",
        "META_CAPSULE",
        "SURFACE_NCURVE",
        "SURFACE_NCIRCLE",
        "SURFACE_NSURFACE",
        "SURFACE_NCYLINDER",
        "SURFACE_NSPHERE",
        "SURFACE_NTORUS",
        "CURVE_BEZCURVE",
        "CURVE_BEZCIRCLE",
        "CURVE_NCURVE",
        "CURVE_NCIRCLE",
        "CURVE_PATH",
        "COLOR_RED",
        "COLOR_GREEN",
        "COLOR_BLUE",
        "TRIA_RIGHT_BAR",
        "TRIA_DOWN_BAR",
        "TRIA_LEFT_BAR",
        "TRIA_UP_BAR",
        "FORCE_FORCE",
        "FORCE_WIND",
        "FORCE_VORTEX",
        "FORCE_MAGNETIC",
        "FORCE_HARMONIC",
        "FORCE_CHARGE",
        "FORCE_LENNARDJONES",
        "FORCE_TEXTURE",
        "FORCE_CURVE",
        "FORCE_BOID",
        "FORCE_TURBULENCE",
        "FORCE_DRAG",
        "FORCE_SMOKEFLOW",
        "NODE_INSERT_ON",
        "NODE_INSERT_OFF",
        "MODIFIER",
        "MOD_WAVE",
        "MOD_BUILD",
        "MOD_DECIM",
        "MOD_MIRROR",
        "MOD_SOFT",
        "MOD_SUBSURF",
        "HOOK",
        "MOD_PHYSICS",
        "MOD_PARTICLES",
        "MOD_BOOLEAN",
        "MOD_EDGESPLIT",
        "MOD_ARRAY",
        "MOD_UVPROJECT",
        "MOD_DISPLACE",
        "MOD_CURVE",
        "MOD_LATTICE",
        "CONSTRAINT_DATA",
        "MOD_ARMATURE",
        "MOD_SHRINKWRAP",
        "MOD_CAST",
        "MOD_MESHDEFORM",
        "MOD_BEVEL",
        "MOD_SMOOTH",
        "MOD_SIMPLEDEFORM",
        "MOD_MASK",
        "MOD_CLOTH",
        "MOD_EXPLODE",
        "MOD_FLUIDSIM",
        "MOD_MULTIRES",
        "MOD_SMOKE",
        "MOD_SOLIDIFY",
        "MOD_SCREW",
        "MOD_VERTEX_WEIGHT",
        "MOD_DYNAMICPAINT",
        "MOD_REMESH",
        "MOD_OCEAN",
        "MOD_WARP",
        "MOD_SKIN",
        "MOD_TRIANGULATE",
        "MOD_WIREFRAME",
        "MOD_DATA_TRANSFER",
        "MOD_NORMALEDIT",
        "REC",
        "PLAY",
        "FF",
        "REW",
        "PAUSE",
        "PREV_KEYFRAME",
        "NEXT_KEYFRAME",
        "PLAY_AUDIO",
        "PLAY_REVERSE",
        "PREVIEW_RANGE",
        "ACTION_TWEAK",
        "PMARKER_ACT",
        "PMARKER_SEL",
        "PMARKER",
        "MARKER_HLT",
        "MARKER",
        "SPACE2",
        "SPACE3",
        "KEYINGSET",
        "KEY_DEHLT",
        "KEY_HLT",
        "MUTE_IPO_OFF",
        "MUTE_IPO_ON",
        "VISIBLE_IPO_OFF",
        "VISIBLE_IPO_ON",
        "DRIVER",
        "SOLO_OFF",
        "SOLO_ON",
        "FRAME_PREV",
        "FRAME_NEXT",
        "NLA_PUSHDOWN",
        "IPO_CONSTANT",
        "IPO_LINEAR",
        "IPO_BEZIER",
        "IPO_SINE",
        "IPO_QUAD",
        "IPO_CUBIC",
        "IPO_QUART",
        "IPO_QUINT",
        "IPO_EXPO",
        "IPO_CIRC",
        "IPO_BOUNCE",
        "IPO_ELASTIC",
        "IPO_BACK",
        "IPO_EASE_IN",
        "IPO_EASE_OUT",
        "IPO_EASE_IN_OUT",
        "NORMALIZE_FCURVES",
        "VERTEXSEL",
        "EDGESEL",
        "FACESEL",
        "LOOPSEL",
        "ROTATE",
        "CURSOR",
        "ROTATECOLLECTION",
        "ROTATECENTER",
        "ROTACTIVE",
        "ALIGN",
        "SMOOTHCURVE",
        "SPHERECURVE",
        "ROOTCURVE",
        "SHARPCURVE",
        "LINCURVE",
        "NOCURVE",
        "RNDCURVE",
        "PROP_OFF",
        "PROP_ON",
        "PROP_CON",
        "SCULPT_DYNTOPO",
        "PARTICLE_POINT",
        "PARTICLE_TIP",
        "PARTICLE_PATH",
        "MAN_TRANS",
        "MAN_ROT",
        "MAN_SCALE",
        "MANIPUL",
        "SNAP_OFF",
        "SNAP_ON",
        "SNAP_NORMAL",
        "SNAP_GRID",
        "SNAP_VERTEX",
        "SNAP_EDGE",
        "SNAP_FACE",
        "SNAP_VOLUME",
        "SNAP_INCREMENT",
        "STICKY_UVS_LOC",
        "STICKY_UVS_DISABLE",
        "STICKY_UVS_VERT",
        "CLIPUV_DEHLT",
        "CLIPUV_HLT",
        "SNAP_PEEL_OBJECT",
        "GRID",
        "PASTEDOWN",
        "COPYDOWN",
        "PASTEFLIPUP",
        "PASTEFLIPDOWN",
        "SNAP_SURFACE",
        "AUTOMERGE_ON",
        "AUTOMERGE_OFF",
        "RETOPO",
        "UV_VERTEXSEL",
        "UV_EDGESEL",
        "UV_FACESEL",
        "UV_ISLANDSEL",
        "UV_SYNC_SELECT",
        "BBOX",
        "WIRE",
        "SOLID",
        "SMOOTH",
        "POTATO",
        "ORTHO",
        "LOCKVIEW_OFF",
        "LOCKVIEW_ON",
        "AXIS_SIDE",
        "AXIS_FRONT",
        "AXIS_TOP",
        "NDOF_DOM",
        "NDOF_TURN",
        "NDOF_FLY",
        "NDOF_TRANS",
        "LAYER_USED",
        "LAYER_ACTIVE",
        "SORTALPHA",
        "SORTBYEXT",
        "SORTTIME",
        "SORTSIZE",
        "LONGDISPLAY",
        "SHORTDISPLAY",
        "GHOST",
        "IMGDISPLAY",
        "SAVE_AS",
        "SAVE_COPY",
        "BOOKMARKS",
        "FONTPREVIEW",
        "FILTER",
        "NEWFOLDER",
        "OPEN_RECENT",
        "FILE_PARENT",
        "FILE_REFRESH",
        "FILE_FOLDER",
        "FILE_BLANK",
        "FILE_BLEND",
        "FILE_IMAGE",
        "FILE_MOVIE",
        "FILE_SCRIPT",
        "FILE_SOUND",
        "FILE_FONT",
        "FILE_TEXT",
        "RECOVER_AUTO",
        "SAVE_PREFS",
        "LINK_BLEND",
        "APPEND_BLEND",
        "IMPORT",
        "EXPORT",
        "EXTERNAL_DATA",
        "LOAD_FACTORY",
        "LOOP_BACK",
        "LOOP_FORWARDS",
        "BACK",
        "FORWARD",
        "FILE_HIDDEN",
        "FILE_BACKUP",
        "DISK_DRIVE",
        "MATPLANE",
        "MATSPHERE",
        "MATCUBE",
        "MONKEY",
        "HAIR",
        "ALIASED",
        "ANTIALIASED",
        "MAT_SPHERE_SKY",
        "WORDWRAP_OFF",
        "WORDWRAP_ON",
        "SYNTAX_OFF",
        "SYNTAX_ON",
        "LINENUMBERS_OFF",
        "LINENUMBERS_ON",
        "SCRIPTPLUGINS",
        "SEQ_SEQUENCER",
        "SEQ_PREVIEW",
        "SEQ_LUMA_WAVEFORM",
        "SEQ_CHROMA_SCOPE",
        "SEQ_HISTOGRAM",
        "SEQ_SPLITVIEW",
        "IMAGE_RGB",
        "IMAGE_RGB_ALPHA",
        "IMAGE_ALPHA",
        "IMAGE_ZDEPTH",
        "IMAGEFILE",
        "BRUSH_ADD",
        "BRUSH_BLOB",
        "BRUSH_BLUR",
        "BRUSH_CLAY",
        "BRUSH_CLAY_STRIPS",
        "BRUSH_CLONE",
        "BRUSH_CREASE",
        "BRUSH_DARKEN",
        "BRUSH_FILL",
        "BRUSH_FLATTEN",
        "BRUSH_GRAB",
        "BRUSH_INFLATE",
        "BRUSH_LAYER",
        "BRUSH_LIGHTEN",
        "BRUSH_MASK",
        "BRUSH_MIX",
        "BRUSH_MULTIPLY",
        "BRUSH_NUDGE",
        "BRUSH_PINCH",
        "BRUSH_SCRAPE",
        "BRUSH_SCULPT_DRAW",
        "BRUSH_SMEAR",
        "BRUSH_SMOOTH",
        "BRUSH_SNAKE_HOOK",
        "BRUSH_SOFTEN",
        "BRUSH_SUBTRACT",
        "BRUSH_TEXDRAW",
        "BRUSH_TEXFILL",
        "BRUSH_TEXMASK",
        "BRUSH_THUMB",
        "BRUSH_ROTATE",
        "BRUSH_VERTEXDRAW",
        "MATCAP_01",
        "MATCAP_02",
        "MATCAP_03",
        "MATCAP_04",
        "MATCAP_05",
        "MATCAP_06",
        "MATCAP_07",
        "MATCAP_08",
        "MATCAP_09",
        "MATCAP_10",
        "MATCAP_11",
        "MATCAP_12",
        "MATCAP_13",
        "MATCAP_14",
        "MATCAP_15",
        "MATCAP_16",
        "MATCAP_17",
        "MATCAP_18",
        "MATCAP_19",
        "MATCAP_20",
        "MATCAP_21",
        "MATCAP_22",
        "MATCAP_23",
        "MATCAP_24",
        "SMALL_TRI_RIGHT_VEC",
        "KEYTYPE_KEYFRAME_VEC",
        "KEYTYPE_BREAKDOWN_VEC",
        "KEYTYPE_EXTREME_VEC",
        "KEYTYPE_JITTER_VEC",
        "KEYTYPE_MOVING_HOLD_VEC",
        "COLORSET_01_VEC",
        "COLORSET_02_VEC",
        "COLORSET_03_VEC",
        "COLORSET_04_VEC",
        "COLORSET_05_VEC",
        "COLORSET_06_VEC",
        "COLORSET_07_VEC",
        "COLORSET_08_VEC",
        "COLORSET_09_VEC",
        "COLORSET_10_VEC",
        "COLORSET_11_VEC",
        "COLORSET_12_VEC",
        "COLORSET_13_VEC",
        "COLORSET_14_VEC",
        "COLORSET_15_VEC",
        "COLORSET_16_VEC",
        "COLORSET_17_VEC",
        "COLORSET_18_VEC",
        "COLORSET_19_VEC",
        "COLORSET_20_VEC",
    ]
    """ Icon of the item

    :type: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC']
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    is_animatable: bool
    """ Property is animatable through RNA

    :type: bool
    """

    is_argument_optional: bool
    """ True when the property is optional in a Python function implementing an RNA function

    :type: bool
    """

    is_enum_flag: bool
    """ True when multiple enums

    :type: bool
    """

    is_hidden: bool
    """ True when the property is hidden

    :type: bool
    """

    is_library_editable: bool
    """ Property is editable from linked instances (changes not saved)

    :type: bool
    """

    is_never_none: bool
    """ True when this value can't be set to None

    :type: bool
    """

    is_output: bool
    """ True when this property is an output value from an RNA function

    :type: bool
    """

    is_readonly: bool
    """ Property is editable through RNA

    :type: bool
    """

    is_registered: bool
    """ Property is registered as part of type registration

    :type: bool
    """

    is_registered_optional: bool
    """ Property is optionally registered as part of type registration

    :type: bool
    """

    is_required: bool
    """ False when this property is an optional argument in an RNA function

    :type: bool
    """

    is_runtime: bool
    """ Property has been dynamically created at runtime

    :type: bool
    """

    is_skip_save: bool
    """ True when the property is not saved in presets

    :type: bool
    """

    name: str
    """ Human readable name

    :type: str
    """

    srna: Struct
    """ Struct definition used for properties assigned to this item

    :type: Struct
    """

    subtype: typing.Literal[
        "NONE",
        "FILE_PATH",
        "DIR_PATH",
        "PIXEL",
        "UNSIGNED",
        "PERCENTAGE",
        "FACTOR",
        "ANGLE",
        "TIME",
        "DISTANCE",
        "COLOR",
        "TRANSLATION",
        "DIRECTION",
        "MATRIX",
        "EULER",
        "QUATERNION",
        "XYZ",
        "COLOR_GAMMA",
        "COORDINATES",
        "LAYER",
        "LAYER_MEMBERSHIP",
    ]
    """ Semantic interpretation of the property

    :type: typing.Literal['NONE','FILE_PATH','DIR_PATH','PIXEL','UNSIGNED','PERCENTAGE','FACTOR','ANGLE','TIME','DISTANCE','COLOR','TRANSLATION','DIRECTION','MATRIX','EULER','QUATERNION','XYZ','COLOR_GAMMA','COORDINATES','LAYER','LAYER_MEMBERSHIP']
    """

    tags: set[str]
    """ Subset of tags (defined in parent struct) that are set for this property

    :type: set[str]
    """

    translation_context: str
    """ Translation context of the property's name

    :type: str
    """

    type: typing.Literal[
        "BOOLEAN", "INT", "FLOAT", "STRING", "ENUM", "POINTER", "COLLECTION"
    ]
    """ Data type of the property

    :type: typing.Literal['BOOLEAN','INT','FLOAT','STRING','ENUM','POINTER','COLLECTION']
    """

    unit: typing.Literal[
        "NONE",
        "LENGTH",
        "AREA",
        "VOLUME",
        "ROTATION",
        "TIME",
        "VELOCITY",
        "ACCELERATION",
        "MASS",
        "CAMERA",
    ]
    """ Type of units for this property

    :type: typing.Literal['NONE','LENGTH','AREA','VOLUME','ROTATION','TIME','VELOCITY','ACCELERATION','MASS','CAMERA']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PropertyActuator(Actuator, bpy_struct):
    """Actuator to handle properties"""

    mode: typing.Literal["ASSIGN", "ADD", "COPY", "TOGGLE", "LEVEL"]
    """ 

    :type: typing.Literal['ASSIGN','ADD','COPY','TOGGLE','LEVEL']
    """

    object: Object | None
    """ Copy from this Object

    :type: Object | None
    """

    object_property: str
    """ Copy this property

    :type: str
    """

    property: str
    """ The name of the property

    :type: str
    """

    value: str
    """ The name of the property or the value to use (use "" around strings)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PropertyGroup(bpy_struct):
    """Group of ID properties"""

    name: str
    """ Unique name used in the code and scripting

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PropertyGroupItem(bpy_struct):
    """Property that stores arbitrary, user defined properties"""

    collection: bpy_prop_collection[PropertyGroup]
    """ 

    :type: bpy_prop_collection[PropertyGroup]
    """

    double: float
    """ 

    :type: float
    """

    double_array: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    float: float
    """ 

    :type: float
    """

    float_array: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    group: PropertyGroup
    """ 

    :type: PropertyGroup
    """

    id: ID
    """ 

    :type: ID
    """

    idp_array: bpy_prop_collection[PropertyGroup]
    """ 

    :type: bpy_prop_collection[PropertyGroup]
    """

    int: int
    """ 

    :type: int
    """

    int_array: bpy_prop_array[int]
    """ 

    :type: bpy_prop_array[int]
    """

    string: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PropertySensor(Sensor, bpy_struct):
    """Sensor to detect values and changes in values of properties"""

    evaluation_type: typing.Literal[
        "PROPEQUAL",
        "PROPNEQUAL",
        "PROPINTERVAL",
        "PROPCHANGED",
        "PROPLESSTHAN",
        "PROPGREATERTHAN",
    ]
    """ Type of property evaluation

    :type: typing.Literal['PROPEQUAL','PROPNEQUAL','PROPINTERVAL','PROPCHANGED','PROPLESSTHAN','PROPGREATERTHAN']
    """

    property: str
    """ 

    :type: str
    """

    value: str
    """ Check for this value in types in Equal, Not Equal, Less Than and Greater Than types

    :type: str
    """

    value_max: str
    """ Maximum value in Interval type

    :type: str
    """

    value_min: str
    """ Minimum value in Interval type

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PythonComponent(bpy_struct):
    module: str
    """ 

    :type: str
    """

    name: str
    """ 

    :type: str
    """

    properties: bpy_prop_collection[PythonComponentProperty]
    """ Component properties

    :type: bpy_prop_collection[PythonComponentProperty]
    """

    show_expanded: bool
    """ Set sensor expanded in the user interface

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PythonComponentProperty(bpy_struct):
    """A property of a Python Component"""

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PythonConstraint(Constraint, bpy_struct):
    """Use Python script for constraint evaluation"""

    has_script_error: bool
    """ The linked Python script has thrown an error

    :type: bool
    """

    target_count: int
    """ Usually only 1-3 are needed

    :type: int
    """

    targets: bpy_prop_collection[ConstraintTarget]
    """ Target Objects

    :type: bpy_prop_collection[ConstraintTarget]
    """

    text: Text | None
    """ The text object that contains the Python script

    :type: Text | None
    """

    use_targets: bool
    """ Use the targets indicated in the constraint panel

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class PythonController(Controller, bpy_struct):
    """Controller executing a python script"""

    mode: typing.Literal["SCRIPT", "MODULE"]
    """ Python script type (textblock or module - faster)

    :type: typing.Literal['SCRIPT','MODULE']
    """

    module: str
    """ Module name and function to run, e.g. "someModule.main" (internal texts and external python files can be used)

    :type: str
    """

    text: Text | None
    """ Text data-block with the python script

    :type: Text | None
    """

    use_debug: bool
    """ Continuously reload the module from disk for editing external modules without restarting

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RENDERLAYER_UL_linesets(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RENDERLAYER_UL_renderlayers(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RENDERLAYER_UL_renderviews(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RENDER_UL_attachments(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RadarSensor(Sensor, bpy_struct):
    """Sensor to detect objects in a cone shaped radar emanating from the current object"""

    angle: float
    """ Opening angle of the radar cone

    :type: float
    """

    axis: typing.Literal["XAXIS", "YAXIS", "ZAXIS", "NEGXAXIS", "NEGYAXIS", "NEGZAXIS"]
    """ Along which axis the radar cone is cast

    :type: typing.Literal['XAXIS','YAXIS','ZAXIS','NEGXAXIS','NEGYAXIS','NEGZAXIS']
    """

    distance: float
    """ Depth of the radar cone

    :type: float
    """

    property: str
    """ Only look for objects with this property (blank = all objects)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RandomActuator(Actuator, bpy_struct):
    chance: float
    """ Pick a number between 0 and 1, success if it's below this value

    :type: float
    """

    distribution: typing.Literal[
        "BOOL_CONSTANT",
        "BOOL_UNIFORM",
        "BOOL_BERNOUILLI",
        "INT_CONSTANT",
        "INT_UNIFORM",
        "INT_POISSON",
        "FLOAT_CONSTANT",
        "FLOAT_UNIFORM",
        "FLOAT_NORMAL",
        "FLOAT_NEGATIVE_EXPONENTIAL",
    ]
    """ Choose the type of distribution

    :type: typing.Literal['BOOL_CONSTANT','BOOL_UNIFORM','BOOL_BERNOUILLI','INT_CONSTANT','INT_UNIFORM','INT_POISSON','FLOAT_CONSTANT','FLOAT_UNIFORM','FLOAT_NORMAL','FLOAT_NEGATIVE_EXPONENTIAL']
    """

    float_max: float
    """ Choose a number from a range: upper boundary of the range

    :type: float
    """

    float_mean: float
    """ A normal distribution: mean of the distribution

    :type: float
    """

    float_min: float
    """ Choose a number from a range: lower boundary of the range

    :type: float
    """

    float_value: float
    """ Always return this number

    :type: float
    """

    half_life_time: float
    """ Negative exponential dropoff

    :type: float
    """

    int_max: int
    """ Choose a number from a range: upper boundary of the range

    :type: int
    """

    int_mean: float
    """ Expected mean value of the distribution

    :type: float
    """

    int_min: int
    """ Choose a number from a range: lower boundary of the range

    :type: int
    """

    int_value: int
    """ Always return this number

    :type: int
    """

    property: str
    """ Assign the random value to this property

    :type: str
    """

    seed: int
    """ Initial seed of the random generator, use Python for more freedom (choose 0 for not random)

    :type: int
    """

    standard_derivation: float
    """ A normal distribution: standard deviation of the distribution

    :type: float
    """

    use_always_true: bool
    """ Always false or always true

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RandomSensor(Sensor, bpy_struct):
    """Sensor to send random events"""

    seed: int
    """ Initial seed of the generator (choose 0 for not random)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RaySensor(Sensor, bpy_struct):
    """Sensor to detect intersections with a ray emanating from the current object"""

    axis: typing.Literal["XAXIS", "YAXIS", "ZAXIS", "NEGXAXIS", "NEGYAXIS", "NEGZAXIS"]
    """ Along which axis the ray is cast

    :type: typing.Literal['XAXIS','YAXIS','ZAXIS','NEGXAXIS','NEGYAXIS','NEGZAXIS']
    """

    mask: bpy_prop_array[bool]
    """ Mask filter compared with object's collision group

    :type: bpy_prop_array[bool]
    """

    material: str
    """ Only look for objects with this material (blank = all objects)

    :type: str
    """

    property: str
    """ Only look for objects with this property (blank = all objects)

    :type: str
    """

    range: float
    """ Sense objects no farther than this distance

    :type: float
    """

    ray_type: typing.Literal["PROPERTY", "MATERIAL"]
    """ Toggle collision on material or property

    :type: typing.Literal['PROPERTY','MATERIAL']
    """

    use_x_ray: bool
    """ Toggle X-Ray option (see through objects that don't have the property)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Region(bpy_struct):
    """Region in a subdivided screen area"""

    height: int
    """ Region height

    :type: int
    """

    id: int
    """ Unique ID for this region

    :type: int
    """

    type: typing.Literal[
        "WINDOW",
        "HEADER",
        "CHANNELS",
        "TEMPORARY",
        "UI",
        "TOOLS",
        "TOOL_PROPS",
        "PREVIEW",
    ]
    """ Type of this region

    :type: typing.Literal['WINDOW','HEADER','CHANNELS','TEMPORARY','UI','TOOLS','TOOL_PROPS','PREVIEW']
    """

    view2d: View2D
    """ 2D view of the region

    :type: View2D
    """

    width: int
    """ Region width

    :type: int
    """

    x: int
    """ The window relative vertical location of the region

    :type: int
    """

    y: int
    """ The window relative horizontal location of the region

    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RegionView3D(bpy_struct):
    """3D View region data"""

    clip_planes: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ 

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    is_perspective: bool
    """ 

    :type: bool
    """

    lock_rotation: bool
    """ Lock view rotation in side views

    :type: bool
    """

    perspective_matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Current perspective matrix (window_matrix * view_matrix)

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    show_sync_view: bool
    """ Sync view position between side views

    :type: bool
    """

    use_box_clip: bool
    """ Clip objects based on what's visible in other side views

    :type: bool
    """

    use_clip_planes: bool
    """ 

    :type: bool
    """

    view_camera_offset: bpy_prop_array[float]
    """ View shift in camera view

    :type: bpy_prop_array[float]
    """

    view_camera_zoom: float
    """ Zoom factor in camera view

    :type: float
    """

    view_distance: float
    """ Distance to the view location

    :type: float
    """

    view_location: bpy_prop_array[float]
    """ View pivot location

    :type: bpy_prop_array[float]
    """

    view_matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Current view matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    view_perspective: typing.Literal["PERSP", "ORTHO", "CAMERA"]
    """ View Perspective

    :type: typing.Literal['PERSP','ORTHO','CAMERA']
    """

    view_rotation: bpy_prop_array[float]
    """ Rotation in quaternions (keep normalized)

    :type: bpy_prop_array[float]
    """

    window_matrix: list[list[float]] | tuple[
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
        tuple[float, float, float, float],
    ]
    """ Current window matrix

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    def update(self):
        """Recalculate the view matrices"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RemeshModifier(Modifier, bpy_struct):
    """Generate a new surface with regular topology that follows the shape of the input mesh"""

    mode: typing.Literal["BLOCKS", "SMOOTH", "SHARP"]
    """ 

    :type: typing.Literal['BLOCKS','SMOOTH','SHARP']
    """

    octree_depth: int
    """ Resolution of the octree; higher values give finer details

    :type: int
    """

    scale: float
    """ The ratio of the largest dimension of the model over the size of the grid

    :type: float
    """

    sharpness: float
    """ Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input

    :type: float
    """

    threshold: float
    """ If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component

    :type: float
    """

    use_remove_disconnected: bool
    """ 

    :type: bool
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderAttachment(bpy_struct):
    """Game rendering output"""

    attachment: typing_extensions.Self | None
    """ Render attachment used by this slot

    :type: typing_extensions.Self | None
    """

    hdr: typing.Literal["HDR_NONE", "HDR_HALF_FLOAT", "HDR_FULL_FLOAT"]
    """ The precision of the attachment

    :type: typing.Literal['HDR_NONE','HDR_HALF_FLOAT','HDR_FULL_FLOAT']
    """

    name: str
    """ Attachment name

    :type: str
    """

    size: int
    """ The data size of the attachment

    :type: int
    """

    type: typing.Literal["CUSTOM", "NORMAL", "ALBEDO"]
    """ The type of attachment used for basic materials

    :type: typing.Literal['CUSTOM','NORMAL','ALBEDO']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderEngine(bpy_struct):
    """Render engine"""

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_use_exclude_layers: bool
    """ 

    :type: bool
    """

    bl_use_postprocess: bool
    """ 

    :type: bool
    """

    bl_use_preview: bool
    """ 

    :type: bool
    """

    bl_use_save_buffers: bool
    """ 

    :type: bool
    """

    bl_use_shading_nodes: bool
    """ 

    :type: bool
    """

    bl_use_shading_nodes_custom: bool
    """ 

    :type: bool
    """

    bl_use_spherical_stereo: bool
    """ 

    :type: bool
    """

    bl_use_texture_preview: bool
    """ 

    :type: bool
    """

    camera_override: Object
    """ 

    :type: Object
    """

    is_animation: bool
    """ 

    :type: bool
    """

    is_preview: bool
    """ 

    :type: bool
    """

    layer_override: bpy_prop_array[bool]
    """ 

    :type: bpy_prop_array[bool]
    """

    render: RenderSettings
    """ 

    :type: RenderSettings
    """

    resolution_x: int
    """ 

    :type: int
    """

    resolution_y: int
    """ 

    :type: int
    """

    tile_x: int
    """ 

    :type: int
    """

    tile_y: int
    """ 

    :type: int
    """

    use_highlight_tiles: bool
    """ 

    :type: bool
    """

    def update(self, data: BlendData | None = None, scene: Scene | None = None):
        """Export scene data for render

        :param data:
        :type data: BlendData | None
        :param scene:
        :type scene: Scene | None
        """

    def render(self, scene: Scene | None = None):
        """Render scene into an image

        :param scene:
        :type scene: Scene | None
        """

    def bake(
        self,
        scene: Scene | None,
        object: Object | None,
        pass_type: typing.Literal[
            "COMBINED",
            "AO",
            "SHADOW",
            "NORMAL",
            "UV",
            "ROUGHNESS",
            "EMIT",
            "ENVIRONMENT",
            "DIFFUSE",
            "GLOSSY",
            "TRANSMISSION",
            "SUBSURFACE",
        ]
        | None,
        pass_filter: int | None,
        object_id: int | None,
        pixel_array: BakePixel | None,
        num_pixels: int | None,
        depth: int | None,
        result: typing.Any | None,
    ):
        """Bake passes

        :param scene:
        :type scene: Scene | None
        :param object:
        :type object: Object | None
        :param pass_type: Pass, Pass to bake
        :type pass_type: typing.Literal['COMBINED','AO','SHADOW','NORMAL','UV','ROUGHNESS','EMIT','ENVIRONMENT','DIFFUSE','GLOSSY','TRANSMISSION','SUBSURFACE'] | None
        :param pass_filter: Pass Filter, Filter to combined, diffuse, glossy, transmission and subsurface passes
        :type pass_filter: int | None
        :param object_id: Object Id, Id of the current object being baked in relation to the others
        :type object_id: int | None
        :param pixel_array:
        :type pixel_array: BakePixel | None
        :param num_pixels: Number of Pixels, Size of the baking batch
        :type num_pixels: int | None
        :param depth: Pixels depth, Number of channels
        :type depth: int | None
        :param result:
        :type result: typing.Any | None
        """

    def view_update(self, context: Context = None):
        """Update on data changes for viewport render

        :param context:
        :type context: Context
        """

    def view_draw(self, context: Context = None):
        """Draw viewport render

        :param context:
        :type context: Context
        """

    def update_script_node(self, node: Node | None = None):
        """Compile shader script node

        :param node:
        :type node: Node | None
        """

    def tag_redraw(self):
        """Request redraw for viewport rendering"""

    def tag_update(self):
        """Request update call for viewport rendering"""

    def update_render_passes(
        self, scene: Scene | None = None, renderlayer: SceneRenderLayer | None = None
    ):
        """Update the render passes that will be generated

        :param scene:
        :type scene: Scene | None
        :param renderlayer:
        :type renderlayer: SceneRenderLayer | None
        """

    def begin_result(
        self,
        x: int | None,
        y: int | None,
        w: int | None,
        h: int | None,
        layer: str = "",
        view: str = "",
    ) -> RenderResult:
        """Create render result to write linear floating point render layers and passes

        :param x: X
        :type x: int | None
        :param y: Y
        :type y: int | None
        :param w: Width
        :type w: int | None
        :param h: Height
        :type h: int | None
        :param layer: Layer, Single layer to get render result for
        :type layer: str
        :param view: View, Single view to get render result for
        :type view: str
        :return: Result
        :rtype: RenderResult
        """

    def update_result(self, result: RenderResult | None):
        """Signal that pixels have been updated and can be redrawn in the user interface

        :param result: Result
        :type result: RenderResult | None
        """

    def end_result(
        self,
        result: RenderResult | None,
        cancel: bool | None = False,
        highlight: bool | None = False,
        do_merge_results: bool | None = False,
    ):
        """All pixels in the render result have been set and are final

        :param result: Result
        :type result: RenderResult | None
        :param cancel: Cancel, Don't mark tile as done, don't merge results unless forced
        :type cancel: bool | None
        :param highlight: Highlight, Don't mark tile as done yet
        :type highlight: bool | None
        :param do_merge_results: Merge Results, Merge results even if cancel=true
        :type do_merge_results: bool | None
        """

    def add_pass(self, name: str, channels: int | None, chan_id: str, layer: str = ""):
        """Add a pass to the render layer

        :param name: Name, Name of the Pass, without view or channel tag
        :type name: str
        :param channels: Channels
        :type channels: int | None
        :param chan_id: Channel IDs, Channel names, one character per channel
        :type chan_id: str
        :param layer: Layer, Single layer to add render pass to
        :type layer: str
        """

    def get_result(self) -> RenderResult:
        """Get final result for non-pixel operations

        :return: Result
        :rtype: RenderResult
        """

    def test_break(self) -> bool:
        """Test if the render operation should been canceled, this is a fast call that should be used regularly for responsiveness

        :return: Break
        :rtype: bool
        """

    def active_view_get(self) -> str:
        """active_view_get

        :return: View, Single view active
        :rtype: str
        """

    def active_view_set(self, view: str):
        """active_view_set

        :param view: View, Single view to set as active
        :type view: str
        """

    def camera_shift_x(
        self, camera: Object | None, use_spherical_stereo: bool | None = False
    ) -> float:
        """camera_shift_x

        :param camera:
        :type camera: Object | None
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool | None
        :return: Shift X
        :rtype: float
        """

    def camera_model_matrix(
        self, camera: Object | None, use_spherical_stereo: bool | None = False
    ) -> (
        list[list[float]]
        | tuple[
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
            tuple[float, float, float, float],
        ]
    ):
        """camera_model_matrix

        :param camera:
        :type camera: Object | None
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool | None
        :return: Model Matrix, Normalized camera model matrix
        :rtype: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float], tuple[float, float, float, float]]
        """

    def use_spherical_stereo(self, camera: Object | None) -> bool:
        """use_spherical_stereo

        :param camera:
        :type camera: Object | None
        :return: Spherical Stereo
        :rtype: bool
        """

    def update_stats(self, stats: str, info: str):
        """Update and signal to redraw render status text

        :param stats: Stats
        :type stats: str
        :param info: Info
        :type info: str
        """

    def frame_set(self, frame: int | None, subframe: float | None):
        """Evaluate scene at a different frame (for motion blur)

        :param frame: Frame
        :type frame: int | None
        :param subframe: Subframe
        :type subframe: float | None
        """

    def update_progress(self, progress: float | None):
        """Update progress percentage of render

        :param progress: Percentage of render that's done
        :type progress: float | None
        """

    def update_memory_stats(
        self, memory_used: float | None = 0.0, memory_peak: float | None = 0.0
    ):
        """Update memory usage statistics

        :param memory_used: Current memory usage in megabytes
        :type memory_used: float | None
        :param memory_peak: Peak memory usage in megabytes
        :type memory_peak: float | None
        """

    def report(
        self,
        type: set[
            typing.Literal[
                "DEBUG",
                "INFO",
                "OPERATOR",
                "PROPERTY",
                "WARNING",
                "ERROR",
                "ERROR_INVALID_INPUT",
                "ERROR_INVALID_CONTEXT",
                "ERROR_OUT_OF_MEMORY",
            ]
        ]
        | None,
        message: str,
    ):
        """Report info, warning or error messages

        :param type: Type
        :type type: set[typing.Literal['DEBUG','INFO','OPERATOR','PROPERTY','WARNING','ERROR','ERROR_INVALID_INPUT','ERROR_INVALID_CONTEXT','ERROR_OUT_OF_MEMORY']] | None
        :param message: Report Message
        :type message: str
        """

    def error_set(self, message: str):
        """Set error message displaying after the render is finished

        :param message: Report Message
        :type message: str
        """

    def bind_display_space_shader(self, scene: Scene | None):
        """Bind GLSL fragment shader that converts linear colors to display space colors using scene color management settings

        :param scene:
        :type scene: Scene | None
        """

    def unbind_display_space_shader(self):
        """Unbind GLSL display space shader, must always be called after binding the shader"""

    def support_display_space_shader(self, scene: Scene | None) -> bool:
        """Test if GLSL display space shader is supported for the combination of graphics card and scene settings

        :param scene:
        :type scene: Scene | None
        :return: Supported
        :rtype: bool
        """

    def get_preview_pixel_size(self, scene: Scene | None) -> int:
        """Get the pixel size that should be used for preview rendering

        :param scene:
        :type scene: Scene | None
        :return: Pixel Size
        :rtype: int
        """

    def register_pass(
        self,
        scene: Scene | None = None,
        srl: SceneRenderLayer | None = None,
        name: str = "",
        channels: int | None = 1,
        chanid: str = "",
        type: typing.Literal["VALUE", "VECTOR", "COLOR"] | None = "VALUE",
    ):
        """Register a render pass that will be part of the render with the current settings

        :param scene:
        :type scene: Scene | None
        :param srl:
        :type srl: SceneRenderLayer | None
        :param name: Name
        :type name: str
        :param channels: Channels
        :type channels: int | None
        :param chanid: Channel IDs
        :type chanid: str
        :param type: Type
        :type type: typing.Literal['VALUE','VECTOR','COLOR'] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderLayer(bpy_struct):
    exclude_ambient_occlusion: bool
    """ Exclude AO pass from combined

    :type: bool
    """

    exclude_emit: bool
    """ Exclude emission pass from combined

    :type: bool
    """

    exclude_environment: bool
    """ Exclude environment pass from combined

    :type: bool
    """

    exclude_indirect: bool
    """ Exclude indirect pass from combined

    :type: bool
    """

    exclude_reflection: bool
    """ Exclude raytraced reflection pass from combined

    :type: bool
    """

    exclude_refraction: bool
    """ Exclude raytraced refraction pass from combined

    :type: bool
    """

    exclude_shadow: bool
    """ Exclude shadow pass from combined

    :type: bool
    """

    exclude_specular: bool
    """ Exclude specular pass from combined

    :type: bool
    """

    invert_zmask: bool
    """ For Zmask, only render what is behind solid z values instead of in front

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Scene layers included in this render layer

    :type: bpy_prop_array[bool]
    """

    layers_exclude: bpy_prop_array[bool]
    """ Exclude scene layers from having any influence

    :type: bpy_prop_array[bool]
    """

    layers_zmask: bpy_prop_array[bool]
    """ Zmask scene layers for solid faces

    :type: bpy_prop_array[bool]
    """

    light_override: Group
    """ Group to override all other lights in this render layer

    :type: Group
    """

    material_override: Material
    """ Material to override all other materials in this render layer

    :type: Material
    """

    name: str
    """ Render layer name

    :type: str
    """

    passes: RenderPasses
    """ 

    :type: RenderPasses
    """

    use: bool
    """ Disable or enable the render layer

    :type: bool
    """

    use_all_z: bool
    """ Fill in Z values for solid faces in invisible layers, for masking

    :type: bool
    """

    use_ao: bool
    """ Render AO in this Layer

    :type: bool
    """

    use_edge_enhance: bool
    """ Render Edge-enhance in this Layer (only works for Solid faces)

    :type: bool
    """

    use_freestyle: bool
    """ Render stylized strokes in this Layer

    :type: bool
    """

    use_halo: bool
    """ Render Halos in this Layer (on top of Solid)

    :type: bool
    """

    use_pass_ambient_occlusion: bool
    """ Deliver AO pass

    :type: bool
    """

    use_pass_color: bool
    """ Deliver shade-less color pass

    :type: bool
    """

    use_pass_combined: bool
    """ Deliver full combined RGBA buffer

    :type: bool
    """

    use_pass_diffuse: bool
    """ Deliver diffuse pass

    :type: bool
    """

    use_pass_diffuse_color: bool
    """ Deliver diffuse color pass

    :type: bool
    """

    use_pass_diffuse_direct: bool
    """ Deliver diffuse direct pass

    :type: bool
    """

    use_pass_diffuse_indirect: bool
    """ Deliver diffuse indirect pass

    :type: bool
    """

    use_pass_emit: bool
    """ Deliver emission pass

    :type: bool
    """

    use_pass_environment: bool
    """ Deliver environment lighting pass

    :type: bool
    """

    use_pass_glossy_color: bool
    """ Deliver glossy color pass

    :type: bool
    """

    use_pass_glossy_direct: bool
    """ Deliver glossy direct pass

    :type: bool
    """

    use_pass_glossy_indirect: bool
    """ Deliver glossy indirect pass

    :type: bool
    """

    use_pass_indirect: bool
    """ Deliver indirect lighting pass

    :type: bool
    """

    use_pass_material_index: bool
    """ Deliver material index pass

    :type: bool
    """

    use_pass_mist: bool
    """ Deliver mist factor pass (0.0-1.0)

    :type: bool
    """

    use_pass_normal: bool
    """ Deliver normal pass

    :type: bool
    """

    use_pass_object_index: bool
    """ Deliver object index pass

    :type: bool
    """

    use_pass_reflection: bool
    """ Deliver raytraced reflection pass

    :type: bool
    """

    use_pass_refraction: bool
    """ Deliver raytraced refraction pass

    :type: bool
    """

    use_pass_shadow: bool
    """ Deliver shadow pass

    :type: bool
    """

    use_pass_specular: bool
    """ Deliver specular pass

    :type: bool
    """

    use_pass_subsurface_color: bool
    """ Deliver subsurface color pass

    :type: bool
    """

    use_pass_subsurface_direct: bool
    """ Deliver subsurface direct pass

    :type: bool
    """

    use_pass_subsurface_indirect: bool
    """ Deliver subsurface indirect pass

    :type: bool
    """

    use_pass_transmission_color: bool
    """ Deliver transmission color pass

    :type: bool
    """

    use_pass_transmission_direct: bool
    """ Deliver transmission direct pass

    :type: bool
    """

    use_pass_transmission_indirect: bool
    """ Deliver transmission indirect pass

    :type: bool
    """

    use_pass_uv: bool
    """ Deliver texture UV pass

    :type: bool
    """

    use_pass_vector: bool
    """ Deliver speed vector pass

    :type: bool
    """

    use_pass_z: bool
    """ Deliver Z values pass

    :type: bool
    """

    use_sky: bool
    """ Render Sky in this Layer

    :type: bool
    """

    use_solid: bool
    """ Render Solid faces in this Layer

    :type: bool
    """

    use_strand: bool
    """ Render Strands in this Layer

    :type: bool
    """

    use_zmask: bool
    """ Only render what's in front of the solid z values

    :type: bool
    """

    use_ztransp: bool
    """ Render Z-Transparent faces in this Layer (on top of Solid and Halos)

    :type: bool
    """

    def load_from_file(self, filename: str, x: int | None = 0, y: int | None = 0):
        """Copies the pixels of this renderlayer from an image file

        :param filename: Filename, Filename to load into this render tile, must be no smaller than the renderlayer
        :type filename: str
        :param x: Offset X, Offset the position to copy from if the image is larger than the render layer
        :type x: int | None
        :param y: Offset Y, Offset the position to copy from if the image is larger than the render layer
        :type y: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderPass(bpy_struct):
    channel_id: str
    """ 

    :type: str
    """

    channels: int
    """ 

    :type: int
    """

    fullname: str
    """ 

    :type: str
    """

    name: str
    """ 

    :type: str
    """

    rect: float
    """ 

    :type: float
    """

    view_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderResult(bpy_struct):
    """Result of rendering, including all layers and passes"""

    layers: bpy_prop_collection[RenderLayer]
    """ 

    :type: bpy_prop_collection[RenderLayer]
    """

    resolution_x: int
    """ 

    :type: int
    """

    resolution_y: int
    """ 

    :type: int
    """

    views: bpy_prop_collection[RenderView]
    """ 

    :type: bpy_prop_collection[RenderView]
    """

    def load_from_file(self, filename: str):
        """Copies the pixels of this render result from an image file

        :param filename: File Name, Filename to load into this render tile, must be no smaller than the render result
        :type filename: str
        """

    def stamp_data_add_field(self, field: str, value: str):
        """Add engine-specific stamp data to the result

        :param field: Field, Name of the stamp field to add
        :type field: str
        :param value: Value, Value of the stamp data
        :type value: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderSettings(bpy_struct):
    """Rendering settings for a Scene data-block"""

    alpha_mode: typing.Literal["SKY", "TRANSPARENT"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['SKY','TRANSPARENT']
    """

    antialiasing_samples: typing.Literal["5", "8", "11", "16"]
    """ Amount of anti-aliasing samples per pixel

    :type: typing.Literal['5','8','11','16']
    """

    bake: BakeSettings
    """ 

    :type: BakeSettings
    """

    bake_aa_mode: typing.Literal["5", "8", "11", "16"]
    """ 

    :type: typing.Literal['5','8','11','16']
    """

    bake_bias: float
    """ Bias towards faces further away from the object (in blender units)

    :type: float
    """

    bake_distance: float
    """ Maximum distance from active object to other object (in blender units)

    :type: float
    """

    bake_margin: int
    """ Extends the baked result as a post process filter

    :type: int
    """

    bake_normal_space: typing.Literal["CAMERA", "WORLD", "OBJECT", "TANGENT"]
    """ Choose normal space for baking

    :type: typing.Literal['CAMERA','WORLD','OBJECT','TANGENT']
    """

    bake_quad_split: typing.Literal["AUTO", "FIXED", "FIXED_ALT"]
    """ Choose the method used to split a quad into 2 triangles for baking

    :type: typing.Literal['AUTO','FIXED','FIXED_ALT']
    """

    bake_samples: int
    """ Number of samples used for ambient occlusion baking from multires

    :type: int
    """

    bake_type: typing.Literal[
        "FULL",
        "AO",
        "SHADOW",
        "NORMALS",
        "TEXTURE",
        "DISPLACEMENT",
        "DERIVATIVE",
        "VERTEX_COLORS",
        "EMIT",
        "ALPHA",
        "MIRROR_INTENSITY",
        "MIRROR_COLOR",
        "SPEC_INTENSITY",
        "SPEC_COLOR",
    ]
    """ Choose shading information to bake into the image

    :type: typing.Literal['FULL','AO','SHADOW','NORMALS','TEXTURE','DISPLACEMENT','DERIVATIVE','VERTEX_COLORS','EMIT','ALPHA','MIRROR_INTENSITY','MIRROR_COLOR','SPEC_INTENSITY','SPEC_COLOR']
    """

    bake_user_scale: float
    """ Instead of automatically normalizing to 0..1, apply a user scale to the derivative map

    :type: float
    """

    border_max_x: float
    """ Maximum X value for the render border

    :type: float
    """

    border_max_y: float
    """ Maximum Y value for the render border

    :type: float
    """

    border_min_x: float
    """ Minimum X value for the render border

    :type: float
    """

    border_min_y: float
    """ Minimum Y value for the render border

    :type: float
    """

    display_mode: typing.Literal["SCREEN", "AREA", "WINDOW", "NONE"]
    """ Select where rendered images will be displayed

    :type: typing.Literal['SCREEN','AREA','WINDOW','NONE']
    """

    dither_intensity: float
    """ Amount of dithering noise added to the rendered image to break up banding

    :type: float
    """

    edge_color: bpy_prop_array[float]
    """ Edge color

    :type: bpy_prop_array[float]
    """

    edge_threshold: int
    """ Threshold for drawing outlines on geometry edges

    :type: int
    """

    engine: typing.Literal["BLENDER_RENDER"]
    """ Engine to use for rendering

    :type: typing.Literal['BLENDER_RENDER']
    """

    ffmpeg: FFmpegSettings
    """ FFmpeg related settings for the scene

    :type: FFmpegSettings
    """

    field_order: typing.Literal["EVEN_FIRST", "ODD_FIRST"]
    """ Order of video fields (select which lines get rendered first, to create smooth motion for TV output)

    :type: typing.Literal['EVEN_FIRST','ODD_FIRST']
    """

    file_extension: str
    """ The file extension used for saving renders

    :type: str
    """

    filepath: str
    """ Directory/name to save animations, # characters defines the position and length of frame numbers

    :type: str
    """

    filter_size: float
    """ Width over which the reconstruction filter combines samples

    :type: float
    """

    fps: int
    """ Framerate, expressed in frames per second

    :type: int
    """

    fps_base: float
    """ Framerate base

    :type: float
    """

    frame_map_new: int
    """ How many frames the Map Old will last

    :type: int
    """

    frame_map_old: int
    """ Old mapping value in frames

    :type: int
    """

    has_multiple_engines: bool
    """ More than one rendering engine is available

    :type: bool
    """

    image_settings: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    is_movie_format: bool
    """ When true the format is a movie

    :type: bool
    """

    layers: RenderLayers
    """ 

    :type: RenderLayers
    """

    line_thickness: float
    """ Line thickness in pixels

    :type: float
    """

    line_thickness_mode: typing.Literal["ABSOLUTE", "RELATIVE"]
    """ Line thickness mode for Freestyle line drawing

    :type: typing.Literal['ABSOLUTE','RELATIVE']
    """

    motion_blur_samples: int
    """ Number of scene samples to take with motion blur

    :type: int
    """

    motion_blur_shutter: float
    """ Time taken in frames between shutter open and close (NOTE: Blender Internal does not support animated shutter)

    :type: float
    """

    motion_blur_shutter_curve: CurveMapping
    """ Curve defining the shutter's openness over time

    :type: CurveMapping
    """

    octree_resolution: typing.Literal["64", "128", "256", "512"]
    """ Resolution of raytrace accelerator, use higher resolutions for larger scenes

    :type: typing.Literal['64','128','256','512']
    """

    pixel_aspect_x: float
    """ Horizontal aspect ratio - for anamorphic or non-square pixel output

    :type: float
    """

    pixel_aspect_y: float
    """ Vertical aspect ratio - for anamorphic or non-square pixel output

    :type: float
    """

    pixel_filter_type: typing.Literal[
        "BOX", "TENT", "QUADRATIC", "CUBIC", "CATMULLROM", "GAUSSIAN", "MITCHELL"
    ]
    """ Reconstruction filter used for combining anti-aliasing samples

    :type: typing.Literal['BOX','TENT','QUADRATIC','CUBIC','CATMULLROM','GAUSSIAN','MITCHELL']
    """

    preview_pixel_size: typing.Literal["AUTO", "1", "2", "4", "8"]
    """ Pixel size for viewport rendering

    :type: typing.Literal['AUTO','1','2','4','8']
    """

    preview_start_resolution: int
    """ Resolution to start rendering preview at, progressively increasing it to the full viewport size

    :type: int
    """

    raytrace_method: typing.Literal["AUTO", "OCTREE", "VBVH", "SIMD_SVBVH", "SIMD_QBVH"]
    """ Type of raytrace accelerator structure

    :type: typing.Literal['AUTO','OCTREE','VBVH','SIMD_SVBVH','SIMD_QBVH']
    """

    resolution_percentage: int
    """ Percentage scale for render resolution

    :type: int
    """

    resolution_x: int
    """ Number of horizontal pixels in the rendered image

    :type: int
    """

    resolution_y: int
    """ Number of vertical pixels in the rendered image

    :type: int
    """

    sequencer_gl_preview: typing.Literal[
        "BOUNDBOX", "WIREFRAME", "SOLID", "TEXTURED", "MATERIAL", "RENDERED"
    ]
    """ Method to draw in the sequencer view

    :type: typing.Literal['BOUNDBOX','WIREFRAME','SOLID','TEXTURED','MATERIAL','RENDERED']
    """

    simplify_ao_sss: float
    """ Global approximate AO and SSS quality factor

    :type: float
    """

    simplify_child_particles: float
    """ Global child particles percentage

    :type: float
    """

    simplify_child_particles_render: float
    """ Global child particles percentage during rendering

    :type: float
    """

    simplify_shadow_samples: int
    """ Global maximum shadow samples

    :type: int
    """

    simplify_subdivision: int
    """ Global maximum subdivision level

    :type: int
    """

    simplify_subdivision_render: int
    """ Global maximum subdivision level during rendering

    :type: int
    """

    stamp_background: bpy_prop_array[float]
    """ Color to use behind stamp text

    :type: bpy_prop_array[float]
    """

    stamp_font_size: int
    """ Size of the font used when rendering stamp text

    :type: int
    """

    stamp_foreground: bpy_prop_array[float]
    """ Color to use for stamp text

    :type: bpy_prop_array[float]
    """

    stamp_note_text: str
    """ Custom text to appear in the stamp note

    :type: str
    """

    stereo_views: bpy_prop_collection[SceneRenderView]
    """ 

    :type: bpy_prop_collection[SceneRenderView]
    """

    threads: int
    """ Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)

    :type: int
    """

    threads_mode: typing.Literal["AUTO", "FIXED"]
    """ Determine the amount of render threads used

    :type: typing.Literal['AUTO','FIXED']
    """

    tile_x: int
    """ Horizontal tile size to use while rendering

    :type: int
    """

    tile_y: int
    """ Vertical tile size to use while rendering

    :type: int
    """

    use_antialiasing: bool
    """ Render and combine multiple samples per pixel to prevent jagged edges

    :type: bool
    """

    use_bake_antialiasing: bool
    """ Enables Anti-aliasing

    :type: bool
    """

    use_bake_clear: bool
    """ Clear Images before baking

    :type: bool
    """

    use_bake_lores_mesh: bool
    """ Calculate heights against unsubdivided low resolution mesh

    :type: bool
    """

    use_bake_multires: bool
    """ Bake directly from multires object

    :type: bool
    """

    use_bake_normalize: bool
    """ With displacement normalize to the distance, with ambient occlusion normalize without using material settings

    :type: bool
    """

    use_bake_selected_to_active: bool
    """ Bake shading on the surface of selected objects to the active object

    :type: bool
    """

    use_bake_to_vertex_color: bool
    """ Bake to vertex colors instead of to a UV-mapped image

    :type: bool
    """

    use_bake_user_scale: bool
    """ Use a user scale for the derivative map

    :type: bool
    """

    use_border: bool
    """ Render a user-defined border region, within the frame size (note that this disables save_buffers and full_sample)

    :type: bool
    """

    use_compositing: bool
    """ Process the render result through the compositing pipeline, if compositing nodes are enabled

    :type: bool
    """

    use_crop_to_border: bool
    """ Crop the rendered frame to the defined border size

    :type: bool
    """

    use_edge_enhance: bool
    """ Create a toon outline around the edges of geometry

    :type: bool
    """

    use_envmaps: bool
    """ Calculate environment maps while rendering

    :type: bool
    """

    use_fields: bool
    """ Render image to two fields per frame, for interlaced TV output

    :type: bool
    """

    use_fields_still: bool
    """ Disable the time difference between fields

    :type: bool
    """

    use_file_extension: bool
    """ Add the file format extensions to the rendered file name (eg: filename + .jpg)

    :type: bool
    """

    use_free_image_textures: bool
    """ Free all image textures from memory after render, to save memory before compositing

    :type: bool
    """

    use_freestyle: bool
    """ Draw stylized strokes using Freestyle

    :type: bool
    """

    use_full_sample: bool
    """ Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)

    :type: bool
    """

    use_game_engine: bool
    """ Current rendering engine is a game engine

    :type: bool
    """

    use_instances: bool
    """ Instance support leads to effective memory reduction when using duplicates

    :type: bool
    """

    use_local_coords: bool
    """ Vertex coordinates are stored locally on each primitive (increases memory usage, but may have impact on speed)

    :type: bool
    """

    use_lock_interface: bool
    """ Lock interface during rendering in favor of giving more memory to the renderer

    :type: bool
    """

    use_motion_blur: bool
    """ Use multi-sampled 3D scene motion blur

    :type: bool
    """

    use_multiview: bool
    """ Use multiple views in the scene

    :type: bool
    """

    use_overwrite: bool
    """ Overwrite existing files while rendering

    :type: bool
    """

    use_persistent_data: bool
    """ Keep render data around for faster re-renders

    :type: bool
    """

    use_placeholder: bool
    """ Create empty placeholder files while rendering frames (similar to Unix 'touch')

    :type: bool
    """

    use_raytrace: bool
    """ Pre-calculate the raytrace accelerator and render raytracing effects

    :type: bool
    """

    use_render_cache: bool
    """ Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)

    :type: bool
    """

    use_save_buffers: bool
    """ Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)

    :type: bool
    """

    use_sequencer: bool
    """ Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist

    :type: bool
    """

    use_sequencer_gl_dof: bool
    """ Use depth of field using the values from scene strip active camera

    :type: bool
    """

    use_sequencer_gl_textured_solid: bool
    """ Draw face-assigned textures in solid draw method

    :type: bool
    """

    use_shading_nodes: bool
    """ Active render engine uses new shading nodes system

    :type: bool
    """

    use_shadows: bool
    """ Calculate shadows while rendering

    :type: bool
    """

    use_simplify: bool
    """ Enable simplification of scene for quicker preview renders

    :type: bool
    """

    use_simplify_triangulate: bool
    """ Disable non-planar quads being triangulated

    :type: bool
    """

    use_single_layer: bool
    """ Only render the active layer

    :type: bool
    """

    use_spherical_stereo: bool
    """ Active render engine supports spherical stereo rendering

    :type: bool
    """

    use_sss: bool
    """ Calculate sub-surface scattering in materials rendering

    :type: bool
    """

    use_stamp: bool
    """ Render the stamp info text in the rendered image

    :type: bool
    """

    use_stamp_camera: bool
    """ Include the name of the active camera in image metadata

    :type: bool
    """

    use_stamp_date: bool
    """ Include the current date in image/video metadata

    :type: bool
    """

    use_stamp_filename: bool
    """ Include the .blend filename in image/video metadata

    :type: bool
    """

    use_stamp_frame: bool
    """ Include the frame number in image metadata

    :type: bool
    """

    use_stamp_frame_range: bool
    """ Include the rendered frame range in image/video metadata

    :type: bool
    """

    use_stamp_labels: bool
    """ Draw stamp labels ("Camera" in front of camera name, etc.)

    :type: bool
    """

    use_stamp_lens: bool
    """ Include the active camera's lens in image metadata

    :type: bool
    """

    use_stamp_marker: bool
    """ Include the name of the last marker in image metadata

    :type: bool
    """

    use_stamp_memory: bool
    """ Include the peak memory usage in image metadata

    :type: bool
    """

    use_stamp_note: bool
    """ Include a custom note in image/video metadata

    :type: bool
    """

    use_stamp_render_time: bool
    """ Include the render time in image metadata

    :type: bool
    """

    use_stamp_scene: bool
    """ Include the name of the active scene in image/video metadata

    :type: bool
    """

    use_stamp_sequencer_strip: bool
    """ Include the name of the foreground sequence strip in image metadata

    :type: bool
    """

    use_stamp_strip_meta: bool
    """ Use metadata from the strips in the sequencer

    :type: bool
    """

    use_stamp_time: bool
    """ Include the rendered frame timecode as HH:MM:SS.FF in image metadata

    :type: bool
    """

    use_textures: bool
    """ Use textures to affect material properties

    :type: bool
    """

    use_world_space_shading: bool
    """ Use world space interpretation of lighting data for node materials

    :type: bool
    """

    views: RenderViews
    """ 

    :type: RenderViews
    """

    views_format: typing.Literal["STEREO_3D", "MULTIVIEW"]
    """ 

    :type: typing.Literal['STEREO_3D','MULTIVIEW']
    """

    def frame_path(
        self,
        frame: int | None = -2147483648,
        preview: bool | None = False,
        view: str = "",
    ) -> str:
        """Return the absolute path to the filename to be written for a given frame

        :param frame: Frame number to use, if unset the current frame will be used
        :type frame: int | None
        :param preview: Preview, Use preview range
        :type preview: bool | None
        :param view: View, The name of the view to use to replace the "%" chars
        :type view: str
        :return: File Path, The resulting filepath from the scenes render settings
        :rtype: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderSlot(bpy_struct):
    """Parameters defining the render slot"""

    name: str
    """ Render slot name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RenderView(bpy_struct):
    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RigidBodyConstraint(bpy_struct):
    """Constraint influencing Objects inside Rigid Body Simulation"""

    breaking_threshold: float
    """ Impulse threshold that must be reached for the constraint to break

    :type: float
    """

    disable_collisions: bool
    """ Disable collisions between constrained rigid bodies

    :type: bool
    """

    enabled: bool
    """ Enable this constraint

    :type: bool
    """

    limit_ang_x_lower: float
    """ Lower limit of X axis rotation

    :type: float
    """

    limit_ang_x_upper: float
    """ Upper limit of X axis rotation

    :type: float
    """

    limit_ang_y_lower: float
    """ Lower limit of Y axis rotation

    :type: float
    """

    limit_ang_y_upper: float
    """ Upper limit of Y axis rotation

    :type: float
    """

    limit_ang_z_lower: float
    """ Lower limit of Z axis rotation

    :type: float
    """

    limit_ang_z_upper: float
    """ Upper limit of Z axis rotation

    :type: float
    """

    limit_lin_x_lower: float
    """ Lower limit of X axis translation

    :type: float
    """

    limit_lin_x_upper: float
    """ Upper limit of X axis translation

    :type: float
    """

    limit_lin_y_lower: float
    """ Lower limit of Y axis translation

    :type: float
    """

    limit_lin_y_upper: float
    """ Upper limit of Y axis translation

    :type: float
    """

    limit_lin_z_lower: float
    """ Lower limit of Z axis translation

    :type: float
    """

    limit_lin_z_upper: float
    """ Upper limit of Z axis translation

    :type: float
    """

    motor_ang_max_impulse: float
    """ Maximum angular motor impulse

    :type: float
    """

    motor_ang_target_velocity: float
    """ Target angular motor velocity

    :type: float
    """

    motor_lin_max_impulse: float
    """ Maximum linear motor impulse

    :type: float
    """

    motor_lin_target_velocity: float
    """ Target linear motor velocity

    :type: float
    """

    object1: Object | None
    """ First Rigid Body Object to be constrained

    :type: Object | None
    """

    object2: Object | None
    """ Second Rigid Body Object to be constrained

    :type: Object | None
    """

    solver_iterations: int
    """ Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)

    :type: int
    """

    spring_damping_ang_x: float
    """ Damping on the X rotational axis

    :type: float
    """

    spring_damping_ang_y: float
    """ Damping on the Y rotational axis

    :type: float
    """

    spring_damping_ang_z: float
    """ Damping on the Z rotational axis

    :type: float
    """

    spring_damping_x: float
    """ Damping on the X axis

    :type: float
    """

    spring_damping_y: float
    """ Damping on the Y axis

    :type: float
    """

    spring_damping_z: float
    """ Damping on the Z axis

    :type: float
    """

    spring_stiffness_ang_x: float
    """ Stiffness on the X rotational axis

    :type: float
    """

    spring_stiffness_ang_y: float
    """ Stiffness on the Y rotational axis

    :type: float
    """

    spring_stiffness_ang_z: float
    """ Stiffness on the Z rotational axis

    :type: float
    """

    spring_stiffness_x: float
    """ Stiffness on the X axis

    :type: float
    """

    spring_stiffness_y: float
    """ Stiffness on the Y axis

    :type: float
    """

    spring_stiffness_z: float
    """ Stiffness on the Z axis

    :type: float
    """

    spring_type: typing.Literal["SPRING1", "SPRING2"]
    """ Which implementation of spring to use

    :type: typing.Literal['SPRING1','SPRING2']
    """

    type: typing.Literal[
        "FIXED",
        "POINT",
        "HINGE",
        "SLIDER",
        "PISTON",
        "GENERIC",
        "GENERIC_SPRING",
        "MOTOR",
    ]
    """ Type of Rigid Body Constraint

    :type: typing.Literal['FIXED','POINT','HINGE','SLIDER','PISTON','GENERIC','GENERIC_SPRING','MOTOR']
    """

    use_breaking: bool
    """ Constraint can be broken if it receives an impulse above the threshold

    :type: bool
    """

    use_limit_ang_x: bool
    """ Limit rotation around X axis

    :type: bool
    """

    use_limit_ang_y: bool
    """ Limit rotation around Y axis

    :type: bool
    """

    use_limit_ang_z: bool
    """ Limit rotation around Z axis

    :type: bool
    """

    use_limit_lin_x: bool
    """ Limit translation on X axis

    :type: bool
    """

    use_limit_lin_y: bool
    """ Limit translation on Y axis

    :type: bool
    """

    use_limit_lin_z: bool
    """ Limit translation on Z axis

    :type: bool
    """

    use_motor_ang: bool
    """ Enable angular motor

    :type: bool
    """

    use_motor_lin: bool
    """ Enable linear motor

    :type: bool
    """

    use_override_solver_iterations: bool
    """ Override the number of solver iterations for this constraint

    :type: bool
    """

    use_spring_ang_x: bool
    """ Enable spring on X rotational axis

    :type: bool
    """

    use_spring_ang_y: bool
    """ Enable spring on Y rotational axis

    :type: bool
    """

    use_spring_ang_z: bool
    """ Enable spring on Z rotational axis

    :type: bool
    """

    use_spring_x: bool
    """ Enable spring on X axis

    :type: bool
    """

    use_spring_y: bool
    """ Enable spring on Y axis

    :type: bool
    """

    use_spring_z: bool
    """ Enable spring on Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RigidBodyJointConstraint(Constraint, bpy_struct):
    """For use with the Game Engine"""

    axis_x: float
    """ Rotate pivot on X axis

    :type: float
    """

    axis_y: float
    """ Rotate pivot on Y axis

    :type: float
    """

    axis_z: float
    """ Rotate pivot on Z axis

    :type: float
    """

    breaking_threshold: float
    """ Break on impulse greater than threshold

    :type: float
    """

    child: Object | None
    """ Child object

    :type: Object | None
    """

    limit_angle_max_x: float
    """ 

    :type: float
    """

    limit_angle_max_y: float
    """ 

    :type: float
    """

    limit_angle_max_z: float
    """ 

    :type: float
    """

    limit_angle_min_x: float
    """ 

    :type: float
    """

    limit_angle_min_y: float
    """ 

    :type: float
    """

    limit_angle_min_z: float
    """ 

    :type: float
    """

    limit_max_x: float
    """ 

    :type: float
    """

    limit_max_y: float
    """ 

    :type: float
    """

    limit_max_z: float
    """ 

    :type: float
    """

    limit_min_x: float
    """ 

    :type: float
    """

    limit_min_y: float
    """ 

    :type: float
    """

    limit_min_z: float
    """ 

    :type: float
    """

    pivot_type: typing.Literal["BALL", "HINGE", "CONE_TWIST", "GENERIC_6_DOF"]
    """ 

    :type: typing.Literal['BALL','HINGE','CONE_TWIST','GENERIC_6_DOF']
    """

    pivot_x: float
    """ Offset pivot on X

    :type: float
    """

    pivot_y: float
    """ Offset pivot on Y

    :type: float
    """

    pivot_z: float
    """ Offset pivot on Z

    :type: float
    """

    show_pivot: bool
    """ Display the pivot point and rotation in 3D view

    :type: bool
    """

    target: Object | None
    """ Target Object

    :type: Object | None
    """

    use_angular_limit_x: bool
    """ Use minimum/maximum X angular limit

    :type: bool
    """

    use_angular_limit_y: bool
    """ Use minimum/maximum Y angular limit

    :type: bool
    """

    use_angular_limit_z: bool
    """ Use minimum/maximum Z angular limit

    :type: bool
    """

    use_breaking: bool
    """ Allow breaking on high impulse

    :type: bool
    """

    use_limit_x: bool
    """ Use minimum/maximum X limit

    :type: bool
    """

    use_limit_y: bool
    """ Use minimum/maximum y limit

    :type: bool
    """

    use_limit_z: bool
    """ Use minimum/maximum z limit

    :type: bool
    """

    use_linked_collision: bool
    """ Disable collision between linked bodies

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RigidBodyObject(bpy_struct):
    """Settings for object participating in Rigid Body Simulation"""

    angular_damping: float
    """ Amount of angular velocity that is lost over time

    :type: float
    """

    collision_groups: bpy_prop_array[bool]
    """ Collision Groups Rigid Body belongs to

    :type: bpy_prop_array[bool]
    """

    collision_margin: float
    """ Threshold of distance near surface where collisions are still considered (best results when non-zero)

    :type: float
    """

    collision_shape: typing.Literal[
        "BOX", "SPHERE", "CAPSULE", "CYLINDER", "CONE", "CONVEX_HULL", "MESH"
    ]
    """ Collision Shape of object in Rigid Body Simulations

    :type: typing.Literal['BOX','SPHERE','CAPSULE','CYLINDER','CONE','CONVEX_HULL','MESH']
    """

    deactivate_angular_velocity: float
    """ Angular Velocity below which simulation stops simulating object

    :type: float
    """

    deactivate_linear_velocity: float
    """ Linear Velocity below which simulation stops simulating object

    :type: float
    """

    enabled: bool
    """ Rigid Body actively participates to the simulation

    :type: bool
    """

    friction: float
    """ Resistance of object to movement

    :type: float
    """

    kinematic: bool
    """ Allow rigid body to be controlled by the animation system

    :type: bool
    """

    linear_damping: float
    """ Amount of linear velocity that is lost over time

    :type: float
    """

    mass: float
    """ How much the object 'weighs' irrespective of gravity

    :type: float
    """

    mesh_source: typing.Literal["BASE", "DEFORM", "FINAL"]
    """ Source of the mesh used to create collision shape

    :type: typing.Literal['BASE','DEFORM','FINAL']
    """

    restitution: float
    """ Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)

    :type: float
    """

    type: typing.Literal["ACTIVE", "PASSIVE"]
    """ Role of object in Rigid Body Simulations

    :type: typing.Literal['ACTIVE','PASSIVE']
    """

    use_deactivation: bool
    """ Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)

    :type: bool
    """

    use_deform: bool
    """ Rigid body deforms during simulation

    :type: bool
    """

    use_margin: bool
    """ Use custom collision margin (some shapes will have a visible gap around them)

    :type: bool
    """

    use_start_deactivated: bool
    """ Deactivate rigid body at the start of the simulation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class RigidBodyWorld(bpy_struct):
    """Self-contained rigid body simulation environment and settings"""

    constraints: Group | None
    """ Group containing rigid body constraint objects

    :type: Group | None
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    enabled: bool
    """ Simulation will be evaluated

    :type: bool
    """

    group: Group | None
    """ Group containing objects participating in this simulation

    :type: Group | None
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    solver_iterations: int
    """ Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)

    :type: int
    """

    steps_per_second: int
    """ Number of simulation steps taken per second (higher values are more accurate but slower)

    :type: int
    """

    time_scale: float
    """ Change the speed of the simulation

    :type: float
    """

    use_split_impulse: bool
    """ Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)

    :type: bool
    """

    def convex_sweep_test(
        self,
        object: Object,
        start: collections.abc.Iterable[float] | None,
        end: collections.abc.Iterable[float] | None,
    ):
        """Sweep test convex rigidbody against the current rigidbody world

                :param object: Rigidbody object with a convex collision shape
                :type object: Object
                :param start:
                :type start: collections.abc.Iterable[float] | None
                :param end:
                :type end: collections.abc.Iterable[float] | None
                :return: object_location, The hit location of this sweep test, float array of 3 items in [-inf, inf]

        hitpoint, The hit location of this sweep test, float array of 3 items in [-inf, inf]

        normal, The face normal at the sweep test hit location, float array of 3 items in [-inf, inf]

        has_hit, If the function has found collision point, value is 1, otherwise 0, int in [-inf, inf]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SCENE_UL_keying_set_paths(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SPHFluidSettings(bpy_struct):
    """Settings for particle fluids physics"""

    buoyancy: float
    """ Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid

    :type: float
    """

    factor_radius: bool
    """ Interaction radius is a factor of 4 * particle size

    :type: bool
    """

    factor_repulsion: bool
    """ Repulsion is a factor of stiffness

    :type: bool
    """

    factor_rest_length: bool
    """ Spring rest length is a factor of 2 * particle size

    :type: bool
    """

    factor_stiff_viscosity: bool
    """ Stiff viscosity is a factor of normal viscosity

    :type: bool
    """

    fluid_radius: float
    """ Fluid interaction radius

    :type: float
    """

    linear_viscosity: float
    """ Linear viscosity

    :type: float
    """

    plasticity: float
    """ How much the spring rest length can change after the elastic limit is crossed

    :type: float
    """

    repulsion: float
    """ How strongly the fluid tries to keep from clustering (factor of stiffness)

    :type: float
    """

    rest_density: float
    """ Fluid rest density

    :type: float
    """

    rest_length: float
    """ Spring rest length (factor of particle radius)

    :type: float
    """

    solver: typing.Literal["DDR", "CLASSICAL"]
    """ The code used to calculate internal forces on particles

    :type: typing.Literal['DDR','CLASSICAL']
    """

    spring_force: float
    """ Spring force

    :type: float
    """

    spring_frames: int
    """ Create springs for this number of frames since particles birth (0 is always)

    :type: int
    """

    stiff_viscosity: float
    """ Creates viscosity for expanding fluid

    :type: float
    """

    stiffness: float
    """ How incompressible the fluid is (speed of sound)

    :type: float
    """

    use_factor_density: bool
    """ Density is calculated as a factor of default density (depends on particle size)

    :type: bool
    """

    use_initial_rest_length: bool
    """ Use the initial length as spring rest length instead of 2 * particle size

    :type: bool
    """

    use_viscoelastic_springs: bool
    """ Use viscoelastic springs instead of Hooke's springs

    :type: bool
    """

    yield_ratio: float
    """ How much the spring has to be stretched/compressed in order to change it's rest length

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Scene(ID, bpy_struct):
    """Scene data-block, consisting in objects and defining time and render related settings"""

    active_clip: MovieClip | None
    """ Active movie clip used for constraints and viewport drawing

    :type: MovieClip | None
    """

    active_layer: int | None
    """ Active scene layer index

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    audio_distance_model: typing.Literal[
        "NONE",
        "INVERSE",
        "INVERSE_CLAMPED",
        "LINEAR",
        "LINEAR_CLAMPED",
        "EXPONENT",
        "EXPONENT_CLAMPED",
    ]
    """ Distance model for distance attenuation calculation

    :type: typing.Literal['NONE','INVERSE','INVERSE_CLAMPED','LINEAR','LINEAR_CLAMPED','EXPONENT','EXPONENT_CLAMPED']
    """

    audio_doppler_factor: float
    """ Pitch factor for Doppler effect calculation

    :type: float
    """

    audio_doppler_speed: float
    """ Speed of sound for Doppler effect calculation

    :type: float
    """

    audio_volume: float
    """ Audio volume

    :type: float
    """

    background_set: typing_extensions.Self | None
    """ Background set scene

    :type: typing_extensions.Self | None
    """

    camera: Object | None
    """ Active camera, used for rendering the scene

    :type: Object | None
    """

    cursor_location: bpy_prop_array[float]
    """ 3D cursor location

    :type: bpy_prop_array[float]
    """

    cycles: CyclesRenderSettings
    """ Cycles render settings

    :type: CyclesRenderSettings
    """

    cycles_curves: CyclesCurveRenderSettings
    """ Cycles hair rendering settings

    :type: CyclesCurveRenderSettings
    """

    depsgraph: Depsgraph
    """ Dependencies in the scene data

    :type: Depsgraph
    """

    display_settings: ColorManagedDisplaySettings
    """ Settings of device saved image would be displayed on

    :type: ColorManagedDisplaySettings
    """

    frame_current: int
    """ Current Frame, to update animation data from python frame_set() instead

    :type: int
    """

    frame_current_final: float
    """ Current frame with subframe and time remapping applied

    :type: float
    """

    frame_end: int
    """ Final frame of the playback/rendering range

    :type: int
    """

    frame_float: float
    """ 

    :type: float
    """

    frame_preview_end: int
    """ Alternative end frame for UI playback

    :type: int
    """

    frame_preview_start: int
    """ Alternative start frame for UI playback

    :type: int
    """

    frame_start: int
    """ First frame of the playback/rendering range

    :type: int
    """

    frame_step: int
    """ Number of frames to skip forward while rendering/playing back each frame

    :type: int
    """

    frame_subframe: float
    """ 

    :type: float
    """

    game_settings: SceneGameData
    """ 

    :type: SceneGameData
    """

    gravity: bpy_prop_array[float]
    """ Constant acceleration in a given direction

    :type: bpy_prop_array[float]
    """

    grease_pencil: GreasePencil | None
    """ Grease Pencil data-block

    :type: GreasePencil | None
    """

    is_nla_tweakmode: bool
    """ Whether there is any action referenced by NLA being edited (strictly read-only)

    :type: bool
    """

    keying_sets: KeyingSets
    """ Absolute Keying Sets for this Scene

    :type: KeyingSets
    """

    keying_sets_all: KeyingSetsAll
    """ All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)

    :type: KeyingSetsAll
    """

    layers: bpy_prop_array[bool]
    """ Visible layers - Shift-Click/Drag to select multiple layers

    :type: bpy_prop_array[bool]
    """

    lock_frame_selection_to_range: bool
    """ Don't allow frame to be selected with mouse outside of frame range

    :type: bool
    """

    node_tree: CompositorNodeTree | None
    """ Compositing node tree

    :type: CompositorNodeTree | None
    """

    object_bases: SceneBases
    """ 

    :type: SceneBases
    """

    objects: SceneObjects
    """ 

    :type: SceneObjects
    """

    orientations: bpy_prop_collection[TransformOrientation]
    """ 

    :type: bpy_prop_collection[TransformOrientation]
    """

    render: RenderSettings
    """ 

    :type: RenderSettings
    """

    rigidbody_world: RigidBodyWorld
    """ 

    :type: RigidBodyWorld
    """

    safe_areas: DisplaySafeAreas
    """ 

    :type: DisplaySafeAreas
    """

    sequence_editor: SequenceEditor
    """ 

    :type: SequenceEditor
    """

    sequencer_colorspace_settings: ColorManagedSequencerColorspaceSettings
    """ Settings of color space sequencer is working in

    :type: ColorManagedSequencerColorspaceSettings
    """

    show_keys_from_selected_only: bool
    """ Consider keyframes for active Object and/or its selected bones only (in timeline and when jumping between keyframes)

    :type: bool
    """

    show_subframe: bool
    """ Show current scene subframe and allow set it using interface tools

    :type: bool
    """

    sync_mode: typing.Literal["NONE", "FRAME_DROP", "AUDIO_SYNC"]
    """ How to sync playback

    :type: typing.Literal['NONE','FRAME_DROP','AUDIO_SYNC']
    """

    timeline_markers: TimelineMarkers
    """ Markers used in all timelines for the current scene

    :type: TimelineMarkers
    """

    tool_settings: ToolSettings
    """ 

    :type: ToolSettings
    """

    unit_settings: UnitSettings
    """ Unit editing settings

    :type: UnitSettings
    """

    use_audio: bool
    """ Play back of audio from Sequence Editor will be muted

    :type: bool
    """

    use_audio_scrub: bool
    """ Play audio from Sequence Editor while scrubbing

    :type: bool
    """

    use_audio_sync: bool
    """ Play back and sync with audio clock, dropping frames if frame display is too slow

    :type: bool
    """

    use_frame_drop: bool
    """ Play back dropping frames if frame display is too slow

    :type: bool
    """

    use_gravity: bool
    """ Use global gravity for all dynamics

    :type: bool
    """

    use_nodes: bool
    """ Enable the compositing node tree

    :type: bool
    """

    use_preview_range: bool
    """ Use an alternative start/end frame range for animation playback and OpenGL renders instead of the Render properties start/end frame range

    :type: bool
    """

    use_stamp_note: str
    """ User defined note for the render stamping

    :type: str
    """

    view_settings: ColorManagedViewSettings
    """ Color management settings applied on image before saving

    :type: ColorManagedViewSettings
    """

    world: World | None
    """ World used for rendering the scene

    :type: World | None
    """

    def statistics(self) -> str:
        """statistics

        :return: Statistics
        :rtype: str
        """

    def frame_set(self, frame: int | None, subframe: float | None = 0.0):
        """Set scene frame updating all objects immediately

        :param frame: Frame number to set
        :type frame: int | None
        :param subframe: Sub-frame time, between 0.0 and 1.0
        :type subframe: float | None
        """

    def update(self):
        """Update data tagged to be updated from previous access to data or operators"""

    def uvedit_aspect(self, object: Object) -> bpy_prop_array[float]:
        """Get uv aspect for current object

        :param object: Object
        :type object: Object
        :return: aspect
        :rtype: bpy_prop_array[float]
        """

    def ray_cast(
        self,
        origin: collections.abc.Iterable[float] | None,
        direction: collections.abc.Iterable[float] | None,
        distance: float | None = 1.70141e38,
    ):
        """Cast a ray onto in object space

                :param origin:
                :type origin: collections.abc.Iterable[float] | None
                :param direction:
                :type direction: collections.abc.Iterable[float] | None
                :param distance: Maximum distance
                :type distance: float | None
                :return: result, boolean

        location, The hit location of this ray cast, float array of 3 items in [-inf, inf]

        normal, The face normal at the ray cast hit location, float array of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]

        object, Ray cast object, `Object`

        matrix, Matrix, float multi-dimensional array of 4 * 4 items in [-inf, inf]
        """

    def sequence_editor_create(self) -> SequenceEditor:
        """Ensure sequence editor is valid in this scene

        :return: New sequence editor data or NULL
        :rtype: SequenceEditor
        """

    def sequence_editor_clear(self):
        """Clear sequence editor in this scene"""

    def alembic_export(
        self,
        filepath: str,
        frame_start: int | None = 1,
        frame_end: int | None = 1,
        xform_samples: int | None = 1,
        geom_samples: int | None = 1,
        shutter_open: float | None = 0.0,
        shutter_close: float | None = 1.0,
        selected_only: bool | None = False,
        uvs: bool | None = True,
        normals: bool | None = True,
        vcolors: bool | None = False,
        apply_subdiv: bool | None = True,
        flatten: bool | None = False,
        visible_layers_only: bool | None = False,
        renderable_only: bool | None = False,
        face_sets: bool | None = False,
        subdiv_schema: bool | None = False,
        export_hair: bool | None = True,
        export_particles: bool | None = True,
        compression_type: typing.Literal["OGAWA", "HDF5"] | None = "OGAWA",
        packuv: bool | None = False,
        scale: float | None = 1.0,
        triangulate: bool | None = False,
        quad_method: typing.Literal[
            "BEAUTY", "FIXED", "FIXED_ALTERNATE", "SHORTEST_DIAGONAL"
        ]
        | None = "BEAUTY",
        ngon_method: typing.Literal[
            "BEAUTY", "FIXED", "FIXED_ALTERNATE", "SHORTEST_DIAGONAL"
        ]
        | None = "BEAUTY",
    ):
        """Export to Alembic file (deprecated, use the Alembic export operator)

                :param filepath: File Path, File path to write Alembic file
                :type filepath: str
                :param frame_start: Start, Start Frame
                :type frame_start: int | None
                :param frame_end: End, End Frame
                :type frame_end: int | None
                :param xform_samples: Xform samples, Transform samples per frame
                :type xform_samples: int | None
                :param geom_samples: Geom samples, Geometry samples per frame
                :type geom_samples: int | None
                :param shutter_open: Shutter open
                :type shutter_open: float | None
                :param shutter_close: Shutter close
                :type shutter_close: float | None
                :param selected_only: Selected only, Export only selected objects
                :type selected_only: bool | None
                :param uvs: UVs, Export UVs
                :type uvs: bool | None
                :param normals: Normals, Export normals
                :type normals: bool | None
                :param vcolors: Vertex colors, Export vertex colors
                :type vcolors: bool | None
                :param apply_subdiv: Subsurfs as meshes, Export subdivision surfaces as meshes
                :type apply_subdiv: bool | None
                :param flatten: Flatten hierarchy, Flatten hierarchy
                :type flatten: bool | None
                :param visible_layers_only: Visible layers only, Export only objects in visible layers
                :type visible_layers_only: bool | None
                :param renderable_only: Renderable objects only, Export only objects marked renderable in the outliner
                :type renderable_only: bool | None
                :param face_sets: Facesets, Export face sets
                :type face_sets: bool | None
                :param subdiv_schema: Use Alembic subdivision Schema, Use Alembic subdivision Schema
                :type subdiv_schema: bool | None
                :param export_hair: Export Hair, Exports hair particle systems as animated curves
                :type export_hair: bool | None
                :param export_particles: Export Particles, Exports non-hair particle systems
                :type export_particles: bool | None
                :param compression_type: Compression
                :type compression_type: typing.Literal['OGAWA','HDF5'] | None
                :param packuv: Export with packed UV islands, Export with packed UV islands
                :type packuv: bool | None
                :param scale: Scale, Value by which to enlarge or shrink the objects with respect to the world's origin
                :type scale: float | None
                :param triangulate: Triangulate, Export Polygons (Quads & NGons) as Triangles
                :type triangulate: bool | None
                :param quad_method: Quad Method, Method for splitting the quads into triangles

        BEAUTY Beauty , Split the quads in nice triangles, slower method.

        FIXED Fixed, Split the quads on the first and third vertices.

        FIXED_ALTERNATE Fixed Alternate, Split the quads on the 2nd and 4th vertices.

        SHORTEST_DIAGONAL Shortest Diagonal, Split the quads based on the distance between the vertices.
                :type quad_method: typing.Literal['BEAUTY','FIXED','FIXED_ALTERNATE','SHORTEST_DIAGONAL'] | None
                :param ngon_method: Polygon Method, Method for splitting the polygons into triangles

        BEAUTY Beauty , Split the quads in nice triangles, slower method.

        FIXED Fixed, Split the quads on the first and third vertices.

        FIXED_ALTERNATE Fixed Alternate, Split the quads on the 2nd and 4th vertices.

        SHORTEST_DIAGONAL Shortest Diagonal, Split the quads based on the distance between the vertices.
                :type ngon_method: typing.Literal['BEAUTY','FIXED','FIXED_ALTERNATE','SHORTEST_DIAGONAL'] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneActuator(Actuator, bpy_struct):
    camera: Object | None
    """ Set this Camera (leave empty to refer to self object)

    :type: Object | None
    """

    mode: typing.Literal[
        "RESTART", "SET", "CAMERA", "ADDFRONT", "ADDBACK", "REMOVE", "SUSPEND", "RESUME"
    ]
    """ 

    :type: typing.Literal['RESTART','SET','CAMERA','ADDFRONT','ADDBACK','REMOVE','SUSPEND','RESUME']
    """

    scene: Scene | None
    """ Scene to be added/removed/paused/resumed

    :type: Scene | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneGameData(bpy_struct):
    """Game data for a Scene data-block"""

    active_attachment: RenderAttachment | None
    """ Active attachment slot being displayed

    :type: RenderAttachment | None
    """

    active_attachment_index: int | None
    """ Index of active attachment slot

    :type: int | None
    """

    attachment_slots: bpy_prop_collection[RenderAttachment]
    """ Render attachment slots defining the render outputs

    :type: bpy_prop_collection[RenderAttachment]
    """

    deactivation_angular_threshold: float
    """ Angular velocity that an object must be below before the deactivation timer can start

    :type: float
    """

    deactivation_linear_threshold: float
    """ Linear velocity that an object must be below before the deactivation timer can start

    :type: float
    """

    deactivation_time: float
    """ Amount of time (in seconds) after which objects with a velocity less than the given threshold will deactivate (0.0 means no deactivation)

    :type: float
    """

    depth: int
    """ Display bit depth of full screen display

    :type: int
    """

    exit_key: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ The key that exits the Game Engine

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    fps: int
    """ Nominal number of game frames per second (physics fixed timestep = 1/fps, independently of actual frame rate)

    :type: int
    """

    frame_color: bpy_prop_array[float]
    """ Set color of the bars

    :type: bpy_prop_array[float]
    """

    frame_type: typing.Literal["LETTERBOX", "EXTEND", "SCALE"]
    """ Select the type of Framing you want

    :type: typing.Literal['LETTERBOX','EXTEND','SCALE']
    """

    frequency: int
    """ Display clock frequency of fullscreen display

    :type: int
    """

    hdr: typing.Literal["HDR_NONE", "HDR_HALF_FLOAT", "HDR_FULL_FLOAT"]
    """ The precision of screen display

    :type: typing.Literal['HDR_NONE','HDR_HALF_FLOAT','HDR_FULL_FLOAT']
    """

    level_height: float
    """ Max difference in heights of obstacles to enable their interaction

    :type: float
    """

    logic_step_max: int
    """ Maximum number of logic frame per game frame if graphics slows down the game, higher value allows better synchronization with physics

    :type: int
    """

    obstacle_simulation: typing.Literal["NONE", "RVO_RAYS", "RVO_CELLS"]
    """ Simulation used for obstacle avoidance in the game engine

    :type: typing.Literal['NONE','RVO_RAYS','RVO_CELLS']
    """

    occlusion_culling_resolution: int
    """ Size of the occlusion buffer, use higher value for better precision (slower)

    :type: int
    """

    physics_engine: typing.Literal["NONE", "BULLET"]
    """ Physics engine used for physics simulation in the game engine

    :type: typing.Literal['NONE','BULLET']
    """

    physics_gravity: float
    """ Gravitational constant used for physics simulation in the game engine

    :type: float
    """

    physics_solver: typing.Literal[
        "SOLVER_SEQUENTIAL", "SOLVER_NNGC", "SOLVER_MLCP_DANTZIG", "SOLVER_MLCP_LEMKE"
    ]
    """ Physics constraint solver

    :type: typing.Literal['SOLVER_SEQUENTIAL','SOLVER_NNGC','SOLVER_MLCP_DANTZIG','SOLVER_MLCP_LEMKE']
    """

    physics_step_max: int
    """ Maximum number of physics step per game frame if graphics slows down the game, higher value allows physics to keep up with realtime

    :type: int
    """

    physics_step_sub: int
    """ Number of simulation substep per physic timestep, higher value give better physics precision

    :type: int
    """

    python_console_key1: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ First python console shortcut key

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    python_console_key2: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Second python console shortcut key

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    python_console_key3: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Third python console shortcut key

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    python_console_key4: typing.Literal[
        "NONE",
        "LEFTMOUSE",
        "MIDDLEMOUSE",
        "RIGHTMOUSE",
        "BUTTON4MOUSE",
        "BUTTON5MOUSE",
        "BUTTON6MOUSE",
        "BUTTON7MOUSE",
        "ACTIONMOUSE",
        "SELECTMOUSE",
        "PEN",
        "ERASER",
        "MOUSEMOVE",
        "INBETWEEN_MOUSEMOVE",
        "TRACKPADPAN",
        "TRACKPADZOOM",
        "MOUSEROTATE",
        "WHEELUPMOUSE",
        "WHEELDOWNMOUSE",
        "WHEELINMOUSE",
        "WHEELOUTMOUSE",
        "EVT_TWEAK_L",
        "EVT_TWEAK_M",
        "EVT_TWEAK_R",
        "EVT_TWEAK_A",
        "EVT_TWEAK_S",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "LEFT_CTRL",
        "LEFT_ALT",
        "LEFT_SHIFT",
        "RIGHT_ALT",
        "RIGHT_CTRL",
        "RIGHT_SHIFT",
        "OSKEY",
        "GRLESS",
        "ESC",
        "TAB",
        "RET",
        "SPACE",
        "LINE_FEED",
        "BACK_SPACE",
        "DEL",
        "SEMI_COLON",
        "PERIOD",
        "COMMA",
        "QUOTE",
        "ACCENT_GRAVE",
        "MINUS",
        "PLUS",
        "SLASH",
        "BACK_SLASH",
        "EQUAL",
        "LEFT_BRACKET",
        "RIGHT_BRACKET",
        "LEFT_ARROW",
        "DOWN_ARROW",
        "RIGHT_ARROW",
        "UP_ARROW",
        "NUMPAD_2",
        "NUMPAD_4",
        "NUMPAD_6",
        "NUMPAD_8",
        "NUMPAD_1",
        "NUMPAD_3",
        "NUMPAD_5",
        "NUMPAD_7",
        "NUMPAD_9",
        "NUMPAD_PERIOD",
        "NUMPAD_SLASH",
        "NUMPAD_ASTERIX",
        "NUMPAD_0",
        "NUMPAD_MINUS",
        "NUMPAD_ENTER",
        "NUMPAD_PLUS",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F6",
        "F7",
        "F8",
        "F9",
        "F10",
        "F11",
        "F12",
        "F13",
        "F14",
        "F15",
        "F16",
        "F17",
        "F18",
        "F19",
        "PAUSE",
        "INSERT",
        "HOME",
        "PAGE_UP",
        "PAGE_DOWN",
        "END",
        "MEDIA_PLAY",
        "MEDIA_STOP",
        "MEDIA_FIRST",
        "MEDIA_LAST",
        "TEXTINPUT",
        "WINDOW_DEACTIVATE",
        "TIMER",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "TIMER_JOBS",
        "TIMER_AUTOSAVE",
        "TIMER_REPORT",
        "TIMERREGION",
        "NDOF_MOTION",
        "NDOF_BUTTON_MENU",
        "NDOF_BUTTON_FIT",
        "NDOF_BUTTON_TOP",
        "NDOF_BUTTON_BOTTOM",
        "NDOF_BUTTON_LEFT",
        "NDOF_BUTTON_RIGHT",
        "NDOF_BUTTON_FRONT",
        "NDOF_BUTTON_BACK",
        "NDOF_BUTTON_ISO1",
        "NDOF_BUTTON_ISO2",
        "NDOF_BUTTON_ROLL_CW",
        "NDOF_BUTTON_ROLL_CCW",
        "NDOF_BUTTON_SPIN_CW",
        "NDOF_BUTTON_SPIN_CCW",
        "NDOF_BUTTON_TILT_CW",
        "NDOF_BUTTON_TILT_CCW",
        "NDOF_BUTTON_ROTATE",
        "NDOF_BUTTON_PANZOOM",
        "NDOF_BUTTON_DOMINANT",
        "NDOF_BUTTON_PLUS",
        "NDOF_BUTTON_MINUS",
        "NDOF_BUTTON_ESC",
        "NDOF_BUTTON_ALT",
        "NDOF_BUTTON_SHIFT",
        "NDOF_BUTTON_CTRL",
        "NDOF_BUTTON_1",
        "NDOF_BUTTON_2",
        "NDOF_BUTTON_3",
        "NDOF_BUTTON_4",
        "NDOF_BUTTON_5",
        "NDOF_BUTTON_6",
        "NDOF_BUTTON_7",
        "NDOF_BUTTON_8",
        "NDOF_BUTTON_9",
        "NDOF_BUTTON_10",
        "NDOF_BUTTON_A",
        "NDOF_BUTTON_B",
        "NDOF_BUTTON_C",
        "ACTIONZONE_AREA",
        "ACTIONZONE_REGION",
        "ACTIONZONE_FULLSCREEN",
    ]
    """ Fourth python console shortcut key

    :type: typing.Literal['NONE','LEFTMOUSE','MIDDLEMOUSE','RIGHTMOUSE','BUTTON4MOUSE','BUTTON5MOUSE','BUTTON6MOUSE','BUTTON7MOUSE','ACTIONMOUSE','SELECTMOUSE','PEN','ERASER','MOUSEMOVE','INBETWEEN_MOUSEMOVE','TRACKPADPAN','TRACKPADZOOM','MOUSEROTATE','WHEELUPMOUSE','WHEELDOWNMOUSE','WHEELINMOUSE','WHEELOUTMOUSE','EVT_TWEAK_L','EVT_TWEAK_M','EVT_TWEAK_R','EVT_TWEAK_A','EVT_TWEAK_S','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','ZERO','ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT','NINE','LEFT_CTRL','LEFT_ALT','LEFT_SHIFT','RIGHT_ALT','RIGHT_CTRL','RIGHT_SHIFT','OSKEY','GRLESS','ESC','TAB','RET','SPACE','LINE_FEED','BACK_SPACE','DEL','SEMI_COLON','PERIOD','COMMA','QUOTE','ACCENT_GRAVE','MINUS','PLUS','SLASH','BACK_SLASH','EQUAL','LEFT_BRACKET','RIGHT_BRACKET','LEFT_ARROW','DOWN_ARROW','RIGHT_ARROW','UP_ARROW','NUMPAD_2','NUMPAD_4','NUMPAD_6','NUMPAD_8','NUMPAD_1','NUMPAD_3','NUMPAD_5','NUMPAD_7','NUMPAD_9','NUMPAD_PERIOD','NUMPAD_SLASH','NUMPAD_ASTERIX','NUMPAD_0','NUMPAD_MINUS','NUMPAD_ENTER','NUMPAD_PLUS','F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12','F13','F14','F15','F16','F17','F18','F19','PAUSE','INSERT','HOME','PAGE_UP','PAGE_DOWN','END','MEDIA_PLAY','MEDIA_STOP','MEDIA_FIRST','MEDIA_LAST','TEXTINPUT','WINDOW_DEACTIVATE','TIMER','TIMER0','TIMER1','TIMER2','TIMER_JOBS','TIMER_AUTOSAVE','TIMER_REPORT','TIMERREGION','NDOF_MOTION','NDOF_BUTTON_MENU','NDOF_BUTTON_FIT','NDOF_BUTTON_TOP','NDOF_BUTTON_BOTTOM','NDOF_BUTTON_LEFT','NDOF_BUTTON_RIGHT','NDOF_BUTTON_FRONT','NDOF_BUTTON_BACK','NDOF_BUTTON_ISO1','NDOF_BUTTON_ISO2','NDOF_BUTTON_ROLL_CW','NDOF_BUTTON_ROLL_CCW','NDOF_BUTTON_SPIN_CW','NDOF_BUTTON_SPIN_CCW','NDOF_BUTTON_TILT_CW','NDOF_BUTTON_TILT_CCW','NDOF_BUTTON_ROTATE','NDOF_BUTTON_PANZOOM','NDOF_BUTTON_DOMINANT','NDOF_BUTTON_PLUS','NDOF_BUTTON_MINUS','NDOF_BUTTON_ESC','NDOF_BUTTON_ALT','NDOF_BUTTON_SHIFT','NDOF_BUTTON_CTRL','NDOF_BUTTON_1','NDOF_BUTTON_2','NDOF_BUTTON_3','NDOF_BUTTON_4','NDOF_BUTTON_5','NDOF_BUTTON_6','NDOF_BUTTON_7','NDOF_BUTTON_8','NDOF_BUTTON_9','NDOF_BUTTON_10','NDOF_BUTTON_A','NDOF_BUTTON_B','NDOF_BUTTON_C','ACTIONZONE_AREA','ACTIONZONE_REGION','ACTIONZONE_FULLSCREEN']
    """

    recast_data: SceneGameRecastData
    """ 

    :type: SceneGameRecastData
    """

    resolution_x: int
    """ Number of horizontal pixels in the screen

    :type: int
    """

    resolution_y: int
    """ Number of vertical pixels in the screen

    :type: int
    """

    samples: typing.Literal[
        "SAMPLES_0", "FXAA", "SAMPLES_2", "SAMPLES_4", "SAMPLES_8", "SAMPLES_16"
    ]
    """ The number of AA Samples to use for MSAA

    :type: typing.Literal['SAMPLES_0','FXAA','SAMPLES_2','SAMPLES_4','SAMPLES_8','SAMPLES_16']
    """

    scene_hysteresis_percentage: int
    """ Minimum distance change required to transition to the previous level of detail

    :type: int
    """

    show_armatures: typing.Literal["DISABLE", "FORCE", "ALLOW"]
    """ Show a visualization of armatures

    :type: typing.Literal['DISABLE','FORCE','ALLOW']
    """

    show_bounding_box: typing.Literal["DISABLE", "FORCE", "ALLOW"]
    """ Show a visualization of bounding volume box

    :type: typing.Literal['DISABLE','FORCE','ALLOW']
    """

    show_camera_frustum: typing.Literal["DISABLE", "FORCE", "ALLOW"]
    """ Show a visualization of the camera frustum according to the current viewport dimensions

    :type: typing.Literal['DISABLE','FORCE','ALLOW']
    """

    show_debug_properties: bool
    """ Show properties marked for debugging while the game runs

    :type: bool
    """

    show_framerate_profile: bool
    """ Show framerate and profiling information while the game runs

    :type: bool
    """

    show_fullscreen: bool
    """ Start player in a new fullscreen display

    :type: bool
    """

    show_mouse: bool
    """ Start player with a visible mouse cursor

    :type: bool
    """

    show_obstacle_simulation: bool
    """ Enable debug visualization for obstacle simulation

    :type: bool
    """

    show_physics_visualization: bool
    """ Show a visualization of physics bounds and interactions

    :type: bool
    """

    show_render_queries: bool
    """ Show render queries information while the game runs

    :type: bool
    """

    show_shadow_frustum: typing.Literal["DISABLE", "FORCE", "ALLOW"]
    """ Show a visualization of the light shadow frustum

    :type: typing.Literal['DISABLE','FORCE','ALLOW']
    """

    stereo: typing.Literal["NONE", "STEREO"]
    """ 

    :type: typing.Literal['NONE','STEREO']
    """

    stereo_eye_separation: float
    """ Set the distance between the eyes - the camera focal distance/30 should be fine

    :type: float
    """

    stereo_mode: typing.Literal[
        "QUADBUFFERED",
        "ABOVEBELOW",
        "INTERLACED",
        "ANAGLYPH",
        "SIDEBYSIDE",
        "VINTERLACE",
        "3DTVTOPBOTTOM",
    ]
    """ Stereographic techniques

    :type: typing.Literal['QUADBUFFERED','ABOVEBELOW','INTERLACED','ANAGLYPH','SIDEBYSIDE','VINTERLACE','3DTVTOPBOTTOM']
    """

    time_scale: float
    """ Time scale to slow down or speed up animations and physics in game

    :type: float
    """

    use_activity_culling: bool
    """ Enable object activity culling in this scene

    :type: bool
    """

    use_auto_start: bool
    """ Automatically start game at load time

    :type: bool
    """

    use_deprecation_warnings: bool
    """ Print warnings when using deprecated features in the python API

    :type: bool
    """

    use_desktop: bool
    """ Use the current desktop resolution in fullscreen mode

    :type: bool
    """

    use_frame_rate: bool
    """ Respect the frame rate from the Physics panel in the world properties rather than rendering as many frames as possible

    :type: bool
    """

    use_glsl_color_management: bool
    """ Use color management for GLSL rendering

    :type: bool
    """

    use_glsl_environment_lighting: bool
    """ Use environment lighting for GLSL rendering

    :type: bool
    """

    use_glsl_extra_textures: bool
    """ Use extra textures like normal or specular maps for GLSL rendering

    :type: bool
    """

    use_glsl_lights: bool
    """ Use lights for GLSL rendering

    :type: bool
    """

    use_glsl_nodes: bool
    """ Use nodes for GLSL rendering

    :type: bool
    """

    use_glsl_ramps: bool
    """ Use ramps for GLSL rendering

    :type: bool
    """

    use_glsl_shaders: bool
    """ Use shaders for GLSL rendering

    :type: bool
    """

    use_glsl_shadows: bool
    """ Use shadows for GLSL rendering

    :type: bool
    """

    use_occlusion_culling: bool
    """ Use optimized Bullet DBVT tree for view frustum and occlusion culling (more efficient, but it can waste unnecessary CPU if the scene doesn't have occluder objects)

    :type: bool
    """

    use_python_console: bool
    """ Create a python interpreter console in game

    :type: bool
    """

    use_restrict_animation_updates: bool
    """ Restrict the number of animation updates to the animation FPS (this is better for performance, but can cause issues with smooth playback)

    :type: bool
    """

    use_scene_hysteresis: bool
    """ Use LoD Hysteresis setting for the scene

    :type: bool
    """

    vsync: typing.Literal["OFF", "ON", "ADAPTIVE"]
    """ Change vsync settings

    :type: typing.Literal['OFF','ON','ADAPTIVE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneGameRecastData(bpy_struct):
    """Recast data for a Game data-block"""

    agent_height: float
    """ Minimum height where the agent can still walk

    :type: float
    """

    agent_radius: float
    """ Radius of the agent

    :type: float
    """

    cell_height: float
    """ Rasterized cell height

    :type: float
    """

    cell_size: float
    """ Rasterized cell size

    :type: float
    """

    climb_max: float
    """ Maximum height between grid cells the agent can climb

    :type: float
    """

    edge_max_error: float
    """ Maximum distance error from contour to cells

    :type: float
    """

    edge_max_len: float
    """ Maximum contour edge length

    :type: float
    """

    partitioning: typing.Literal["WATERSHED", "MONOTONE", "LAYERS"]
    """ Choose partitioning method

    :type: typing.Literal['WATERSHED','MONOTONE','LAYERS']
    """

    region_merge_size: float
    """ Minimum regions size (smaller regions will be merged)

    :type: float
    """

    region_min_size: float
    """ Minimum regions size (smaller regions will be deleted)

    :type: float
    """

    sample_dist: float
    """ Detail mesh sample spacing

    :type: float
    """

    sample_max_error: float
    """ Detail mesh simplification max sample error

    :type: float
    """

    slope_max: float
    """ Maximum walkable slope angle

    :type: float
    """

    verts_per_poly: int
    """ Max number of vertices per polygon

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneRenderLayer(bpy_struct):
    """Render layer"""

    cycles: CyclesRenderLayerSettings
    """ Cycles SceneRenderLayer Settings

    :type: CyclesRenderLayerSettings
    """

    exclude_ambient_occlusion: bool
    """ Exclude AO pass from combined

    :type: bool
    """

    exclude_emit: bool
    """ Exclude emission pass from combined

    :type: bool
    """

    exclude_environment: bool
    """ Exclude environment pass from combined

    :type: bool
    """

    exclude_indirect: bool
    """ Exclude indirect pass from combined

    :type: bool
    """

    exclude_reflection: bool
    """ Exclude raytraced reflection pass from combined

    :type: bool
    """

    exclude_refraction: bool
    """ Exclude raytraced refraction pass from combined

    :type: bool
    """

    exclude_shadow: bool
    """ Exclude shadow pass from combined

    :type: bool
    """

    exclude_specular: bool
    """ Exclude specular pass from combined

    :type: bool
    """

    freestyle_settings: FreestyleSettings
    """ 

    :type: FreestyleSettings
    """

    invert_zmask: bool
    """ For Zmask, only render what is behind solid z values instead of in front

    :type: bool
    """

    layers: bpy_prop_array[bool]
    """ Scene layers included in this render layer

    :type: bpy_prop_array[bool]
    """

    layers_exclude: bpy_prop_array[bool]
    """ Exclude scene layers from having any influence

    :type: bpy_prop_array[bool]
    """

    layers_zmask: bpy_prop_array[bool]
    """ Zmask scene layers for solid faces

    :type: bpy_prop_array[bool]
    """

    light_override: Group | None
    """ Group to override all other lights in this render layer

    :type: Group | None
    """

    material_override: Material | None
    """ Material to override all other materials in this render layer

    :type: Material | None
    """

    name: str
    """ Render layer name

    :type: str
    """

    pass_alpha_threshold: float
    """ Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold

    :type: float
    """

    samples: int
    """ Override number of render samples for this render layer, 0 will use the scene setting

    :type: int
    """

    use: bool
    """ Disable or enable the render layer

    :type: bool
    """

    use_all_z: bool
    """ Fill in Z values for solid faces in invisible layers, for masking

    :type: bool
    """

    use_ao: bool
    """ Render AO in this Layer

    :type: bool
    """

    use_edge_enhance: bool
    """ Render Edge-enhance in this Layer (only works for Solid faces)

    :type: bool
    """

    use_freestyle: bool
    """ Render stylized strokes in this Layer

    :type: bool
    """

    use_halo: bool
    """ Render Halos in this Layer (on top of Solid)

    :type: bool
    """

    use_pass_ambient_occlusion: bool
    """ Deliver AO pass

    :type: bool
    """

    use_pass_color: bool
    """ Deliver shade-less color pass

    :type: bool
    """

    use_pass_combined: bool
    """ Deliver full combined RGBA buffer

    :type: bool
    """

    use_pass_diffuse: bool
    """ Deliver diffuse pass

    :type: bool
    """

    use_pass_diffuse_color: bool
    """ Deliver diffuse color pass

    :type: bool
    """

    use_pass_diffuse_direct: bool
    """ Deliver diffuse direct pass

    :type: bool
    """

    use_pass_diffuse_indirect: bool
    """ Deliver diffuse indirect pass

    :type: bool
    """

    use_pass_emit: bool
    """ Deliver emission pass

    :type: bool
    """

    use_pass_environment: bool
    """ Deliver environment lighting pass

    :type: bool
    """

    use_pass_glossy_color: bool
    """ Deliver glossy color pass

    :type: bool
    """

    use_pass_glossy_direct: bool
    """ Deliver glossy direct pass

    :type: bool
    """

    use_pass_glossy_indirect: bool
    """ Deliver glossy indirect pass

    :type: bool
    """

    use_pass_indirect: bool
    """ Deliver indirect lighting pass

    :type: bool
    """

    use_pass_material_index: bool
    """ Deliver material index pass

    :type: bool
    """

    use_pass_mist: bool
    """ Deliver mist factor pass (0.0-1.0)

    :type: bool
    """

    use_pass_normal: bool
    """ Deliver normal pass

    :type: bool
    """

    use_pass_object_index: bool
    """ Deliver object index pass

    :type: bool
    """

    use_pass_reflection: bool
    """ Deliver raytraced reflection pass

    :type: bool
    """

    use_pass_refraction: bool
    """ Deliver raytraced refraction pass

    :type: bool
    """

    use_pass_shadow: bool
    """ Deliver shadow pass

    :type: bool
    """

    use_pass_specular: bool
    """ Deliver specular pass

    :type: bool
    """

    use_pass_subsurface_color: bool
    """ Deliver subsurface color pass

    :type: bool
    """

    use_pass_subsurface_direct: bool
    """ Deliver subsurface direct pass

    :type: bool
    """

    use_pass_subsurface_indirect: bool
    """ Deliver subsurface indirect pass

    :type: bool
    """

    use_pass_transmission_color: bool
    """ Deliver transmission color pass

    :type: bool
    """

    use_pass_transmission_direct: bool
    """ Deliver transmission direct pass

    :type: bool
    """

    use_pass_transmission_indirect: bool
    """ Deliver transmission indirect pass

    :type: bool
    """

    use_pass_uv: bool
    """ Deliver texture UV pass

    :type: bool
    """

    use_pass_vector: bool
    """ Deliver speed vector pass

    :type: bool
    """

    use_pass_z: bool
    """ Deliver Z values pass

    :type: bool
    """

    use_sky: bool
    """ Render Sky in this Layer

    :type: bool
    """

    use_solid: bool
    """ Render Solid faces in this Layer

    :type: bool
    """

    use_strand: bool
    """ Render Strands in this Layer

    :type: bool
    """

    use_zmask: bool
    """ Only render what's in front of the solid z values

    :type: bool
    """

    use_ztransp: bool
    """ Render Z-Transparent faces in this Layer (on top of Solid and Halos)

    :type: bool
    """

    @classmethod
    def update_render_passes(cls):
        """Requery the enabled render passes from the render engine"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneRenderView(bpy_struct):
    """Render viewpoint for 3D stereo and multiview rendering"""

    camera_suffix: str
    """ Suffix to identify the cameras to use, and added to the render images for this view

    :type: str
    """

    file_suffix: str
    """ Suffix added to the render images for this view

    :type: str
    """

    name: str
    """ Render view name

    :type: str
    """

    use: bool
    """ Disable or enable the render view

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SceneSequence(Sequence, bpy_struct):
    """Sequence strip to used the rendered image of a scene"""

    alpha_mode: typing.Literal["STRAIGHT", "PREMUL"]
    """ Representation of alpha information in the RGBA pixels

    :type: typing.Literal['STRAIGHT','PREMUL']
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    fps: float
    """ Frames per second

    :type: float
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    scene: Scene | None
    """ Scene that this sequence uses

    :type: Scene | None
    """

    scene_camera: Object | None
    """ Override the scenes active camera

    :type: Object | None
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_crop: bool
    """ Crop image before processing

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_grease_pencil: bool
    """ Show Grease Pencil strokes in OpenGL previews

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    use_sequence: bool
    """ Use scenes sequence strips directly, instead of rendering

    :type: bool
    """

    use_translation: bool
    """ Translate image before processing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Scopes(bpy_struct):
    """Scopes for statistical view of an image"""

    accuracy: float
    """ Proportion of original image source pixel lines to sample

    :type: float
    """

    histogram: Histogram
    """ Histogram for viewing image statistics

    :type: Histogram
    """

    use_full_resolution: bool
    """ Sample every pixel of the image

    :type: bool
    """

    vectorscope_alpha: float
    """ Opacity of the points

    :type: float
    """

    waveform_alpha: float
    """ Opacity of the points

    :type: float
    """

    waveform_mode: typing.Literal[
        "LUMA", "PARADE", "YCBCR601", "YCBCR709", "YCBCRJPG", "RGB"
    ]
    """ 

    :type: typing.Literal['LUMA','PARADE','YCBCR601','YCBCR709','YCBCRJPG','RGB']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Screen(ID, bpy_struct):
    """Screen data-block, defining the layout of areas in a window"""

    areas: bpy_prop_collection[Area]
    """ Areas the screen is subdivided into

    :type: bpy_prop_collection[Area]
    """

    is_animation_playing: bool
    """ Animation playback is active

    :type: bool
    """

    scene: Scene
    """ Active scene to be edited in the screen

    :type: Scene
    """

    show_fullscreen: bool
    """ An area is maximized, filling this screen

    :type: bool
    """

    use_follow: bool
    """ Follow current frame in editors

    :type: bool
    """

    use_play_3d_editors: bool
    """ 

    :type: bool
    """

    use_play_animation_editors: bool
    """ 

    :type: bool
    """

    use_play_clip_editors: bool
    """ 

    :type: bool
    """

    use_play_image_editors: bool
    """ 

    :type: bool
    """

    use_play_node_editors: bool
    """ 

    :type: bool
    """

    use_play_properties_editors: bool
    """ 

    :type: bool
    """

    use_play_sequence_editors: bool
    """ 

    :type: bool
    """

    use_play_top_left_3d_editor: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ScrewModifier(Modifier, bpy_struct):
    """Revolve edges"""

    angle: float
    """ Angle of revolution

    :type: float
    """

    axis: typing.Literal["X", "Y", "Z"]
    """ Screw axis

    :type: typing.Literal['X','Y','Z']
    """

    iterations: int
    """ Number of times to apply the screw operation

    :type: int
    """

    merge_threshold: float
    """ Limit below which to merge vertices

    :type: float
    """

    object: Object | None
    """ Object to define the screw axis

    :type: Object | None
    """

    render_steps: int
    """ Number of steps in the revolution

    :type: int
    """

    screw_offset: float
    """ Offset the revolution along its axis

    :type: float
    """

    steps: int
    """ Number of steps in the revolution

    :type: int
    """

    use_merge_vertices: bool
    """ Merge adjacent vertices (screw offset must be zero)

    :type: bool
    """

    use_normal_calculate: bool
    """ Calculate the order of edges (needed for meshes, but not curves)

    :type: bool
    """

    use_normal_flip: bool
    """ Flip normals of lathed faces

    :type: bool
    """

    use_object_screw_offset: bool
    """ Use the distance between the objects to make a screw

    :type: bool
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    use_stretch_u: bool
    """ Stretch the U coordinates between 0-1 when UV's are present

    :type: bool
    """

    use_stretch_v: bool
    """ Stretch the V coordinates between 0-1 when UV's are present

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Sculpt(Paint, bpy_struct):
    constant_detail_resolution: float
    """ Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)

    :type: float
    """

    detail_percent: float
    """ Maximum edge length for dynamic topology sculpting (in brush percenage)

    :type: float
    """

    detail_refine_method: typing.Literal["SUBDIVIDE", "COLLAPSE", "SUBDIVIDE_COLLAPSE"]
    """ In dynamic-topology mode, how to add or remove mesh detail

    :type: typing.Literal['SUBDIVIDE','COLLAPSE','SUBDIVIDE_COLLAPSE']
    """

    detail_size: float
    """ Maximum edge length for dynamic topology sculpting (in pixels)

    :type: float
    """

    detail_type_method: typing.Literal["RELATIVE", "CONSTANT", "BRUSH"]
    """ In dynamic-topology mode, how mesh detail size is calculated

    :type: typing.Literal['RELATIVE','CONSTANT','BRUSH']
    """

    gravity: float
    """ Amount of gravity after each dab

    :type: float
    """

    gravity_object: Object | None
    """ Object whose Z axis defines orientation of gravity

    :type: Object | None
    """

    lock_x: bool
    """ Disallow changes to the X axis of vertices

    :type: bool
    """

    lock_y: bool
    """ Disallow changes to the Y axis of vertices

    :type: bool
    """

    lock_z: bool
    """ Disallow changes to the Z axis of vertices

    :type: bool
    """

    radial_symmetry: bpy_prop_array[int]
    """ Number of times to copy strokes across the surface

    :type: bpy_prop_array[int]
    """

    show_diffuse_color: bool
    """ Show diffuse color of object and overlay sculpt mask on top of it

    :type: bool
    """

    show_mask: bool
    """ Show mask as overlay on object

    :type: bool
    """

    symmetrize_direction: typing.Literal[
        "NEGATIVE_X",
        "POSITIVE_X",
        "NEGATIVE_Y",
        "POSITIVE_Y",
        "NEGATIVE_Z",
        "POSITIVE_Z",
    ]
    """ Source and destination for symmetrize operator

    :type: typing.Literal['NEGATIVE_X','POSITIVE_X','NEGATIVE_Y','POSITIVE_Y','NEGATIVE_Z','POSITIVE_Z']
    """

    use_deform_only: bool
    """ Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)

    :type: bool
    """

    use_smooth_shading: bool
    """ Show faces in dynamic-topology mode with smooth shading rather than flat shaded

    :type: bool
    """

    use_threaded: bool
    """ Take advantage of multiple CPU cores to improve sculpting performance

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SculptToolCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current sculpt tool"""

    has_accumulate: bool
    """ 

    :type: bool
    """

    has_auto_smooth: bool
    """ 

    :type: bool
    """

    has_gravity: bool
    """ 

    :type: bool
    """

    has_height: bool
    """ 

    :type: bool
    """

    has_jitter: bool
    """ 

    :type: bool
    """

    has_normal_weight: bool
    """ 

    :type: bool
    """

    has_persistence: bool
    """ 

    :type: bool
    """

    has_pinch_factor: bool
    """ 

    :type: bool
    """

    has_plane_offset: bool
    """ 

    :type: bool
    """

    has_rake_factor: bool
    """ 

    :type: bool
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_sculpt_plane: bool
    """ 

    :type: bool
    """

    has_secondary_color: bool
    """ 

    :type: bool
    """

    has_smooth_stroke: bool
    """ 

    :type: bool
    """

    has_space_attenuation: bool
    """ 

    :type: bool
    """

    has_strength_pressure: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SelectedUvElement(PropertyGroup, bpy_struct):
    element_index: int
    """ 

    :type: int
    """

    face_index: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Sensor(bpy_struct):
    """Game engine logic brick to detect events"""

    active: bool | None
    """ Set active state of the sensor

    :type: bool | None
    """

    controllers: bpy_prop_collection[Controller]
    """ The list containing the controllers connected to the sensor

    :type: bpy_prop_collection[Controller]
    """

    invert: bool
    """ Invert the level(output) of this sensor

    :type: bool
    """

    name: str
    """ Sensor name

    :type: str
    """

    pin: bool
    """ Display when not linked to a visible states controller

    :type: bool
    """

    show_expanded: bool
    """ Set sensor expanded in the user interface

    :type: bool
    """

    tick_skip: int
    """ Number of logic ticks skipped between 2 active pulses (0 = pulse every logic tick, 1 = skip 1 logic tick between pulses, etc.)

    :type: int
    """

    type: typing.Literal[
        "ACTUATOR",
        "ALWAYS",
        "ARMATURE",
        "COLLISION",
        "DELAY",
        "JOYSTICK",
        "KEYBOARD",
        "MESSAGE",
        "MOUSE",
        "NEAR",
        "PROPERTY",
        "RADAR",
        "MOVEMENT",
        "RANDOM",
        "RAY",
    ]
    """ 

    :type: typing.Literal['ACTUATOR','ALWAYS','ARMATURE','COLLISION','DELAY','JOYSTICK','KEYBOARD','MESSAGE','MOUSE','NEAR','PROPERTY','RADAR','MOVEMENT','RANDOM','RAY']
    """

    use_level: bool
    """ Level detector, trigger controllers of new states (only applicable upon logic state transition)

    :type: bool
    """

    use_pulse_false_level: bool
    """ Activate FALSE level triggering (pulse mode)

    :type: bool
    """

    use_pulse_true_level: bool
    """ Activate TRUE level triggering (pulse mode)

    :type: bool
    """

    use_tap: bool
    """ Trigger controllers only for an instant, even while the sensor remains true

    :type: bool
    """

    def link(self, controller: Controller | None):
        """Link the sensor to a controller

        :param controller: Controller to link to
        :type controller: Controller | None
        """

    def unlink(self, controller: Controller | None):
        """Unlink the sensor from a controller

        :param controller: Controller to unlink from
        :type controller: Controller | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Sequence(bpy_struct):
    """Sequence strip in the sequence editor"""

    blend_alpha: float
    """ Percentage of how much the strip's colors affect other strips

    :type: float
    """

    blend_type: typing.Literal[
        "REPLACE",
        "CROSS",
        "ADD",
        "SUBTRACT",
        "ALPHA_OVER",
        "ALPHA_UNDER",
        "GAMMA_CROSS",
        "MULTIPLY",
        "OVER_DROP",
        "LIGHTEN",
        "DARKEN",
        "SCREEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "LINEAR_BURN",
        "SOFT_LIGHT",
        "HARD_LIGHT",
        "PIN_LIGHT",
        "LINEAR_LIGHT",
        "VIVID_LIGHT",
        "COLOR",
        "HUE",
        "SATURATION",
        "VALUE",
        "DIFFERENCE",
        "EXCLUSION",
    ]
    """ Method for controlling how the strip combines with other strips

    :type: typing.Literal['REPLACE','CROSS','ADD','SUBTRACT','ALPHA_OVER','ALPHA_UNDER','GAMMA_CROSS','MULTIPLY','OVER_DROP','LIGHTEN','DARKEN','SCREEN','OVERLAY','DODGE','BURN','LINEAR_BURN','SOFT_LIGHT','HARD_LIGHT','PIN_LIGHT','LINEAR_LIGHT','VIVID_LIGHT','COLOR','HUE','SATURATION','VALUE','DIFFERENCE','EXCLUSION']
    """

    channel: int
    """ Y position of the sequence strip

    :type: int
    """

    effect_fader: float
    """ Custom fade value

    :type: float
    """

    frame_duration: int
    """ The length of the contents of this strip before the handles are applied

    :type: int
    """

    frame_final_duration: int
    """ The length of the contents of this strip after the handles are applied

    :type: int
    """

    frame_final_end: int
    """ End frame displayed in the sequence editor after offsets are applied

    :type: int
    """

    frame_final_start: int
    """ Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame

    :type: int
    """

    frame_offset_end: int
    """ 

    :type: int
    """

    frame_offset_start: int
    """ 

    :type: int
    """

    frame_start: int
    """ X position where the strip begins

    :type: int
    """

    frame_still_end: int
    """ 

    :type: int
    """

    frame_still_start: int
    """ 

    :type: int
    """

    lock: bool
    """ Lock strip so that it cannot be transformed

    :type: bool
    """

    modifiers: SequenceModifiers
    """ Modifiers affecting this strip

    :type: SequenceModifiers
    """

    mute: bool
    """ Disable strip so that it cannot be viewed in the output

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ 

    :type: bool
    """

    select_left_handle: bool
    """ 

    :type: bool
    """

    select_right_handle: bool
    """ 

    :type: bool
    """

    speed_factor: float
    """ Multiply the current speed of the sequence with this number or remap current frame to this frame

    :type: float
    """

    type: typing.Literal[
        "IMAGE",
        "META",
        "SCENE",
        "MOVIE",
        "MOVIECLIP",
        "MASK",
        "SOUND",
        "CROSS",
        "ADD",
        "SUBTRACT",
        "ALPHA_OVER",
        "ALPHA_UNDER",
        "GAMMA_CROSS",
        "MULTIPLY",
        "OVER_DROP",
        "WIPE",
        "GLOW",
        "TRANSFORM",
        "COLOR",
        "SPEED",
        "MULTICAM",
        "ADJUSTMENT",
        "GAUSSIAN_BLUR",
        "TEXT",
        "COLORMIX",
    ]
    """ 

    :type: typing.Literal['IMAGE','META','SCENE','MOVIE','MOVIECLIP','MASK','SOUND','CROSS','ADD','SUBTRACT','ALPHA_OVER','ALPHA_UNDER','GAMMA_CROSS','MULTIPLY','OVER_DROP','WIPE','GLOW','TRANSFORM','COLOR','SPEED','MULTICAM','ADJUSTMENT','GAUSSIAN_BLUR','TEXT','COLORMIX']
    """

    use_default_fade: bool
    """ Fade effect using the built-in default (usually make transition as long as effect strip)

    :type: bool
    """

    use_linear_modifiers: bool
    """ Calculate modifiers in linear space instead of sequencer's space

    :type: bool
    """

    def update(self, data: bool | None = False):
        """Update the strip dimensions

        :param data: Data, Update strip data
        :type data: bool | None
        """

    def strip_elem_from_frame(self, frame: int | None) -> SequenceElement:
        """Return the strip element from a given frame or None

        :param frame: Frame, The frame to get the strip element from
        :type frame: int | None
        :return: strip element of the current frame
        :rtype: SequenceElement
        """

    def swap(self, other: typing_extensions.Self):
        """swap

        :param other: Other
        :type other: typing_extensions.Self
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceColorBalance(SequenceColorBalanceData, bpy_struct):
    """Color balance parameters for a sequence strip"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceColorBalanceData(bpy_struct):
    """Color balance parameters for a sequence strip and it's modifiers"""

    gain: bpy_prop_array[float]
    """ Color balance gain (highlights)

    :type: bpy_prop_array[float]
    """

    gamma: bpy_prop_array[float]
    """ Color balance gamma (midtones)

    :type: bpy_prop_array[float]
    """

    invert_gain: bool
    """ Invert the gain color`

    :type: bool
    """

    invert_gamma: bool
    """ Invert the gamma color

    :type: bool
    """

    invert_lift: bool
    """ Invert the lift color

    :type: bool
    """

    lift: bpy_prop_array[float]
    """ Color balance lift (shadows)

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceCrop(bpy_struct):
    """Cropping parameters for a sequence strip"""

    max_x: int
    """ Number of pixels to crop from the right side

    :type: int
    """

    max_y: int
    """ Number of pixels to crop from the top

    :type: int
    """

    min_x: int
    """ Number of pixels to crop from the left side

    :type: int
    """

    min_y: int
    """ Number of pixels to crop from the bottom

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceEditor(bpy_struct):
    """Sequence editing data for a Scene data-block"""

    active_strip: Sequence | None
    """ Sequencer's active strip

    :type: Sequence | None
    """

    meta_stack: bpy_prop_collection[Sequence]
    """ Meta strip stack, last is currently edited meta strip

    :type: bpy_prop_collection[Sequence]
    """

    overlay_frame: int
    """ 

    :type: int
    """

    proxy_dir: str
    """ 

    :type: str
    """

    proxy_storage: typing.Literal["PER_STRIP", "PROJECT"]
    """ How to store proxies for this project

    :type: typing.Literal['PER_STRIP','PROJECT']
    """

    sequences: Sequences
    """ Top-level strips only

    :type: Sequences
    """

    sequences_all: bpy_prop_collection[Sequence]
    """ All strips, recursively including those inside metastrips

    :type: bpy_prop_collection[Sequence]
    """

    show_overlay: bool
    """ Partial overlay on top of the sequencer

    :type: bool
    """

    use_overlay_lock: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceElement(bpy_struct):
    """Sequence strip data for a single frame"""

    filename: str
    """ Name of the source file

    :type: str
    """

    orig_height: int
    """ Original image height

    :type: int
    """

    orig_width: int
    """ Original image width

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceModifier(bpy_struct):
    """Modifier for sequence strip"""

    input_mask_id: Mask | None
    """ Mask ID used as mask input for the modifier

    :type: Mask | None
    """

    input_mask_strip: Sequence | None
    """ Strip used as mask input for the modifier

    :type: Sequence | None
    """

    input_mask_type: typing.Literal["STRIP", "ID"]
    """ Type of input data used for mask

    :type: typing.Literal['STRIP','ID']
    """

    mask_time: typing.Literal["RELATIVE", "ABSOLUTE"]
    """ Time to use for the Mask animation

    :type: typing.Literal['RELATIVE','ABSOLUTE']
    """

    mute: bool
    """ Mute this modifier

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    show_expanded: bool
    """ Mute expanded settings for the modifier

    :type: bool
    """

    type: typing.Literal[
        "COLOR_BALANCE",
        "CURVES",
        "HUE_CORRECT",
        "BRIGHT_CONTRAST",
        "MASK",
        "WHITE_BALANCE",
        "TONEMAP",
    ]
    """ 

    :type: typing.Literal['COLOR_BALANCE','CURVES','HUE_CORRECT','BRIGHT_CONTRAST','MASK','WHITE_BALANCE','TONEMAP']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceProxy(bpy_struct):
    """Proxy parameters for a sequence strip"""

    build_100: bool
    """ Build 100% proxy resolution

    :type: bool
    """

    build_25: bool
    """ Build 25% proxy resolution

    :type: bool
    """

    build_50: bool
    """ Build 50% proxy resolution

    :type: bool
    """

    build_75: bool
    """ Build 75% proxy resolution

    :type: bool
    """

    build_free_run: bool
    """ Build free run time code index

    :type: bool
    """

    build_free_run_rec_date: bool
    """ Build free run time code index using Record Date/Time

    :type: bool
    """

    build_record_run: bool
    """ Build record run time code index

    :type: bool
    """

    directory: str
    """ Location to store the proxy files

    :type: str
    """

    filepath: str
    """ Location of custom proxy file

    :type: str
    """

    quality: int
    """ JPEG Quality of proxies to build

    :type: int
    """

    timecode: typing.Literal[
        "NONE", "RECORD_RUN", "FREE_RUN", "FREE_RUN_REC_DATE", "RECORD_RUN_NO_GAPS"
    ]
    """ Method for reading the inputs timecode

    :type: typing.Literal['NONE','RECORD_RUN','FREE_RUN','FREE_RUN_REC_DATE','RECORD_RUN_NO_GAPS']
    """

    use_overwrite: bool
    """ Overwrite existing proxy files when building

    :type: bool
    """

    use_proxy_custom_directory: bool
    """ Use a custom directory to store data

    :type: bool
    """

    use_proxy_custom_file: bool
    """ Use a custom file to read proxy data from

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequenceTransform(bpy_struct):
    """Transform parameters for a sequence strip"""

    offset_x: int
    """ Amount to move the input on the X axis within its boundaries

    :type: int
    """

    offset_y: int
    """ Amount to move the input on the Y axis within its boundaries

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SequencerTonemapModifierData(SequenceModifier, bpy_struct):
    """Tone mapping modifier"""

    adaptation: float
    """ If 0, global; if 1, based on pixel intensity

    :type: float
    """

    contrast: float
    """ Set to 0 to use estimate from input image

    :type: float
    """

    correction: float
    """ If 0, same for all channels; if 1, each independent

    :type: float
    """

    gamma: float
    """ If not used, set to 1

    :type: float
    """

    intensity: float
    """ If less than zero, darkens image; otherwise, makes it brighter

    :type: float
    """

    key: float
    """ The value the average luminance is mapped to

    :type: float
    """

    offset: float
    """ Normally always 1, but can be used as an extra control to alter the brightness curve

    :type: float
    """

    tonemap_type: typing.Literal["RD_PHOTORECEPTOR", "RH_SIMPLE"]
    """ Tone mapping algorithm

    :type: typing.Literal['RD_PHOTORECEPTOR','RH_SIMPLE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNode(NodeInternal, Node, bpy_struct):
    """Material shader node"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeAddShader(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeAmbientOcclusion(ShaderNode, NodeInternal, Node, bpy_struct):
    inside: bool
    """ Trace rays towards the inside of the object

    :type: bool
    """

    only_local: bool
    """ Only consider the object itself when computing AO

    :type: bool
    """

    samples: int
    """ Number of rays to trace per shader evaluation

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeAttribute(ShaderNode, NodeInternal, Node, bpy_struct):
    attribute_name: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBackground(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBevel(ShaderNode, NodeInternal, Node, bpy_struct):
    samples: int
    """ Number of rays to trace per shader evaluation

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBlackbody(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBrightContrast(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfAnisotropic(ShaderNode, NodeInternal, Node, bpy_struct):
    distribution: typing.Literal["BECKMANN", "GGX", "MULTI_GGX", "ASHIKHMIN_SHIRLEY"]
    """ 

    :type: typing.Literal['BECKMANN','GGX','MULTI_GGX','ASHIKHMIN_SHIRLEY']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfDiffuse(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfGlass(ShaderNode, NodeInternal, Node, bpy_struct):
    distribution: typing.Literal["SHARP", "BECKMANN", "GGX", "MULTI_GGX"]
    """ 

    :type: typing.Literal['SHARP','BECKMANN','GGX','MULTI_GGX']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfGlossy(ShaderNode, NodeInternal, Node, bpy_struct):
    distribution: typing.Literal[
        "SHARP", "BECKMANN", "GGX", "ASHIKHMIN_SHIRLEY", "MULTI_GGX"
    ]
    """ 

    :type: typing.Literal['SHARP','BECKMANN','GGX','ASHIKHMIN_SHIRLEY','MULTI_GGX']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfHair(ShaderNode, NodeInternal, Node, bpy_struct):
    component: typing.Literal["Reflection", "Transmission"]
    """ 

    :type: typing.Literal['Reflection','Transmission']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfHairPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    parametrization: typing.Literal["ABSORPTION", "MELANIN", "COLOR"]
    """ Select the shader's color parametrization

    :type: typing.Literal['ABSORPTION','MELANIN','COLOR']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    distribution: typing.Literal["GGX", "MULTI_GGX"]
    """ 

    :type: typing.Literal['GGX','MULTI_GGX']
    """

    subsurface_method: typing.Literal["BURLEY", "RANDOM_WALK"]
    """ Method for rendering subsurface scattering

    :type: typing.Literal['BURLEY','RANDOM_WALK']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfRefraction(ShaderNode, NodeInternal, Node, bpy_struct):
    distribution: typing.Literal["SHARP", "BECKMANN", "GGX"]
    """ 

    :type: typing.Literal['SHARP','BECKMANN','GGX']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfToon(ShaderNode, NodeInternal, Node, bpy_struct):
    component: typing.Literal["DIFFUSE", "GLOSSY"]
    """ 

    :type: typing.Literal['DIFFUSE','GLOSSY']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfTranslucent(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfTransparent(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBsdfVelvet(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeBump(ShaderNode, NodeInternal, Node, bpy_struct):
    invert: bool
    """ Invert the bump mapping direction to push into the surface instead of out

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeCameraData(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeCombineHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeCombineRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeCombineXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    space: typing.Literal["OBJECT", "WORLD"]
    """ Space of the input height

    :type: typing.Literal['OBJECT','WORLD']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeEmission(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeExtendedMaterial(ShaderNode, NodeInternal, Node, bpy_struct):
    invert_normal: bool
    """ Material Node uses inverted normal

    :type: bool
    """

    material: Material | None
    """ 

    :type: Material | None
    """

    use_diffuse: bool
    """ Material Node outputs Diffuse

    :type: bool
    """

    use_specular: bool
    """ Material Node outputs Specular

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeFresnel(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeGamma(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeGeometry(ShaderNode, NodeInternal, Node, bpy_struct):
    color_layer: str
    """ 

    :type: str
    """

    uv_layer: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeGroup(ShaderNode, NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    node_tree: ShaderNodeTree | None
    """ 

    :type: ShaderNodeTree | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeHairInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeHoldout(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeHueSaturation(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeInvert(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeLampData(ShaderNode, NodeInternal, Node, bpy_struct):
    lamp_object: Object | None
    """ 

    :type: Object | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeLayerWeight(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeLightFalloff(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeLightPath(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeMapping(ShaderNode, NodeInternal, Node, bpy_struct):
    max: bpy_prop_array[float]
    """ Maximum value for clipping

    :type: bpy_prop_array[float]
    """

    min: bpy_prop_array[float]
    """ Minimum value for clipping

    :type: bpy_prop_array[float]
    """

    rotation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    scale: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    translation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    use_max: bool
    """ Whether to use maximum clipping value

    :type: bool
    """

    use_min: bool
    """ Whether to use minimum clipping value

    :type: bool
    """

    vector_type: typing.Literal["TEXTURE", "POINT", "VECTOR", "NORMAL"]
    """ Type of vector that the mapping transforms

    :type: typing.Literal['TEXTURE','POINT','VECTOR','NORMAL']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeMaterial(ShaderNode, NodeInternal, Node, bpy_struct):
    invert_normal: bool
    """ Material Node uses inverted normal

    :type: bool
    """

    material: Material | None
    """ 

    :type: Material | None
    """

    use_diffuse: bool
    """ Material Node outputs Diffuse

    :type: bool
    """

    use_specular: bool
    """ Material Node outputs Specular

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeMath(ShaderNode, NodeInternal, Node, bpy_struct):
    operation: typing.Literal[
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "SINE",
        "COSINE",
        "TANGENT",
        "ARCSINE",
        "ARCCOSINE",
        "ARCTANGENT",
        "POWER",
        "LOGARITHM",
        "MINIMUM",
        "MAXIMUM",
        "ROUND",
        "LESS_THAN",
        "GREATER_THAN",
        "MODULO",
        "ABSOLUTE",
        "ARCTAN2",
        "FLOOR",
        "CEIL",
        "FRACT",
        "SQRT",
    ]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','DIVIDE','SINE','COSINE','TANGENT','ARCSINE','ARCCOSINE','ARCTANGENT','POWER','LOGARITHM','MINIMUM','MAXIMUM','ROUND','LESS_THAN','GREATER_THAN','MODULO','ABSOLUTE','ARCTAN2','FLOOR','CEIL','FRACT','SQRT']
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeMixRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ 

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeMixShader(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeNewGeometry(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeNormal(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeNormalMap(ShaderNode, NodeInternal, Node, bpy_struct):
    space: typing.Literal[
        "TANGENT", "OBJECT", "WORLD", "BLENDER_OBJECT", "BLENDER_WORLD"
    ]
    """ Space of the input normal

    :type: typing.Literal['TANGENT','OBJECT','WORLD','BLENDER_OBJECT','BLENDER_WORLD']
    """

    uv_map: str
    """ UV Map for tangent space maps

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeObjectData(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeObjectInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutput(ShaderNode, NodeInternal, Node, bpy_struct):
    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutputAttachment(ShaderNode, NodeInternal, Node, bpy_struct):
    attachment: int
    """ Attachment index

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutputLamp(ShaderNode, NodeInternal, Node, bpy_struct):
    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutputLineStyle(ShaderNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ 

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutputMaterial(ShaderNode, NodeInternal, Node, bpy_struct):
    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeOutputWorld(ShaderNode, NodeInternal, Node, bpy_struct):
    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeParallax(ShaderNode, NodeInternal, Node, bpy_struct):
    component: typing.Literal["RED", "GREEN", "BLUE", "ALPHA"]
    """ The color component to extract the height information from

    :type: typing.Literal['RED','GREEN','BLUE','ALPHA']
    """

    discard: bool
    """ Discard parallax edges

    :type: bool
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeParticleInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeRGBCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeRGBToBW(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeScript(ShaderNode, NodeInternal, Node, bpy_struct):
    bytecode: str
    """ Compile bytecode for shader script node

    :type: str
    """

    bytecode_hash: str
    """ Hash of compile bytecode, for quick equality checking

    :type: str
    """

    filepath: str
    """ Shader script path

    :type: str
    """

    mode: typing.Literal["INTERNAL", "EXTERNAL"]
    """ 

    :type: typing.Literal['INTERNAL','EXTERNAL']
    """

    script: Text | None
    """ Internal shader script to define the shader

    :type: Text | None
    """

    use_auto_update: bool
    """ Automatically update the shader when the .osl file changes (external scripts only)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeSeparateHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeSeparateRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeSeparateXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeSqueeze(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeSubsurfaceScattering(ShaderNode, NodeInternal, Node, bpy_struct):
    falloff: typing.Literal["CUBIC", "GAUSSIAN", "BURLEY", "RANDOM_WALK"]
    """ Function to determine how much light nearby points contribute based on their distance to the shading point

    :type: typing.Literal['CUBIC','GAUSSIAN','BURLEY','RANDOM_WALK']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTangent(ShaderNode, NodeInternal, Node, bpy_struct):
    axis: typing.Literal["X", "Y", "Z"]
    """ Axis for radial tangents

    :type: typing.Literal['X','Y','Z']
    """

    direction_type: typing.Literal["RADIAL", "UV_MAP"]
    """ Method to use for the tangent

    :type: typing.Literal['RADIAL','UV_MAP']
    """

    uv_map: str
    """ UV Map for tangent generated from UV

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexBrick(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    offset: float
    """ 

    :type: float
    """

    offset_frequency: int
    """ 

    :type: int
    """

    squash: float
    """ 

    :type: float
    """

    squash_frequency: int
    """ 

    :type: int
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexChecker(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexCoord(ShaderNode, NodeInternal, Node, bpy_struct):
    from_dupli: bool
    """ Use the parent of the dupli object if possible

    :type: bool
    """

    object: Object | None
    """ Use coordinates from this object (for object texture coordinates output)

    :type: Object | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexEnvironment(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    color_space: typing.Literal["COLOR", "NONE"]
    """ Image file color space

    :type: typing.Literal['COLOR','NONE']
    """

    image: Image | None
    """ 

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    interpolation: typing.Literal["Linear", "Closest", "Cubic", "Smart"]
    """ Texture interpolation

    :type: typing.Literal['Linear','Closest','Cubic','Smart']
    """

    projection: typing.Literal["EQUIRECTANGULAR", "MIRROR_BALL"]
    """ Projection of the input image

    :type: typing.Literal['EQUIRECTANGULAR','MIRROR_BALL']
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexGradient(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    gradient_type: typing.Literal[
        "LINEAR",
        "QUADRATIC",
        "EASING",
        "DIAGONAL",
        "SPHERICAL",
        "QUADRATIC_SPHERE",
        "RADIAL",
    ]
    """ Style of the color blending

    :type: typing.Literal['LINEAR','QUADRATIC','EASING','DIAGONAL','SPHERICAL','QUADRATIC_SPHERE','RADIAL']
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexIES(ShaderNode, NodeInternal, Node, bpy_struct):
    filepath: str
    """ IES light path

    :type: str
    """

    ies: Text | None
    """ Internal IES file

    :type: Text | None
    """

    mode: typing.Literal["INTERNAL", "EXTERNAL"]
    """ Whether the IES file is loaded from disk or from a Text datablock

    :type: typing.Literal['INTERNAL','EXTERNAL']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexImage(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    color_space: typing.Literal["COLOR", "NONE"]
    """ Image file color space

    :type: typing.Literal['COLOR','NONE']
    """

    extension: typing.Literal["REPEAT", "EXTEND", "CLIP"]
    """ How the image is extrapolated past its original bounds

    :type: typing.Literal['REPEAT','EXTEND','CLIP']
    """

    image: Image | None
    """ 

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    interpolation: typing.Literal["Linear", "Closest", "Cubic", "Smart"]
    """ Texture interpolation

    :type: typing.Literal['Linear','Closest','Cubic','Smart']
    """

    projection: typing.Literal["FLAT", "BOX", "SPHERE", "TUBE"]
    """ Method to project 2D image on object with a 3D texture vector

    :type: typing.Literal['FLAT','BOX','SPHERE','TUBE']
    """

    projection_blend: float
    """ For box projection, amount of blend to use between sides

    :type: float
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexMagic(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    turbulence_depth: int
    """ Level of detail in the added turbulent noise

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexMusgrave(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    musgrave_type: typing.Literal[
        "MULTIFRACTAL",
        "RIDGED_MULTIFRACTAL",
        "HYBRID_MULTIFRACTAL",
        "FBM",
        "HETERO_TERRAIN",
    ]
    """ 

    :type: typing.Literal['MULTIFRACTAL','RIDGED_MULTIFRACTAL','HYBRID_MULTIFRACTAL','FBM','HETERO_TERRAIN']
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexNoise(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexPointDensity(ShaderNode, NodeInternal, Node, bpy_struct):
    interpolation: typing.Literal["Closest", "Linear", "Cubic"]
    """ Texture interpolation

    :type: typing.Literal['Closest','Linear','Cubic']
    """

    object: Object | None
    """ Object to take point data from

    :type: Object | None
    """

    particle_color_source: typing.Literal[
        "PARTICLE_AGE", "PARTICLE_SPEED", "PARTICLE_VELOCITY"
    ]
    """ Data to derive color results from

    :type: typing.Literal['PARTICLE_AGE','PARTICLE_SPEED','PARTICLE_VELOCITY']
    """

    particle_system: ParticleSystem | None
    """ Particle System to render as points

    :type: ParticleSystem | None
    """

    point_source: typing.Literal["PARTICLE_SYSTEM", "OBJECT"]
    """ Point data to use as renderable point density

    :type: typing.Literal['PARTICLE_SYSTEM','OBJECT']
    """

    radius: float
    """ Radius from the shaded sample to look for points within

    :type: float
    """

    resolution: int
    """ Resolution used by the texture holding the point density

    :type: int
    """

    space: typing.Literal["OBJECT", "WORLD"]
    """ Coordinate system to calculate voxels in

    :type: typing.Literal['OBJECT','WORLD']
    """

    vertex_attribute_name: str
    """ Vertex attribute to use for color

    :type: str
    """

    vertex_color_source: typing.Literal[
        "VERTEX_COLOR", "VERTEX_WEIGHT", "VERTEX_NORMAL"
    ]
    """ Data to derive color results from

    :type: typing.Literal['VERTEX_COLOR','VERTEX_WEIGHT','VERTEX_NORMAL']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    def cache_point_density(
        self,
        scene: Scene | None = None,
        settings: typing.Literal["VIEWPORT", "RENDER"] | None = "RENDER",
    ):
        """Cache point density data for later calculation

                :param scene:
                :type scene: Scene | None
                :param settings: Calculate density for rendering

        VIEWPORT Viewport, Canculate density using viewport settings.

        RENDER Render, Canculate duplis using render settings.
                :type settings: typing.Literal['VIEWPORT','RENDER'] | None
        """

    def calc_point_density(
        self,
        scene: Scene | None = None,
        settings: typing.Literal["VIEWPORT", "RENDER"] | None = "RENDER",
    ) -> bpy_prop_array[float]:
        """Calculate point density

                :param scene:
                :type scene: Scene | None
                :param settings: Calculate density for rendering

        VIEWPORT Viewport, Canculate density using viewport settings.

        RENDER Render, Canculate duplis using render settings.
                :type settings: typing.Literal['VIEWPORT','RENDER'] | None
                :return: RGBA Values
                :rtype: bpy_prop_array[float]
        """

    def calc_point_density_minmax(
        self,
        scene: Scene | None = None,
        settings: typing.Literal["VIEWPORT", "RENDER"] | None = "RENDER",
    ):
        """Calculate point density

                :param scene:
                :type scene: Scene | None
                :param settings: Calculate density for rendering

        VIEWPORT Viewport, Canculate density using viewport settings.

        RENDER Render, Canculate duplis using render settings.
                :type settings: typing.Literal['VIEWPORT','RENDER'] | None
                :return: min, min, float array of 3 items in [-inf, inf]

        max, max, float array of 3 items in [-inf, inf]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexSky(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    ground_albedo: float
    """ Ground color that is subtly reflected in the sky

    :type: float
    """

    sky_type: typing.Literal["PREETHAM", "HOSEK_WILKIE"]
    """ 

    :type: typing.Literal['PREETHAM','HOSEK_WILKIE']
    """

    sun_direction: bpy_prop_array[float]
    """ Direction from where the sun is shining

    :type: bpy_prop_array[float]
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    turbidity: float
    """ Atmospheric turbidity

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexVoronoi(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    coloring: typing.Literal["INTENSITY", "CELLS"]
    """ 

    :type: typing.Literal['INTENSITY','CELLS']
    """

    distance: typing.Literal["DISTANCE", "MANHATTAN", "CHEBYCHEV", "MINKOWSKI"]
    """ 

    :type: typing.Literal['DISTANCE','MANHATTAN','CHEBYCHEV','MINKOWSKI']
    """

    feature: typing.Literal["F1", "F2", "F3", "F4", "F2F1"]
    """ 

    :type: typing.Literal['F1','F2','F3','F4','F2F1']
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexWave(ShaderNode, NodeInternal, Node, bpy_struct):
    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    wave_profile: typing.Literal["SIN", "SAW"]
    """ 

    :type: typing.Literal['SIN','SAW']
    """

    wave_type: typing.Literal["BANDS", "RINGS"]
    """ 

    :type: typing.Literal['BANDS','RINGS']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTexture(ShaderNode, NodeInternal, Node, bpy_struct):
    node_output: int
    """ For node-based textures, which output node to use

    :type: int
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTime(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for materials (and other shading data-blocks)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeUVAlongStroke(ShaderNode, NodeInternal, Node, bpy_struct):
    use_tips: bool
    """ Lower half of the texture is for tips of the stroke

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeUVMap(ShaderNode, NodeInternal, Node, bpy_struct):
    from_dupli: bool
    """ Use the parent of the dupli object if possible

    :type: bool
    """

    uv_map: str
    """ UV coordinates to be used for mapping

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeValToRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeValue(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVectorCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVectorDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    space: typing.Literal["TANGENT", "OBJECT", "WORLD"]
    """ Space of the input height

    :type: typing.Literal['TANGENT','OBJECT','WORLD']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVectorMath(ShaderNode, NodeInternal, Node, bpy_struct):
    operation: typing.Literal[
        "ADD",
        "SUBTRACT",
        "AVERAGE",
        "DOT_PRODUCT",
        "CROSS_PRODUCT",
        "NORMALIZE",
        "REFLECT",
        "MULTIPLY",
    ]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','AVERAGE','DOT_PRODUCT','CROSS_PRODUCT','NORMALIZE','REFLECT','MULTIPLY']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVectorTransform(ShaderNode, NodeInternal, Node, bpy_struct):
    convert_from: typing.Literal["WORLD", "OBJECT", "CAMERA"]
    """ Space to convert from

    :type: typing.Literal['WORLD','OBJECT','CAMERA']
    """

    convert_to: typing.Literal["WORLD", "OBJECT", "CAMERA"]
    """ Space to convert to

    :type: typing.Literal['WORLD','OBJECT','CAMERA']
    """

    vector_type: typing.Literal["POINT", "VECTOR", "NORMAL"]
    """ 

    :type: typing.Literal['POINT','VECTOR','NORMAL']
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVolumeAbsorption(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVolumePrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeVolumeScatter(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeWavelength(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShaderNodeWireframe(ShaderNode, NodeInternal, Node, bpy_struct):
    use_pixel_size: bool
    """ Use screen pixel size instead of world units

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShapeKey(bpy_struct):
    """Shape key in a shape keys data-block"""

    data: bpy_prop_collection[UnknownType]
    """ 

    :type: bpy_prop_collection[UnknownType]
    """

    frame: float
    """ Frame for absolute keys

    :type: float
    """

    interpolation: typing.Literal[
        "KEY_LINEAR", "KEY_CARDINAL", "KEY_CATMULL_ROM", "KEY_BSPLINE"
    ]
    """ Interpolation type for absolute shape keys

    :type: typing.Literal['KEY_LINEAR','KEY_CARDINAL','KEY_CATMULL_ROM','KEY_BSPLINE']
    """

    mute: bool
    """ Mute this shape key

    :type: bool
    """

    name: str
    """ Name of Shape Key

    :type: str
    """

    relative_key: typing_extensions.Self
    """ Shape used as a relative key

    :type: typing_extensions.Self
    """

    slider_max: float
    """ Maximum for slider

    :type: float
    """

    slider_min: float
    """ Minimum for slider

    :type: float
    """

    value: float
    """ Value of shape key at the current frame

    :type: float
    """

    vertex_group: str
    """ Vertex weight group, to blend with basis shape

    :type: str
    """

    def normals_vertex_get(self) -> float:
        """Compute local space vertices' normals for this shape key

        :return: normals
        :rtype: float
        """

    def normals_polygon_get(self) -> float:
        """Compute local space faces' normals for this shape key

        :return: normals
        :rtype: float
        """

    def normals_split_get(self) -> float:
        """Compute local space face corners' normals for this shape key

        :return: normals
        :rtype: float
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShapeKeyBezierPoint(bpy_struct):
    """Point in a shape key for Bezier curves"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_left: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_right: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShapeKeyCurvePoint(bpy_struct):
    """Point in a shape key for curves"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tilt: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShapeKeyPoint(bpy_struct):
    """Point in a shape key"""

    co: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShrinkwrapConstraint(Constraint, bpy_struct):
    """Create constraint-based shrinkwrap relationship"""

    distance: float
    """ Distance to Target

    :type: float
    """

    project_axis: typing.Literal["POS_X", "POS_Y", "POS_Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis constrain to

    :type: typing.Literal['POS_X','POS_Y','POS_Z','NEG_X','NEG_Y','NEG_Z']
    """

    project_axis_space: typing.Literal["WORLD", "POSE", "LOCAL_WITH_PARENT", "LOCAL"]
    """ Space for the projection axis

    :type: typing.Literal['WORLD','POSE','LOCAL_WITH_PARENT','LOCAL']
    """

    project_limit: float
    """ Limit the distance used for projection (zero disables)

    :type: float
    """

    shrinkwrap_type: typing.Literal["NEAREST_SURFACE", "PROJECT", "NEAREST_VERTEX"]
    """ Select type of shrinkwrap algorithm for target position

    :type: typing.Literal['NEAREST_SURFACE','PROJECT','NEAREST_VERTEX']
    """

    target: Object | None
    """ Target Mesh object

    :type: Object | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ShrinkwrapModifier(Modifier, bpy_struct):
    """Shrink wrapping modifier to shrink wrap and object to a target"""

    auxiliary_target: Object | None
    """ Additional mesh target to shrink to

    :type: Object | None
    """

    cull_face: typing.Literal["OFF", "FRONT", "BACK"]
    """ Stop vertices from projecting to a face on the target when facing towards/away

    :type: typing.Literal['OFF','FRONT','BACK']
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    offset: float
    """ Distance to keep from the target

    :type: float
    """

    project_limit: float
    """ Limit the distance used for projection (zero disables)

    :type: float
    """

    subsurf_levels: int
    """ Number of subdivisions that must be performed before extracting vertices' positions and normals

    :type: int
    """

    target: Object | None
    """ Mesh target to shrink to

    :type: Object | None
    """

    use_keep_above_surface: bool
    """ 

    :type: bool
    """

    use_negative_direction: bool
    """ Allow vertices to move in the negative direction of axis

    :type: bool
    """

    use_positive_direction: bool
    """ Allow vertices to move in the positive direction of axis

    :type: bool
    """

    use_project_x: bool
    """ 

    :type: bool
    """

    use_project_y: bool
    """ 

    :type: bool
    """

    use_project_z: bool
    """ 

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    wrap_method: typing.Literal["NEAREST_SURFACEPOINT", "PROJECT", "NEAREST_VERTEX"]
    """ 

    :type: typing.Literal['NEAREST_SURFACEPOINT','PROJECT','NEAREST_VERTEX']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SimpleDeformModifier(Modifier, bpy_struct):
    """Simple deformation modifier to apply effects such as twisting and bending"""

    angle: float
    """ Angle of deformation

    :type: float
    """

    deform_axis: typing.Literal["X", "Y", "Z"]
    """ Deform around local axis

    :type: typing.Literal['X','Y','Z']
    """

    deform_method: typing.Literal["TWIST", "BEND", "TAPER", "STRETCH"]
    """ 

    :type: typing.Literal['TWIST','BEND','TAPER','STRETCH']
    """

    factor: float
    """ Amount to deform object

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    limits: bpy_prop_array[float]
    """ Lower/Upper limits for deform

    :type: bpy_prop_array[float]
    """

    lock_x: bool
    """ Do not allow deformation along the X axis

    :type: bool
    """

    lock_y: bool
    """ Do not allow deformation along the Y axis

    :type: bool
    """

    lock_z: bool
    """ Do not allow deformation along the Z axis

    :type: bool
    """

    origin: Object | None
    """ Offset the origin and orientation of the deformation

    :type: Object | None
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SkinModifier(Modifier, bpy_struct):
    """Generate Skin"""

    branch_smoothing: float
    """ Smooth complex geometry around branches

    :type: float
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    use_x_symmetry: bool
    """ Avoid making unsymmetrical quads across the X axis

    :type: bool
    """

    use_y_symmetry: bool
    """ Avoid making unsymmetrical quads across the Y axis

    :type: bool
    """

    use_z_symmetry: bool
    """ Avoid making unsymmetrical quads across the Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SmokeCollSettings(bpy_struct):
    """Smoke collision settings"""

    collision_type: typing.Literal["COLLSTATIC", "COLLRIGID", "COLLANIMATED"]
    """ Collision type

    :type: typing.Literal['COLLSTATIC','COLLRIGID','COLLANIMATED']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SmokeDomainSettings(bpy_struct):
    """Smoke domain settings"""

    adapt_margin: int
    """ Margin added around fluid to minimize boundary interference

    :type: int
    """

    adapt_threshold: float
    """ Maximum amount of fluid cell can contain before it is considered empty

    :type: float
    """

    additional_res: int
    """ Maximum number of additional cells

    :type: int
    """

    alpha: float
    """ How much density affects smoke motion (higher value results in faster rising smoke)

    :type: float
    """

    amplify: int
    """ Enhance the resolution of smoke by this factor using noise

    :type: int
    """

    axis_slice_method: typing.Literal["FULL", "SINGLE"]
    """ 

    :type: typing.Literal['FULL','SINGLE']
    """

    beta: float
    """ How much heat affects smoke motion (higher value results in faster rising smoke)

    :type: float
    """

    burning_rate: float
    """ Speed of the burning reaction (use larger values for smaller flame)

    :type: float
    """

    cache_file_format: typing.Literal["POINTCACHE", "OPENVDB"]
    """ Select the file format to be used for caching

    :type: typing.Literal['POINTCACHE','OPENVDB']
    """

    cell_size: bpy_prop_array[float]
    """ Cell Size

    :type: bpy_prop_array[float]
    """

    clipping: float
    """ Value under which voxels are considered empty space to optimize caching or rendering

    :type: float
    """

    coba_field: typing.Literal[
        "COLOR_R",
        "COLOR_G",
        "COLOR_B",
        "DENSITY",
        "FLAME",
        "FUEL",
        "HEAT",
        "VELOCITY_X",
        "VELOCITY_Y",
        "VELOCITY_Z",
    ]
    """ Simulation field to color map

    :type: typing.Literal['COLOR_R','COLOR_G','COLOR_B','DENSITY','FLAME','FUEL','HEAT','VELOCITY_X','VELOCITY_Y','VELOCITY_Z']
    """

    collision_extents: typing.Literal["BORDEROPEN", "BORDERVERTICAL", "BORDERCLOSED"]
    """ Select which domain border will be treated as collision object

    :type: typing.Literal['BORDEROPEN','BORDERVERTICAL','BORDERCLOSED']
    """

    collision_group: Group | None
    """ Limit collisions to this group

    :type: Group | None
    """

    color_grid: bpy_prop_array[float]
    """ Smoke color grid

    :type: bpy_prop_array[float]
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    data_depth: typing.Literal["16", "32"]
    """ Bit depth for writing all scalar (including vector) lower values reduce file size

    :type: typing.Literal['16','32']
    """

    density_grid: bpy_prop_array[float]
    """ Smoke density grid

    :type: bpy_prop_array[float]
    """

    display_thickness: float
    """ Thickness of smoke drawing in the viewport

    :type: float
    """

    dissolve_speed: int
    """ Dissolve Speed

    :type: int
    """

    domain_resolution: bpy_prop_array[int]
    """ Smoke Grid Resolution

    :type: bpy_prop_array[int]
    """

    draw_velocity: bool
    """ Toggle visualization of the velocity field as needles

    :type: bool
    """

    effector_group: Group | None
    """ Limit effectors to this group

    :type: Group | None
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    flame_grid: bpy_prop_array[float]
    """ Smoke flame grid

    :type: bpy_prop_array[float]
    """

    flame_ignition: float
    """ Minimum temperature of flames

    :type: float
    """

    flame_max_temp: float
    """ Maximum temperature of flames

    :type: float
    """

    flame_smoke: float
    """ Amount of smoke created by burning fuel

    :type: float
    """

    flame_smoke_color: bpy_prop_array[float]
    """ Color of smoke emitted from burning fuel

    :type: bpy_prop_array[float]
    """

    flame_vorticity: float
    """ Additional vorticity for the flames

    :type: float
    """

    fluid_group: Group | None
    """ Limit fluid objects to this group

    :type: Group | None
    """

    heat_grid: bpy_prop_array[float]
    """ Smoke heat grid

    :type: bpy_prop_array[float]
    """

    highres_sampling: typing.Literal["FULLSAMPLE", "LINEAR", "NEAREST"]
    """ Method for sampling the high resolution flow

    :type: typing.Literal['FULLSAMPLE','LINEAR','NEAREST']
    """

    noise_type: typing.Literal["NOISEWAVE", "NOISEFFT"]
    """ Noise method which is used for creating the high resolution

    :type: typing.Literal['NOISEWAVE','NOISEFFT']
    """

    openvdb_cache_compress_type: typing.Literal["ZIP", "BLOSC", "NONE"]
    """ Compression method to be used

    :type: typing.Literal['ZIP','BLOSC','NONE']
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    point_cache_compress_type: typing.Literal["CACHELIGHT", "CACHEHEAVY"]
    """ Compression method to be used

    :type: typing.Literal['CACHELIGHT','CACHEHEAVY']
    """

    resolution_max: int
    """ Maximal resolution used in the fluid domain

    :type: int
    """

    show_high_resolution: bool
    """ Show high resolution (using amplification)

    :type: bool
    """

    slice_axis: typing.Literal["AUTO", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['AUTO','X','Y','Z']
    """

    slice_depth: float
    """ Position of the slice

    :type: float
    """

    slice_method: typing.Literal["VIEW_ALIGNED", "AXIS_ALIGNED"]
    """ How to slice the volume for viewport rendering

    :type: typing.Literal['VIEW_ALIGNED','AXIS_ALIGNED']
    """

    slice_per_voxel: float
    """ How many slices per voxel should be generated

    :type: float
    """

    start_point: bpy_prop_array[float]
    """ Start point

    :type: bpy_prop_array[float]
    """

    strength: float
    """ Strength of noise

    :type: float
    """

    temperature_grid: bpy_prop_array[float]
    """ Smoke temperature grid, range 0..1 represents 0..1000K

    :type: bpy_prop_array[float]
    """

    time_scale: float
    """ Adjust simulation speed

    :type: float
    """

    use_adaptive_domain: bool
    """ Adapt simulation resolution and size to fluid

    :type: bool
    """

    use_color_ramp: bool
    """ Render a simulation field while mapping its voxels values to the colors of a ramp

    :type: bool
    """

    use_dissolve_smoke: bool
    """ Enable smoke to disappear over time

    :type: bool
    """

    use_dissolve_smoke_log: bool
    """ Using 1/x

    :type: bool
    """

    use_high_resolution: bool
    """ Enable high resolution (using amplification)

    :type: bool
    """

    vector_draw_type: typing.Literal["NEEDLE", "STREAMLINE"]
    """ 

    :type: typing.Literal['NEEDLE','STREAMLINE']
    """

    vector_scale: float
    """ Multiplier for scaling the vectors

    :type: float
    """

    velocity_grid: bpy_prop_array[float]
    """ Smoke velocity grid

    :type: bpy_prop_array[float]
    """

    vorticity: float
    """ Amount of turbulence/rotation in fluid

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SmokeFlowSettings(bpy_struct):
    """Smoke flow settings"""

    density: float
    """ 

    :type: float
    """

    density_vertex_group: str
    """ Name of vertex group which determines surface emission rate

    :type: str
    """

    fuel_amount: float
    """ 

    :type: float
    """

    noise_texture: Texture | None
    """ Texture that controls emission strength

    :type: Texture | None
    """

    particle_size: float
    """ Particle size in simulation cells

    :type: float
    """

    particle_system: ParticleSystem | None
    """ Particle systems emitted from the object

    :type: ParticleSystem | None
    """

    smoke_color: bpy_prop_array[float]
    """ Color of smoke

    :type: bpy_prop_array[float]
    """

    smoke_flow_source: typing.Literal["PARTICLES", "MESH"]
    """ Change how smoke is emitted

    :type: typing.Literal['PARTICLES','MESH']
    """

    smoke_flow_type: typing.Literal["OUTFLOW", "SMOKE", "BOTH", "FIRE"]
    """ Change how flow affects the simulation

    :type: typing.Literal['OUTFLOW','SMOKE','BOTH','FIRE']
    """

    subframes: int
    """ Number of additional samples to take between frames to improve quality of fast moving flows

    :type: int
    """

    surface_distance: float
    """ Maximum distance from mesh surface to emit smoke

    :type: float
    """

    temperature: float
    """ Temperature difference to ambient temperature

    :type: float
    """

    texture_map_type: typing.Literal["AUTO", "UV"]
    """ Texture mapping type

    :type: typing.Literal['AUTO','UV']
    """

    texture_offset: float
    """ Z-offset of texture mapping

    :type: float
    """

    texture_size: float
    """ Size of texture mapping

    :type: float
    """

    use_absolute: bool
    """ Only allow given density value in emitter area

    :type: bool
    """

    use_initial_velocity: bool
    """ Smoke has some initial velocity when it is emitted

    :type: bool
    """

    use_particle_size: bool
    """ Set particle size in simulation cells or use nearest cell

    :type: bool
    """

    use_texture: bool
    """ Use a texture to control emission strength

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    velocity_factor: float
    """ Multiplier of source velocity passed to smoke

    :type: float
    """

    velocity_normal: float
    """ Amount of normal directional velocity

    :type: float
    """

    velocity_random: float
    """ Amount of random velocity

    :type: float
    """

    volume_density: float
    """ Factor for smoke emitted from inside the mesh volume

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SmokeModifier(Modifier, bpy_struct):
    """Smoke simulation modifier"""

    coll_settings: SmokeCollSettings
    """ 

    :type: SmokeCollSettings
    """

    domain_settings: SmokeDomainSettings
    """ 

    :type: SmokeDomainSettings
    """

    flow_settings: SmokeFlowSettings
    """ 

    :type: SmokeFlowSettings
    """

    smoke_type: typing.Literal["NONE", "DOMAIN", "FLOW", "COLLISION"]
    """ 

    :type: typing.Literal['NONE','DOMAIN','FLOW','COLLISION']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SmoothModifier(Modifier, bpy_struct):
    """Smoothing effect modifier"""

    factor: float
    """ Strength of modifier effect

    :type: float
    """

    iterations: int
    """ 

    :type: int
    """

    use_x: bool
    """ Smooth object along X axis

    :type: bool
    """

    use_y: bool
    """ Smooth object along Y axis

    :type: bool
    """

    use_z: bool
    """ Smooth object along Z axis

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SoftBodyModifier(Modifier, bpy_struct):
    """Soft body simulation modifier"""

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    settings: SoftBodySettings
    """ 

    :type: SoftBodySettings
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SoftBodySettings(bpy_struct):
    """Soft body simulation settings for an object"""

    aero: int
    """ Make edges 'sail'

    :type: int
    """

    aerodynamics_type: typing.Literal["SIMPLE", "LIFT_FORCE"]
    """ Method of calculating aerodynamic interaction

    :type: typing.Literal['SIMPLE','LIFT_FORCE']
    """

    ball_damp: float
    """ Blending to inelastic collision

    :type: float
    """

    ball_size: float
    """ Absolute ball size or factor if not manually adjusted

    :type: float
    """

    ball_stiff: float
    """ Ball inflating pressure

    :type: float
    """

    bend: float
    """ Bending Stiffness

    :type: float
    """

    choke: int
    """ 'Viscosity' inside collision target

    :type: int
    """

    collision_group: Group | None
    """ Limit colliders to this Group

    :type: Group | None
    """

    collision_type: typing.Literal["MANUAL", "AVERAGE", "MINIMAL", "MAXIMAL", "MINMAX"]
    """ Choose Collision Type

    :type: typing.Literal['MANUAL','AVERAGE','MINIMAL','MAXIMAL','MINMAX']
    """

    damping: float
    """ Edge spring friction

    :type: float
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    error_threshold: float
    """ The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed

    :type: float
    """

    friction: float
    """ General media friction for point movements

    :type: float
    """

    fuzzy: int
    """ Fuzziness while on collision, high values make collision handling faster but less stable

    :type: int
    """

    goal_default: float
    """ Default Goal (vertex target position) value

    :type: float
    """

    goal_friction: float
    """ Goal (vertex target position) friction

    :type: float
    """

    goal_max: float
    """ Goal maximum, vertex weights are scaled to match this range

    :type: float
    """

    goal_min: float
    """ Goal minimum, vertex weights are scaled to match this range

    :type: float
    """

    goal_spring: float
    """ Goal (vertex target position) spring stiffness

    :type: float
    """

    gravity: float
    """ Apply gravitation to point movement

    :type: float
    """

    location_mass_center: bpy_prop_array[float]
    """ Location of Center of mass

    :type: bpy_prop_array[float]
    """

    mass: float
    """ General Mass value

    :type: float
    """

    plastic: int
    """ Permanent deform

    :type: int
    """

    pull: float
    """ Edge spring stiffness when longer than rest length

    :type: float
    """

    push: float
    """ Edge spring stiffness when shorter than rest length

    :type: float
    """

    rotation_estimate: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ Estimated rotation matrix

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    scale_estimate: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ Estimated scale matrix

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    shear: float
    """ Shear Stiffness

    :type: float
    """

    speed: float
    """ Tweak timing for physics to control frequency and speed

    :type: float
    """

    spring_length: int
    """ Alter spring length to shrink/blow up (unit %) 0 to disable

    :type: int
    """

    step_max: int
    """ Maximal # solver steps/frame

    :type: int
    """

    step_min: int
    """ Minimal # solver steps/frame

    :type: int
    """

    use_auto_step: bool
    """ Use velocities for automagic step sizes

    :type: bool
    """

    use_diagnose: bool
    """ Turn on SB diagnose console prints

    :type: bool
    """

    use_edge_collision: bool
    """ Edges collide too

    :type: bool
    """

    use_edges: bool
    """ Use Edges as springs

    :type: bool
    """

    use_estimate_matrix: bool
    """ Estimate matrix... split to COM, ROT, SCALE

    :type: bool
    """

    use_face_collision: bool
    """ Faces collide too, can be very slow

    :type: bool
    """

    use_goal: bool
    """ Define forces for vertices to stick to animated position

    :type: bool
    """

    use_self_collision: bool
    """ Enable naive vertex ball self collision

    :type: bool
    """

    use_stiff_quads: bool
    """ Add diagonal springs on 4-gons

    :type: bool
    """

    vertex_group_goal: str
    """ Control point weight values

    :type: str
    """

    vertex_group_mass: str
    """ Control point mass values

    :type: str
    """

    vertex_group_spring: str
    """ Control point spring strength values

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SolidifyModifier(Modifier, bpy_struct):
    """Create a solid skin by extruding, compensating for sharp angles"""

    edge_crease_inner: float
    """ Assign a crease to inner edges

    :type: float
    """

    edge_crease_outer: float
    """ Assign a crease to outer edges

    :type: float
    """

    edge_crease_rim: float
    """ Assign a crease to the edges making up the rim

    :type: float
    """

    invert_vertex_group: bool
    """ Invert the vertex group influence

    :type: bool
    """

    material_offset: int
    """ Offset material index of generated faces

    :type: int
    """

    material_offset_rim: int
    """ Offset material index of generated rim faces

    :type: int
    """

    offset: float
    """ Offset the thickness from the center

    :type: float
    """

    thickness: float
    """ Thickness of the shell

    :type: float
    """

    thickness_clamp: float
    """ Offset clamp based on geometry scale

    :type: float
    """

    thickness_vertex_group: float
    """ Thickness factor to use for zero vertex group influence

    :type: float
    """

    use_even_offset: bool
    """ Maintain thickness by adjusting for sharp corners (slow, disable when not needed)

    :type: bool
    """

    use_flip_normals: bool
    """ Invert the face direction

    :type: bool
    """

    use_quality_normals: bool
    """ Calculate normals which result in more even thickness (slow, disable when not needed)

    :type: bool
    """

    use_rim: bool
    """ Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)

    :type: bool
    """

    use_rim_only: bool
    """ Only add the rim to the original data

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Sound(ID, bpy_struct):
    """Sound data-block referencing an external or packed sound file"""

    filepath: str
    """ Sound sample file used by this Sound data-block

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    use_memory_cache: bool
    """ The sound file is decoded and loaded into RAM

    :type: bool
    """

    use_mono: bool
    """ If the file contains multiple audio channels they are rendered to a single one

    :type: bool
    """

    factory: typing.Any
    """ The aud.Factory object of the sound.
(readonly)"""

    def pack(self):
        """Pack the sound into the current blend file"""

    def unpack(
        self,
        method: typing.Literal[
            "USE_LOCAL", "WRITE_LOCAL", "USE_ORIGINAL", "WRITE_ORIGINAL"
        ]
        | None = "USE_LOCAL",
    ):
        """Unpack the sound to the samples filename

        :param method: method, How to unpack
        :type method: typing.Literal['USE_LOCAL','WRITE_LOCAL','USE_ORIGINAL','WRITE_ORIGINAL'] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SoundActuator(Actuator, bpy_struct):
    """Sound file"""

    cone_inner_angle_3d: float
    """ The angle of the inner cone

    :type: float
    """

    cone_outer_angle_3d: float
    """ The angle of the outer cone

    :type: float
    """

    cone_outer_gain_3d: float
    """ The gain outside the outer cone (the gain in the outer cone will be interpolated between this value and the normal gain in the inner cone)

    :type: float
    """

    distance_3d_max: float
    """ The maximum distance at which you can hear the sound

    :type: float
    """

    distance_3d_reference: float
    """ The distance where the sound has a gain of 1.0

    :type: float
    """

    gain_3d_max: float
    """ The maximum gain of the sound, no matter how near it is

    :type: float
    """

    gain_3d_min: float
    """ The minimum gain of the sound, no matter how far it is away

    :type: float
    """

    mode: typing.Literal[
        "PLAYSTOP",
        "PLAYEND",
        "LOOPSTOP",
        "LOOPEND",
        "LOOPBIDIRECTIONAL",
        "LOOPBIDIRECTIONALSTOP",
    ]
    """ 

    :type: typing.Literal['PLAYSTOP','PLAYEND','LOOPSTOP','LOOPEND','LOOPBIDIRECTIONAL','LOOPBIDIRECTIONALSTOP']
    """

    pitch: float
    """ Pitch of the sound

    :type: float
    """

    rolloff_factor_3d: float
    """ The influence factor on volume depending on distance

    :type: float
    """

    sound: Sound | None
    """ 

    :type: Sound | None
    """

    use_sound_3d: bool
    """ Enable/Disable 3D Sound

    :type: bool
    """

    volume: float
    """ Initial volume of the sound

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SoundSequence(Sequence, bpy_struct):
    """Sequence strip defining a sound to be played over a period of time"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    pan: float
    """ Playback panning of the sound (only for Mono sources)

    :type: float
    """

    pitch: float
    """ Playback pitch of the sound

    :type: float
    """

    show_waveform: bool
    """ Whether to draw the sound's waveform

    :type: bool
    """

    sound: Sound | None
    """ Sound data-block used by this sequence

    :type: Sound | None
    """

    volume: float
    """ Playback volume of the sound

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Space(bpy_struct):
    """Space data for a screen area"""

    show_locked_time: bool
    """ 

    :type: bool
    """

    type: typing.Literal[
        "EMPTY",
        "VIEW_3D",
        "IMAGE_EDITOR",
        "NODE_EDITOR",
        "SEQUENCE_EDITOR",
        "CLIP_EDITOR",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "TEXT_EDITOR",
        "LOGIC_EDITOR",
        "CONSOLE",
        "INFO",
        "OUTLINER",
        "PROPERTIES",
        "FILE_BROWSER",
        "USER_PREFERENCES",
    ]
    """ Space data type

    :type: typing.Literal['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','TEXT_EDITOR','LOGIC_EDITOR','CONSOLE','INFO','OUTLINER','PROPERTIES','FILE_BROWSER','USER_PREFERENCES']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceClipEditor(Space, bpy_struct):
    """Clip editor space data"""

    clip: MovieClip | None
    """ Movie clip displayed and edited in this space

    :type: MovieClip | None
    """

    clip_user: MovieClipUser
    """ Parameters defining which frame of the movie clip is displayed

    :type: MovieClipUser
    """

    grease_pencil_source: typing.Literal["CLIP", "TRACK"]
    """ Where the grease pencil comes from

    :type: typing.Literal['CLIP','TRACK']
    """

    lock_selection: bool
    """ Lock viewport to selected markers during playback

    :type: bool
    """

    lock_time_cursor: bool
    """ Lock curves view to time cursor during playback and tracking

    :type: bool
    """

    mask: Mask | None
    """ Mask displayed and edited in this space

    :type: Mask | None
    """

    mask_draw_type: typing.Literal["OUTLINE", "DASH", "BLACK", "WHITE"]
    """ Draw type for mask splines

    :type: typing.Literal['OUTLINE','DASH','BLACK','WHITE']
    """

    mask_overlay_mode: typing.Literal["ALPHACHANNEL", "COMBINED"]
    """ Overlay mode of rasterized mask

    :type: typing.Literal['ALPHACHANNEL','COMBINED']
    """

    mode: typing.Literal["TRACKING", "MASK"]
    """ Editing context being displayed

    :type: typing.Literal['TRACKING','MASK']
    """

    path_length: int
    """ Length of displaying path, in frames

    :type: int
    """

    pivot_point: typing.Literal[
        "BOUNDING_BOX_CENTER", "CURSOR", "INDIVIDUAL_ORIGINS", "MEDIAN_POINT"
    ]
    """ Pivot center for rotation/scaling

    :type: typing.Literal['BOUNDING_BOX_CENTER','CURSOR','INDIVIDUAL_ORIGINS','MEDIAN_POINT']
    """

    scopes: MovieClipScopes
    """ Scopes to visualize movie clip statistics

    :type: MovieClipScopes
    """

    show_blue_channel: bool
    """ Show blue channel in the frame

    :type: bool
    """

    show_bundles: bool
    """ Show projection of 3D markers into footage

    :type: bool
    """

    show_disabled: bool
    """ Show disabled tracks from the footage

    :type: bool
    """

    show_filters: bool
    """ Show filters for graph editor

    :type: bool
    """

    show_graph_frames: bool
    """ Show curve for per-frame average error (camera motion should be solved first)

    :type: bool
    """

    show_graph_hidden: bool
    """ Include channels from objects/bone that aren't visible

    :type: bool
    """

    show_graph_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    show_graph_tracks_error: bool
    """ Display the reprojection error curve for selected tracks

    :type: bool
    """

    show_graph_tracks_motion: bool
    """ Display the speed curves (in "x" direction red, in "y" direction green) for the selected tracks

    :type: bool
    """

    show_grease_pencil: bool
    """ Show grease pencil for this view

    :type: bool
    """

    show_green_channel: bool
    """ Show green channel in the frame

    :type: bool
    """

    show_grid: bool
    """ Show grid showing lens distortion

    :type: bool
    """

    show_marker_pattern: bool
    """ Show pattern boundbox for markers

    :type: bool
    """

    show_marker_search: bool
    """ Show search boundbox for markers

    :type: bool
    """

    show_mask_overlay: bool
    """ 

    :type: bool
    """

    show_mask_smooth: bool
    """ 

    :type: bool
    """

    show_metadata: bool
    """ Show metadata of clip

    :type: bool
    """

    show_names: bool
    """ Show track names and status

    :type: bool
    """

    show_red_channel: bool
    """ Show red channel in the frame

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_stable: bool
    """ Show stable footage in editor (if stabilization is enabled)

    :type: bool
    """

    show_tiny_markers: bool
    """ Show markers in a more compact manner

    :type: bool
    """

    show_track_path: bool
    """ Show path of how track moves

    :type: bool
    """

    use_grayscale_preview: bool
    """ Display frame in grayscale mode

    :type: bool
    """

    use_manual_calibration: bool
    """ Use manual calibration helpers

    :type: bool
    """

    use_mute_footage: bool
    """ Mute footage and show black background instead

    :type: bool
    """

    view: typing.Literal["CLIP", "GRAPH", "DOPESHEET"]
    """ Type of the clip editor view

    :type: typing.Literal['CLIP','GRAPH','DOPESHEET']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceConsole(Space, bpy_struct):
    """Interactive python console"""

    font_size: int
    """ Font size to use for displaying the text

    :type: int
    """

    history: bpy_prop_collection[ConsoleLine]
    """ Command history

    :type: bpy_prop_collection[ConsoleLine]
    """

    language: str
    """ Command line prompt language

    :type: str
    """

    prompt: str
    """ Command line prompt

    :type: str
    """

    scrollback: bpy_prop_collection[ConsoleLine]
    """ Command output

    :type: bpy_prop_collection[ConsoleLine]
    """

    select_end: int
    """ 

    :type: int
    """

    select_start: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceDopeSheetEditor(Space, bpy_struct):
    """Dope Sheet space data"""

    action: Action | None
    """ Action displayed and edited in this space

    :type: Action | None
    """

    auto_snap: typing.Literal["NONE", "STEP", "TIME_STEP", "FRAME", "SECOND", "MARKER"]
    """ Automatic time snapping settings for transformations

    :type: typing.Literal['NONE','STEP','TIME_STEP','FRAME','SECOND','MARKER']
    """

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    mode: typing.Literal[
        "DOPESHEET", "ACTION", "SHAPEKEY", "GPENCIL", "MASK", "CACHEFILE"
    ]
    """ Editing context being displayed

    :type: typing.Literal['DOPESHEET','ACTION','SHAPEKEY','GPENCIL','MASK','CACHEFILE']
    """

    show_frame_indicator: bool
    """ Show frame number beside the current frame indicator line

    :type: bool
    """

    show_group_colors: bool
    """ Draw groups and channels with colors matching their corresponding groups (pose bones only currently)

    :type: bool
    """

    show_pose_markers: bool
    """ Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_sliders: bool
    """ Show sliders beside F-Curve channels

    :type: bool
    """

    use_auto_merge_keyframes: bool
    """ Automatically merge nearby keyframes

    :type: bool
    """

    use_marker_sync: bool
    """ Sync Markers with keyframe edits

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming keyframes, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceFileBrowser(Space, bpy_struct):
    """File browser space data"""

    active_operator: Operator | None
    """ 

    :type: Operator | None
    """

    bookmarks: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ User's bookmarks

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    bookmarks_active: int
    """ Index of active bookmark (-1 if none)

    :type: int
    """

    operator: Operator
    """ 

    :type: Operator
    """

    params: FileSelectParams
    """ Parameters and Settings for the Filebrowser

    :type: FileSelectParams
    """

    recent_folders: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ 

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    recent_folders_active: int
    """ Index of active recent folder (-1 if none)

    :type: int
    """

    system_bookmarks: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ System's bookmarks

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    system_bookmarks_active: int
    """ Index of active system bookmark (-1 if none)

    :type: int
    """

    system_folders: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ System's folders (usually root, available hard drives, etc)

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    system_folders_active: int
    """ Index of active system folder (-1 if none)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceGraphEditor(Space, bpy_struct):
    """Graph Editor space data"""

    auto_snap: typing.Literal["NONE", "STEP", "TIME_STEP", "FRAME", "SECOND", "MARKER"]
    """ Automatic time snapping settings for transformations

    :type: typing.Literal['NONE','STEP','TIME_STEP','FRAME','SECOND','MARKER']
    """

    cursor_position_x: float
    """ Graph Editor 2D-Value cursor - X-Value component

    :type: float
    """

    cursor_position_y: float
    """ Graph Editor 2D-Value cursor - Y-Value component

    :type: float
    """

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    has_ghost_curves: bool
    """ Graph Editor instance has some ghost curves stored

    :type: bool
    """

    mode: typing.Literal["FCURVES", "DRIVERS"]
    """ Editing context being displayed

    :type: typing.Literal['FCURVES','DRIVERS']
    """

    pivot_point: typing.Literal["BOUNDING_BOX_CENTER", "CURSOR", "INDIVIDUAL_ORIGINS"]
    """ Pivot center for rotation/scaling

    :type: typing.Literal['BOUNDING_BOX_CENTER','CURSOR','INDIVIDUAL_ORIGINS']
    """

    show_cursor: bool
    """ Show 2D cursor

    :type: bool
    """

    show_frame_indicator: bool
    """ Show frame number beside the current frame indicator line

    :type: bool
    """

    show_group_colors: bool
    """ Draw groups and channels with colors matching their corresponding groups

    :type: bool
    """

    show_handles: bool
    """ Show handles of Bezier control points

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_sliders: bool
    """ Show sliders beside F-Curve channels

    :type: bool
    """

    use_auto_merge_keyframes: bool
    """ Automatically merge nearby keyframes

    :type: bool
    """

    use_auto_normalization: bool
    """ Automatically recalculate curve normalization on every curve edit

    :type: bool
    """

    use_beauty_drawing: bool
    """ Draw F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)

    :type: bool
    """

    use_normalization: bool
    """ Display curves in normalized to -1..1 range, for easier editing of multiple curves with different ranges

    :type: bool
    """

    use_only_selected_curves_handles: bool
    """ Only keyframes of selected F-Curves are visible and editable

    :type: bool
    """

    use_only_selected_keyframe_handles: bool
    """ Only show and edit handles of selected keyframes

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming keyframes, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceImageEditor(Space, bpy_struct):
    """Image and UV editor space data"""

    cursor_location: bpy_prop_array[float]
    """ 2D cursor location for this view

    :type: bpy_prop_array[float]
    """

    draw_channels: typing.Literal[
        "COLOR_ALPHA", "COLOR", "ALPHA", "Z_BUFFER", "RED", "GREEN", "BLUE"
    ]
    """ Channels of the image to draw

    :type: typing.Literal['COLOR_ALPHA','COLOR','ALPHA','Z_BUFFER','RED','GREEN','BLUE']
    """

    grease_pencil: GreasePencil | None
    """ Grease pencil data for this space

    :type: GreasePencil | None
    """

    image: Image | None
    """ Image displayed and edited in this space

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    mask: Mask | None
    """ Mask displayed and edited in this space

    :type: Mask | None
    """

    mask_draw_type: typing.Literal["OUTLINE", "DASH", "BLACK", "WHITE"]
    """ Draw type for mask splines

    :type: typing.Literal['OUTLINE','DASH','BLACK','WHITE']
    """

    mask_overlay_mode: typing.Literal["ALPHACHANNEL", "COMBINED"]
    """ Overlay mode of rasterized mask

    :type: typing.Literal['ALPHACHANNEL','COMBINED']
    """

    mode: typing.Literal["VIEW", "PAINT", "MASK"]
    """ Editing context being displayed

    :type: typing.Literal['VIEW','PAINT','MASK']
    """

    pivot_point: typing.Literal[
        "BOUNDING_BOX_CENTER",
        "CURSOR",
        "INDIVIDUAL_ORIGINS",
        "MEDIAN_POINT",
        "ACTIVE_ELEMENT",
    ]
    """ Rotation/Scaling Pivot

    :type: typing.Literal['BOUNDING_BOX_CENTER','CURSOR','INDIVIDUAL_ORIGINS','MEDIAN_POINT','ACTIVE_ELEMENT']
    """

    sample_histogram: Histogram
    """ Sampled colors along line

    :type: Histogram
    """

    scopes: Scopes
    """ Scopes to visualize image statistics

    :type: Scopes
    """

    show_grease_pencil: bool
    """ Show grease pencil for this view

    :type: bool
    """

    show_mask_overlay: bool
    """ 

    :type: bool
    """

    show_mask_smooth: bool
    """ 

    :type: bool
    """

    show_maskedit: bool
    """ Show Mask editing related properties

    :type: bool
    """

    show_paint: bool
    """ Show paint related properties

    :type: bool
    """

    show_render: bool
    """ Show render related properties

    :type: bool
    """

    show_repeat: bool
    """ Draw the image repeated outside of the main view

    :type: bool
    """

    show_stereo_3d: bool
    """ Display the image in Stereo 3D

    :type: bool
    """

    show_uvedit: bool
    """ Show UV editing related properties

    :type: bool
    """

    use_image_pin: bool
    """ Display current image regardless of object selection

    :type: bool
    """

    use_realtime_update: bool
    """ Update other affected window spaces automatically to reflect changes during interactive operations such as transform

    :type: bool
    """

    uv_editor: SpaceUVEditor
    """ UV editor settings

    :type: SpaceUVEditor
    """

    zoom: bpy_prop_array[float]
    """ Zoom factor

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceInfo(Space, bpy_struct):
    """Info space data"""

    show_report_debug: bool
    """ Display debug reporting info

    :type: bool
    """

    show_report_error: bool
    """ Display error text

    :type: bool
    """

    show_report_info: bool
    """ Display general information

    :type: bool
    """

    show_report_operator: bool
    """ Display the operator log

    :type: bool
    """

    show_report_warning: bool
    """ Display warnings

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceLogicEditor(Space, bpy_struct):
    """Logic editor space data"""

    import_string: str
    """ Import string used to find the component when adding a new component

    :type: str
    """

    show_actuators_active_object: bool
    """ Show actuators of active object

    :type: bool
    """

    show_actuators_active_states: bool
    """ Show only actuators connected to active states

    :type: bool
    """

    show_actuators_linked_controller: bool
    """ Show linked objects to the actuator

    :type: bool
    """

    show_actuators_selected_objects: bool
    """ Show actuators of all selected objects

    :type: bool
    """

    show_controllers_active_object: bool
    """ Show controllers of active object

    :type: bool
    """

    show_controllers_linked_controller: bool
    """ Show linked objects to sensor/actuator

    :type: bool
    """

    show_controllers_selected_objects: bool
    """ Show controllers of all selected objects

    :type: bool
    """

    show_sensors_active_object: bool
    """ Show sensors of active object

    :type: bool
    """

    show_sensors_active_states: bool
    """ Show only sensors connected to active states

    :type: bool
    """

    show_sensors_linked_controller: bool
    """ Show linked objects to the controller

    :type: bool
    """

    show_sensors_selected_objects: bool
    """ Show sensors of all selected objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceNLA(Space, bpy_struct):
    """NLA editor space data"""

    auto_snap: typing.Literal["NONE", "STEP", "TIME_STEP", "FRAME", "SECOND", "MARKER"]
    """ Automatic time snapping settings for transformations

    :type: typing.Literal['NONE','STEP','TIME_STEP','FRAME','SECOND','MARKER']
    """

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    show_frame_indicator: bool
    """ Show frame number beside the current frame indicator line

    :type: bool
    """

    show_local_markers: bool
    """ Show action-local markers on the strips, useful when synchronizing timing across strips

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_strip_curves: bool
    """ Show influence F-Curves on strips

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming strips, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceNodeEditor(Space, bpy_struct):
    """Node editor space data"""

    backdrop_channels: typing.Literal[
        "COLOR_ALPHA", "COLOR", "ALPHA", "RED", "GREEN", "BLUE"
    ]
    """ Channels of the image to draw

    :type: typing.Literal['COLOR_ALPHA','COLOR','ALPHA','RED','GREEN','BLUE']
    """

    backdrop_x: float
    """ Backdrop X offset

    :type: float
    """

    backdrop_y: float
    """ Backdrop Y offset

    :type: float
    """

    backdrop_zoom: float
    """ Backdrop zoom factor

    :type: float
    """

    cursor_location: bpy_prop_array[float]
    """ Location for adding new nodes

    :type: bpy_prop_array[float]
    """

    edit_tree: NodeTree
    """ Node tree being displayed and edited

    :type: NodeTree
    """

    id: ID
    """ Data-block whose nodes are being edited

    :type: ID
    """

    id_from: ID
    """ Data-block from which the edited data-block is linked

    :type: ID
    """

    insert_offset_direction: typing.Literal["RIGHT", "LEFT"]
    """ Direction to offset nodes on insertion

    :type: typing.Literal['RIGHT','LEFT']
    """

    node_tree: NodeTree | None
    """ Base node tree from context

    :type: NodeTree | None
    """

    path: SpaceNodeEditorPath
    """ Path from the data-block to the currently edited node tree

    :type: SpaceNodeEditorPath
    """

    pin: bool
    """ Use the pinned node tree

    :type: bool
    """

    shader_type: typing.Literal["OBJECT", "WORLD", "LINESTYLE"]
    """ Type of data to take shader from

    :type: typing.Literal['OBJECT','WORLD','LINESTYLE']
    """

    show_backdrop: bool
    """ Use active Viewer Node output as backdrop for compositing nodes

    :type: bool
    """

    show_grease_pencil: bool
    """ Show grease pencil for this view

    :type: bool
    """

    texture_type: typing.Literal["OBJECT", "WORLD", "BRUSH", "LINESTYLE"]
    """ Type of data to take texture from

    :type: typing.Literal['OBJECT','WORLD','BRUSH','LINESTYLE']
    """

    tree_type: typing.Literal["DUMMY"]
    """ Node tree type to display and edit

    :type: typing.Literal['DUMMY']
    """

    use_auto_render: bool
    """ Re-render and composite changed layers on 3D edits

    :type: bool
    """

    use_insert_offset: bool
    """ Automatically offset the following or previous nodes in a chain when inserting a new node

    :type: bool
    """

    def cursor_location_from_region(self, x: int | None, y: int | None):
        """Set the cursor location using region coordinates

        :param x: x, Region x coordinate
        :type x: int | None
        :param y: y, Region y coordinate
        :type y: int | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceOutliner(Space, bpy_struct):
    """Outliner space data"""

    display_mode: typing.Literal[
        "ALL_SCENES",
        "CURRENT_SCENE",
        "VISIBLE_LAYERS",
        "SELECTED",
        "ACTIVE",
        "SAME_TYPES",
        "GROUPS",
        "SEQUENCE",
        "LIBRARIES",
        "DATABLOCKS",
        "USER_PREFERENCES",
        "ORPHAN_DATA",
    ]
    """ Type of information to display

    :type: typing.Literal['ALL_SCENES','CURRENT_SCENE','VISIBLE_LAYERS','SELECTED','ACTIVE','SAME_TYPES','GROUPS','SEQUENCE','LIBRARIES','DATABLOCKS','USER_PREFERENCES','ORPHAN_DATA']
    """

    filter_text: str
    """ Live search filtering string

    :type: str
    """

    show_restrict_columns: bool
    """ Show column

    :type: bool
    """

    use_filter_case_sensitive: bool
    """ Only use case sensitive matches of search string

    :type: bool
    """

    use_filter_complete: bool
    """ Only use complete matches of search string

    :type: bool
    """

    use_sort_alpha: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceProperties(Space, bpy_struct):
    """Properties space data"""

    align: typing.Literal["HORIZONTAL", "VERTICAL"]
    """ Arrangement of the panels

    :type: typing.Literal['HORIZONTAL','VERTICAL']
    """

    context: typing.Literal[
        "SCENE",
        "RENDER",
        "RENDER_LAYER",
        "WORLD",
        "OBJECT",
        "CONSTRAINT",
        "MODIFIER",
        "DATA",
        "BONE",
        "BONE_CONSTRAINT",
        "MATERIAL",
        "TEXTURE",
        "PARTICLES",
        "PHYSICS",
    ]
    """ Type of active data to display and edit

    :type: typing.Literal['SCENE','RENDER','RENDER_LAYER','WORLD','OBJECT','CONSTRAINT','MODIFIER','DATA','BONE','BONE_CONSTRAINT','MATERIAL','TEXTURE','PARTICLES','PHYSICS']
    """

    pin_id: ID | None
    """ 

    :type: ID | None
    """

    texture_context: typing.Literal[
        "MATERIAL", "WORLD", "LAMP", "PARTICLES", "LINESTYLE", "OTHER"
    ]
    """ Type of texture data to display and edit

    :type: typing.Literal['MATERIAL','WORLD','LAMP','PARTICLES','LINESTYLE','OTHER']
    """

    use_limited_texture_context: bool
    """ Use the limited version of texture user (for 'old shading' mode)

    :type: bool
    """

    use_pin_id: bool
    """ Use the pinned context

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceSequenceEditor(Space, bpy_struct):
    """Sequence editor space data"""

    display_channel: int
    """ The channel number shown in the image preview. 0 is the result of all strips combined

    :type: int
    """

    display_mode: typing.Literal["IMAGE", "WAVEFORM", "VECTOR_SCOPE", "HISTOGRAM"]
    """ View mode to use for displaying sequencer output

    :type: typing.Literal['IMAGE','WAVEFORM','VECTOR_SCOPE','HISTOGRAM']
    """

    draw_overexposed: int
    """ Show overexposed areas with zebra stripes

    :type: int
    """

    grease_pencil: GreasePencil | None
    """ Grease pencil data for this space

    :type: GreasePencil | None
    """

    overlay_type: typing.Literal["RECTANGLE", "REFERENCE", "CURRENT"]
    """ Overlay draw type

    :type: typing.Literal['RECTANGLE','REFERENCE','CURRENT']
    """

    preview_channels: typing.Literal["COLOR_ALPHA", "COLOR"]
    """ Channels of the preview to draw

    :type: typing.Literal['COLOR_ALPHA','COLOR']
    """

    proxy_render_size: typing.Literal[
        "NONE", "SCENE", "PROXY_25", "PROXY_50", "PROXY_75", "PROXY_100", "FULL"
    ]
    """ Draw preview using full resolution or different proxy resolutions

    :type: typing.Literal['NONE','SCENE','PROXY_25','PROXY_50','PROXY_75','PROXY_100','FULL']
    """

    show_backdrop: bool
    """ Display result under strips

    :type: bool
    """

    show_frame_indicator: bool
    """ Show frame number beside the current frame indicator line

    :type: bool
    """

    show_frames: bool
    """ Draw frames rather than seconds

    :type: bool
    """

    show_grease_pencil: bool
    """ Show grease pencil for this view

    :type: bool
    """

    show_metadata: bool
    """ Show metadata of first visible strip

    :type: bool
    """

    show_safe_areas: bool
    """ Show TV title safe and action safe areas in preview

    :type: bool
    """

    show_safe_center: bool
    """ Show safe areas to fit content in a different aspect ratio

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_separate_color: bool
    """ Separate color channels in preview

    :type: bool
    """

    show_strip_offset: bool
    """ Display strip in/out offsets

    :type: bool
    """

    use_marker_sync: bool
    """ Transform markers as well as strips

    :type: bool
    """

    view_type: typing.Literal["SEQUENCER", "PREVIEW", "SEQUENCER_PREVIEW"]
    """ Type of the Sequencer view (sequencer, preview or both)

    :type: typing.Literal['SEQUENCER','PREVIEW','SEQUENCER_PREVIEW']
    """

    waveform_draw_type: typing.Literal[
        "NO_WAVEFORMS", "ALL_WAVEFORMS", "DEFAULT_WAVEFORMS"
    ]
    """ How Waveforms are drawn

    :type: typing.Literal['NO_WAVEFORMS','ALL_WAVEFORMS','DEFAULT_WAVEFORMS']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceTextEditor(Space, bpy_struct):
    """Text editor space data"""

    find_text: str
    """ Text to search for with the find tool

    :type: str
    """

    font_size: int
    """ Font size to use for displaying the text

    :type: int
    """

    margin_column: int
    """ Column number to show right margin at

    :type: int
    """

    replace_text: str
    """ Text to replace selected text with using the replace tool

    :type: str
    """

    show_line_highlight: bool
    """ Highlight the current line

    :type: bool
    """

    show_line_numbers: bool
    """ Show line numbers next to the text

    :type: bool
    """

    show_margin: bool
    """ Show right margin

    :type: bool
    """

    show_syntax_highlight: bool
    """ Syntax highlight for scripting

    :type: bool
    """

    show_word_wrap: bool
    """ Wrap words if there is not enough horizontal space

    :type: bool
    """

    tab_width: int
    """ Number of spaces to display tabs with

    :type: int
    """

    text: Text | None
    """ Text displayed and edited in this space

    :type: Text | None
    """

    top: int
    """ Top line visible

    :type: int
    """

    use_find_all: bool
    """ Search in all text data-blocks, instead of only the active one

    :type: bool
    """

    use_find_wrap: bool
    """ Search again from the start of the file when reaching the end

    :type: bool
    """

    use_live_edit: bool
    """ Run python while editing

    :type: bool
    """

    use_match_case: bool
    """ Search string is sensitive to uppercase and lowercase letters

    :type: bool
    """

    use_overwrite: bool
    """ Overwrite characters when typing rather than inserting them

    :type: bool
    """

    visible_lines: int
    """ Amount of lines that can be visible in current editor

    :type: int
    """

    def region_location_from_cursor(
        self, line: int | None, column: int | None
    ) -> bpy_prop_array[int]:
        """Retrieve the region position from the given line and character position

        :param line: Line, Line index
        :type line: int | None
        :param column: Column, Column index
        :type column: int | None
        :return: Region coordinates
        :rtype: bpy_prop_array[int]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceTimeline(Space, bpy_struct):
    """Timeline editor space data"""

    cache_cloth: bool
    """ Show the active object's cloth point cache

    :type: bool
    """

    cache_dynamicpaint: bool
    """ Show the active object's Dynamic Paint cache

    :type: bool
    """

    cache_particles: bool
    """ Show the active object's particle point cache

    :type: bool
    """

    cache_rigidbody: bool
    """ Show the active object's Rigid Body cache

    :type: bool
    """

    cache_smoke: bool
    """ Show the active object's smoke cache

    :type: bool
    """

    cache_softbody: bool
    """ Show the active object's softbody point cache

    :type: bool
    """

    show_cache: bool
    """ Show the status of cached frames in the timeline

    :type: bool
    """

    show_frame_indicator: bool
    """ Show frame number beside the current frame indicator line

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceUVEditor(bpy_struct):
    """UV editor data for the image editor space"""

    draw_stretch_type: typing.Literal["ANGLE", "AREA"]
    """ Type of stretch to draw

    :type: typing.Literal['ANGLE','AREA']
    """

    edge_draw_type: typing.Literal["OUTLINE", "DASH", "BLACK", "WHITE"]
    """ Draw type for drawing UV edges

    :type: typing.Literal['OUTLINE','DASH','BLACK','WHITE']
    """

    lock_bounds: bool
    """ Constraint to stay within the image bounds while editing

    :type: bool
    """

    other_uv_filter: typing.Literal["ALL", "SAME_IMAGE"]
    """ Filter applied on the other object's UV to limit displayed

    :type: typing.Literal['ALL','SAME_IMAGE']
    """

    show_faces: bool
    """ Draw faces over the image

    :type: bool
    """

    show_metadata: bool
    """ Draw metadata properties of the image

    :type: bool
    """

    show_modified_edges: bool
    """ Draw edges after modifiers are applied

    :type: bool
    """

    show_normalized_coords: bool
    """ Display UV coordinates from 0.0 to 1.0 rather than in pixels

    :type: bool
    """

    show_other_objects: bool
    """ Draw other selected objects that share the same image

    :type: bool
    """

    show_smooth_edges: bool
    """ Draw UV edges anti-aliased

    :type: bool
    """

    show_stretch: bool
    """ Draw faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)

    :type: bool
    """

    show_texpaint: bool
    """ Draw overlay of texture paint uv layer

    :type: bool
    """

    sticky_select_mode: typing.Literal["DISABLED", "SHARED_LOCATION", "SHARED_VERTEX"]
    """ Automatically select also UVs sharing the same vertex as the ones being selected

    :type: typing.Literal['DISABLED','SHARED_LOCATION','SHARED_VERTEX']
    """

    use_live_unwrap: bool
    """ Continuously unwrap the selected UV island while transforming pinned vertices

    :type: bool
    """

    use_snap_to_pixels: bool
    """ Snap UVs to pixel locations while editing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SpaceUserPreferences(Space, bpy_struct):
    """User preferences space data"""

    filter_text: str
    """ Search term for filtering in the UI

    :type: str
    """

    filter_type: typing.Literal["NAME", "KEY"]
    """ Filter method

    :type: typing.Literal['NAME','KEY']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class SpaceView3D(Space, bpy_struct):
    """3D View space data"""

    active_layer: int | None
    """ Active 3D view layer index

    :type: int | None
    """

    background_images: BackgroundImages
    """ List of background images

    :type: BackgroundImages
    """

    camera: Object | None
    """ Active camera used in this view (when unlocked from the scene's active camera)

    :type: Object | None
    """

    clip_end: float
    """ 3D View far clipping distance

    :type: float
    """

    clip_start: float
    """ 3D View near clipping distance (perspective view only)

    :type: float
    """

    current_orientation: TransformOrientation
    """ Current transformation orientation

    :type: TransformOrientation
    """

    cursor_location: bpy_prop_array[float]
    """ 3D cursor location for this view (dependent on local view setting)

    :type: bpy_prop_array[float]
    """

    fx_settings: GPUFXSettings
    """ Options used for real time compositing

    :type: GPUFXSettings
    """

    grid_lines: int
    """ Number of grid lines to display in perspective view

    :type: int
    """

    grid_scale: float
    """ Distance between 3D View grid lines

    :type: float
    """

    grid_scale_unit: float
    """ Grid cell size scaled by scene unit system settings

    :type: float
    """

    grid_subdivisions: int
    """ Number of subdivisions between grid lines

    :type: int
    """

    layers: bpy_prop_array[bool]
    """ Layers visible in this 3D View

    :type: bpy_prop_array[bool]
    """

    layers_local_view: bpy_prop_array[bool]
    """ Local view layers visible in this 3D View

    :type: bpy_prop_array[bool]
    """

    layers_used: bpy_prop_array[bool]
    """ Layers that contain something

    :type: bpy_prop_array[bool]
    """

    lens: float
    """ Viewport lens angle

    :type: float
    """

    local_view: typing_extensions.Self
    """ Display an isolated sub-set of objects, apart from the scene visibility

    :type: typing_extensions.Self
    """

    lock_bone: str
    """ 3D View center is locked to this bone's position

    :type: str
    """

    lock_camera: bool
    """ Enable view navigation within the camera view

    :type: bool
    """

    lock_camera_and_layers: bool
    """ Use the scene's active camera and layers in this view, rather than local layers

    :type: bool
    """

    lock_cursor: bool
    """ 3D View center is locked to the cursor's position

    :type: bool
    """

    lock_object: Object | None
    """ 3D View center is locked to this object's position

    :type: Object | None
    """

    matcap_icon: typing.Literal[
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
        "24",
    ]
    """ Image to use for Material Capture, active objects only

    :type: typing.Literal['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24']
    """

    pivot_point: typing.Literal[
        "BOUNDING_BOX_CENTER",
        "CURSOR",
        "INDIVIDUAL_ORIGINS",
        "MEDIAN_POINT",
        "ACTIVE_ELEMENT",
    ]
    """ Pivot center for rotation/scaling

    :type: typing.Literal['BOUNDING_BOX_CENTER','CURSOR','INDIVIDUAL_ORIGINS','MEDIAN_POINT','ACTIVE_ELEMENT']
    """

    region_3d: RegionView3D
    """ 3D region in this space, in case of quad view the camera region

    :type: RegionView3D
    """

    region_quadviews: bpy_prop_collection[RegionView3D]
    """ 3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')

    :type: bpy_prop_collection[RegionView3D]
    """

    render_border_max_x: float
    """ Maximum X value for the render border

    :type: float
    """

    render_border_max_y: float
    """ Maximum Y value for the render border

    :type: float
    """

    render_border_min_x: float
    """ Minimum X value for the render border

    :type: float
    """

    render_border_min_y: float
    """ Minimum Y value for the render border

    :type: float
    """

    show_all_objects_origin: bool
    """ Show the object origin center dot for all (selected and unselected) objects

    :type: bool
    """

    show_axis_x: bool
    """ Show the X axis line in perspective view

    :type: bool
    """

    show_axis_y: bool
    """ Show the Y axis line in perspective view

    :type: bool
    """

    show_axis_z: bool
    """ Show the Z axis line in perspective view

    :type: bool
    """

    show_backface_culling: bool
    """ Use back face culling to hide the back side of faces

    :type: bool
    """

    show_background_images: bool
    """ Display reference images behind objects in the 3D View

    :type: bool
    """

    show_bundle_names: bool
    """ Show names for reconstructed tracks objects

    :type: bool
    """

    show_camera_path: bool
    """ Show reconstructed camera path

    :type: bool
    """

    show_floor: bool
    """ Show the ground plane grid in perspective view

    :type: bool
    """

    show_grease_pencil: bool
    """ Show grease pencil for this view

    :type: bool
    """

    show_manipulator: bool
    """ Use a 3D manipulator widget for controlling transforms

    :type: bool
    """

    show_mist: bool
    """ Display world mist

    :type: bool
    """

    show_occlude_wire: bool
    """ Use hidden wireframe display

    :type: bool
    """

    show_only_render: bool
    """ Display only objects which will be rendered

    :type: bool
    """

    show_outline_selected: bool
    """ Show an outline highlight around selected objects in non-wireframe views

    :type: bool
    """

    show_reconstruction: bool
    """ Display reconstruction data from active movie clip

    :type: bool
    """

    show_relationship_lines: bool
    """ Show dashed lines indicating parent or constraint relationships

    :type: bool
    """

    show_stereo_3d_cameras: bool
    """ Show the left and right cameras

    :type: bool
    """

    show_stereo_3d_convergence_plane: bool
    """ Show the stereo 3d convergence plane

    :type: bool
    """

    show_stereo_3d_volume: bool
    """ Show the stereo 3d frustum volume

    :type: bool
    """

    show_textured_shadeless: bool
    """ Show shadeless texture without lighting in textured draw mode

    :type: bool
    """

    show_textured_solid: bool
    """ Display face-assigned textures in solid view

    :type: bool
    """

    show_world: bool
    """ Display world colors in the background

    :type: bool
    """

    stereo_3d_camera: typing.Literal["LEFT", "RIGHT", "S3D"]
    """ 

    :type: typing.Literal['LEFT','RIGHT','S3D']
    """

    stereo_3d_convergence_plane_alpha: float
    """ Opacity (alpha) of the convergence plane

    :type: float
    """

    stereo_3d_eye: typing.Literal["LEFT_EYE", "RIGHT_EYE"]
    """ Current stereo eye being drawn

    :type: typing.Literal['LEFT_EYE','RIGHT_EYE']
    """

    stereo_3d_volume_alpha: float
    """ Opacity (alpha) of the cameras' frustum volume

    :type: float
    """

    tracks_draw_size: float
    """ Display size of tracks from reconstructed data

    :type: float
    """

    tracks_draw_type: typing.Literal[
        "PLAIN_AXES", "ARROWS", "SINGLE_ARROW", "CIRCLE", "CUBE", "SPHERE", "CONE"
    ]
    """ Viewport display style for tracks

    :type: typing.Literal['PLAIN_AXES','ARROWS','SINGLE_ARROW','CIRCLE','CUBE','SPHERE','CONE']
    """

    transform_manipulators: set[typing.Literal["TRANSLATE", "ROTATE", "SCALE"]]
    """ Transformation manipulators

    :type: set[typing.Literal['TRANSLATE','ROTATE','SCALE']]
    """

    transform_orientation: typing.Literal["GLOBAL", "LOCAL", "NORMAL", "GIMBAL", "VIEW"]
    """ Transformation orientation

    :type: typing.Literal['GLOBAL','LOCAL','NORMAL','GIMBAL','VIEW']
    """

    use_matcap: bool
    """ Active Objects draw images mapped on normals, enhancing Solid Draw Mode

    :type: bool
    """

    use_occlude_geometry: bool
    """ Limit selection to visible (clipped with depth buffer)

    :type: bool
    """

    use_pivot_point_align: bool
    """ Manipulate center points (object, pose and weight paint mode only)

    :type: bool
    """

    use_render_border: bool
    """ Use a region within the frame size for rendered viewport (when not viewing through the camera)

    :type: bool
    """

    viewport_shade: typing.Literal[
        "BOUNDBOX", "WIREFRAME", "SOLID", "TEXTURED", "MATERIAL", "RENDERED"
    ]
    """ Method to display/shade objects in the 3D View

    :type: typing.Literal['BOUNDBOX','WIREFRAME','SOLID','TEXTURED','MATERIAL','RENDERED']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

    def draw_handler_add(self):
        """Undocumented"""

    def draw_handler_remove(self):
        """Undocumented"""

class Speaker(ID, bpy_struct):
    """Speaker data-block for 3D audio speaker objects"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    attenuation: float
    """ How strong the distance affects volume, depending on distance model

    :type: float
    """

    cone_angle_inner: float
    """ Angle of the inner cone, in degrees, inside the cone the volume is 100 %

    :type: float
    """

    cone_angle_outer: float
    """ Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated

    :type: float
    """

    cone_volume_outer: float
    """ Volume outside the outer cone

    :type: float
    """

    distance_max: float
    """ Maximum distance for volume calculation, no matter how far away the object is

    :type: float
    """

    distance_reference: float
    """ Reference distance at which volume is 100 %

    :type: float
    """

    muted: bool
    """ Mute the speaker

    :type: bool
    """

    pitch: float
    """ Playback pitch of the sound

    :type: float
    """

    relative: bool
    """ Whether the source is relative to the camera or not

    :type: bool
    """

    sound: Sound | None
    """ Sound data-block used by this speaker

    :type: Sound | None
    """

    volume: float
    """ How loud the sound is

    :type: float
    """

    volume_max: float
    """ Maximum volume, no matter how near the object is

    :type: float
    """

    volume_min: float
    """ Minimum volume, no matter how far away the object is

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SpeedControlSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to control the speed of other strips"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    multiply_speed: float
    """ Multiply the resulting speed after the speed factor

    :type: float
    """

    scale_to_length: bool
    """ Scale values from 0.0 to 1.0 to target sequence length

    :type: bool
    """

    use_as_speed: bool
    """ Interpret the value as speed instead of a frame number

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Spline(bpy_struct):
    """Element of a curve, either NURBS, Bezier or Polyline or a character with text objects"""

    bezier_points: SplineBezierPoints
    """ Collection of points for Bezier curves only

    :type: SplineBezierPoints
    """

    character_index: int
    """ Location of this character in the text data (only for text curves)

    :type: int
    """

    hide: bool
    """ Hide this curve in Edit mode

    :type: bool
    """

    material_index: int
    """ 

    :type: int
    """

    order_u: int
    """ NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)

    :type: int
    """

    order_v: int
    """ NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)

    :type: int
    """

    point_count_u: int
    """ Total number points for the curve or surface in the U direction

    :type: int
    """

    point_count_v: int
    """ Total number points for the surface on the V direction

    :type: int
    """

    points: SplinePoints
    """ Collection of points that make up this poly or nurbs spline

    :type: SplinePoints
    """

    radius_interpolation: typing.Literal["LINEAR", "CARDINAL", "BSPLINE", "EASE"]
    """ The type of radius interpolation for Bezier curves

    :type: typing.Literal['LINEAR','CARDINAL','BSPLINE','EASE']
    """

    resolution_u: int
    """ Curve or Surface subdivisions per segment

    :type: int
    """

    resolution_v: int
    """ Surface subdivisions per segment

    :type: int
    """

    tilt_interpolation: typing.Literal["LINEAR", "CARDINAL", "BSPLINE", "EASE"]
    """ The type of tilt interpolation for 3D, Bezier curves

    :type: typing.Literal['LINEAR','CARDINAL','BSPLINE','EASE']
    """

    type: typing.Literal["POLY", "BEZIER", "BSPLINE", "CARDINAL", "NURBS"]
    """ The interpolation type for this curve element

    :type: typing.Literal['POLY','BEZIER','BSPLINE','CARDINAL','NURBS']
    """

    use_bezier_u: bool
    """ Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)

    :type: bool
    """

    use_bezier_v: bool
    """ Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)

    :type: bool
    """

    use_cyclic_u: bool
    """ Make this curve or surface a closed loop in the U direction

    :type: bool
    """

    use_cyclic_v: bool
    """ Make this surface a closed loop in the V direction

    :type: bool
    """

    use_endpoint_u: bool
    """ Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)

    :type: bool
    """

    use_endpoint_v: bool
    """ Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)

    :type: bool
    """

    use_smooth: bool
    """ Smooth the normals of the surface or beveled curve

    :type: bool
    """

    def calc_length(self, resolution: int | None = 0) -> float:
        """Calculate spline length

        :param resolution: Resolution, Spline resolution to be used, 0 defaults to the resolution_u
        :type resolution: int | None
        :return: Length, Length of the polygonaly approximated spline
        :rtype: float
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SplineIKConstraint(Constraint, bpy_struct):
    """Align 'n' bones along a curve"""

    bulge: float
    """ Factor between volume variation and stretching

    :type: float
    """

    bulge_max: float
    """ Maximum volume stretching factor

    :type: float
    """

    bulge_min: float
    """ Minimum volume stretching factor

    :type: float
    """

    bulge_smooth: float
    """ Strength of volume stretching clamping

    :type: float
    """

    chain_count: int
    """ How many bones are included in the chain

    :type: int
    """

    joint_bindings: bpy_prop_array[float]
    """ (EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages

    :type: bpy_prop_array[float]
    """

    target: Object | None
    """ Curve that controls this relationship

    :type: Object | None
    """

    use_bulge_max: bool
    """ Use upper limit for volume variation

    :type: bool
    """

    use_bulge_min: bool
    """ Use lower limit for volume variation

    :type: bool
    """

    use_chain_offset: bool
    """ Offset the entire chain relative to the root joint

    :type: bool
    """

    use_curve_radius: bool
    """ Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode

    :type: bool
    """

    use_even_divisions: bool
    """ Ignore the relative lengths of the bones when fitting to the curve

    :type: bool
    """

    use_y_stretch: bool
    """ Stretch the Y axis of the bones to fit the curve

    :type: bool
    """

    xz_scale_mode: typing.Literal[
        "NONE", "BONE_ORIGINAL", "INVERSE_PRESERVE", "VOLUME_PRESERVE"
    ]
    """ Method used for determining the scaling of the X and Z axes of the bones

    :type: typing.Literal['NONE','BONE_ORIGINAL','INVERSE_PRESERVE','VOLUME_PRESERVE']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SplinePoint(bpy_struct):
    """Spline point without handles"""

    co: bpy_prop_array[float]
    """ Point coordinates

    :type: bpy_prop_array[float]
    """

    hide: bool
    """ Visibility status

    :type: bool
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    select: bool
    """ Selection status

    :type: bool
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    weight: float
    """ NURBS weight

    :type: float
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SpotLamp(Lamp, ID, bpy_struct):
    """Directional cone lamp"""

    compression_threshold: float
    """ Deep shadow map compression threshold

    :type: float
    """

    constant_coefficient: float
    """ Constant distance attenuation coefficient

    :type: float
    """

    cutoff_threshold: float
    """ Cutoff Threshold

    :type: float
    """

    falloff_curve: CurveMapping
    """ Custom Lamp Falloff Curve

    :type: CurveMapping
    """

    falloff_type: typing.Literal[
        "CONSTANT",
        "INVERSE_LINEAR",
        "INVERSE_SQUARE",
        "INVSQUARE_CUTOFF",
        "INVERSE_COEFFICIENTS",
        "CUSTOM_CURVE",
        "LINEAR_QUADRATIC_WEIGHTED",
    ]
    """ Intensity Decay with distance

    :type: typing.Literal['CONSTANT','INVERSE_LINEAR','INVERSE_SQUARE','INVSQUARE_CUTOFF','INVERSE_COEFFICIENTS','CUSTOM_CURVE','LINEAR_QUADRATIC_WEIGHTED']
    """

    ge_shadow_buffer_type: typing.Literal["SIMPLE", "VARIANCE"]
    """ The shadow mapping algorithm used

    :type: typing.Literal['SIMPLE','VARIANCE']
    """

    halo_intensity: float
    """ Brightness of the spotlight's halo cone

    :type: float
    """

    halo_step: int
    """ Volumetric halo sampling frequency

    :type: int
    """

    linear_attenuation: float
    """ Linear distance attenuation

    :type: float
    """

    linear_coefficient: float
    """ Linear distance attenuation coefficient

    :type: float
    """

    quadratic_attenuation: float
    """ Quadratic distance attenuation

    :type: float
    """

    quadratic_coefficient: float
    """ Quadratic distance attenuation coefficient

    :type: float
    """

    radius: float
    """ The ligth's radius

    :type: float
    """

    shadow_adaptive_threshold: float
    """ Threshold for Adaptive Sampling (Raytraced shadows)

    :type: float
    """

    shadow_buffer_bias: float
    """ Shadow buffer sampling bias

    :type: float
    """

    shadow_buffer_bleed_bias: float
    """ Bias for reducing light-bleed on variance shadow maps

    :type: float
    """

    shadow_buffer_clip_end: float
    """ Shadow map clip end, beyond which objects will not generate shadows

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_buffer_samples: int
    """ Number of shadow buffer samples

    :type: int
    """

    shadow_buffer_sharp: float
    """ Sharpness of buffer sampling

    :type: float
    """

    shadow_buffer_size: int
    """ Resolution of the shadow buffer, higher values give crisper shadows but use more memory

    :type: int
    """

    shadow_buffer_slope_bias: float
    """ Shadow buffer sampling slope bias

    :type: float
    """

    shadow_buffer_soft: float
    """ Size of shadow buffer sampling area

    :type: float
    """

    shadow_buffer_type: typing.Literal["REGULAR", "HALFWAY", "IRREGULAR", "DEEP"]
    """ Type of shadow buffer

    :type: typing.Literal['REGULAR','HALFWAY','IRREGULAR','DEEP']
    """

    shadow_color: bpy_prop_array[float]
    """ Color of shadows cast by the lamp

    :type: bpy_prop_array[float]
    """

    shadow_filter: typing.Literal["NONE", "PCF", "PCF_BAIL", "PCF_JITTER"]
    """ The shadow mapping filtering algorithm used

    :type: typing.Literal['NONE','PCF','PCF_BAIL','PCF_JITTER']
    """

    shadow_filter_type: typing.Literal["BOX", "TENT", "GAUSS"]
    """ Type of shadow filter (Buffer Shadows)

    :type: typing.Literal['BOX','TENT','GAUSS']
    """

    shadow_method: typing.Literal["NOSHADOW", "BUFFER_SHADOW", "RAY_SHADOW"]
    """ 

    :type: typing.Literal['NOSHADOW','BUFFER_SHADOW','RAY_SHADOW']
    """

    shadow_ray_sample_method: typing.Literal["ADAPTIVE_QMC", "CONSTANT_QMC"]
    """ Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower

    :type: typing.Literal['ADAPTIVE_QMC','CONSTANT_QMC']
    """

    shadow_ray_samples: int
    """ Number of samples taken extra (samples x samples)

    :type: int
    """

    shadow_sample_buffers: typing.Literal["BUFFERS_1", "BUFFERS_4", "BUFFERS_9"]
    """ Number of shadow buffers to render for better AA, this increases memory usage

    :type: typing.Literal['BUFFERS_1','BUFFERS_4','BUFFERS_9']
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    show_cone: bool
    """ Draw transparent cone in 3D view to visualize which objects are contained in it

    :type: bool
    """

    show_shadow_box: bool
    """ Draw a box in 3D view to visualize which objects are contained in it

    :type: bool
    """

    spot_blend: float
    """ The softness of the spotlight edge

    :type: float
    """

    spot_size: float
    """ Angle of the spotlight beam

    :type: float
    """

    static_shadow: bool
    """ Enable static shadows

    :type: bool
    """

    use_auto_clip_end: bool
    """ Automatic calculation of clipping-end, based on visible vertices

    :type: bool
    """

    use_auto_clip_start: bool
    """ Automatic calculation of clipping-start, based on visible vertices

    :type: bool
    """

    use_halo: bool
    """ Render spotlight with a volumetric halo

    :type: bool
    """

    use_only_shadow: bool
    """ Cast shadows only, without illuminating objects

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_shadow_layer: bool
    """ Objects on the same layers only cast shadows

    :type: bool
    """

    use_sphere: bool
    """ Set light intensity to zero beyond lamp distance

    :type: bool
    """

    use_square: bool
    """ Cast a square spot light shape

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class StateActuator(Actuator, bpy_struct):
    """Actuator to handle states"""

    operation: typing.Literal["SET", "ADD", "REMOVE", "CHANGE"]
    """ Select the bit operation on object state mask

    :type: typing.Literal['SET','ADD','REMOVE','CHANGE']
    """

    states: bpy_prop_array[bool]
    """ 

    :type: bpy_prop_array[bool]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SteeringActuator(Actuator, bpy_struct):
    acceleration: float
    """ Max acceleration

    :type: float
    """

    distance: float
    """ Relax distance

    :type: float
    """

    facing: bool
    """ Enable automatic facing

    :type: bool
    """

    facing_axis: typing.Literal["X", "Y", "Z", "NEG_X", "NEG_Y", "NEG_Z"]
    """ Axis for automatic facing

    :type: typing.Literal['X','Y','Z','NEG_X','NEG_Y','NEG_Z']
    """

    lock_z_velocity: bool
    """ Disable simulation of linear motion along Z axis

    :type: bool
    """

    mode: typing.Literal["SEEK", "FLEE", "PATHFOLLOWING"]
    """ 

    :type: typing.Literal['SEEK','FLEE','PATHFOLLOWING']
    """

    navmesh: Object | None
    """ Navigation mesh

    :type: Object | None
    """

    normal_up: bool
    """ Use normal of the navmesh to set "UP" vector

    :type: bool
    """

    self_terminated: bool
    """ Terminate when target is reached

    :type: bool
    """

    show_visualization: bool
    """ Enable debug visualization for 'Path following'

    :type: bool
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    turn_speed: float
    """ Max turn speed

    :type: float
    """

    update_period: int
    """ Path update period

    :type: int
    """

    velocity: float
    """ Velocity magnitude

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Stereo3dDisplay(bpy_struct):
    """Settings for stereo 3D display"""

    anaglyph_type: typing.Literal["RED_CYAN", "GREEN_MAGENTA", "YELLOW_BLUE"]
    """ 

    :type: typing.Literal['RED_CYAN','GREEN_MAGENTA','YELLOW_BLUE']
    """

    display_mode: typing.Literal[
        "ANAGLYPH", "INTERLACE", "TIMESEQUENTIAL", "SIDEBYSIDE", "TOPBOTTOM"
    ]
    """ 

    :type: typing.Literal['ANAGLYPH','INTERLACE','TIMESEQUENTIAL','SIDEBYSIDE','TOPBOTTOM']
    """

    interlace_type: typing.Literal[
        "ROW_INTERLEAVED", "COLUMN_INTERLEAVED", "CHECKERBOARD_INTERLEAVED"
    ]
    """ 

    :type: typing.Literal['ROW_INTERLEAVED','COLUMN_INTERLEAVED','CHECKERBOARD_INTERLEAVED']
    """

    use_interlace_swap: bool
    """ Swap left and right stereo channels

    :type: bool
    """

    use_sidebyside_crosseyed: bool
    """ Right eye should see left image and vice-versa

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Stereo3dFormat(bpy_struct):
    """Settings for stereo output"""

    anaglyph_type: typing.Literal["RED_CYAN", "GREEN_MAGENTA", "YELLOW_BLUE"]
    """ 

    :type: typing.Literal['RED_CYAN','GREEN_MAGENTA','YELLOW_BLUE']
    """

    display_mode: typing.Literal["ANAGLYPH", "INTERLACE", "SIDEBYSIDE", "TOPBOTTOM"]
    """ 

    :type: typing.Literal['ANAGLYPH','INTERLACE','SIDEBYSIDE','TOPBOTTOM']
    """

    interlace_type: typing.Literal[
        "ROW_INTERLEAVED", "COLUMN_INTERLEAVED", "CHECKERBOARD_INTERLEAVED"
    ]
    """ 

    :type: typing.Literal['ROW_INTERLEAVED','COLUMN_INTERLEAVED','CHECKERBOARD_INTERLEAVED']
    """

    use_interlace_swap: bool
    """ Swap left and right stereo channels

    :type: bool
    """

    use_sidebyside_crosseyed: bool
    """ Right eye should see left image and vice-versa

    :type: bool
    """

    use_squeezed_frame: bool
    """ Combine both views in a squeezed image

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class StretchToConstraint(Constraint, bpy_struct):
    """Stretch to meet the target object"""

    bulge: float
    """ Factor between volume variation and stretching

    :type: float
    """

    bulge_max: float
    """ Maximum volume stretching factor

    :type: float
    """

    bulge_min: float
    """ Minimum volume stretching factor

    :type: float
    """

    bulge_smooth: float
    """ Strength of volume stretching clamping

    :type: float
    """

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    keep_axis: typing.Literal["PLANE_X", "PLANE_Z"]
    """ Axis to maintain during stretch

    :type: typing.Literal['PLANE_X','PLANE_Z']
    """

    rest_length: float
    """ Length at rest position

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_bulge_max: bool
    """ Use upper limit for volume variation

    :type: bool
    """

    use_bulge_min: bool
    """ Use lower limit for volume variation

    :type: bool
    """

    volume: typing.Literal["VOLUME_XZX", "VOLUME_X", "VOLUME_Z", "NO_VOLUME"]
    """ Maintain the object's volume as it stretches

    :type: typing.Literal['VOLUME_XZX','VOLUME_X','VOLUME_Z','NO_VOLUME']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class StringProperty(Property, bpy_struct):
    """RNA text string property definition"""

    default: str
    """ string default value

    :type: str
    """

    length_max: int
    """ Maximum length of the string, 0 means unlimited

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Struct(bpy_struct):
    """RNA structure definition"""

    base: typing_extensions.Self
    """ Struct definition this is derived from

    :type: typing_extensions.Self
    """

    description: str
    """ Description of the Struct's purpose

    :type: str
    """

    functions: bpy_prop_collection[Function]
    """ 

    :type: bpy_prop_collection[Function]
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    name: str
    """ Human readable name

    :type: str
    """

    name_property: StringProperty
    """ Property that gives the name of the struct

    :type: StringProperty
    """

    nested: typing_extensions.Self
    """ Struct in which this struct is always nested, and to which it logically belongs

    :type: typing_extensions.Self
    """

    properties: bpy_prop_collection[Property]
    """ Properties in the struct

    :type: bpy_prop_collection[Property]
    """

    property_tags: bpy_prop_collection[EnumPropertyItem]
    """ Tags that properties can use to influence behavior

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    translation_context: str
    """ Translation context of the struct's name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(
        cls, id: str | None, default=None
    ) -> typing_extensions.Self:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: typing_extensions.Self
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class StucciTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: typing.Literal["SOFT_NOISE", "HARD_NOISE"]
    """ 

    :type: typing.Literal['SOFT_NOISE','HARD_NOISE']
    """

    stucci_type: typing.Literal["PLASTIC", "WALL_IN", "WALL_OUT"]
    """ 

    :type: typing.Literal['PLASTIC','WALL_IN','WALL_OUT']
    """

    turbulence: float
    """ Turbulence of the noise

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SubsurfModifier(Modifier, bpy_struct):
    """Subdivision surface modifier"""

    levels: int
    """ Number of subdivisions to perform

    :type: int
    """

    render_levels: int
    """ Number of subdivisions to perform when rendering

    :type: int
    """

    show_only_control_edges: bool
    """ Skip drawing/rendering of interior subdivided edges

    :type: bool
    """

    subdivision_type: typing.Literal["CATMULL_CLARK", "SIMPLE"]
    """ Select type of subdivision algorithm

    :type: typing.Literal['CATMULL_CLARK','SIMPLE']
    """

    use_opensubdiv: bool
    """ Use OpenSubdiv for the subdivisions (viewport only)

    :type: bool
    """

    use_subsurf_uv: bool
    """ Use subsurf to subdivide UVs

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SubtractSequence(EffectSequence, Sequence, bpy_struct):
    """Subtract Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SunLamp(Lamp, ID, bpy_struct):
    """Constant direction parallel ray lamp"""

    compression_threshold: float
    """ Deep shadow map compression threshold

    :type: float
    """

    ge_shadow_buffer_type: typing.Literal["SIMPLE", "VARIANCE"]
    """ The shadow mapping algorithm used

    :type: typing.Literal['SIMPLE','VARIANCE']
    """

    shadow_adaptive_threshold: float
    """ Threshold for Adaptive Sampling (Raytraced shadows)

    :type: float
    """

    shadow_buffer_bias: float
    """ Shadow buffer sampling bias

    :type: float
    """

    shadow_buffer_bleed_bias: float
    """ Bias for reducing light-bleed on variance shadow maps

    :type: float
    """

    shadow_buffer_clip_end: float
    """ Shadow map clip end, beyond which objects will not generate shadows

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_buffer_samples: int
    """ Number of shadow buffer samples

    :type: int
    """

    shadow_buffer_sharp: float
    """ Sharpness of buffer sampling

    :type: float
    """

    shadow_buffer_size: int
    """ Resolution of the shadow buffer, higher values give crisper shadows but use more memory

    :type: int
    """

    shadow_buffer_slope_bias: float
    """ Shadow buffer sampling slope bias

    :type: float
    """

    shadow_buffer_soft: float
    """ Size of shadow buffer sampling area

    :type: float
    """

    shadow_buffer_type: typing.Literal["REGULAR", "HALFWAY", "IRREGULAR", "DEEP"]
    """ Type of shadow buffer

    :type: typing.Literal['REGULAR','HALFWAY','IRREGULAR','DEEP']
    """

    shadow_color: bpy_prop_array[float]
    """ Color of shadows cast by the lamp

    :type: bpy_prop_array[float]
    """

    shadow_filter: typing.Literal["NONE", "PCF", "PCF_BAIL", "PCF_JITTER"]
    """ The shadow mapping filtering algorithm used

    :type: typing.Literal['NONE','PCF','PCF_BAIL','PCF_JITTER']
    """

    shadow_filter_type: typing.Literal["BOX", "TENT", "GAUSS"]
    """ Type of shadow filter (Buffer Shadows)

    :type: typing.Literal['BOX','TENT','GAUSS']
    """

    shadow_frustum_size: float
    """ Size of the frustum used for creating the shadow map

    :type: float
    """

    shadow_method: typing.Literal["NOSHADOW", "RAY_SHADOW"]
    """ 

    :type: typing.Literal['NOSHADOW','RAY_SHADOW']
    """

    shadow_ray_sample_method: typing.Literal["ADAPTIVE_QMC", "CONSTANT_QMC"]
    """ Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower

    :type: typing.Literal['ADAPTIVE_QMC','CONSTANT_QMC']
    """

    shadow_ray_samples: int
    """ Number of samples taken extra (samples x samples)

    :type: int
    """

    shadow_sample_buffers: typing.Literal["BUFFERS_1", "BUFFERS_4", "BUFFERS_9"]
    """ Number of shadow buffers to render for better AA, this increases memory usage

    :type: typing.Literal['BUFFERS_1','BUFFERS_4','BUFFERS_9']
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    show_shadow_box: bool
    """ Draw a box in 3D view to visualize which objects are contained in it

    :type: bool
    """

    sky: LampSkySettings
    """ Sky related settings for sun lamps

    :type: LampSkySettings
    """

    static_shadow: bool
    """ Enable static shadows

    :type: bool
    """

    use_auto_clip_end: bool
    """ Automatic calculation of clipping-end, based on visible vertices

    :type: bool
    """

    use_auto_clip_start: bool
    """ Automatic calculation of clipping-start, based on visible vertices

    :type: bool
    """

    use_only_shadow: bool
    """ Cast shadows only, without illuminating objects

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_shadow_layer: bool
    """ Objects on the same layers only cast shadows

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SurfaceCurve(Curve, ID, bpy_struct):
    """Curve data-block used for storing surfaces"""

    use_uv_as_generated: bool
    """ Uses the UV values as Generated textured coordinates

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SurfaceDeformModifier(Modifier, bpy_struct):
    falloff: float
    """ Controls how much nearby polygons influence deformation

    :type: float
    """

    is_bound: bool
    """ Whether geometry has been bound to target mesh

    :type: bool
    """

    target: Object | None
    """ Mesh object to deform with

    :type: Object | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class SurfaceModifier(Modifier, bpy_struct):
    """Surface modifier defining modifier stack position used for surface fields"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TEXTURE_UL_texpaintslots(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TEXTURE_UL_texslots(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TexMapping(bpy_struct):
    """Texture coordinate mapping settings"""

    mapping: typing.Literal["FLAT", "CUBE", "TUBE", "SPHERE"]
    """ 

    :type: typing.Literal['FLAT','CUBE','TUBE','SPHERE']
    """

    mapping_x: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_y: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    mapping_z: typing.Literal["NONE", "X", "Y", "Z"]
    """ 

    :type: typing.Literal['NONE','X','Y','Z']
    """

    max: bpy_prop_array[float]
    """ Maximum value for clipping

    :type: bpy_prop_array[float]
    """

    min: bpy_prop_array[float]
    """ Minimum value for clipping

    :type: bpy_prop_array[float]
    """

    rotation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    scale: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    translation: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    use_max: bool
    """ Whether to use maximum clipping value

    :type: bool
    """

    use_min: bool
    """ Whether to use minimum clipping value

    :type: bool
    """

    vector_type: typing.Literal["TEXTURE", "POINT", "VECTOR", "NORMAL"]
    """ Type of vector that the mapping transforms

    :type: typing.Literal['TEXTURE','POINT','VECTOR','NORMAL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TexPaintSlot(bpy_struct):
    """Slot that contains information about texture painting"""

    index: int
    """ Index of MTex slot in the material

    :type: int
    """

    uv_layer: str
    """ Name of UV map

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Text(ID, bpy_struct):
    """Text data-block referencing an external or packed text file"""

    current_character: int
    """ Index of current character in current line, and also start index of character in selection if one exists

    :type: int
    """

    current_line: TextLine
    """ Current line, and start line of selection if one exists

    :type: TextLine
    """

    current_line_index: int
    """ Index of current TextLine in TextLine collection

    :type: int
    """

    filepath: str
    """ Filename of the text file

    :type: str
    """

    is_dirty: bool
    """ Text file has been edited since last save

    :type: bool
    """

    is_in_memory: bool
    """ Text file is in memory, without a corresponding file on disk

    :type: bool
    """

    is_modified: bool
    """ Text file on disk is different than the one in memory

    :type: bool
    """

    lines: bpy_prop_collection[TextLine]
    """ Lines of text

    :type: bpy_prop_collection[TextLine]
    """

    select_end_character: int
    """ Index of character after end of selection in the selection end line

    :type: int
    """

    select_end_line: TextLine
    """ End line of selection

    :type: TextLine
    """

    use_module: bool
    """ Register this text as a module on loading, Text name must end with ".py"

    :type: bool
    """

    use_tabs_as_spaces: bool
    """ Automatically converts all new tabs into spaces

    :type: bool
    """

    users_logic: typing.Any
    """ Logic bricks that use this text
(readonly)"""

    def clear(self):
        """clear the text block"""

    def write(self, text: str):
        """write text at the cursor location and advance to the end of the text block

        :param text: New text for this data-block
        :type text: str
        """

    def as_string(self):
        """Return the text as a string."""

    def from_string(self, string):
        """Replace text with this string.

        :param string:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextBox(bpy_struct):
    """Text bounding box for layout"""

    height: float
    """ 

    :type: float
    """

    width: float
    """ 

    :type: float
    """

    x: float
    """ 

    :type: float
    """

    y: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextCharacterFormat(bpy_struct):
    """Text character formatting settings"""

    material_index: int
    """ 

    :type: int
    """

    use_bold: bool
    """ 

    :type: bool
    """

    use_italic: bool
    """ 

    :type: bool
    """

    use_small_caps: bool
    """ 

    :type: bool
    """

    use_underline: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextCurve(Curve, ID, bpy_struct):
    """Curve data-block used for storing text"""

    active_textbox: int | None
    """ 

    :type: int | None
    """

    align_x: typing.Literal["LEFT", "CENTER", "RIGHT", "JUSTIFY", "FLUSH"]
    """ Text horizontal align from the object center

    :type: typing.Literal['LEFT','CENTER','RIGHT','JUSTIFY','FLUSH']
    """

    align_y: typing.Literal["TOP_BASELINE", "TOP", "CENTER", "BOTTOM"]
    """ Text vertical align from the object center

    :type: typing.Literal['TOP_BASELINE','TOP','CENTER','BOTTOM']
    """

    body: str
    """ Content of this text object

    :type: str
    """

    body_format: bpy_prop_collection[TextCharacterFormat]
    """ Stores the style of each character

    :type: bpy_prop_collection[TextCharacterFormat]
    """

    edit_format: TextCharacterFormat
    """ Editing settings character formatting

    :type: TextCharacterFormat
    """

    family: str
    """ Use Objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Duplication)

    :type: str
    """

    follow_curve: Object | None
    """ Curve deforming text object

    :type: Object | None
    """

    font: VectorFont | None
    """ 

    :type: VectorFont | None
    """

    font_bold: VectorFont | None
    """ 

    :type: VectorFont | None
    """

    font_bold_italic: VectorFont | None
    """ 

    :type: VectorFont | None
    """

    font_italic: VectorFont | None
    """ 

    :type: VectorFont | None
    """

    offset_x: float
    """ Horizontal offset from the object origin

    :type: float
    """

    offset_y: float
    """ Vertical offset from the object origin

    :type: float
    """

    shear: float
    """ Italic angle of the characters

    :type: float
    """

    size: float
    """ 

    :type: float
    """

    small_caps_scale: float
    """ Scale of small capitals

    :type: float
    """

    space_character: float
    """ 

    :type: float
    """

    space_line: float
    """ 

    :type: float
    """

    space_word: float
    """ 

    :type: float
    """

    text_boxes: bpy_prop_collection[TextBox]
    """ 

    :type: bpy_prop_collection[TextBox]
    """

    underline_height: float
    """ 

    :type: float
    """

    underline_position: float
    """ Vertical position of underline

    :type: float
    """

    use_fast_edit: bool
    """ Don't fill polygons while editing

    :type: bool
    """

    use_uv_as_generated: bool
    """ Uses the UV values as Generated textured coordinates

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextLine(bpy_struct):
    """Line of text in a Text data-block"""

    body: str
    """ Text in the line

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating text"""

    align_x: typing.Literal["LEFT", "CENTER", "RIGHT"]
    """ Align the text along the X axis

    :type: typing.Literal['LEFT','CENTER','RIGHT']
    """

    align_y: typing.Literal["TOP", "CENTER", "BOTTOM"]
    """ Align the image along the Y axis

    :type: typing.Literal['TOP','CENTER','BOTTOM']
    """

    color: bpy_prop_array[float]
    """ Text color

    :type: bpy_prop_array[float]
    """

    font: VectorFont | None
    """ Font of the text. Falls back to the UI font by default

    :type: VectorFont | None
    """

    font_size: int
    """ Size of the text

    :type: int
    """

    input_count: int
    """ 

    :type: int
    """

    location: bpy_prop_array[float]
    """ Location of the text

    :type: bpy_prop_array[float]
    """

    shadow_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: str
    """ Text that will be displayed

    :type: str
    """

    use_shadow: bool
    """ Draw text with shadow

    :type: bool
    """

    wrap_width: float
    """ Word wrap width as factor, zero disables

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Texture(ID, bpy_struct):
    """Texture data-block used by materials, lamps, worlds and brushes"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    contrast: float
    """ Adjust the contrast of the texture

    :type: float
    """

    factor_blue: float
    """ 

    :type: float
    """

    factor_green: float
    """ 

    :type: float
    """

    factor_red: float
    """ 

    :type: float
    """

    intensity: float
    """ Adjust the brightness of the texture

    :type: float
    """

    node_tree: TextureNodeTree | None
    """ Node tree for node-based textures

    :type: TextureNodeTree | None
    """

    saturation: float
    """ Adjust the saturation of colors in the texture

    :type: float
    """

    type: typing.Literal[
        "NONE",
        "BLEND",
        "CLOUDS",
        "DISTORTED_NOISE",
        "ENVIRONMENT_MAP",
        "IMAGE",
        "MAGIC",
        "MARBLE",
        "MUSGRAVE",
        "NOISE",
        "OCEAN",
        "POINT_DENSITY",
        "STUCCI",
        "VORONOI",
        "VOXEL_DATA",
        "WOOD",
    ]
    """ 

    :type: typing.Literal['NONE','BLEND','CLOUDS','DISTORTED_NOISE','ENVIRONMENT_MAP','IMAGE','MAGIC','MARBLE','MUSGRAVE','NOISE','OCEAN','POINT_DENSITY','STUCCI','VORONOI','VOXEL_DATA','WOOD']
    """

    use_clamp: bool
    """ Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range

    :type: bool
    """

    use_color_ramp: bool
    """ Toggle color ramp operations

    :type: bool
    """

    use_nodes: bool
    """ Make this a node-based texture

    :type: bool
    """

    use_preview_alpha: bool
    """ Show Alpha in Preview Render

    :type: bool
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    def evaluate(
        self, value: collections.abc.Iterable[float] | None
    ) -> bpy_prop_array[float]:
        """Evaluate the texture at the coordinates given

        :param value:
        :type value: collections.abc.Iterable[float] | None
        :return: Result
        :rtype: bpy_prop_array[float]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNode(NodeInternal, Node, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeAt(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeBricks(TextureNode, NodeInternal, Node, bpy_struct):
    offset: float
    """ 

    :type: float
    """

    offset_frequency: int
    """ Offset every N rows

    :type: int
    """

    squash: float
    """ 

    :type: float
    """

    squash_frequency: int
    """ Squash every N rows

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeChecker(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeCompose(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeCoordinates(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeCurveRGB(TextureNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeCurveTime(TextureNode, NodeInternal, Node, bpy_struct):
    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    frame_end: int
    """ 

    :type: int
    """

    frame_start: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeDecompose(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeDistance(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeGroup(TextureNode, NodeInternal, Node, bpy_struct):
    interface: PropertyGroup
    """ Interface socket data

    :type: PropertyGroup
    """

    node_tree: TextureNodeTree | None
    """ 

    :type: TextureNodeTree | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeHueSaturation(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeImage(TextureNode, NodeInternal, Node, bpy_struct):
    image: Image | None
    """ 

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining the image duration, offset and related settings

    :type: ImageUser
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeInvert(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeMath(TextureNode, NodeInternal, Node, bpy_struct):
    operation: typing.Literal[
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "SINE",
        "COSINE",
        "TANGENT",
        "ARCSINE",
        "ARCCOSINE",
        "ARCTANGENT",
        "POWER",
        "LOGARITHM",
        "MINIMUM",
        "MAXIMUM",
        "ROUND",
        "LESS_THAN",
        "GREATER_THAN",
        "MODULO",
        "ABSOLUTE",
        "ARCTAN2",
        "FLOOR",
        "CEIL",
        "FRACT",
        "SQRT",
    ]
    """ 

    :type: typing.Literal['ADD','SUBTRACT','MULTIPLY','DIVIDE','SINE','COSINE','TANGENT','ARCSINE','ARCCOSINE','ARCTANGENT','POWER','LOGARITHM','MINIMUM','MAXIMUM','ROUND','LESS_THAN','GREATER_THAN','MODULO','ABSOLUTE','ARCTAN2','FLOOR','CEIL','FRACT','SQRT']
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeMixRGB(TextureNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "MULTIPLY",
        "SUBTRACT",
        "SCREEN",
        "DIVIDE",
        "DIFFERENCE",
        "DARKEN",
        "LIGHTEN",
        "OVERLAY",
        "DODGE",
        "BURN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ 

    :type: typing.Literal['MIX','ADD','MULTIPLY','SUBTRACT','SCREEN','DIVIDE','DIFFERENCE','DARKEN','LIGHTEN','OVERLAY','DODGE','BURN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0..1 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeOutput(TextureNode, NodeInternal, Node, bpy_struct):
    filepath: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeRGBToBW(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeRotate(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeScale(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexBlend(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexClouds(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexDistNoise(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexMagic(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexMarble(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexMusgrave(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexNoise(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexStucci(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexVoronoi(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexWood(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTexture(TextureNode, NodeInternal, Node, bpy_struct):
    node_output: int
    """ For node-based textures, which output node to use

    :type: int
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTranslate(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for textures"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeValToNor(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeValToRGB(TextureNode, NodeInternal, Node, bpy_struct):
    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureNodeViewer(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TextureSlot(bpy_struct):
    """Texture slot defining the mapping and influence of a texture"""

    blend_type: typing.Literal[
        "MIX",
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "SCREEN",
        "OVERLAY",
        "DIFFERENCE",
        "DIVIDE",
        "DARKEN",
        "LIGHTEN",
        "HUE",
        "SATURATION",
        "VALUE",
        "COLOR",
        "SOFT_LIGHT",
        "LINEAR_LIGHT",
    ]
    """ Mode used to apply the texture

    :type: typing.Literal['MIX','ADD','SUBTRACT','MULTIPLY','SCREEN','OVERLAY','DIFFERENCE','DIVIDE','DARKEN','LIGHTEN','HUE','SATURATION','VALUE','COLOR','SOFT_LIGHT','LINEAR_LIGHT']
    """

    color: bpy_prop_array[float]
    """ Default color for textures that don't return RGB or when RGB to intensity is enabled

    :type: bpy_prop_array[float]
    """

    default_value: float
    """ Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard

    :type: float
    """

    invert: bool
    """ Invert the values of the texture to reverse its effect

    :type: bool
    """

    name: str
    """ Texture slot name

    :type: str
    """

    offset: bpy_prop_array[float]
    """ Fine tune of the texture mapping X, Y and Z locations

    :type: bpy_prop_array[float]
    """

    output_node: typing.Literal["DUMMY"]
    """ Which output node to use, for node-based textures

    :type: typing.Literal['DUMMY']
    """

    rotation: float
    """ Set rotation for the texture

    :type: float
    """

    scale: bpy_prop_array[float]
    """ Set scaling for the texture's X, Y and Z sizes

    :type: bpy_prop_array[float]
    """

    texture: Texture | None
    """ Texture data-block used by this texture slot

    :type: Texture | None
    """

    use_rgb_to_intensity: bool
    """ Convert texture RGB values to intensity (gray) values

    :type: bool
    """

    use_stencil: bool
    """ Use this texture as a blending value on the next texture

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Theme(bpy_struct):
    """Theme settings defining draw style and colors in the user interface"""

    bone_color_sets: bpy_prop_collection[ThemeBoneColorSet]
    """ 

    :type: bpy_prop_collection[ThemeBoneColorSet]
    """

    clip_editor: ThemeClipEditor
    """ 

    :type: ThemeClipEditor
    """

    console: ThemeConsole
    """ 

    :type: ThemeConsole
    """

    dopesheet_editor: ThemeDopeSheet
    """ 

    :type: ThemeDopeSheet
    """

    file_browser: ThemeFileBrowser
    """ 

    :type: ThemeFileBrowser
    """

    graph_editor: ThemeGraphEditor
    """ 

    :type: ThemeGraphEditor
    """

    image_editor: ThemeImageEditor
    """ 

    :type: ThemeImageEditor
    """

    info: ThemeInfo
    """ 

    :type: ThemeInfo
    """

    logic_editor: ThemeLogicEditor
    """ 

    :type: ThemeLogicEditor
    """

    name: str
    """ Name of the theme

    :type: str
    """

    nla_editor: ThemeNLAEditor
    """ 

    :type: ThemeNLAEditor
    """

    node_editor: ThemeNodeEditor
    """ 

    :type: ThemeNodeEditor
    """

    outliner: ThemeOutliner
    """ 

    :type: ThemeOutliner
    """

    properties: ThemeProperties
    """ 

    :type: ThemeProperties
    """

    sequence_editor: ThemeSequenceEditor
    """ 

    :type: ThemeSequenceEditor
    """

    text_editor: ThemeTextEditor
    """ 

    :type: ThemeTextEditor
    """

    theme_area: typing.Literal[
        "USER_INTERFACE",
        "STYLE",
        "BONE_COLOR_SETS",
        "VIEW_3D",
        "TIMELINE",
        "GRAPH_EDITOR",
        "DOPESHEET_EDITOR",
        "NLA_EDITOR",
        "IMAGE_EDITOR",
        "SEQUENCE_EDITOR",
        "TEXT_EDITOR",
        "NODE_EDITOR",
        "LOGIC_EDITOR",
        "PROPERTIES",
        "OUTLINER",
        "USER_PREFERENCES",
        "INFO",
        "FILE_BROWSER",
        "CONSOLE",
        "CLIP_EDITOR",
    ]
    """ 

    :type: typing.Literal['USER_INTERFACE','STYLE','BONE_COLOR_SETS','VIEW_3D','TIMELINE','GRAPH_EDITOR','DOPESHEET_EDITOR','NLA_EDITOR','IMAGE_EDITOR','SEQUENCE_EDITOR','TEXT_EDITOR','NODE_EDITOR','LOGIC_EDITOR','PROPERTIES','OUTLINER','USER_PREFERENCES','INFO','FILE_BROWSER','CONSOLE','CLIP_EDITOR']
    """

    timeline: ThemeTimeline
    """ 

    :type: ThemeTimeline
    """

    user_interface: ThemeUserInterface
    """ 

    :type: ThemeUserInterface
    """

    user_preferences: ThemeUserPreferences
    """ 

    :type: ThemeUserPreferences
    """

    view_3d: ThemeView3D
    """ 

    :type: ThemeView3D
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeBoneColorSet(bpy_struct):
    """Theme settings for bone color sets"""

    active: bpy_prop_array[float] | None
    """ Color used for active bones

    :type: bpy_prop_array[float] | None
    """

    normal: bpy_prop_array[float]
    """ Color used for the surface of bones

    :type: bpy_prop_array[float]
    """

    select: bpy_prop_array[float]
    """ Color used for selected bones

    :type: bpy_prop_array[float]
    """

    show_colored_constraints: bool
    """ Allow the use of colors indicating constraints/keyed status

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeClipEditor(bpy_struct):
    """Theme settings for the Movie Clip Editor"""

    active_marker: bpy_prop_array[float] | None
    """ Color of active marker

    :type: bpy_prop_array[float] | None
    """

    disabled_marker: bpy_prop_array[float]
    """ Color of disabled marker

    :type: bpy_prop_array[float]
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    handle_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    locked_marker: bpy_prop_array[float]
    """ Color of locked marker

    :type: bpy_prop_array[float]
    """

    marker: bpy_prop_array[float]
    """ Color of marker

    :type: bpy_prop_array[float]
    """

    marker_outline: bpy_prop_array[float]
    """ Color of marker's outline

    :type: bpy_prop_array[float]
    """

    path_after: bpy_prop_array[float]
    """ Color of path after current frame

    :type: bpy_prop_array[float]
    """

    path_before: bpy_prop_array[float]
    """ Color of path before current frame

    :type: bpy_prop_array[float]
    """

    selected_marker: bpy_prop_array[float]
    """ Color of selected marker

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    strips: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    strips_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeConsole(bpy_struct):
    """Theme settings for the Console"""

    cursor: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    line_error: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    line_info: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    line_input: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    line_output: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeDopeSheet(bpy_struct):
    """Theme settings for the Dope Sheet"""

    active_channels_group: bpy_prop_array[float] | None
    """ 

    :type: bpy_prop_array[float] | None
    """

    channel_group: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    channels: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    channels_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_channel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_subchannel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    keyframe: bpy_prop_array[float]
    """ Color of Keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_border: bpy_prop_array[float]
    """ Color of keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_border_selected: bpy_prop_array[float]
    """ Color of selected keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_breakdown: bpy_prop_array[float]
    """ Color of breakdown keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_breakdown_selected: bpy_prop_array[float]
    """ Color of selected breakdown keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_extreme: bpy_prop_array[float]
    """ Color of extreme keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_extreme_selected: bpy_prop_array[float]
    """ Color of selected extreme keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_jitter: bpy_prop_array[float]
    """ Color of jitter keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_jitter_selected: bpy_prop_array[float]
    """ Color of selected jitter keyframe

    :type: bpy_prop_array[float]
    """

    keyframe_scale_factor: float
    """ Scale factor for adjusting the height of keyframes

    :type: float
    """

    keyframe_selected: bpy_prop_array[float]
    """ Color of selected keyframe

    :type: bpy_prop_array[float]
    """

    long_key: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    long_key_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    summary: bpy_prop_array[float]
    """ Color of summary channel

    :type: bpy_prop_array[float]
    """

    value_sliders: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    view_sliders: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeFileBrowser(bpy_struct):
    """Theme settings for the File Browser"""

    selected_file: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeFontStyle(bpy_struct):
    """Theme settings for Font"""

    font_kerning_style: typing.Literal["UNFITTED", "FITTED"]
    """ Which style to use for font kerning

    :type: typing.Literal['UNFITTED','FITTED']
    """

    points: int
    """ 

    :type: int
    """

    shadow: int
    """ Shadow size (0, 3 and 5 supported)

    :type: int
    """

    shadow_alpha: float
    """ 

    :type: float
    """

    shadow_offset_x: int
    """ Shadow offset in pixels

    :type: int
    """

    shadow_offset_y: int
    """ Shadow offset in pixels

    :type: int
    """

    shadow_value: float
    """ Shadow color in gray value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeGradientColors(bpy_struct):
    """Theme settings for background colors and gradient"""

    gradient: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    high_gradient: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    show_grad: bool
    """ Do a gradient for the background of the viewport working area

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeGraphEditor(bpy_struct):
    """Theme settings for the graph editor"""

    active_channels_group: bpy_prop_array[float] | None
    """ 

    :type: bpy_prop_array[float] | None
    """

    channel_group: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    channels_region: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_channel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_subchannel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_vect: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vect: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    lastsel_point: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_bevel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    window_sliders: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeImageEditor(bpy_struct):
    """Theme settings for the Image Editor"""

    edge_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    editmesh_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_dot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    facedot_size: int
    """ 

    :type: int
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    freestyle_face_mark: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    handle_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto_clamped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    metadatabg: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    metadatatext: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    paint_curve_handle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    paint_curve_pivot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_edge: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_stitchable: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_unstitchable: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_vert: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    scope_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    uv_others: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    uv_shadow: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_bevel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire_edit: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeInfo(bpy_struct):
    """Theme settings for Info"""

    info_debug: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_debug_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_error: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_error_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_info: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_info_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_selected_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_warning: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    info_warning_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeLogicEditor(bpy_struct):
    """Theme settings for the Logic Editor"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeNLAEditor(bpy_struct):
    """Theme settings for the NLA Editor"""

    active_action: bpy_prop_array[float] | None
    """ Animation data-block has active action

    :type: bpy_prop_array[float] | None
    """

    active_action_unset: bpy_prop_array[float] | None
    """ Animation data-block doesn't have active action

    :type: bpy_prop_array[float] | None
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    keyframe_border: bpy_prop_array[float]
    """ Color of keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_border_selected: bpy_prop_array[float]
    """ Color of selected keyframe border

    :type: bpy_prop_array[float]
    """

    meta_strips: bpy_prop_array[float]
    """ Meta Strip - Unselected (for grouping related strips)

    :type: bpy_prop_array[float]
    """

    meta_strips_selected: bpy_prop_array[float]
    """ Meta Strip - Selected (for grouping related strips)

    :type: bpy_prop_array[float]
    """

    sound_strips: bpy_prop_array[float]
    """ Sound Strip - Unselected (for timing speaker sounds)

    :type: bpy_prop_array[float]
    """

    sound_strips_selected: bpy_prop_array[float]
    """ Sound Strip - Selected (for timing speaker sounds)

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    strips: bpy_prop_array[float]
    """ Action-Clip Strip - Unselected

    :type: bpy_prop_array[float]
    """

    strips_selected: bpy_prop_array[float]
    """ Action-Clip Strip - Selected

    :type: bpy_prop_array[float]
    """

    transition_strips: bpy_prop_array[float]
    """ Transition Strip - Unselected

    :type: bpy_prop_array[float]
    """

    transition_strips_selected: bpy_prop_array[float]
    """ Transition Strip - Selected

    :type: bpy_prop_array[float]
    """

    tweak: bpy_prop_array[float]
    """ Color for strip/action being 'tweaked' or edited

    :type: bpy_prop_array[float]
    """

    tweak_duplicate: bpy_prop_array[float]
    """ Warning/error indicator color for strips referencing the strip being tweaked

    :type: bpy_prop_array[float]
    """

    view_sliders: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeNodeEditor(bpy_struct):
    """Theme settings for the Node Editor"""

    color_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    converter_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    distor_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    filter_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    frame_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    group_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    group_socket_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    input_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    layout_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    matte_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    node_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    node_backdrop: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    node_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    noodle_curving: int
    """ Curving of the noodle

    :type: int
    """

    output_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    pattern_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    script_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    selected_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    shader_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    texture_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vector_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire_inner: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeOutliner(bpy_struct):
    """Theme settings for the Outliner"""

    match: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    selected_highlight: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemePanelColors(bpy_struct):
    """Theme settings for panel colors"""

    back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    show_back: bool
    """ 

    :type: bool
    """

    show_header: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeProperties(bpy_struct):
    """Theme settings for the Properties"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeSequenceEditor(bpy_struct):
    """Theme settings for the Sequence Editor"""

    audio_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    draw_action: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    effect_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    image_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    keyframe: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    meta_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    metadatabg: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    metadatatext: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    movie_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    movieclip_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    scene_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    text_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    transition_strip: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    window_sliders: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeSpaceGeneric(bpy_struct):
    back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_title: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    panelcolors: ThemePanelColors
    """ 

    :type: ThemePanelColors
    """

    tab_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_inactive: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    title: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeSpaceGradient(bpy_struct):
    button: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_title: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gradients: ThemeGradientColors
    """ 

    :type: ThemeGradientColors
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    panelcolors: ThemePanelColors
    """ 

    :type: ThemePanelColors
    """

    tab_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_inactive: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    title: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeSpaceListGeneric(bpy_struct):
    list: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    list_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    list_text_hi: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    list_title: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeStyle(bpy_struct):
    """Theme settings for style sets"""

    panel_title: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    widget: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    widget_label: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeTextEditor(bpy_struct):
    """Theme settings for the Text Editor"""

    cursor: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    line_numbers_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    selected_text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    syntax_builtin: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_comment: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_numbers: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_preprocessor: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_reserved: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_special: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_string: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    syntax_symbols: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeTimeline(bpy_struct):
    """Theme settings for the Timeline"""

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    time_grease_pencil: bpy_prop_array[float]
    """ Color of Grease Pencil keyframes

    :type: bpy_prop_array[float]
    """

    time_keyframe: bpy_prop_array[float]
    """ Base color for keyframe indicator lines

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeUserInterface(bpy_struct):
    """Theme settings for user interface elements"""

    axis_x: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    axis_y: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    axis_z: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_alpha: float
    """ Transparency of icons in the interface, to reduce contrast

    :type: float
    """

    icon_file: str
    """ 

    :type: str
    """

    menu_shadow_fac: float
    """ Blending factor for menu shadows

    :type: float
    """

    menu_shadow_width: int
    """ Width of menu shadows, set to zero to disable

    :type: int
    """

    wcol_box: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_list_item: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu_back: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu_item: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_num: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_numslider: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_option: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_pie_menu: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_progress: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_pulldown: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_radio: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_regular: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_scroll: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_state: ThemeWidgetStateColors
    """ 

    :type: ThemeWidgetStateColors
    """

    wcol_text: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_toggle: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_tool: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_tooltip: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    widget_emboss: bpy_prop_array[float]
    """ Color of the 1px shadow line underlying widgets

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeUserPreferences(bpy_struct):
    """Theme settings for the User Preferences"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeView3D(bpy_struct):
    """Theme settings for the 3D View"""

    act_spline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    bone_pose: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    bone_pose_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    bone_solid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    bundle_solid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    camera: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    camera_path: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    clipping_border_3d: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_bevel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_crease: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_facesel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_seam: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_sharp: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    editmesh_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    empty: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    extra_edge_angle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    extra_edge_len: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    extra_face_angle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    extra_face_area: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_dot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    facedot_size: int
    """ 

    :type: int
    """

    frame_current: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    freestyle_edge_mark: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    freestyle_face_mark: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_align: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_auto: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_free: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_sel_vect: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_vect: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    lamp: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    lastsel_point: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    normal: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    nurb_sel_uline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    nurb_sel_vline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    nurb_uline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    nurb_vline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    object_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    object_grouped: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    object_grouped_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    object_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    outline_width: int
    """ 

    :type: int
    """

    paint_curve_handle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    paint_curve_pivot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    skin_root: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGradient
    """ Settings for space

    :type: ThemeSpaceGradient
    """

    speaker: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    split_normal: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text_grease_pencil: bpy_prop_array[float]
    """ Color for indicating Grease Pencil keyframes

    :type: bpy_prop_array[float]
    """

    text_keyframe: bpy_prop_array[float]
    """ Color for indicating Object keyframes

    :type: bpy_prop_array[float]
    """

    transform: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_bevel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_normal: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    view_overlay: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire_edit: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeWidgetColors(bpy_struct):
    """Theme settings for widget color sets"""

    inner: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    item: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    shadedown: int
    """ 

    :type: int
    """

    shadetop: int
    """ 

    :type: int
    """

    show_shaded: bool
    """ 

    :type: bool
    """

    text: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ThemeWidgetStateColors(bpy_struct):
    """Theme settings for widget state colors"""

    blend: float
    """ 

    :type: float
    """

    inner_anim: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_anim_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_driven: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_driven_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_key: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_key_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TimelineMarker(bpy_struct):
    """Marker for noting points in the timeline"""

    camera: Object | None
    """ Camera this timeline sets to active

    :type: Object | None
    """

    frame: int
    """ The frame on which the timeline marker appears

    :type: int
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ Marker selection state

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Timer(bpy_struct):
    """Window event timer"""

    time_delta: float
    """ Time since last step in seconds

    :type: float
    """

    time_duration: float
    """ Time since last step in seconds

    :type: float
    """

    time_step: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class ToolSettings(bpy_struct):
    auto_keying_mode: typing.Literal["ADD_REPLACE_KEYS", "REPLACE_KEYS"]
    """ Mode of automatic keyframe insertion for Objects and Bones

    :type: typing.Literal['ADD_REPLACE_KEYS','REPLACE_KEYS']
    """

    curve_paint_settings: CurvePaintSettings
    """ 

    :type: CurvePaintSettings
    """

    double_threshold: float
    """ Limit for removing duplicates and 'Auto Merge'

    :type: float
    """

    edge_path_live_unwrap: bool
    """ Changing edges seam re-calculates UV unwrap

    :type: bool
    """

    edge_path_mode: typing.Literal[
        "SELECT", "SEAM", "SHARP", "CREASE", "BEVEL", "FREESTYLE"
    ]
    """ The edge flag to tag when selecting the shortest path

    :type: typing.Literal['SELECT','SEAM','SHARP','CREASE','BEVEL','FREESTYLE']
    """

    etch_adaptive_limit: float
    """ Correlation threshold for number of bones in the subdivided stroke

    :type: float
    """

    etch_convert_mode: typing.Literal["FIXED", "LENGTH", "ADAPTIVE", "RETARGET"]
    """ Method used to convert stroke to bones

    :type: typing.Literal['FIXED','LENGTH','ADAPTIVE','RETARGET']
    """

    etch_length_limit: float
    """ Maximum length of the subdivided bones

    :type: float
    """

    etch_number: str
    """ Text to replace &N with (e.g. 'Finger.&N' -> 'Finger.1' or 'Finger.One')

    :type: str
    """

    etch_roll_mode: typing.Literal["NONE", "VIEW", "JOINT"]
    """ Method used to adjust the roll of bones when retargeting

    :type: typing.Literal['NONE','VIEW','JOINT']
    """

    etch_side: str
    """ Text to replace &S with (e.g. 'Arm.&S' -> 'Arm.R' or 'Arm.Right')

    :type: str
    """

    etch_subdivision_number: int
    """ Number of bones in the subdivided stroke

    :type: int
    """

    etch_template: Object | None
    """ Template armature that will be retargeted to the stroke

    :type: Object | None
    """

    gpencil_brushes: GreasePencilBrushes
    """ Grease Pencil drawing brushes

    :type: GreasePencilBrushes
    """

    gpencil_interpolate: GPencilInterpolateSettings
    """ Settings for Grease Pencil Interpolation tools

    :type: GPencilInterpolateSettings
    """

    gpencil_sculpt: GPencilSculptSettings
    """ Settings for stroke sculpting tools and brushes

    :type: GPencilSculptSettings
    """

    gpencil_stroke_placement_image_editor: typing.Literal[
        "CURSOR", "VIEW", "SURFACE", "STROKE"
    ]
    """ 

    :type: typing.Literal['CURSOR','VIEW','SURFACE','STROKE']
    """

    gpencil_stroke_placement_sequencer_preview: typing.Literal[
        "CURSOR", "VIEW", "SURFACE", "STROKE"
    ]
    """ 

    :type: typing.Literal['CURSOR','VIEW','SURFACE','STROKE']
    """

    gpencil_stroke_placement_view2d: typing.Literal[
        "CURSOR", "VIEW", "SURFACE", "STROKE"
    ]
    """ 

    :type: typing.Literal['CURSOR','VIEW','SURFACE','STROKE']
    """

    gpencil_stroke_placement_view3d: typing.Literal[
        "CURSOR", "VIEW", "SURFACE", "STROKE"
    ]
    """ 

    :type: typing.Literal['CURSOR','VIEW','SURFACE','STROKE']
    """

    grease_pencil_source: typing.Literal["SCENE", "OBJECT"]
    """ Data-block where active Grease Pencil data is found from

    :type: typing.Literal['SCENE','OBJECT']
    """

    image_paint: ImagePaint
    """ 

    :type: ImagePaint
    """

    keyframe_type: typing.Literal[
        "KEYFRAME", "BREAKDOWN", "MOVING_HOLD", "EXTREME", "JITTER"
    ]
    """ Type of keyframes to create when inserting keyframes

    :type: typing.Literal['KEYFRAME','BREAKDOWN','MOVING_HOLD','EXTREME','JITTER']
    """

    lock_markers: bool
    """ Prevent marker editing

    :type: bool
    """

    mesh_select_mode: bpy_prop_array[bool]
    """ Which mesh elements selection works on

    :type: bpy_prop_array[bool]
    """

    normal_size: float
    """ Display size for normals in the 3D view

    :type: float
    """

    particle_edit: ParticleEdit
    """ 

    :type: ParticleEdit
    """

    proportional_edit: typing.Literal["DISABLED", "ENABLED", "PROJECTED", "CONNECTED"]
    """ Proportional Editing mode, allows transforms with distance fall-off

    :type: typing.Literal['DISABLED','ENABLED','PROJECTED','CONNECTED']
    """

    proportional_edit_falloff: typing.Literal[
        "SMOOTH",
        "SPHERE",
        "ROOT",
        "INVERSE_SQUARE",
        "SHARP",
        "LINEAR",
        "CONSTANT",
        "RANDOM",
    ]
    """ Falloff type for proportional editing mode

    :type: typing.Literal['SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR','CONSTANT','RANDOM']
    """

    proportional_size: float
    """ Display size for proportional editing circle

    :type: float
    """

    sculpt: Sculpt
    """ 

    :type: Sculpt
    """

    show_uv_local_view: bool
    """ Draw only faces with the currently displayed image assigned

    :type: bool
    """

    snap_element: typing.Literal["INCREMENT", "VERTEX", "EDGE", "FACE", "VOLUME"]
    """ Type of element to snap to

    :type: typing.Literal['INCREMENT','VERTEX','EDGE','FACE','VOLUME']
    """

    snap_node_element: typing.Literal["GRID", "NODE_X", "NODE_Y", "NODE_XY"]
    """ Type of element to snap to

    :type: typing.Literal['GRID','NODE_X','NODE_Y','NODE_XY']
    """

    snap_target: typing.Literal["CLOSEST", "CENTER", "MEDIAN", "ACTIVE"]
    """ Which part to snap onto the target

    :type: typing.Literal['CLOSEST','CENTER','MEDIAN','ACTIVE']
    """

    snap_uv_element: typing.Literal["INCREMENT", "VERTEX"]
    """ Type of element to snap to

    :type: typing.Literal['INCREMENT','VERTEX']
    """

    statvis: MeshStatVis
    """ 

    :type: MeshStatVis
    """

    unified_paint_settings: UnifiedPaintSettings
    """ 

    :type: UnifiedPaintSettings
    """

    use_auto_normalize: bool
    """ Ensure all bone-deforming vertex groups add up to 1.0 while weight painting

    :type: bool
    """

    use_bone_sketching: bool
    """ Use sketching to create and edit bones

    :type: bool
    """

    use_etch_autoname: bool
    """ Automatically generate values to replace &N and &S suffix placeholders in template names

    :type: bool
    """

    use_etch_overdraw: bool
    """ Adjust strokes by drawing near them

    :type: bool
    """

    use_etch_quick: bool
    """ Automatically convert and delete on stroke end

    :type: bool
    """

    use_gpencil_additive_drawing: bool
    """ When creating new frames, the strokes from the previous/active frame are included as the basis for the new one

    :type: bool
    """

    use_gpencil_continuous_drawing: bool
    """ Allow drawing multiple strokes at a time with Grease Pencil

    :type: bool
    """

    use_gpencil_draw_onback: bool
    """ When draw new strokes, the new stroke is drawn below of all strokes in the layer

    :type: bool
    """

    use_gpencil_stroke_endpoints: bool
    """ Only use the first and last parts of the stroke for snapping

    :type: bool
    """

    use_keyframe_insert_auto: bool
    """ Automatic keyframe insertion for Objects and Bones

    :type: bool
    """

    use_keyframe_insert_keyingset: bool
    """ Automatic keyframe insertion using active Keying Set only

    :type: bool
    """

    use_mesh_automerge: bool
    """ Automatically merge vertices moved to the same location

    :type: bool
    """

    use_multipaint: bool
    """ Paint across the weights of all selected bones, maintaining their relative influence

    :type: bool
    """

    use_proportional_action: bool
    """ Proportional editing in action editor

    :type: bool
    """

    use_proportional_edit_mask: bool
    """ Proportional editing mask mode

    :type: bool
    """

    use_proportional_edit_objects: bool
    """ Proportional editing object mode

    :type: bool
    """

    use_proportional_fcurve: bool
    """ Proportional editing in FCurve editor

    :type: bool
    """

    use_record_with_nla: bool
    """ Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking

    :type: bool
    """

    use_snap: bool
    """ Snap during transform

    :type: bool
    """

    use_snap_align_rotation: bool
    """ Align rotation with the snapping target

    :type: bool
    """

    use_snap_grid_absolute: bool
    """ Absolute grid alignment while translating (based on the pivot center)

    :type: bool
    """

    use_snap_peel_object: bool
    """ Consider objects as whole when finding volume center

    :type: bool
    """

    use_snap_project: bool
    """ Project individual elements on the surface of other objects

    :type: bool
    """

    use_snap_self: bool
    """ Snap onto itself (editmode)

    :type: bool
    """

    use_uv_sculpt: bool
    """ Enable brush for UV sculpting

    :type: bool
    """

    use_uv_select_sync: bool
    """ Keep UV and edit mode mesh selection in sync

    :type: bool
    """

    uv_relax_method: typing.Literal["LAPLACIAN", "HC"]
    """ Algorithm used for UV relaxation

    :type: typing.Literal['LAPLACIAN','HC']
    """

    uv_sculpt: UvSculpt
    """ 

    :type: UvSculpt
    """

    uv_sculpt_all_islands: bool
    """ Brush operates on all islands

    :type: bool
    """

    uv_sculpt_lock_borders: bool
    """ Disable editing of boundary edges

    :type: bool
    """

    uv_sculpt_tool: typing.Literal["PINCH", "RELAX", "GRAB"]
    """ Select Tools for the UV sculpt brushes

    :type: typing.Literal['PINCH','RELAX','GRAB']
    """

    uv_select_mode: typing.Literal["VERTEX", "EDGE", "FACE", "ISLAND"]
    """ UV selection and display mode

    :type: typing.Literal['VERTEX','EDGE','FACE','ISLAND']
    """

    vertex_group_subset: typing.Literal["ALL", "BONE_DEFORM", "OTHER_DEFORM"]
    """ Filter Vertex groups for Display

    :type: typing.Literal['ALL','BONE_DEFORM','OTHER_DEFORM']
    """

    vertex_group_user: typing.Literal["NONE", "ACTIVE", "ALL"]
    """ Display unweighted vertices

    :type: typing.Literal['NONE','ACTIVE','ALL']
    """

    vertex_group_weight: float
    """ Weight to assign in vertex groups

    :type: float
    """

    vertex_paint: VertexPaint
    """ 

    :type: VertexPaint
    """

    weight_paint: VertexPaint
    """ 

    :type: VertexPaint
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TrackToConstraint(Constraint, bpy_struct):
    """Aim the constrained object toward the target"""

    head_tail: float
    """ Target along length of bone: Head=0, Tail=1

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    track_axis: typing.Literal[
        "TRACK_X",
        "TRACK_Y",
        "TRACK_Z",
        "TRACK_NEGATIVE_X",
        "TRACK_NEGATIVE_Y",
        "TRACK_NEGATIVE_Z",
    ]
    """ Axis that points to the target object

    :type: typing.Literal['TRACK_X','TRACK_Y','TRACK_Z','TRACK_NEGATIVE_X','TRACK_NEGATIVE_Y','TRACK_NEGATIVE_Z']
    """

    up_axis: typing.Literal["UP_X", "UP_Y", "UP_Z"]
    """ Axis that points upward

    :type: typing.Literal['UP_X','UP_Y','UP_Z']
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_target_z: bool
    """ Target's Z axis, not World Z axis, will constraint the Up direction

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TransformCacheConstraint(Constraint, bpy_struct):
    """Look up transformation from an external file"""

    cache_file: CacheFile | None
    """ 

    :type: CacheFile | None
    """

    object_path: str
    """ Path to the object in the Alembic archive used to lookup the transform matrix

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TransformConstraint(Constraint, bpy_struct):
    """Map transformations of the target to the object"""

    from_max_x: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_x_rot: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_x_scale: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_y: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_y_rot: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_y_scale: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_z: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_max_z_rot: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_max_z_scale: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_min_x: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_x_rot: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_x_scale: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_y: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_y_rot: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_y_scale: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_z: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    from_min_z_rot: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    from_min_z_scale: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    map_from: typing.Literal["LOCATION", "ROTATION", "SCALE"]
    """ The transformation type to use from the target

    :type: typing.Literal['LOCATION','ROTATION','SCALE']
    """

    map_to: typing.Literal["LOCATION", "ROTATION", "SCALE"]
    """ The transformation type to affect of the constrained object

    :type: typing.Literal['LOCATION','ROTATION','SCALE']
    """

    map_to_x_from: typing.Literal["X", "Y", "Z"]
    """ The source axis constrained object's X axis uses

    :type: typing.Literal['X','Y','Z']
    """

    map_to_y_from: typing.Literal["X", "Y", "Z"]
    """ The source axis constrained object's Y axis uses

    :type: typing.Literal['X','Y','Z']
    """

    map_to_z_from: typing.Literal["X", "Y", "Z"]
    """ The source axis constrained object's Z axis uses

    :type: typing.Literal['X','Y','Z']
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object | None
    """ Target object

    :type: Object | None
    """

    to_max_x: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_x_rot: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_x_scale: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_y: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_y_rot: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_y_scale: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_z: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_max_z_rot: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_max_z_scale: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_min_x: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_x_rot: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_x_scale: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_y: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_y_rot: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_y_scale: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_z: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    to_min_z_rot: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    to_min_z_scale: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    use_motion_extrapolate: bool
    """ Extrapolate ranges

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TransformOrientation(bpy_struct):
    matrix: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ 

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    name: str
    """ Name of the custom transform orientation

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TransformSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip applying affine transformations to other strips"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    interpolation: typing.Literal["NONE", "BILINEAR", "BICUBIC"]
    """ Method to determine how missing pixels are created

    :type: typing.Literal['NONE','BILINEAR','BICUBIC']
    """

    rotation_start: float
    """ Degrees to rotate the input

    :type: float
    """

    scale_start_x: float
    """ Amount to scale the input in the X axis

    :type: float
    """

    scale_start_y: float
    """ Amount to scale the input in the Y axis

    :type: float
    """

    translate_start_x: float
    """ Amount to move the input on the X axis

    :type: float
    """

    translate_start_y: float
    """ Amount to move the input on the Y axis

    :type: float
    """

    translation_unit: typing.Literal["PIXELS", "PERCENT"]
    """ Unit of measure to translate the input

    :type: typing.Literal['PIXELS','PERCENT']
    """

    use_uniform_scale: bool
    """ Scale uniformly, preserving aspect ratio

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class TriangulateModifier(Modifier, bpy_struct):
    """Triangulate Mesh"""

    ngon_method: typing.Literal["BEAUTY", "CLIP"]
    """ Method for splitting the polygons into triangles

    :type: typing.Literal['BEAUTY','CLIP']
    """

    quad_method: typing.Literal[
        "BEAUTY", "FIXED", "FIXED_ALTERNATE", "SHORTEST_DIAGONAL"
    ]
    """ Method for splitting the quads into triangles

    :type: typing.Literal['BEAUTY','FIXED','FIXED_ALTERNATE','SHORTEST_DIAGONAL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UILayout(bpy_struct):
    """User interface layout in a panel or header"""

    active: bool | None
    """ 

    :type: bool | None
    """

    alert: bool
    """ 

    :type: bool
    """

    alignment: typing.Literal["EXPAND", "LEFT", "CENTER", "RIGHT"]
    """ 

    :type: typing.Literal['EXPAND','LEFT','CENTER','RIGHT']
    """

    enabled: bool
    """ When false, this (sub)layout is grayed out

    :type: bool
    """

    operator_context: typing.Literal[
        "INVOKE_DEFAULT",
        "INVOKE_REGION_WIN",
        "INVOKE_REGION_CHANNELS",
        "INVOKE_REGION_PREVIEW",
        "INVOKE_AREA",
        "INVOKE_SCREEN",
        "EXEC_DEFAULT",
        "EXEC_REGION_WIN",
        "EXEC_REGION_CHANNELS",
        "EXEC_REGION_PREVIEW",
        "EXEC_AREA",
        "EXEC_SCREEN",
    ]
    """ 

    :type: typing.Literal['INVOKE_DEFAULT','INVOKE_REGION_WIN','INVOKE_REGION_CHANNELS','INVOKE_REGION_PREVIEW','INVOKE_AREA','INVOKE_SCREEN','EXEC_DEFAULT','EXEC_REGION_WIN','EXEC_REGION_CHANNELS','EXEC_REGION_PREVIEW','EXEC_AREA','EXEC_SCREEN']
    """

    scale_x: float
    """ Scale factor along the X for items in this (sub)layout

    :type: float
    """

    scale_y: float
    """ Scale factor along the Y for items in this (sub)layout

    :type: float
    """

    def row(self, *, align: bool | None = False) -> typing_extensions.Self:
        """Sub-layout. Items placed in this sublayout are placed next to each other in a row

        :param align: Align buttons to each other
        :type align: bool | None
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def column(self, *, align: bool | None = False) -> typing_extensions.Self:
        """Sub-layout. Items placed in this sublayout are placed under each other in a column

        :param align: Align buttons to each other
        :type align: bool | None
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def column_flow(
        self, *, columns: int | None = 0, align: bool | None = False
    ) -> typing_extensions.Self:
        """column_flow

        :param columns: Number of columns, 0 is automatic
        :type columns: int | None
        :param align: Align buttons to each other
        :type align: bool | None
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def box(self) -> typing_extensions.Self:
        """Sublayout (items placed in this sublayout are placed under each other in a column and are surrounded by a box)

        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def split(
        self, *, percentage: float | None = 0.0, align: bool | None = False
    ) -> typing_extensions.Self:
        """split

        :param percentage: Percentage, Percentage of width to split at
        :type percentage: float | None
        :param align: Align buttons to each other
        :type align: bool | None
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def menu_pie(self) -> typing_extensions.Self:
        """Sublayout. Items placed in this sublayout are placed in a radial fashion around the menu center)

        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    @classmethod
    def icon(cls, data: typing.Any) -> int:
        """Return the custom icon for this data, use it e.g. to get materials or texture icons

        :param data: Data from which to take the icon
        :type data: typing.Any
        :return: Icon identifier
        :rtype: int
        """

    @classmethod
    def enum_item_name(cls, data: typing.Any, property: str, identifier: str) -> str:
        """Return the UI name for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :return: UI name of the enum item
        :rtype: str
        """

    @classmethod
    def enum_item_description(
        cls, data: typing.Any, property: str, identifier: str
    ) -> str:
        """Return the UI description for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :return: UI description of the enum item
        :rtype: str
        """

    @classmethod
    def enum_item_icon(cls, data: typing.Any, property: str, identifier: str) -> int:
        """Return the icon for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :return: Icon identifier
        :rtype: int
        """

    def prop(
        self,
        data: typing.Any,
        property: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        expand: bool | None = False,
        slider: bool | None = False,
        toggle: bool | None = False,
        icon_only: bool | None = False,
        event: bool | None = False,
        full_event: bool | None = False,
        emboss: bool | None = True,
        index: int | None = -1,
        icon_value: int | None = 0,
    ):
        """Item. Exposes an RNA item and places it into the layout

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param expand: Expand button to show more detail
        :type expand: bool | None
        :param slider: Use slider widget for numeric values
        :type slider: bool | None
        :param toggle: Use toggle widget for boolean values
        :type toggle: bool | None
        :param icon_only: Draw only icons in buttons, no text
        :type icon_only: bool | None
        :param event: Use button to input key events
        :type event: bool | None
        :param full_event: Use button to input full events including modifiers
        :type full_event: bool | None
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool | None
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
        :type index: int | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int | None
        """

    def props_enum(self, data: typing.Any, property: str):
        """props_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def prop_menu_enum(
        self,
        data: typing.Any,
        property: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
    ):
        """prop_menu_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        """

    def prop_enum(
        self,
        data: typing.Any,
        property: str,
        value: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
    ):
        """prop_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param value: Enum property value
        :type value: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        """

    def prop_search(
        self,
        data: typing.Any,
        property: str,
        search_data: typing.Any,
        search_property: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
    ):
        """prop_search

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param search_data: Data from which to take collection to search in
        :type search_data: typing.Any
        :param search_property: Identifier of search collection property
        :type search_property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        """

    def operator(
        self,
        operator: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        emboss: bool | None = True,
        depress: bool | None = False,
        icon_value: int | None = 0,
    ) -> OperatorProperties:
        """Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool | None
        :param depress: Draw pressed in
        :type depress: bool | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int | None
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """

    def operator_menu_hold(
        self,
        operator: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        emboss: bool | None = True,
        depress: bool | None = False,
        icon_value: int | None = 0,
        menu: str = None,
    ) -> OperatorProperties:
        """Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool | None
        :param depress: Draw pressed in
        :type depress: bool | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int | None
        :param menu: Identifier of the menu
        :type menu: str
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """

    def operator_enum(self, operator: str, property: str):
        """operator_enum

        :param operator: Identifier of the operator
        :type operator: str
        :param property: Identifier of property in operator
        :type property: str
        """

    def operator_menu_enum(
        self,
        operator: str,
        property: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
    ):
        """operator_menu_enum

        :param operator: Identifier of the operator
        :type operator: str
        :param property: Identifier of property in operator
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        """

    def label(
        self,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        icon_value: int | None = 0,
    ):
        """Item. Displays text and/or icon in the layout

        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int | None
        """

    def menu(
        self,
        menu: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        icon_value: int | None = 0,
    ):
        """menu

        :param menu: Identifier of the menu
        :type menu: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int | None
        """

    def separator(self):
        """Item. Inserts empty space into the layout between items"""

    def context_pointer_set(self, name: str, data: typing.Any | None):
        """context_pointer_set

        :param name: Name, Name of entry in the context
        :type name: str
        :param data: Pointer to put in context
        :type data: typing.Any | None
        """

    def template_header(self):
        """Inserts common Space header UI (editor type selector)"""

    def template_ID(
        self,
        data: typing.Any,
        property: str,
        *,
        new: str = "",
        open: str = "",
        unlink: str = "",
        filter: typing.Literal["ALL", "AVAILABLE"] | None = "ALL",
    ):
        """template_ID

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param new: Operator identifier to create a new ID block
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Literal['ALL','AVAILABLE'] | None
        """

    def template_ID_preview(
        self,
        data: typing.Any,
        property: str,
        *,
        new: str = "",
        open: str = "",
        unlink: str = "",
        rows: int | None = 0,
        cols: int | None = 0,
        filter: typing.Literal["ALL", "AVAILABLE"] | None = "ALL",
    ):
        """template_ID_preview

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param new: Operator identifier to create a new ID block
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str
        :param rows: Number of thumbnail preview rows to display
        :type rows: int | None
        :param cols: Number of thumbnail preview columns to display
        :type cols: int | None
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Literal['ALL','AVAILABLE'] | None
        """

    def template_any_ID(
        self,
        data: typing.Any,
        property: str,
        type_property: str,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
    ):
        """template_any_ID

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param type_property: Identifier of property in data giving the type of the ID-blocks to use
        :type type_property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        """

    def template_path_builder(
        self,
        data: typing.Any,
        property: str,
        root: ID | None,
        *,
        text: str = "",
        text_ctxt: str = "",
        translate: bool | None = True,
    ):
        """template_path_builder

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param root: ID-block from which path is evaluated from
        :type root: ID | None
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | None
        """

    def template_modifier(self, data: Modifier) -> typing_extensions.Self:
        """Generates the UI layout for modifiers

        :param data: Modifier data
        :type data: Modifier
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def template_constraint(self, data: Constraint) -> typing_extensions.Self:
        """Generates the UI layout for constraints

        :param data: Constraint data
        :type data: Constraint
        :return: Sub-layout to put items in
        :rtype: typing_extensions.Self
        """

    def template_preview(
        self,
        id: ID | None,
        *,
        show_buttons: bool | None = True,
        parent: ID | None = None,
        slot: TextureSlot | None = None,
        preview_id: str = "",
    ):
        """Item. A preview window for materials, textures, lamps or worlds

        :param id: ID data-block
        :type id: ID | None
        :param show_buttons: Show preview buttons?
        :type show_buttons: bool | None
        :param parent: ID data-block
        :type parent: ID | None
        :param slot: Texture slot
        :type slot: TextureSlot | None
        :param preview_id: Identifier of this preview widget, if not set the ID type will be used (i.e. all previews of materials without explicit ID will have the same size...)
        :type preview_id: str
        """

    def template_curve_mapping(
        self,
        data: typing.Any,
        property: str,
        *,
        type: typing.Literal["NONE", "VECTOR", "COLOR", "HUE"] | None = "NONE",
        levels: bool | None = False,
        brush: bool | None = False,
        use_negative_slope: bool | None = False,
    ):
        """Item. A curve mapping widget used for e.g falloff curves for lamps

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param type: Type, Type of curves to display
        :type type: typing.Literal['NONE','VECTOR','COLOR','HUE'] | None
        :param levels: Show black/white levels
        :type levels: bool | None
        :param brush: Show brush options
        :type brush: bool | None
        :param use_negative_slope: Use a negative slope by default
        :type use_negative_slope: bool | None
        """

    def template_color_ramp(
        self, data: typing.Any, property: str, *, expand: bool | None = False
    ):
        """Item. A color ramp widget

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param expand: Expand button to show more detail
        :type expand: bool | None
        """

    def template_icon_view(
        self,
        data: typing.Any,
        property: str,
        *,
        show_labels: bool | None = False,
        scale: float | None = 5.0,
    ):
        """Enum. Large widget showing Icon previews

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param show_labels: Show enum label in preview buttons
        :type show_labels: bool | None
        :param scale: Scale, Scale the icon size (by the button size)
        :type scale: float | None
        """

    def template_histogram(self, data: typing.Any, property: str):
        """Item. A histogramm widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_waveform(self, data: typing.Any, property: str):
        """Item. A waveform widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_vectorscope(self, data: typing.Any, property: str):
        """Item. A vectorscope widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_layers(
        self,
        data: typing.Any,
        property: str,
        used_layers_data: typing.Any | None,
        used_layers_property: str,
        active_layer: int | None,
    ):
        """template_layers

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param used_layers_data: Data from which to take property
        :type used_layers_data: typing.Any | None
        :param used_layers_property: Identifier of property in data
        :type used_layers_property: str
        :param active_layer: Active Layer
        :type active_layer: int | None
        """

    def template_color_picker(
        self,
        data: typing.Any,
        property: str,
        *,
        value_slider: bool | None = False,
        lock: bool | None = False,
        lock_luminosity: bool | None = False,
        cubic: bool | None = False,
    ):
        """Item. A color wheel widget to pick colors

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param value_slider: Display the value slider to the right of the color wheel
        :type value_slider: bool | None
        :param lock: Lock the color wheel display to value 1.0 regardless of actual color
        :type lock: bool | None
        :param lock_luminosity: Keep the color at its original vector length
        :type lock_luminosity: bool | None
        :param cubic: Cubic saturation for picking values close to white
        :type cubic: bool | None
        """

    def template_palette(
        self, data: typing.Any, property: str, *, color: bool | None = False
    ):
        """Item. A palette used to pick colors

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param color: Display the colors as colors or values
        :type color: bool | None
        """

    def template_image_layers(self, image: Image | None, image_user: ImageUser | None):
        """template_image_layers

        :param image:
        :type image: Image | None
        :param image_user:
        :type image_user: ImageUser | None
        """

    def template_image(
        self,
        data: typing.Any,
        property: str,
        image_user: ImageUser,
        *,
        compact: bool | None = False,
        multiview: bool | None = False,
        cubemap: bool | None = False,
    ):
        """Item(s). User interface for selecting images and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param image_user:
        :type image_user: ImageUser
        :param compact: Use more compact layout
        :type compact: bool | None
        :param multiview: Expose Multi-View options
        :type multiview: bool | None
        :param cubemap: Warn for invalid cube map size
        :type cubemap: bool | None
        """

    def template_image_settings(
        self,
        image_settings: ImageFormatSettings,
        *,
        color_management: bool | None = False,
    ):
        """User interface for setting image format options

        :param image_settings:
        :type image_settings: ImageFormatSettings
        :param color_management: Show color management settings
        :type color_management: bool | None
        """

    def template_image_stereo_3d(self, stereo_3d_format: Stereo3dFormat):
        """User interface for setting image stereo 3d options

        :param stereo_3d_format:
        :type stereo_3d_format: Stereo3dFormat
        """

    def template_image_views(self, image_settings: ImageFormatSettings):
        """User interface for setting image views output options

        :param image_settings:
        :type image_settings: ImageFormatSettings
        """

    def template_movieclip(
        self, data: typing.Any, property: str, *, compact: bool | None = False
    ):
        """Item(s). User interface for selecting movie clips and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param compact: Use more compact layout
        :type compact: bool | None
        """

    def template_track(self, data: typing.Any, property: str):
        """Item. A movie-track widget to preview tracking image.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_marker(
        self,
        data: typing.Any,
        property: str,
        clip_user: MovieClipUser,
        track: MovieTrackingTrack,
        *,
        compact: bool | None = False,
    ):
        """Item. A widget to control single marker settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param clip_user:
        :type clip_user: MovieClipUser
        :param track:
        :type track: MovieTrackingTrack
        :param compact: Use more compact layout
        :type compact: bool | None
        """

    def template_movieclip_information(
        self, data: typing.Any, property: str, clip_user: MovieClipUser
    ):
        """Item. Movie clip information data.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        :param clip_user:
        :type clip_user: MovieClipUser
        """

    def template_list(
        self,
        listtype_name: str,
        *,
        list_id: str = "",
        dataptr: typing.Any | None = None,
        propname: str = None,
        active_dataptr: typing.Any = None,
        active_propname: str = None,
        item_dyntip_propname: str = "",
        rows: int | None = 5,
        maxrows: int | None = 5,
        type: typing.Literal["DEFAULT", "COMPACT", "GRID"] | None = "DEFAULT",
        columns: int | None = 9,
    ):
        """Item. A list widget to display data, e.g. vertexgroups.

                :param listtype_name: Identifier of the list type to use
                :type listtype_name: str
                :param list_id: Identifier of this list widget (mandatory when using default "UI_UL_list" class). If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and list_id is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
                :type list_id: str
                :param dataptr: Data from which to take the Collection property
                :type dataptr: typing.Any | None
                :param propname: Identifier of the Collection property in data
                :type propname: str
                :param active_dataptr: Data from which to take the integer property, index of the active item
                :type active_dataptr: typing.Any
                :param active_propname: Identifier of the integer property in active_data, index of the active item
                :type active_propname: str
                :param item_dyntip_propname: Identifier of a string property in items, to use as tooltip content
                :type item_dyntip_propname: str
                :param rows: Default and minimum number of rows to display
                :type rows: int | None
                :param maxrows: Default maximum number of rows to display
                :type maxrows: int | None
                :param type: Type, Type of layout to use

        DEFAULT Default Layout, Use the default, multi-rows layout.

        COMPACT Compact Layout, Use the compact, single-row layout.

        GRID Grid Layout, Use the grid-based layout.
                :type type: typing.Literal['DEFAULT','COMPACT','GRID'] | None
                :param columns: Number of items to display per row, for GRID layout
                :type columns: int | None
        """

    def template_running_jobs(self):
        """template_running_jobs"""

    def template_operator_search(self):
        """template_operator_search"""

    def template_header_3D(self):
        """Inserts common 3DView header UI (selectors for context mode, shading, etc.)"""

    def template_edit_mode_selection(self):
        """Inserts common 3DView Edit modes header UI (selector for selection mode)"""

    def template_reports_banner(self):
        """template_reports_banner"""

    def template_node_link(
        self, ntree: NodeTree | None, node: Node | None, socket: NodeSocket | None
    ):
        """template_node_link

        :param ntree:
        :type ntree: NodeTree | None
        :param node:
        :type node: Node | None
        :param socket:
        :type socket: NodeSocket | None
        """

    def template_node_view(
        self, ntree: NodeTree | None, node: Node | None, socket: NodeSocket | None
    ):
        """template_node_view

        :param ntree:
        :type ntree: NodeTree | None
        :param node:
        :type node: Node | None
        :param socket:
        :type socket: NodeSocket | None
        """

    def template_texture_user(self):
        """template_texture_user"""

    def template_keymap_item_properties(self, item: KeyMapItem):
        """template_keymap_item_properties

        :param item:
        :type item: KeyMapItem
        """

    def template_component_menu(
        self, data: typing.Any | None, property: str, *, name: str = ""
    ):
        """Item. Display expanded property in a popup menu

        :param data: Data from which to take property
        :type data: typing.Any | None
        :param property: Identifier of property in data
        :type property: str
        :param name:
        :type name: str
        """

    def template_colorspace_settings(self, data: typing.Any, property: str):
        """Item. A widget to control input color space settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_colormanaged_view_settings(self, data: typing.Any, property: str):
        """Item. A widget to control color managed view settings settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    def template_node_socket(
        self, *, color: collections.abc.Iterable[float] | None = (0.0, 0.0, 0.0, 1.0)
    ):
        """Node Socket Icon

        :param color: Color
        :type color: collections.abc.Iterable[float] | None
        """

    def template_cache_file(self, data: typing.Any, property: str):
        """Item(s). User interface for selecting cache files and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, *, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, *, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UIList(bpy_struct):
    """UI list containing the elements of a collection"""

    bitflag_filter_item: int
    """ The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)

    :type: int
    """

    bl_idname: str
    """ If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and bl_idname is not set by the script, then bl_idname = "OBJECT_UL_vgroups")

    :type: str
    """

    filter_name: str
    """ Only show items matching this name (use '*' as wildcard)

    :type: str
    """

    layout_type: typing.Literal["DEFAULT", "COMPACT", "GRID"]
    """ 

    :type: typing.Literal['DEFAULT','COMPACT','GRID']
    """

    use_filter_invert: bool
    """ Invert filtering (show hidden items, and vice-versa)

    :type: bool
    """

    use_filter_show: bool
    """ Show filtering options

    :type: bool
    """

    use_filter_sort_alpha: bool
    """ Sort items by their name

    :type: bool
    """

    use_filter_sort_reverse: bool
    """ Invert the order of shown items

    :type: bool
    """

    def draw_item(
        self,
        context: Context,
        layout: UILayout,
        data: typing.Any | None,
        item: typing.Any | None,
        icon: int | None,
        active_data: typing.Any,
        active_property: str | None,
        index: int | None = 0,
        flt_flag: int | None = 0,
    ):
        """Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given 'item' is of the right type...)

        :param context:
        :type context: Context
        :param layout: Layout to draw the item
        :type layout: UILayout
        :param data: Data from which to take Collection property
        :type data: typing.Any | None
        :param item: Item of the collection property
        :type item: typing.Any | None
        :param icon: Icon of the item in the collection
        :type icon: int | None
        :param active_data: Data from which to take property for the active element
        :type active_data: typing.Any
        :param active_property: Identifier of property in active_data, for the active element
        :type active_property: str | None
        :param index: Index of the item in the collection
        :type index: int | None
        :param flt_flag: The filter-flag result for this item
        :type flt_flag: int | None
        """

    def draw_filter(self, context: Context, layout: UILayout):
        """Draw filtering options

        :param context:
        :type context: Context
        :param layout: Layout to draw the item
        :type layout: UILayout
        """

    def filter_items(self, context: Context, data: typing.Any | None, property: str):
        """Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)

                :param context:
                :type context: Context
                :param data: Data from which to take Collection property
                :type data: typing.Any | None
                :param property: Identifier of property in data, for the collection
                :type property: str
                :return: filter_flags, An array of filter flags, one for each item in the collection (NOTE: FILTER_ITEM bit is reserved, it defines whether the item is shown or not), int array of 1 items in [0, inf]

        filter_neworder, An array of indices, one for each item in the collection, mapping the org index to the new one, int array of 1 items in [0, inf]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UIPieMenu(bpy_struct):
    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UIPopupMenu(bpy_struct):
    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UI_UL_list(UIList, bpy_struct):
    @staticmethod
    def filter_items_by_name(
        pattern, bitflag, items, propname="name", flags=None, reverse=False
    ):
        """Set FILTER_ITEM for items which name matches filter_name one (case-insensitive).
        pattern is the filtering pattern.
        propname is the name of the string property to use for filtering.
        flags must be a list of integers the same length as items, or None!
        return a list of flags (based on given flags if not None),
        or an empty list if no flags were given and no filtering has been done.

                :param pattern:
                :param bitflag:
                :param items:
                :param propname:
                :param flags:
                :param reverse:
        """

    @staticmethod
    def sort_items_helper(sort_data, key, reverse=False):
        """Common sorting utility. Returns a neworder list mapping org_idx -> new_idx.
        sort_data must be an (unordered) list of tuples [(org_idx, ...), (org_idx, ...), ...].
        key must be the same kind of callable you would use for sorted() builtin function.
        reverse will reverse the sorting!

                :param sort_data:
                :param key:
                :param reverse:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UVProjectModifier(Modifier, bpy_struct):
    """UV projection modifier to set UVs from a projector"""

    aspect_x: float
    """ 

    :type: float
    """

    aspect_y: float
    """ 

    :type: float
    """

    image: Image | None
    """ 

    :type: Image | None
    """

    projector_count: int
    """ Number of projectors to use

    :type: int
    """

    projectors: bpy_prop_collection[UVProjector]
    """ 

    :type: bpy_prop_collection[UVProjector]
    """

    scale_x: float
    """ 

    :type: float
    """

    scale_y: float
    """ 

    :type: float
    """

    use_image_override: bool
    """ Override faces' current images with the given image

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UVProjector(bpy_struct):
    """UV projector used by the UV project modifier"""

    object: Object | None
    """ Object to use as projector transform

    :type: Object | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UVWarpModifier(Modifier, bpy_struct):
    """Add target position to uv coordinates"""

    axis_u: typing.Literal["X", "Y", "Z"]
    """ Pole axis for rotation

    :type: typing.Literal['X','Y','Z']
    """

    axis_v: typing.Literal["X", "Y", "Z"]
    """ Pole axis for rotation

    :type: typing.Literal['X','Y','Z']
    """

    bone_from: str
    """ Bone defining offset

    :type: str
    """

    bone_to: str
    """ Bone defining offset

    :type: str
    """

    center: bpy_prop_array[float]
    """ Center point for rotate/scale

    :type: bpy_prop_array[float]
    """

    object_from: Object | None
    """ Object defining offset

    :type: Object | None
    """

    object_to: Object | None
    """ Object defining offset

    :type: Object | None
    """

    uv_layer: str
    """ UV Layer name

    :type: str
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UnifiedPaintSettings(bpy_struct):
    """Overrides for some of the active brush's settings"""

    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    secondary_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    size: int
    """ Radius of the brush

    :type: int
    """

    strength: float
    """ How powerful the effect of the brush is when applied

    :type: float
    """

    unprojected_radius: float
    """ Radius of brush in Blender units

    :type: float
    """

    use_locked_size: bool
    """ When locked brush stays same size relative to object; when unlocked brush size is given in pixels

    :type: bool
    """

    use_pressure_size: bool
    """ Enable tablet pressure sensitivity for size

    :type: bool
    """

    use_pressure_strength: bool
    """ Enable tablet pressure sensitivity for strength

    :type: bool
    """

    use_unified_color: bool
    """ Instead of per-brush color, the color is shared across brushes

    :type: bool
    """

    use_unified_size: bool
    """ Instead of per-brush radius, the radius is shared across brushes

    :type: bool
    """

    use_unified_strength: bool
    """ Instead of per-brush strength, the strength is shared across brushes

    :type: bool
    """

    use_unified_weight: bool
    """ Instead of per-brush weight, the weight is shared across brushes

    :type: bool
    """

    weight: float
    """ Weight to assign in vertex groups

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UnitSettings(bpy_struct):
    scale_length: float
    """ Scale to use when converting between blender units and dimensions

    :type: float
    """

    system: typing.Literal["NONE", "METRIC", "IMPERIAL"]
    """ The unit system to use for button display

    :type: typing.Literal['NONE','METRIC','IMPERIAL']
    """

    system_rotation: typing.Literal["DEGREES", "RADIANS"]
    """ Unit to use for displaying/editing rotation values

    :type: typing.Literal['DEGREES','RADIANS']
    """

    use_separate: bool
    """ Display units in pairs (e.g. 1m 0cm)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UnknownType(bpy_struct):
    """Stub RNA type used for pointers to unknown or internal data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferences(bpy_struct):
    """Global user preferences"""

    active_section: typing.Literal[
        "INTERFACE", "EDITING", "INPUT", "ADDONS", "THEMES", "FILES", "SYSTEM"
    ] | None
    """ Active section of the user preferences shown in the user interface

    :type: typing.Literal['INTERFACE','EDITING','INPUT','ADDONS','THEMES','FILES','SYSTEM'] | None
    """

    addons: Addons
    """ 

    :type: Addons
    """

    app_template: str
    """ 

    :type: str
    """

    autoexec_paths: PathCompareCollection
    """ 

    :type: PathCompareCollection
    """

    edit: UserPreferencesEdit
    """ Settings for interacting with Blender data

    :type: UserPreferencesEdit
    """

    filepaths: UserPreferencesFilePaths
    """ Default paths for external files

    :type: UserPreferencesFilePaths
    """

    inputs: UserPreferencesInput
    """ Settings for input devices

    :type: UserPreferencesInput
    """

    system: UserPreferencesSystem
    """ Graphics driver and operating system settings

    :type: UserPreferencesSystem
    """

    themes: bpy_prop_collection[Theme]
    """ 

    :type: bpy_prop_collection[Theme]
    """

    ui_styles: bpy_prop_collection[ThemeStyle]
    """ 

    :type: bpy_prop_collection[ThemeStyle]
    """

    version: bpy_prop_array[int]
    """ Version of Blender the userpref.blend was saved with

    :type: bpy_prop_array[int]
    """

    view: UserPreferencesView
    """ Preferences related to viewing data

    :type: UserPreferencesView
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferencesEdit(bpy_struct):
    """Settings for interacting with Blender data"""

    auto_keying_mode: typing.Literal["ADD_REPLACE_KEYS", "REPLACE_KEYS"]
    """ Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)

    :type: typing.Literal['ADD_REPLACE_KEYS','REPLACE_KEYS']
    """

    fcurve_unselected_alpha: float
    """ Amount that unselected F-Curves stand out from the background (Graph Editor)

    :type: float
    """

    grease_pencil_default_color: bpy_prop_array[float]
    """ Color of new Grease Pencil layers

    :type: bpy_prop_array[float]
    """

    grease_pencil_eraser_radius: int
    """ Radius of eraser 'brush'

    :type: int
    """

    grease_pencil_euclidean_distance: int
    """ Distance moved by mouse when drawing stroke to include

    :type: int
    """

    grease_pencil_manhattan_distance: int
    """ Pixels moved by mouse per axis when drawing stroke

    :type: int
    """

    keyframe_new_handle_type: typing.Literal[
        "FREE", "VECTOR", "ALIGNED", "AUTO", "AUTO_CLAMPED"
    ]
    """ Handle type for handles of new keyframes

    :type: typing.Literal['FREE','VECTOR','ALIGNED','AUTO','AUTO_CLAMPED']
    """

    keyframe_new_interpolation_type: typing.Literal[
        "CONSTANT",
        "LINEAR",
        "BEZIER",
        "SINE",
        "QUAD",
        "CUBIC",
        "QUART",
        "QUINT",
        "EXPO",
        "CIRC",
        "BACK",
        "BOUNCE",
        "ELASTIC",
    ]
    """ Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)

    :type: typing.Literal['CONSTANT','LINEAR','BEZIER','SINE','QUAD','CUBIC','QUART','QUINT','EXPO','CIRC','BACK','BOUNCE','ELASTIC']
    """

    material_link: typing.Literal["OBDATA", "OBJECT"]
    """ Toggle whether the material is linked to object data or the object block

    :type: typing.Literal['OBDATA','OBJECT']
    """

    node_margin: int
    """ Minimum distance between nodes for Auto-offsetting nodes

    :type: int
    """

    object_align: typing.Literal["WORLD", "VIEW"]
    """ When adding objects from a 3D View menu, either align them with that view or with the world

    :type: typing.Literal['WORLD','VIEW']
    """

    sculpt_paint_overlay_color: bpy_prop_array[float]
    """ Color of texture overlay

    :type: bpy_prop_array[float]
    """

    undo_memory_limit: int
    """ Maximum memory usage in megabytes (0 means unlimited)

    :type: int
    """

    undo_steps: int
    """ Number of undo steps available (smaller values conserve memory)

    :type: int
    """

    use_auto_keying: bool
    """ Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)

    :type: bool
    """

    use_auto_keying_warning: bool
    """ Show warning indicators when transforming objects and bones if auto keying is enabled

    :type: bool
    """

    use_drag_immediately: bool
    """ Moving things with a mouse drag confirms when releasing the button

    :type: bool
    """

    use_duplicate_action: bool
    """ Causes actions to be duplicated with the object

    :type: bool
    """

    use_duplicate_armature: bool
    """ Causes armature data to be duplicated with the object

    :type: bool
    """

    use_duplicate_curve: bool
    """ Causes curve data to be duplicated with the object

    :type: bool
    """

    use_duplicate_fcurve: bool
    """ Causes F-curve data to be duplicated with the object

    :type: bool
    """

    use_duplicate_lamp: bool
    """ Causes lamp data to be duplicated with the object

    :type: bool
    """

    use_duplicate_material: bool
    """ Causes material data to be duplicated with the object

    :type: bool
    """

    use_duplicate_mesh: bool
    """ Causes mesh data to be duplicated with the object

    :type: bool
    """

    use_duplicate_metaball: bool
    """ Causes metaball data to be duplicated with the object

    :type: bool
    """

    use_duplicate_particle: bool
    """ Causes particle systems to be duplicated with the object

    :type: bool
    """

    use_duplicate_surface: bool
    """ Causes surface data to be duplicated with the object

    :type: bool
    """

    use_duplicate_text: bool
    """ Causes text data to be duplicated with the object

    :type: bool
    """

    use_duplicate_texture: bool
    """ Causes texture data to be duplicated with the object

    :type: bool
    """

    use_enter_edit_mode: bool
    """ Enter Edit Mode automatically after adding a new object

    :type: bool
    """

    use_global_undo: bool
    """ Global undo works by keeping a full copy of the file itself in memory, so takes extra memory

    :type: bool
    """

    use_grease_pencil_simplify_stroke: bool
    """ Simplify the final stroke

    :type: bool
    """

    use_insertkey_xyz_to_rgb: bool
    """ Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis

    :type: bool
    """

    use_keyframe_insert_available: bool
    """ Automatic keyframe insertion in available F-Curves

    :type: bool
    """

    use_keyframe_insert_needed: bool
    """ Keyframe insertion only when keyframe needed

    :type: bool
    """

    use_negative_frames: bool
    """ Current frame number can be manually set to a negative value

    :type: bool
    """

    use_visual_keying: bool
    """ Use Visual keying automatically for constrained objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferencesFilePaths(bpy_struct):
    """Default paths for external files"""

    animation_player: str
    """ Path to a custom animation/frame sequence player

    :type: str
    """

    animation_player_preset: typing.Literal[
        "INTERNAL", "DJV", "FRAMECYCLER", "RV", "MPLAYER", "CUSTOM"
    ]
    """ Preset configs for external animation players

    :type: typing.Literal['INTERNAL','DJV','FRAMECYCLER','RV','MPLAYER','CUSTOM']
    """

    auto_save_time: int
    """ The time (in minutes) to wait between automatic temporary saves

    :type: int
    """

    font_directory: str
    """ The default directory to search for loading fonts

    :type: str
    """

    hide_recent_locations: bool
    """ Hide recent locations in the file selector

    :type: bool
    """

    hide_system_bookmarks: bool
    """ Hide system bookmarks in the file selector

    :type: bool
    """

    i18n_branches_directory: str
    """ The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI

    :type: str
    """

    image_editor: str
    """ Path to an image editor

    :type: str
    """

    recent_files: int
    """ Maximum number of recently opened files to remember

    :type: int
    """

    render_cache_directory: str
    """ Where to cache raw render results

    :type: str
    """

    render_output_directory: str
    """ The default directory for rendering output, for new scenes

    :type: str
    """

    save_version: int
    """ The number of old versions to maintain in the current directory, when manually saving

    :type: int
    """

    script_directory: str
    """ Alternate script path, matching the default layout with subdirs: startup, add-ons & modules (requires restart)

    :type: str
    """

    show_hidden_files_datablocks: bool
    """ Hide files/data-blocks that start with a dot (.*)

    :type: bool
    """

    show_thumbnails: bool
    """ Open in thumbnail view for images and movies

    :type: bool
    """

    sound_directory: str
    """ The default directory to search for sounds

    :type: str
    """

    temporary_directory: str
    """ The directory for storing temporary save files

    :type: str
    """

    texture_directory: str
    """ The default directory to search for textures

    :type: str
    """

    use_auto_save_temporary_files: bool
    """ Automatic saving of temporary files in temp directory, uses process ID (Sculpt or edit mode data won't be saved!')

    :type: bool
    """

    use_file_compression: bool
    """ Enable file compression when saving .blend files

    :type: bool
    """

    use_filter_files: bool
    """ Display only files with extensions in the image select window

    :type: bool
    """

    use_keep_session: bool
    """ Always load session recovery and save it after quitting Blender

    :type: bool
    """

    use_load_ui: bool
    """ Load user interface setup when loading .blend files

    :type: bool
    """

    use_relative_paths: bool
    """ Default relative path option for the file selector

    :type: bool
    """

    use_save_preview_images: bool
    """ Enables automatic saving of preview images in the .blend file

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferencesInput(bpy_struct):
    """Settings for input devices"""

    active_keyconfig: str | None
    """ The name of the active key configuration

    :type: str | None
    """

    drag_threshold: int
    """ Amount of pixels you have to drag before dragging UI items happens

    :type: int
    """

    invert_mouse_zoom: bool
    """ Invert the axis of mouse movement for zooming

    :type: bool
    """

    invert_zoom_wheel: bool
    """ Swap the Mouse Wheel zoom direction

    :type: bool
    """

    mouse_double_click_time: int
    """ Time/delay (in ms) for a double click

    :type: int
    """

    navigation_mode: typing.Literal["WALK", "FLY"]
    """ Which method to use for viewport navigation

    :type: typing.Literal['WALK','FLY']
    """

    ndof_deadzone: float
    """ Threshold of initial movement needed from the device's rest position

    :type: float
    """

    ndof_fly_helicopter: bool
    """ Device up/down directly controls your Z position

    :type: bool
    """

    ndof_lock_horizon: bool
    """ Keep horizon level while flying with 3D Mouse

    :type: bool
    """

    ndof_orbit_sensitivity: float
    """ Overall sensitivity of the 3D Mouse for orbiting

    :type: float
    """

    ndof_pan_yz_swap_axis: bool
    """ Pan using up/down on the device (otherwise forward/backward)

    :type: bool
    """

    ndof_panx_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_pany_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_panz_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_rotx_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_roty_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_rotz_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_sensitivity: float
    """ Overall sensitivity of the 3D Mouse for panning

    :type: float
    """

    ndof_show_guide: bool
    """ Display the center and axis during rotation

    :type: bool
    """

    ndof_view_navigate_method: typing.Literal["FREE", "ORBIT"]
    """ Navigation style in the viewport

    :type: typing.Literal['FREE','ORBIT']
    """

    ndof_view_rotate_method: typing.Literal["TURNTABLE", "TRACKBALL"]
    """ Rotation style in the viewport

    :type: typing.Literal['TURNTABLE','TRACKBALL']
    """

    ndof_zoom_invert: bool
    """ Zoom using opposite direction

    :type: bool
    """

    select_mouse: typing.Literal["LEFT", "RIGHT"]
    """ Mouse button used for selection

    :type: typing.Literal['LEFT','RIGHT']
    """

    tweak_threshold: int
    """ Number of pixels you have to drag before tweak event is triggered

    :type: int
    """

    use_emulate_numpad: bool
    """ Main 1 to 0 keys act as the numpad ones (useful for laptops)

    :type: bool
    """

    use_mouse_continuous: bool
    """ Allow moving the mouse outside the view on some manipulations (transform, ui control drag)

    :type: bool
    """

    use_mouse_emulate_3_button: bool
    """ Emulate Middle Mouse with Alt+Left Mouse (doesn't work with Left Mouse Select option)

    :type: bool
    """

    use_mouse_mmb_paste: bool
    """ In text window, paste with middle mouse button instead of panning

    :type: bool
    """

    use_ndof: bool
    """ 

    :type: bool
    """

    use_trackpad_natural: bool
    """ If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI

    :type: bool
    """

    view_rotate_method: typing.Literal["TURNTABLE", "TRACKBALL"]
    """ Rotation style in the viewport

    :type: typing.Literal['TURNTABLE','TRACKBALL']
    """

    view_zoom_axis: typing.Literal["VERTICAL", "HORIZONTAL"]
    """ Axis of mouse movement to zoom in or out on

    :type: typing.Literal['VERTICAL','HORIZONTAL']
    """

    view_zoom_method: typing.Literal["CONTINUE", "DOLLY", "SCALE"]
    """ Which style to use for viewport scaling

    :type: typing.Literal['CONTINUE','DOLLY','SCALE']
    """

    walk_navigation: WalkNavigation
    """ Settings for walk navigation mode

    :type: WalkNavigation
    """

    wheel_scroll_lines: int
    """ Number of lines scrolled at a time with the mouse wheel

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferencesSystem(bpy_struct):
    """Graphics driver and operating system settings"""

    anisotropic_filter: typing.Literal[
        "FILTER_0", "FILTER_2", "FILTER_4", "FILTER_8", "FILTER_16"
    ]
    """ Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)

    :type: typing.Literal['FILTER_0','FILTER_2','FILTER_4','FILTER_8','FILTER_16']
    """

    audio_channels: typing.Literal[
        "MONO", "STEREO", "SURROUND4", "SURROUND51", "SURROUND71"
    ]
    """ Audio channel count

    :type: typing.Literal['MONO','STEREO','SURROUND4','SURROUND51','SURROUND71']
    """

    audio_device: typing.Literal["NONE", "SDL", "OPENAL", "JACK"]
    """ Audio output device

    :type: typing.Literal['NONE','SDL','OPENAL','JACK']
    """

    audio_mixing_buffer: typing.Literal[
        "SAMPLES_256",
        "SAMPLES_512",
        "SAMPLES_1024",
        "SAMPLES_2048",
        "SAMPLES_4096",
        "SAMPLES_8192",
        "SAMPLES_16384",
        "SAMPLES_32768",
    ]
    """ Number of samples used by the audio mixing buffer

    :type: typing.Literal['SAMPLES_256','SAMPLES_512','SAMPLES_1024','SAMPLES_2048','SAMPLES_4096','SAMPLES_8192','SAMPLES_16384','SAMPLES_32768']
    """

    audio_sample_format: typing.Literal["U8", "S16", "S24", "S32", "FLOAT", "DOUBLE"]
    """ Audio sample format

    :type: typing.Literal['U8','S16','S24','S32','FLOAT','DOUBLE']
    """

    audio_sample_rate: typing.Literal[
        "RATE_44100", "RATE_48000", "RATE_96000", "RATE_192000"
    ]
    """ Audio sample rate

    :type: typing.Literal['RATE_44100','RATE_48000','RATE_96000','RATE_192000']
    """

    author: str
    """ Name that will be used in exported files when format supports such feature

    :type: str
    """

    color_picker_type: typing.Literal[
        "CIRCLE_HSV", "CIRCLE_HSL", "SQUARE_SV", "SQUARE_HS", "SQUARE_HV"
    ]
    """ Different styles of displaying the color picker widget

    :type: typing.Literal['CIRCLE_HSV','CIRCLE_HSL','SQUARE_SV','SQUARE_HS','SQUARE_HV']
    """

    dpi: int
    """ DPI for add-ons to use when drawing custom user interface elements, controlled by operating system settings and Blender UI scale, with a reference value of 72 DPI (note that since this value includes a user defined scale, it is not always the actual monitor DPI)

    :type: int
    """

    font_path_ui: str
    """ Path to interface font

    :type: str
    """

    font_path_ui_mono: str
    """ Path to interface mono-space Font

    :type: str
    """

    frame_server_port: int
    """ Frameserver Port for Frameserver Rendering

    :type: int
    """

    gl_clip_alpha: float
    """ Clip alpha below this threshold in the 3D textured view

    :type: float
    """

    gl_texture_limit: typing.Literal[
        "CLAMP_OFF",
        "CLAMP_8192",
        "CLAMP_4096",
        "CLAMP_2048",
        "CLAMP_1024",
        "CLAMP_512",
        "CLAMP_256",
        "CLAMP_128",
    ]
    """ Limit the texture size to save graphics memory

    :type: typing.Literal['CLAMP_OFF','CLAMP_8192','CLAMP_4096','CLAMP_2048','CLAMP_1024','CLAMP_512','CLAMP_256','CLAMP_128']
    """

    image_draw_method: typing.Literal["2DTEXTURE", "GLSL", "DRAWPIXELS"]
    """ Method used for displaying images on the screen

    :type: typing.Literal['2DTEXTURE','GLSL','DRAWPIXELS']
    """

    legacy_compute_device_type: int
    """ For backwards compatibility only

    :type: int
    """

    memory_cache_limit: int
    """ Memory cache limit (in megabytes)

    :type: int
    """

    multi_sample: typing.Literal["NONE", "2", "4", "8", "16"]
    """ Enable OpenGL multi-sampling, only for systems that support it, requires restart

    :type: typing.Literal['NONE','2','4','8','16']
    """

    opensubdiv_compute_type: typing.Literal["NONE"]
    """ Type of computer back-end used with OpenSubdiv

    :type: typing.Literal['NONE']
    """

    pixel_size: float
    """ Suggested line thickness and point size in pixels, for add-ons drawing custom user interface elements, controlled by operating system settings and Blender UI scale

    :type: float
    """

    prefetch_frames: int
    """ Number of frames to render ahead during playback (sequencer only)

    :type: int
    """

    scrollback: int
    """ Maximum number of lines to store for the console buffer

    :type: int
    """

    select_method: typing.Literal["AUTO", "GL_SELECT", "GL_QUERY"]
    """ Use OpenGL occlusion queries or selection render mode to accelerate selection

    :type: typing.Literal['AUTO','GL_SELECT','GL_QUERY']
    """

    solid_lights: bpy_prop_collection[UserSolidLight]
    """ Lights user to display objects in solid draw mode

    :type: bpy_prop_collection[UserSolidLight]
    """

    text_hinting: typing.Literal["AUTO", "NONE", "SLIGHT", "FULL"]
    """ Method for making user interface text render sharp

    :type: typing.Literal['AUTO','NONE','SLIGHT','FULL']
    """

    texture_collection_rate: int
    """ Number of seconds between each run of the GL texture garbage collector

    :type: int
    """

    texture_time_out: int
    """ Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)

    :type: int
    """

    use_16bit_textures: bool
    """ Use 16 bit per component texture for float images

    :type: bool
    """

    use_gpu_mipmap: bool
    """ Generate Image Mipmaps on the GPU

    :type: bool
    """

    use_international_fonts: bool
    """ Use international fonts

    :type: bool
    """

    use_mipmaps: bool
    """ Scale textures for the 3D View (looks nicer but uses more memory and slows image reloading)

    :type: bool
    """

    use_preview_images: bool
    """ Allow user to choose any codec (Windows only, might generate instability)

    :type: bool
    """

    use_region_overlap: bool
    """ Draw tool/property regions over the main region, when using Triple Buffer

    :type: bool
    """

    use_scripts_auto_execute: bool
    """ Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)

    :type: bool
    """

    use_select_pick_depth: bool
    """ Use the depth buffer for picking 3D View selection

    :type: bool
    """

    use_tabs_as_spaces: bool
    """ Automatically convert all new tabs into spaces for new and loaded text files

    :type: bool
    """

    use_text_antialiasing: bool
    """ Draw user interface text anti-aliased

    :type: bool
    """

    use_translate_interface: bool
    """ Translate interface

    :type: bool
    """

    use_translate_new_dataname: bool
    """ Translate new data names (when adding/creating some)

    :type: bool
    """

    use_translate_tooltips: bool
    """ Translate tooltips

    :type: bool
    """

    use_weight_color_range: bool
    """ Enable color range used for weight visualization in weight painting mode

    :type: bool
    """

    weight_color_range: ColorRamp
    """ Color range used for weight visualization in weight painting mode

    :type: ColorRamp
    """

    window_draw_method: typing.Literal[
        "AUTOMATIC", "TRIPLE_BUFFER", "OVERLAP", "OVERLAP_FLIP", "FULL"
    ]
    """ Drawing method used by the window manager

    :type: typing.Literal['AUTOMATIC','TRIPLE_BUFFER','OVERLAP','OVERLAP_FLIP','FULL']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserPreferencesView(bpy_struct):
    """Preferences related to viewing data"""

    manipulator_handle_size: int
    """ Size of manipulator handles as percentage of the radius

    :type: int
    """

    manipulator_hotspot: int
    """ Distance around the handles to accept mouse clicks

    :type: int
    """

    manipulator_size: int
    """ Diameter of the manipulator

    :type: int
    """

    mini_axis_brightness: int
    """ Brightness of the icon

    :type: int
    """

    mini_axis_size: int
    """ The axes icon's size

    :type: int
    """

    object_origin_size: int
    """ Diameter in Pixels for Object/Lamp origin display

    :type: int
    """

    open_left_mouse_delay: int
    """ Time in 1/10 seconds to hold the Left Mouse Button before opening the toolbox

    :type: int
    """

    open_right_mouse_delay: int
    """ Time in 1/10 seconds to hold the Right Mouse Button before opening the toolbox

    :type: int
    """

    open_sublevel_delay: int
    """ Time delay in 1/10 seconds before automatically opening sub level menus

    :type: int
    """

    open_toplevel_delay: int
    """ Time delay in 1/10 seconds before automatically opening top level menus

    :type: int
    """

    pie_animation_timeout: int
    """ Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)

    :type: int
    """

    pie_initial_timeout: int
    """ Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)

    :type: int
    """

    pie_menu_confirm: int
    """ Distance threshold after which selection is made (zero to disable)

    :type: int
    """

    pie_menu_radius: int
    """ Pie menu size in pixels

    :type: int
    """

    pie_menu_threshold: int
    """ Distance from center needed before a selection can be made

    :type: int
    """

    rotation_angle: float
    """ Rotation step for numerical pad keys (2 4 6 8)

    :type: float
    """

    show_column_layout: bool
    """ Use a column layout for toolbox

    :type: bool
    """

    show_developer_ui: bool
    """ Show options for developers (edit source in context menu, geometry indices)

    :type: bool
    """

    show_large_cursors: bool
    """ Use large mouse cursors when available

    :type: bool
    """

    show_layout_ui: bool
    """ Show screen layout editing UI

    :type: bool
    """

    show_manipulator: bool
    """ Use 3D transform manipulator

    :type: bool
    """

    show_mini_axis: bool
    """ Show a small rotating 3D axes in the bottom left corner of the 3D View

    :type: bool
    """

    show_object_info: bool
    """ Display objects name and frame number in 3D view

    :type: bool
    """

    show_playback_fps: bool
    """ Show the frames per second screen refresh rate, while animation is played back

    :type: bool
    """

    show_splash: bool
    """ Display splash screen on startup

    :type: bool
    """

    show_tooltips: bool
    """ Display tooltips (when off hold Alt to force display)

    :type: bool
    """

    show_tooltips_python: bool
    """ Show Python references in tooltips

    :type: bool
    """

    show_view3d_cursor: bool
    """ 

    :type: bool
    """

    show_view_name: bool
    """ Show the name of the view's direction in each 3D View

    :type: bool
    """

    smooth_view: int
    """ Time to animate the view in milliseconds, zero to disable

    :type: int
    """

    timecode_style: typing.Literal[
        "MINIMAL", "SMPTE", "SMPTE_COMPACT", "MILLISECONDS", "SECONDS_ONLY"
    ]
    """ Format of Time Codes displayed when not displaying timing in terms of frames

    :type: typing.Literal['MINIMAL','SMPTE','SMPTE_COMPACT','MILLISECONDS','SECONDS_ONLY']
    """

    ui_line_width: typing.Literal["THIN", "AUTO", "THICK"]
    """ Changes the thickness of lines and points in the interface

    :type: typing.Literal['THIN','AUTO','THICK']
    """

    ui_scale: float
    """ Changes the size of the fonts and buttons in the interface

    :type: float
    """

    use_auto_perspective: bool
    """ Automatically switch between orthographic and perspective when changing from top/front/side views

    :type: bool
    """

    use_camera_lock_parent: bool
    """ When the camera is locked to the view and in fly mode, transform the parent rather than the camera

    :type: bool
    """

    use_cursor_lock_adjust: bool
    """ Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)

    :type: bool
    """

    use_directional_menus: bool
    """ Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction

    :type: bool
    """

    use_global_pivot: bool
    """ Lock the same rotation/scaling pivot in all 3D Views

    :type: bool
    """

    use_global_scene: bool
    """ Force the current Scene to be displayed in all Screens

    :type: bool
    """

    use_mouse_depth_cursor: bool
    """ Use the depth under the mouse when placing the cursor

    :type: bool
    """

    use_mouse_depth_navigate: bool
    """ Use the depth under the mouse to improve view pan/rotate/zoom functionality

    :type: bool
    """

    use_mouse_over_open: bool
    """ Open menu buttons and pulldowns automatically when the mouse is hovering

    :type: bool
    """

    use_quit_dialog: bool
    """ Ask for confirmation when quitting through the window close button

    :type: bool
    """

    use_rotate_around_active: bool
    """ Use selection as the pivot point

    :type: bool
    """

    use_zoom_to_mouse: bool
    """ Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center

    :type: bool
    """

    view2d_grid_spacing_min: int
    """ Minimum number of pixels between each gridline in 2D Viewports

    :type: int
    """

    view_frame_keyframes: int
    """ Keyframes around cursor that we zoom around

    :type: int
    """

    view_frame_seconds: float
    """ Seconds around cursor that we zoom around

    :type: float
    """

    view_frame_type: typing.Literal["KEEP_RANGE", "SECONDS", "KEYFRAMES"]
    """ How zooming to frame focuses around current frame

    :type: typing.Literal['KEEP_RANGE','SECONDS','KEYFRAMES']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UserSolidLight(bpy_struct):
    """Light used for OpenGL lighting in solid draw mode"""

    diffuse_color: bpy_prop_array[float]
    """ Diffuse color of the OpenGL light

    :type: bpy_prop_array[float]
    """

    direction: bpy_prop_array[float]
    """ Direction that the OpenGL light is shining

    :type: bpy_prop_array[float]
    """

    specular_color: bpy_prop_array[float]
    """ Color of the light's specular highlight

    :type: bpy_prop_array[float]
    """

    use: bool
    """ Enable this OpenGL light in solid draw mode

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class UvSculpt(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VectorFont(ID, bpy_struct):
    """Vector font for Text objects"""

    filepath: str
    """ 

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    def pack(self):
        """Pack the font into the current blend file"""

    def unpack(
        self,
        method: typing.Literal[
            "USE_LOCAL", "WRITE_LOCAL", "USE_ORIGINAL", "WRITE_ORIGINAL"
        ]
        | None = "USE_LOCAL",
    ):
        """Unpack the font to the samples filename

        :param method: method, How to unpack
        :type method: typing.Literal['USE_LOCAL','WRITE_LOCAL','USE_ORIGINAL','WRITE_ORIGINAL'] | None
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexGroup(bpy_struct):
    """Group of vertices, used for armature deform and other purposes"""

    index: int
    """ Index number of the vertex group

    :type: int
    """

    lock_weight: bool
    """ Maintain the relative weights for the group

    :type: bool
    """

    name: str
    """ Vertex group name

    :type: str
    """

    def add(
        self,
        index: collections.abc.Iterable[int] | None,
        weight: float | None,
        type: typing.Literal["REPLACE", "ADD", "SUBTRACT"] | None,
    ):
        """Add vertices to the group

                :param index: Index List
                :type index: collections.abc.Iterable[int] | None
                :param weight: Vertex weight
                :type weight: float | None
                :param type: Vertex assign mode

        REPLACE Replace, Replace.

        ADD Add, Add.

        SUBTRACT Subtract, Subtract.
                :type type: typing.Literal['REPLACE','ADD','SUBTRACT'] | None
        """

    def remove(self, index: collections.abc.Iterable[int] | None):
        """Remove a vertex from the group

        :param index: Index List
        :type index: collections.abc.Iterable[int] | None
        """

    def weight(self, index: int | None) -> float:
        """Get a vertex weight from the group

        :param index: Index, The index of the vertex
        :type index: int | None
        :return: Vertex weight
        :rtype: float
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexGroupElement(bpy_struct):
    """Weight value of a vertex in a vertex group"""

    group: int
    """ 

    :type: int
    """

    weight: float
    """ Vertex Weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexPaint(Paint, bpy_struct):
    """Properties of vertex and weight paint mode"""

    radial_symmetry: bpy_prop_array[int]
    """ Number of times to copy strokes across the surface

    :type: bpy_prop_array[int]
    """

    use_group_restrict: bool
    """ Restrict painting to vertices in the group

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexWeightEditModifier(Modifier, bpy_struct):
    """Edit the weights of vertices in a group"""

    add_threshold: float
    """ Lower bound for a vertex's weight to be added to the vgroup

    :type: float
    """

    default_weight: float
    """ Default weight a vertex will have if it is not in the vgroup

    :type: float
    """

    falloff_type: typing.Literal[
        "LINEAR",
        "CURVE",
        "SHARP",
        "SMOOTH",
        "ROOT",
        "ICON_SPHERECURVE",
        "RANDOM",
        "STEP",
    ]
    """ How weights are mapped to their new values

    :type: typing.Literal['LINEAR','CURVE','SHARP','SMOOTH','ROOT','ICON_SPHERECURVE','RANDOM','STEP']
    """

    map_curve: CurveMapping
    """ Custom mapping curve

    :type: CurveMapping
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_object: Object | None
    """ Which object to take texture coordinates from

    :type: Object | None
    """

    mask_tex_mapping: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ Which texture coordinates to use for mapping

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    mask_tex_use_channel: typing.Literal[
        "INT", "RED", "GREEN", "BLUE", "HUE", "SAT", "VAL", "ALPHA"
    ]
    """ Which texture channel to use for masking

    :type: typing.Literal['INT','RED','GREEN','BLUE','HUE','SAT','VAL','ALPHA']
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture | None
    """ Masking texture

    :type: Texture | None
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    remove_threshold: float
    """ Upper bound for a vertex's weight to be removed from the vgroup

    :type: float
    """

    use_add: bool
    """ Add vertices with weight over threshold to vgroup

    :type: bool
    """

    use_remove: bool
    """ Remove vertices with weight below threshold from vgroup

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexWeightMixModifier(Modifier, bpy_struct):
    """Mix the weights of two vertex groups"""

    default_weight_a: float
    """ Default weight a vertex will have if it is not in the first A vgroup

    :type: float
    """

    default_weight_b: float
    """ Default weight a vertex will have if it is not in the second B vgroup

    :type: float
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_object: Object | None
    """ Which object to take texture coordinates from

    :type: Object | None
    """

    mask_tex_mapping: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ Which texture coordinates to use for mapping

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    mask_tex_use_channel: typing.Literal[
        "INT", "RED", "GREEN", "BLUE", "HUE", "SAT", "VAL", "ALPHA"
    ]
    """ Which texture channel to use for masking

    :type: typing.Literal['INT','RED','GREEN','BLUE','HUE','SAT','VAL','ALPHA']
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture | None
    """ Masking texture

    :type: Texture | None
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    mix_mode: typing.Literal["SET", "ADD", "SUB", "MUL", "DIV", "DIF", "AVG"]
    """ How weights from vgroup B affect weights of vgroup A

    :type: typing.Literal['SET','ADD','SUB','MUL','DIV','DIF','AVG']
    """

    mix_set: typing.Literal["ALL", "A", "B", "OR", "AND"]
    """ Which vertices should be affected

    :type: typing.Literal['ALL','A','B','OR','AND']
    """

    vertex_group_a: str
    """ First vertex group name

    :type: str
    """

    vertex_group_b: str
    """ Second vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VertexWeightProximityModifier(Modifier, bpy_struct):
    """Set the weights of vertices in a group from a target object's distance"""

    falloff_type: typing.Literal[
        "LINEAR", "SHARP", "SMOOTH", "ROOT", "ICON_SPHERECURVE", "RANDOM", "STEP"
    ]
    """ How weights are mapped to their new values

    :type: typing.Literal['LINEAR','SHARP','SMOOTH','ROOT','ICON_SPHERECURVE','RANDOM','STEP']
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_object: Object | None
    """ Which object to take texture coordinates from

    :type: Object | None
    """

    mask_tex_mapping: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ Which texture coordinates to use for mapping

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    mask_tex_use_channel: typing.Literal[
        "INT", "RED", "GREEN", "BLUE", "HUE", "SAT", "VAL", "ALPHA"
    ]
    """ Which texture channel to use for masking

    :type: typing.Literal['INT','RED','GREEN','BLUE','HUE','SAT','VAL','ALPHA']
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture | None
    """ Masking texture

    :type: Texture | None
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    max_dist: float
    """ Distance mapping to weight 1.0

    :type: float
    """

    min_dist: float
    """ Distance mapping to weight 0.0

    :type: float
    """

    proximity_geometry: set[typing.Literal["VERTEX", "EDGE", "FACE"]]
    """ Use the shortest computed distance to target object's geometry as weight

    :type: set[typing.Literal['VERTEX','EDGE','FACE']]
    """

    proximity_mode: typing.Literal["OBJECT", "GEOMETRY"]
    """ Which distances to target object to use

    :type: typing.Literal['OBJECT','GEOMETRY']
    """

    target: Object | None
    """ Object to calculate vertices distances from

    :type: Object | None
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VibrationActuator(Actuator, bpy_struct):
    """Actuator to set vibration of a joystick"""

    joy_duration: int
    """ Joystick vibration duration

    :type: int
    """

    joy_index: int
    """ Joystick index

    :type: int
    """

    joy_strength_left: float
    """ Joystick vibration strength for low frequency motor

    :type: float
    """

    joy_strength_right: float
    """ Joystick vibration strength for high frequency motor

    :type: float
    """

    mode: typing.Literal["PLAY", "STOP"]
    """ Joystick vibration mode

    :type: typing.Literal['PLAY','STOP']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class View2D(bpy_struct):
    """Scroll and zoom for a 2D region"""

    def region_to_view(self, x: int | None, y: int | None) -> bpy_prop_array[float]:
        """Transform region coordinates to 2D view

        :param x: x, Region x coordinate
        :type x: int | None
        :param y: y, Region y coordinate
        :type y: int | None
        :return: Result, View coordinates
        :rtype: bpy_prop_array[float]
        """

    def view_to_region(
        self, x: float | None, y: float | None, clip: bool | None = True
    ) -> bpy_prop_array[int]:
        """Transform 2D view coordinates to region

        :param x: x, 2D View x coordinate
        :type x: float | None
        :param y: y, 2D View y coordinate
        :type y: float | None
        :param clip: Clip, Clip coordinates to the visible region
        :type clip: bool | None
        :return: Result, Region coordinates
        :rtype: bpy_prop_array[int]
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VisibilityActuator(Actuator, bpy_struct):
    """Actuator to set visibility and occlusion of the object"""

    apply_to_children: bool
    """ Set all the children of this object to the same visibility/occlusion recursively

    :type: bool
    """

    use_occlusion: bool
    """ Set the object to occlude objects behind it (initialized from the object type in physics button)

    :type: bool
    """

    use_visible: bool
    """ Set the objects visible (initialized from the object render restriction toggle in physics button)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VoronoiTexture(Texture, ID, bpy_struct):
    """Procedural voronoi texture"""

    color_mode: typing.Literal[
        "INTENSITY", "POSITION", "POSITION_OUTLINE", "POSITION_OUTLINE_INTENSITY"
    ]
    """ 

    :type: typing.Literal['INTENSITY','POSITION','POSITION_OUTLINE','POSITION_OUTLINE_INTENSITY']
    """

    distance_metric: typing.Literal[
        "DISTANCE",
        "DISTANCE_SQUARED",
        "MANHATTAN",
        "CHEBYCHEV",
        "MINKOVSKY_HALF",
        "MINKOVSKY_FOUR",
        "MINKOVSKY",
    ]
    """ Algorithm used to calculate distance of sample points to feature points

    :type: typing.Literal['DISTANCE','DISTANCE_SQUARED','MANHATTAN','CHEBYCHEV','MINKOVSKY_HALF','MINKOVSKY_FOUR','MINKOVSKY']
    """

    minkovsky_exponent: float
    """ Minkowski exponent

    :type: float
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_intensity: float
    """ Scales the intensity of the noise

    :type: float
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    weight_1: float
    """ Voronoi feature weight 1

    :type: float
    """

    weight_2: float
    """ Voronoi feature weight 2

    :type: float
    """

    weight_3: float
    """ Voronoi feature weight 3

    :type: float
    """

    weight_4: float
    """ Voronoi feature weight 4

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VoxelData(bpy_struct):
    """Voxel data settings"""

    domain_object: Object | None
    """ Object used as the smoke simulation domain

    :type: Object | None
    """

    extension: typing.Literal["EXTEND", "CLIP", "REPEAT"]
    """ How the texture is extrapolated past its original bounds

    :type: typing.Literal['EXTEND','CLIP','REPEAT']
    """

    file_format: typing.Literal[
        "BLENDER_VOXEL", "RAW_8BIT", "IMAGE_SEQUENCE", "SMOKE", "HAIR"
    ]
    """ Format of the source data set to render

    :type: typing.Literal['BLENDER_VOXEL','RAW_8BIT','IMAGE_SEQUENCE','SMOKE','HAIR']
    """

    filepath: str
    """ The external source data file to use

    :type: str
    """

    hair_data_type: typing.Literal[
        "HAIRDENSITY", "HAIRRESTDENSITY", "HAIRVELOCITY", "HAIRENERGY"
    ]
    """ Simulation value to be used as a texture

    :type: typing.Literal['HAIRDENSITY','HAIRRESTDENSITY','HAIRVELOCITY','HAIRENERGY']
    """

    intensity: float
    """ Multiplier for intensity values

    :type: float
    """

    interpolation: typing.Literal[
        "NEREASTNEIGHBOR",
        "TRILINEAR",
        "QUADRATIC",
        "TRICUBIC_CATROM",
        "TRICUBIC_BSPLINE",
    ]
    """ Method to interpolate/smooth values between voxel cells

    :type: typing.Literal['NEREASTNEIGHBOR','TRILINEAR','QUADRATIC','TRICUBIC_CATROM','TRICUBIC_BSPLINE']
    """

    resolution: bpy_prop_array[int]
    """ Resolution of the voxel grid

    :type: bpy_prop_array[int]
    """

    smoke_data_type: typing.Literal[
        "SMOKEDENSITY", "SMOKEFLAME", "SMOKEHEAT", "SMOKEVEL"
    ]
    """ Simulation value to be used as a texture

    :type: typing.Literal['SMOKEDENSITY','SMOKEFLAME','SMOKEHEAT','SMOKEVEL']
    """

    still_frame: int
    """ The frame number to always use

    :type: int
    """

    use_still_frame: bool
    """ Always render a still frame from the voxel data sequence

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class VoxelDataTexture(Texture, ID, bpy_struct):
    """Settings for the Voxel Data texture"""

    image: Image | None
    """ 

    :type: Image | None
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    voxel_data: VoxelData
    """ The voxel data associated with this texture

    :type: VoxelData
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WalkNavigation(bpy_struct):
    """Walk navigation settings"""

    jump_height: float
    """ Maximum height of a jump

    :type: float
    """

    mouse_speed: float
    """ Speed factor for when looking around, high values mean faster mouse movement

    :type: float
    """

    teleport_time: float
    """ Interval of time warp when teleporting in navigation mode

    :type: float
    """

    use_gravity: bool
    """ Walk with gravity, or free navigate

    :type: bool
    """

    use_mouse_reverse: bool
    """ Reverse the vertical movement of the mouse

    :type: bool
    """

    view_height: float
    """ View distance from the floor when walking

    :type: float
    """

    walk_speed: float
    """ Base speed for walking and flying

    :type: float
    """

    walk_speed_factor: float
    """ Multiplication factor when using the fast or slow modifiers

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WarpModifier(Modifier, bpy_struct):
    """Warp modifier"""

    falloff_curve: CurveMapping
    """ Custom Lamp Falloff Curve

    :type: CurveMapping
    """

    falloff_radius: float
    """ Radius to apply

    :type: float
    """

    falloff_type: typing.Literal[
        "NONE",
        "CURVE",
        "SMOOTH",
        "SPHERE",
        "ROOT",
        "INVERSE_SQUARE",
        "SHARP",
        "LINEAR",
        "CONSTANT",
    ]
    """ 

    :type: typing.Literal['NONE','CURVE','SMOOTH','SPHERE','ROOT','INVERSE_SQUARE','SHARP','LINEAR','CONSTANT']
    """

    object_from: Object | None
    """ Object to transform from

    :type: Object | None
    """

    object_to: Object | None
    """ Object to transform to

    :type: Object | None
    """

    strength: float
    """ 

    :type: float
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    texture_coords: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ 

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    texture_coords_object: Object | None
    """ Object to set the texture coordinates

    :type: Object | None
    """

    use_volume_preserve: bool
    """ Preserve volume when rotations are used

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WaveModifier(Modifier, bpy_struct):
    """Wave effect modifier"""

    damping_time: float
    """ Number of frames in which the wave damps out after it dies

    :type: float
    """

    falloff_radius: float
    """ Distance after which it fades out

    :type: float
    """

    height: float
    """ Height of the wave

    :type: float
    """

    lifetime: float
    """ Lifetime of the wave in frames, zero means infinite

    :type: float
    """

    narrowness: float
    """ Distance between the top and the base of a wave, the higher the value, the more narrow the wave

    :type: float
    """

    speed: float
    """ Speed of the wave, towards the starting point when negative

    :type: float
    """

    start_position_object: Object | None
    """ Object which defines the wave center

    :type: Object | None
    """

    start_position_x: float
    """ X coordinate of the start position

    :type: float
    """

    start_position_y: float
    """ Y coordinate of the start position

    :type: float
    """

    texture: Texture | None
    """ 

    :type: Texture | None
    """

    texture_coords: typing.Literal["LOCAL", "GLOBAL", "OBJECT", "UV"]
    """ 

    :type: typing.Literal['LOCAL','GLOBAL','OBJECT','UV']
    """

    texture_coords_object: Object | None
    """ Object to set the texture coordinates

    :type: Object | None
    """

    time_offset: float
    """ Either the starting frame (for positive speed) or ending frame (for negative speed.)

    :type: float
    """

    use_cyclic: bool
    """ Cyclic wave effect

    :type: bool
    """

    use_normal: bool
    """ Displace along normals

    :type: bool
    """

    use_normal_x: bool
    """ Enable displacement along the X normal

    :type: bool
    """

    use_normal_y: bool
    """ Enable displacement along the Y normal

    :type: bool
    """

    use_normal_z: bool
    """ Enable displacement along the Z normal

    :type: bool
    """

    use_x: bool
    """ X axis motion

    :type: bool
    """

    use_y: bool
    """ Y axis motion

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Vertex group name for modulating the wave

    :type: str
    """

    width: float
    """ Distance between the waves

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WhiteBalanceModifier(SequenceModifier, bpy_struct):
    """White balance modifier for sequence strip"""

    white_value: bpy_prop_array[float]
    """ This color defines white in the strip

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class Window(bpy_struct):
    """Open window"""

    height: int
    """ Window height

    :type: int
    """

    screen: Screen
    """ Active screen showing in the window

    :type: Screen
    """

    stereo_3d_display: Stereo3dDisplay
    """ Settings for stereo 3d display

    :type: Stereo3dDisplay
    """

    width: int
    """ Window width

    :type: int
    """

    x: int
    """ Horizontal location of the window

    :type: int
    """

    y: int
    """ Vertical location of the window

    :type: int
    """

    def cursor_warp(self, x: int | None, y: int | None):
        """Set the cursor position

        :param x:
        :type x: int | None
        :param y:
        :type y: int | None
        """

    def cursor_set(
        self,
        cursor: typing.Literal[
            "DEFAULT",
            "NONE",
            "WAIT",
            "CROSSHAIR",
            "MOVE_X",
            "MOVE_Y",
            "KNIFE",
            "TEXT",
            "PAINT_BRUSH",
            "HAND",
            "SCROLL_X",
            "SCROLL_Y",
            "SCROLL_XY",
            "EYEDROPPER",
        ]
        | None,
    ):
        """Set the cursor

        :param cursor: cursor
        :type cursor: typing.Literal['DEFAULT','NONE','WAIT','CROSSHAIR','MOVE_X','MOVE_Y','KNIFE','TEXT','PAINT_BRUSH','HAND','SCROLL_X','SCROLL_Y','SCROLL_XY','EYEDROPPER'] | None
        """

    def cursor_modal_set(
        self,
        cursor: typing.Literal[
            "DEFAULT",
            "NONE",
            "WAIT",
            "CROSSHAIR",
            "MOVE_X",
            "MOVE_Y",
            "KNIFE",
            "TEXT",
            "PAINT_BRUSH",
            "HAND",
            "SCROLL_X",
            "SCROLL_Y",
            "SCROLL_XY",
            "EYEDROPPER",
        ]
        | None,
    ):
        """Restore the previous cursor after calling cursor_modal_set

        :param cursor: cursor
        :type cursor: typing.Literal['DEFAULT','NONE','WAIT','CROSSHAIR','MOVE_X','MOVE_Y','KNIFE','TEXT','PAINT_BRUSH','HAND','SCROLL_X','SCROLL_Y','SCROLL_XY','EYEDROPPER'] | None
        """

    def cursor_modal_restore(self):
        """cursor_modal_restore"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WindowManager(ID, bpy_struct):
    """Window manager data-block defining open windows and other user interface data"""

    addon_filter: str
    """ Filter add-ons by category

    :type: str
    """

    addon_search: str
    """ Search within the selected filter

    :type: str
    """

    addon_support: set[typing.Literal["OFFICIAL", "COMMUNITY", "TESTING"]]
    """ Display support level

    :type: set[typing.Literal['OFFICIAL','COMMUNITY','TESTING']]
    """

    clipboard: str
    """ 

    :type: str
    """

    keyconfigs: KeyConfigurations
    """ Registered key configurations

    :type: KeyConfigurations
    """

    operators: bpy_prop_collection[Operator]
    """ Operator registry

    :type: bpy_prop_collection[Operator]
    """

    windows: bpy_prop_collection[Window]
    """ Open windows

    :type: bpy_prop_collection[Window]
    """

    @classmethod
    def fileselect_add(cls, operator: Operator | None):
        """Opens a file selector with an operator. The string properties 'filepath', 'filename', 'directory' and a 'files' collection are assigned when present in the operator

        :param operator: Operator to call
        :type operator: Operator | None
        """

    @classmethod
    def modal_handler_add(cls, operator: Operator | None) -> bool:
        """Add a modal handler to the window manager, for the given modal operator (called by invoke() with self, just before returning {'RUNNING_MODAL'})

        :param operator: Operator to call
        :type operator: Operator | None
        :return: Whether adding the handler was successful
        :rtype: bool
        """

    def event_timer_add(
        self, time_step: float | None, window: Window | None = None
    ) -> Timer:
        """Add a timer to the given window, to generate periodic 'TIMER' events

        :param time_step: Time Step, Interval in seconds between timer events
        :type time_step: float | None
        :param window: Window to attach the timer to, or None
        :type window: Window | None
        :return:
        :rtype: Timer
        """

    def event_timer_remove(self, timer: Timer):
        """event_timer_remove

        :param timer:
        :type timer: Timer
        """

    def progress_begin(self, min: float | None, max: float | None):
        """Start progress report

        :param min: min, any value in range [0,9999]
        :type min: float | None
        :param max: max, any value in range [min+1,9998]
        :type max: float | None
        """

    def progress_update(self, value: float | None):
        """Update the progress feedback

        :param value: value, Any value between min and max as set in progress_begin()
        :type value: float | None
        """

    def progress_end(self):
        """Terminate progress report"""

    @classmethod
    def invoke_props_popup(
        cls, operator: Operator | None, event: Event | None
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Operator popup invoke (show operator properties and execute it automatically on changes)

                :param operator: Operator to call
                :type operator: Operator | None
                :param event: Event
                :type event: Event | None
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    @classmethod
    def invoke_props_dialog(
        cls, operator: Operator | None, width: int | None = 300, height: int | None = 20
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Operator dialog (non-autoexec popup) invoke (show operator properties and only execute it on click on OK button)

                :param operator: Operator to call
                :type operator: Operator | None
                :param width: Width of the popup
                :type width: int | None
                :param height: Height of the popup
                :type height: int | None
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    @classmethod
    def invoke_search_popup(cls, operator: Operator | None):
        """Operator search popup invoke which searches values of the operator's `bpy.types.Operator.bl_property` (which must be an EnumProperty), executing it on confirmation

        :param operator: Operator to call
        :type operator: Operator | None
        """

    @classmethod
    def invoke_popup(
        cls, operator: Operator | None, width: int | None = 300, height: int | None = 20
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Operator popup invoke (only shows operator's properties, without executing it)

                :param operator: Operator to call
                :type operator: Operator | None
                :param width: Width of the popup
                :type width: int | None
                :param height: Height of the popup
                :type height: int | None
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    @classmethod
    def invoke_confirm(
        cls, operator: Operator | None, event: Event | None
    ) -> set[
        typing.Literal[
            "RUNNING_MODAL", "CANCELLED", "FINISHED", "PASS_THROUGH", "INTERFACE"
        ]
    ]:
        """Operator confirmation popup (only to let user confirm the execution, no operator properties shown)

                :param operator: Operator to call
                :type operator: Operator | None
                :param event: Event
                :type event: Event | None
                :return: result

        RUNNING_MODAL Running Modal, Keep the operator running with blender.

        CANCELLED Cancelled, When no action has been taken, operator exits.

        FINISHED Finished, When the operator is complete, operator exits.

        PASS_THROUGH Pass Through, Do nothing and pass the event on.

        INTERFACE Interface, Handled but not executed (popup menus).
                :rtype: set[typing.Literal['RUNNING_MODAL','CANCELLED','FINISHED','PASS_THROUGH','INTERFACE']]
        """

    @classmethod
    def popmenu_begin__internal(
        cls,
        title: str,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
    ) -> UIPopupMenu:
        """popmenu_begin__internal

        :param title:
        :type title: str
        :param icon: icon
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :return:
        :rtype: UIPopupMenu
        """

    @classmethod
    def popmenu_end__internal(cls, menu: UIPopupMenu = None):
        """popmenu_end__internal

        :param menu:
        :type menu: UIPopupMenu
        """

    @classmethod
    def piemenu_begin__internal(
        cls,
        title: str,
        icon: typing.Literal[
            "NONE",
            "QUESTION",
            "ERROR",
            "CANCEL",
            "TRIA_RIGHT",
            "TRIA_DOWN",
            "TRIA_LEFT",
            "TRIA_UP",
            "ARROW_LEFTRIGHT",
            "PLUS",
            "DISCLOSURE_TRI_DOWN",
            "DISCLOSURE_TRI_RIGHT",
            "RADIOBUT_OFF",
            "RADIOBUT_ON",
            "MENU_PANEL",
            "BLENDER",
            "GRIP",
            "DOT",
            "COLLAPSEMENU",
            "X",
            "GO_LEFT",
            "PLUG",
            "UI",
            "NODE",
            "NODE_SEL",
            "FULLSCREEN",
            "SPLITSCREEN",
            "RIGHTARROW_THIN",
            "BORDERMOVE",
            "VIEWZOOM",
            "ZOOMIN",
            "ZOOMOUT",
            "PANEL_CLOSE",
            "COPY_ID",
            "EYEDROPPER",
            "LINK_AREA",
            "AUTO",
            "CHECKBOX_DEHLT",
            "CHECKBOX_HLT",
            "UNLOCKED",
            "LOCKED",
            "UNPINNED",
            "PINNED",
            "SCREEN_BACK",
            "RIGHTARROW",
            "DOWNARROW_HLT",
            "DOTSUP",
            "DOTSDOWN",
            "LINK",
            "INLINK",
            "PLUGIN",
            "HELP",
            "GHOST_ENABLED",
            "COLOR",
            "LINKED",
            "UNLINKED",
            "HAND",
            "ZOOM_ALL",
            "ZOOM_SELECTED",
            "ZOOM_PREVIOUS",
            "ZOOM_IN",
            "ZOOM_OUT",
            "RENDER_REGION",
            "BORDER_RECT",
            "BORDER_LASSO",
            "FREEZE",
            "STYLUS_PRESSURE",
            "GHOST_DISABLED",
            "NEW",
            "FILE_TICK",
            "QUIT",
            "URL",
            "RECOVER_LAST",
            "FULLSCREEN_ENTER",
            "FULLSCREEN_EXIT",
            "BLANK1",
            "LAMP",
            "MATERIAL",
            "TEXTURE",
            "ANIM",
            "WORLD",
            "SCENE",
            "EDIT",
            "GAME",
            "RADIO",
            "SCRIPT",
            "PARTICLES",
            "PHYSICS",
            "SPEAKER",
            "TEXTURE_SHADED",
            "VIEW3D",
            "IPO",
            "OOPS",
            "BUTS",
            "FILESEL",
            "IMAGE_COL",
            "INFO",
            "SEQUENCE",
            "TEXT",
            "IMASEL",
            "SOUND",
            "ACTION",
            "NLA",
            "SCRIPTWIN",
            "TIME",
            "NODETREE",
            "LOGIC",
            "CONSOLE",
            "PREFERENCES",
            "CLIP",
            "ASSET_MANAGER",
            "OBJECT_DATAMODE",
            "EDITMODE_HLT",
            "FACESEL_HLT",
            "VPAINT_HLT",
            "TPAINT_HLT",
            "WPAINT_HLT",
            "SCULPTMODE_HLT",
            "POSE_HLT",
            "PARTICLEMODE",
            "LIGHTPAINT",
            "SCENE_DATA",
            "RENDERLAYERS",
            "WORLD_DATA",
            "OBJECT_DATA",
            "MESH_DATA",
            "CURVE_DATA",
            "META_DATA",
            "LATTICE_DATA",
            "LAMP_DATA",
            "MATERIAL_DATA",
            "TEXTURE_DATA",
            "ANIM_DATA",
            "CAMERA_DATA",
            "PARTICLE_DATA",
            "LIBRARY_DATA_DIRECT",
            "GROUP",
            "ARMATURE_DATA",
            "POSE_DATA",
            "BONE_DATA",
            "CONSTRAINT",
            "SHAPEKEY_DATA",
            "CONSTRAINT_BONE",
            "CAMERA_STEREO",
            "PACKAGE",
            "UGLYPACKAGE",
            "BRUSH_DATA",
            "IMAGE_DATA",
            "FILE",
            "FCURVE",
            "FONT_DATA",
            "RENDER_RESULT",
            "SURFACE_DATA",
            "EMPTY_DATA",
            "SETTINGS",
            "RENDER_ANIMATION",
            "RENDER_STILL",
            "LIBRARY_DATA_BROKEN",
            "BOIDS",
            "STRANDS",
            "LIBRARY_DATA_INDIRECT",
            "GREASEPENCIL",
            "LINE_DATA",
            "GROUP_BONE",
            "GROUP_VERTEX",
            "GROUP_VCOL",
            "GROUP_UVS",
            "RNA",
            "RNA_ADD",
            "OUTLINER_OB_EMPTY",
            "OUTLINER_OB_MESH",
            "OUTLINER_OB_CURVE",
            "OUTLINER_OB_LATTICE",
            "OUTLINER_OB_META",
            "OUTLINER_OB_LAMP",
            "OUTLINER_OB_CAMERA",
            "OUTLINER_OB_ARMATURE",
            "OUTLINER_OB_FONT",
            "OUTLINER_OB_SURFACE",
            "OUTLINER_OB_SPEAKER",
            "OUTLINER_OB_FORCE_FIELD",
            "OUTLINER_OB_GROUP_INSTANCE",
            "RESTRICT_COLOR_OFF",
            "RESTRICT_COLOR_ON",
            "RESTRICT_VIEW_OFF",
            "RESTRICT_VIEW_ON",
            "RESTRICT_SELECT_OFF",
            "RESTRICT_SELECT_ON",
            "RESTRICT_RENDER_OFF",
            "RESTRICT_RENDER_ON",
            "OUTLINER_DATA_EMPTY",
            "OUTLINER_DATA_MESH",
            "OUTLINER_DATA_CURVE",
            "OUTLINER_DATA_LATTICE",
            "OUTLINER_DATA_META",
            "OUTLINER_DATA_LAMP",
            "OUTLINER_DATA_CAMERA",
            "OUTLINER_DATA_ARMATURE",
            "OUTLINER_DATA_FONT",
            "OUTLINER_DATA_SURFACE",
            "OUTLINER_DATA_SPEAKER",
            "OUTLINER_DATA_POSE",
            "MESH_PLANE",
            "MESH_CUBE",
            "MESH_CIRCLE",
            "MESH_UVSPHERE",
            "MESH_ICOSPHERE",
            "MESH_GRID",
            "MESH_MONKEY",
            "MESH_CYLINDER",
            "MESH_TORUS",
            "MESH_CONE",
            "MESH_CAPSULE",
            "LAMP_POINT",
            "LAMP_SUN",
            "LAMP_SPOT",
            "LAMP_HEMI",
            "LAMP_AREA",
            "META_EMPTY",
            "META_PLANE",
            "META_CUBE",
            "META_BALL",
            "META_ELLIPSOID",
            "META_CAPSULE",
            "SURFACE_NCURVE",
            "SURFACE_NCIRCLE",
            "SURFACE_NSURFACE",
            "SURFACE_NCYLINDER",
            "SURFACE_NSPHERE",
            "SURFACE_NTORUS",
            "CURVE_BEZCURVE",
            "CURVE_BEZCIRCLE",
            "CURVE_NCURVE",
            "CURVE_NCIRCLE",
            "CURVE_PATH",
            "COLOR_RED",
            "COLOR_GREEN",
            "COLOR_BLUE",
            "TRIA_RIGHT_BAR",
            "TRIA_DOWN_BAR",
            "TRIA_LEFT_BAR",
            "TRIA_UP_BAR",
            "FORCE_FORCE",
            "FORCE_WIND",
            "FORCE_VORTEX",
            "FORCE_MAGNETIC",
            "FORCE_HARMONIC",
            "FORCE_CHARGE",
            "FORCE_LENNARDJONES",
            "FORCE_TEXTURE",
            "FORCE_CURVE",
            "FORCE_BOID",
            "FORCE_TURBULENCE",
            "FORCE_DRAG",
            "FORCE_SMOKEFLOW",
            "NODE_INSERT_ON",
            "NODE_INSERT_OFF",
            "MODIFIER",
            "MOD_WAVE",
            "MOD_BUILD",
            "MOD_DECIM",
            "MOD_MIRROR",
            "MOD_SOFT",
            "MOD_SUBSURF",
            "HOOK",
            "MOD_PHYSICS",
            "MOD_PARTICLES",
            "MOD_BOOLEAN",
            "MOD_EDGESPLIT",
            "MOD_ARRAY",
            "MOD_UVPROJECT",
            "MOD_DISPLACE",
            "MOD_CURVE",
            "MOD_LATTICE",
            "CONSTRAINT_DATA",
            "MOD_ARMATURE",
            "MOD_SHRINKWRAP",
            "MOD_CAST",
            "MOD_MESHDEFORM",
            "MOD_BEVEL",
            "MOD_SMOOTH",
            "MOD_SIMPLEDEFORM",
            "MOD_MASK",
            "MOD_CLOTH",
            "MOD_EXPLODE",
            "MOD_FLUIDSIM",
            "MOD_MULTIRES",
            "MOD_SMOKE",
            "MOD_SOLIDIFY",
            "MOD_SCREW",
            "MOD_VERTEX_WEIGHT",
            "MOD_DYNAMICPAINT",
            "MOD_REMESH",
            "MOD_OCEAN",
            "MOD_WARP",
            "MOD_SKIN",
            "MOD_TRIANGULATE",
            "MOD_WIREFRAME",
            "MOD_DATA_TRANSFER",
            "MOD_NORMALEDIT",
            "REC",
            "PLAY",
            "FF",
            "REW",
            "PAUSE",
            "PREV_KEYFRAME",
            "NEXT_KEYFRAME",
            "PLAY_AUDIO",
            "PLAY_REVERSE",
            "PREVIEW_RANGE",
            "ACTION_TWEAK",
            "PMARKER_ACT",
            "PMARKER_SEL",
            "PMARKER",
            "MARKER_HLT",
            "MARKER",
            "SPACE2",
            "SPACE3",
            "KEYINGSET",
            "KEY_DEHLT",
            "KEY_HLT",
            "MUTE_IPO_OFF",
            "MUTE_IPO_ON",
            "VISIBLE_IPO_OFF",
            "VISIBLE_IPO_ON",
            "DRIVER",
            "SOLO_OFF",
            "SOLO_ON",
            "FRAME_PREV",
            "FRAME_NEXT",
            "NLA_PUSHDOWN",
            "IPO_CONSTANT",
            "IPO_LINEAR",
            "IPO_BEZIER",
            "IPO_SINE",
            "IPO_QUAD",
            "IPO_CUBIC",
            "IPO_QUART",
            "IPO_QUINT",
            "IPO_EXPO",
            "IPO_CIRC",
            "IPO_BOUNCE",
            "IPO_ELASTIC",
            "IPO_BACK",
            "IPO_EASE_IN",
            "IPO_EASE_OUT",
            "IPO_EASE_IN_OUT",
            "NORMALIZE_FCURVES",
            "VERTEXSEL",
            "EDGESEL",
            "FACESEL",
            "LOOPSEL",
            "ROTATE",
            "CURSOR",
            "ROTATECOLLECTION",
            "ROTATECENTER",
            "ROTACTIVE",
            "ALIGN",
            "SMOOTHCURVE",
            "SPHERECURVE",
            "ROOTCURVE",
            "SHARPCURVE",
            "LINCURVE",
            "NOCURVE",
            "RNDCURVE",
            "PROP_OFF",
            "PROP_ON",
            "PROP_CON",
            "SCULPT_DYNTOPO",
            "PARTICLE_POINT",
            "PARTICLE_TIP",
            "PARTICLE_PATH",
            "MAN_TRANS",
            "MAN_ROT",
            "MAN_SCALE",
            "MANIPUL",
            "SNAP_OFF",
            "SNAP_ON",
            "SNAP_NORMAL",
            "SNAP_GRID",
            "SNAP_VERTEX",
            "SNAP_EDGE",
            "SNAP_FACE",
            "SNAP_VOLUME",
            "SNAP_INCREMENT",
            "STICKY_UVS_LOC",
            "STICKY_UVS_DISABLE",
            "STICKY_UVS_VERT",
            "CLIPUV_DEHLT",
            "CLIPUV_HLT",
            "SNAP_PEEL_OBJECT",
            "GRID",
            "PASTEDOWN",
            "COPYDOWN",
            "PASTEFLIPUP",
            "PASTEFLIPDOWN",
            "SNAP_SURFACE",
            "AUTOMERGE_ON",
            "AUTOMERGE_OFF",
            "RETOPO",
            "UV_VERTEXSEL",
            "UV_EDGESEL",
            "UV_FACESEL",
            "UV_ISLANDSEL",
            "UV_SYNC_SELECT",
            "BBOX",
            "WIRE",
            "SOLID",
            "SMOOTH",
            "POTATO",
            "ORTHO",
            "LOCKVIEW_OFF",
            "LOCKVIEW_ON",
            "AXIS_SIDE",
            "AXIS_FRONT",
            "AXIS_TOP",
            "NDOF_DOM",
            "NDOF_TURN",
            "NDOF_FLY",
            "NDOF_TRANS",
            "LAYER_USED",
            "LAYER_ACTIVE",
            "SORTALPHA",
            "SORTBYEXT",
            "SORTTIME",
            "SORTSIZE",
            "LONGDISPLAY",
            "SHORTDISPLAY",
            "GHOST",
            "IMGDISPLAY",
            "SAVE_AS",
            "SAVE_COPY",
            "BOOKMARKS",
            "FONTPREVIEW",
            "FILTER",
            "NEWFOLDER",
            "OPEN_RECENT",
            "FILE_PARENT",
            "FILE_REFRESH",
            "FILE_FOLDER",
            "FILE_BLANK",
            "FILE_BLEND",
            "FILE_IMAGE",
            "FILE_MOVIE",
            "FILE_SCRIPT",
            "FILE_SOUND",
            "FILE_FONT",
            "FILE_TEXT",
            "RECOVER_AUTO",
            "SAVE_PREFS",
            "LINK_BLEND",
            "APPEND_BLEND",
            "IMPORT",
            "EXPORT",
            "EXTERNAL_DATA",
            "LOAD_FACTORY",
            "LOOP_BACK",
            "LOOP_FORWARDS",
            "BACK",
            "FORWARD",
            "FILE_HIDDEN",
            "FILE_BACKUP",
            "DISK_DRIVE",
            "MATPLANE",
            "MATSPHERE",
            "MATCUBE",
            "MONKEY",
            "HAIR",
            "ALIASED",
            "ANTIALIASED",
            "MAT_SPHERE_SKY",
            "WORDWRAP_OFF",
            "WORDWRAP_ON",
            "SYNTAX_OFF",
            "SYNTAX_ON",
            "LINENUMBERS_OFF",
            "LINENUMBERS_ON",
            "SCRIPTPLUGINS",
            "SEQ_SEQUENCER",
            "SEQ_PREVIEW",
            "SEQ_LUMA_WAVEFORM",
            "SEQ_CHROMA_SCOPE",
            "SEQ_HISTOGRAM",
            "SEQ_SPLITVIEW",
            "IMAGE_RGB",
            "IMAGE_RGB_ALPHA",
            "IMAGE_ALPHA",
            "IMAGE_ZDEPTH",
            "IMAGEFILE",
            "BRUSH_ADD",
            "BRUSH_BLOB",
            "BRUSH_BLUR",
            "BRUSH_CLAY",
            "BRUSH_CLAY_STRIPS",
            "BRUSH_CLONE",
            "BRUSH_CREASE",
            "BRUSH_DARKEN",
            "BRUSH_FILL",
            "BRUSH_FLATTEN",
            "BRUSH_GRAB",
            "BRUSH_INFLATE",
            "BRUSH_LAYER",
            "BRUSH_LIGHTEN",
            "BRUSH_MASK",
            "BRUSH_MIX",
            "BRUSH_MULTIPLY",
            "BRUSH_NUDGE",
            "BRUSH_PINCH",
            "BRUSH_SCRAPE",
            "BRUSH_SCULPT_DRAW",
            "BRUSH_SMEAR",
            "BRUSH_SMOOTH",
            "BRUSH_SNAKE_HOOK",
            "BRUSH_SOFTEN",
            "BRUSH_SUBTRACT",
            "BRUSH_TEXDRAW",
            "BRUSH_TEXFILL",
            "BRUSH_TEXMASK",
            "BRUSH_THUMB",
            "BRUSH_ROTATE",
            "BRUSH_VERTEXDRAW",
            "MATCAP_01",
            "MATCAP_02",
            "MATCAP_03",
            "MATCAP_04",
            "MATCAP_05",
            "MATCAP_06",
            "MATCAP_07",
            "MATCAP_08",
            "MATCAP_09",
            "MATCAP_10",
            "MATCAP_11",
            "MATCAP_12",
            "MATCAP_13",
            "MATCAP_14",
            "MATCAP_15",
            "MATCAP_16",
            "MATCAP_17",
            "MATCAP_18",
            "MATCAP_19",
            "MATCAP_20",
            "MATCAP_21",
            "MATCAP_22",
            "MATCAP_23",
            "MATCAP_24",
            "SMALL_TRI_RIGHT_VEC",
            "KEYTYPE_KEYFRAME_VEC",
            "KEYTYPE_BREAKDOWN_VEC",
            "KEYTYPE_EXTREME_VEC",
            "KEYTYPE_JITTER_VEC",
            "KEYTYPE_MOVING_HOLD_VEC",
            "COLORSET_01_VEC",
            "COLORSET_02_VEC",
            "COLORSET_03_VEC",
            "COLORSET_04_VEC",
            "COLORSET_05_VEC",
            "COLORSET_06_VEC",
            "COLORSET_07_VEC",
            "COLORSET_08_VEC",
            "COLORSET_09_VEC",
            "COLORSET_10_VEC",
            "COLORSET_11_VEC",
            "COLORSET_12_VEC",
            "COLORSET_13_VEC",
            "COLORSET_14_VEC",
            "COLORSET_15_VEC",
            "COLORSET_16_VEC",
            "COLORSET_17_VEC",
            "COLORSET_18_VEC",
            "COLORSET_19_VEC",
            "COLORSET_20_VEC",
        ]
        | None = "NONE",
        event: Event = None,
    ) -> UIPieMenu:
        """piemenu_begin__internal

        :param title:
        :type title: str
        :param icon: icon
        :type icon: typing.Literal['NONE','QUESTION','ERROR','CANCEL','TRIA_RIGHT','TRIA_DOWN','TRIA_LEFT','TRIA_UP','ARROW_LEFTRIGHT','PLUS','DISCLOSURE_TRI_DOWN','DISCLOSURE_TRI_RIGHT','RADIOBUT_OFF','RADIOBUT_ON','MENU_PANEL','BLENDER','GRIP','DOT','COLLAPSEMENU','X','GO_LEFT','PLUG','UI','NODE','NODE_SEL','FULLSCREEN','SPLITSCREEN','RIGHTARROW_THIN','BORDERMOVE','VIEWZOOM','ZOOMIN','ZOOMOUT','PANEL_CLOSE','COPY_ID','EYEDROPPER','LINK_AREA','AUTO','CHECKBOX_DEHLT','CHECKBOX_HLT','UNLOCKED','LOCKED','UNPINNED','PINNED','SCREEN_BACK','RIGHTARROW','DOWNARROW_HLT','DOTSUP','DOTSDOWN','LINK','INLINK','PLUGIN','HELP','GHOST_ENABLED','COLOR','LINKED','UNLINKED','HAND','ZOOM_ALL','ZOOM_SELECTED','ZOOM_PREVIOUS','ZOOM_IN','ZOOM_OUT','RENDER_REGION','BORDER_RECT','BORDER_LASSO','FREEZE','STYLUS_PRESSURE','GHOST_DISABLED','NEW','FILE_TICK','QUIT','URL','RECOVER_LAST','FULLSCREEN_ENTER','FULLSCREEN_EXIT','BLANK1','LAMP','MATERIAL','TEXTURE','ANIM','WORLD','SCENE','EDIT','GAME','RADIO','SCRIPT','PARTICLES','PHYSICS','SPEAKER','TEXTURE_SHADED','VIEW3D','IPO','OOPS','BUTS','FILESEL','IMAGE_COL','INFO','SEQUENCE','TEXT','IMASEL','SOUND','ACTION','NLA','SCRIPTWIN','TIME','NODETREE','LOGIC','CONSOLE','PREFERENCES','CLIP','ASSET_MANAGER','OBJECT_DATAMODE','EDITMODE_HLT','FACESEL_HLT','VPAINT_HLT','TPAINT_HLT','WPAINT_HLT','SCULPTMODE_HLT','POSE_HLT','PARTICLEMODE','LIGHTPAINT','SCENE_DATA','RENDERLAYERS','WORLD_DATA','OBJECT_DATA','MESH_DATA','CURVE_DATA','META_DATA','LATTICE_DATA','LAMP_DATA','MATERIAL_DATA','TEXTURE_DATA','ANIM_DATA','CAMERA_DATA','PARTICLE_DATA','LIBRARY_DATA_DIRECT','GROUP','ARMATURE_DATA','POSE_DATA','BONE_DATA','CONSTRAINT','SHAPEKEY_DATA','CONSTRAINT_BONE','CAMERA_STEREO','PACKAGE','UGLYPACKAGE','BRUSH_DATA','IMAGE_DATA','FILE','FCURVE','FONT_DATA','RENDER_RESULT','SURFACE_DATA','EMPTY_DATA','SETTINGS','RENDER_ANIMATION','RENDER_STILL','LIBRARY_DATA_BROKEN','BOIDS','STRANDS','LIBRARY_DATA_INDIRECT','GREASEPENCIL','LINE_DATA','GROUP_BONE','GROUP_VERTEX','GROUP_VCOL','GROUP_UVS','RNA','RNA_ADD','OUTLINER_OB_EMPTY','OUTLINER_OB_MESH','OUTLINER_OB_CURVE','OUTLINER_OB_LATTICE','OUTLINER_OB_META','OUTLINER_OB_LAMP','OUTLINER_OB_CAMERA','OUTLINER_OB_ARMATURE','OUTLINER_OB_FONT','OUTLINER_OB_SURFACE','OUTLINER_OB_SPEAKER','OUTLINER_OB_FORCE_FIELD','OUTLINER_OB_GROUP_INSTANCE','RESTRICT_COLOR_OFF','RESTRICT_COLOR_ON','RESTRICT_VIEW_OFF','RESTRICT_VIEW_ON','RESTRICT_SELECT_OFF','RESTRICT_SELECT_ON','RESTRICT_RENDER_OFF','RESTRICT_RENDER_ON','OUTLINER_DATA_EMPTY','OUTLINER_DATA_MESH','OUTLINER_DATA_CURVE','OUTLINER_DATA_LATTICE','OUTLINER_DATA_META','OUTLINER_DATA_LAMP','OUTLINER_DATA_CAMERA','OUTLINER_DATA_ARMATURE','OUTLINER_DATA_FONT','OUTLINER_DATA_SURFACE','OUTLINER_DATA_SPEAKER','OUTLINER_DATA_POSE','MESH_PLANE','MESH_CUBE','MESH_CIRCLE','MESH_UVSPHERE','MESH_ICOSPHERE','MESH_GRID','MESH_MONKEY','MESH_CYLINDER','MESH_TORUS','MESH_CONE','MESH_CAPSULE','LAMP_POINT','LAMP_SUN','LAMP_SPOT','LAMP_HEMI','LAMP_AREA','META_EMPTY','META_PLANE','META_CUBE','META_BALL','META_ELLIPSOID','META_CAPSULE','SURFACE_NCURVE','SURFACE_NCIRCLE','SURFACE_NSURFACE','SURFACE_NCYLINDER','SURFACE_NSPHERE','SURFACE_NTORUS','CURVE_BEZCURVE','CURVE_BEZCIRCLE','CURVE_NCURVE','CURVE_NCIRCLE','CURVE_PATH','COLOR_RED','COLOR_GREEN','COLOR_BLUE','TRIA_RIGHT_BAR','TRIA_DOWN_BAR','TRIA_LEFT_BAR','TRIA_UP_BAR','FORCE_FORCE','FORCE_WIND','FORCE_VORTEX','FORCE_MAGNETIC','FORCE_HARMONIC','FORCE_CHARGE','FORCE_LENNARDJONES','FORCE_TEXTURE','FORCE_CURVE','FORCE_BOID','FORCE_TURBULENCE','FORCE_DRAG','FORCE_SMOKEFLOW','NODE_INSERT_ON','NODE_INSERT_OFF','MODIFIER','MOD_WAVE','MOD_BUILD','MOD_DECIM','MOD_MIRROR','MOD_SOFT','MOD_SUBSURF','HOOK','MOD_PHYSICS','MOD_PARTICLES','MOD_BOOLEAN','MOD_EDGESPLIT','MOD_ARRAY','MOD_UVPROJECT','MOD_DISPLACE','MOD_CURVE','MOD_LATTICE','CONSTRAINT_DATA','MOD_ARMATURE','MOD_SHRINKWRAP','MOD_CAST','MOD_MESHDEFORM','MOD_BEVEL','MOD_SMOOTH','MOD_SIMPLEDEFORM','MOD_MASK','MOD_CLOTH','MOD_EXPLODE','MOD_FLUIDSIM','MOD_MULTIRES','MOD_SMOKE','MOD_SOLIDIFY','MOD_SCREW','MOD_VERTEX_WEIGHT','MOD_DYNAMICPAINT','MOD_REMESH','MOD_OCEAN','MOD_WARP','MOD_SKIN','MOD_TRIANGULATE','MOD_WIREFRAME','MOD_DATA_TRANSFER','MOD_NORMALEDIT','REC','PLAY','FF','REW','PAUSE','PREV_KEYFRAME','NEXT_KEYFRAME','PLAY_AUDIO','PLAY_REVERSE','PREVIEW_RANGE','ACTION_TWEAK','PMARKER_ACT','PMARKER_SEL','PMARKER','MARKER_HLT','MARKER','SPACE2','SPACE3','KEYINGSET','KEY_DEHLT','KEY_HLT','MUTE_IPO_OFF','MUTE_IPO_ON','VISIBLE_IPO_OFF','VISIBLE_IPO_ON','DRIVER','SOLO_OFF','SOLO_ON','FRAME_PREV','FRAME_NEXT','NLA_PUSHDOWN','IPO_CONSTANT','IPO_LINEAR','IPO_BEZIER','IPO_SINE','IPO_QUAD','IPO_CUBIC','IPO_QUART','IPO_QUINT','IPO_EXPO','IPO_CIRC','IPO_BOUNCE','IPO_ELASTIC','IPO_BACK','IPO_EASE_IN','IPO_EASE_OUT','IPO_EASE_IN_OUT','NORMALIZE_FCURVES','VERTEXSEL','EDGESEL','FACESEL','LOOPSEL','ROTATE','CURSOR','ROTATECOLLECTION','ROTATECENTER','ROTACTIVE','ALIGN','SMOOTHCURVE','SPHERECURVE','ROOTCURVE','SHARPCURVE','LINCURVE','NOCURVE','RNDCURVE','PROP_OFF','PROP_ON','PROP_CON','SCULPT_DYNTOPO','PARTICLE_POINT','PARTICLE_TIP','PARTICLE_PATH','MAN_TRANS','MAN_ROT','MAN_SCALE','MANIPUL','SNAP_OFF','SNAP_ON','SNAP_NORMAL','SNAP_GRID','SNAP_VERTEX','SNAP_EDGE','SNAP_FACE','SNAP_VOLUME','SNAP_INCREMENT','STICKY_UVS_LOC','STICKY_UVS_DISABLE','STICKY_UVS_VERT','CLIPUV_DEHLT','CLIPUV_HLT','SNAP_PEEL_OBJECT','GRID','PASTEDOWN','COPYDOWN','PASTEFLIPUP','PASTEFLIPDOWN','SNAP_SURFACE','AUTOMERGE_ON','AUTOMERGE_OFF','RETOPO','UV_VERTEXSEL','UV_EDGESEL','UV_FACESEL','UV_ISLANDSEL','UV_SYNC_SELECT','BBOX','WIRE','SOLID','SMOOTH','POTATO','ORTHO','LOCKVIEW_OFF','LOCKVIEW_ON','AXIS_SIDE','AXIS_FRONT','AXIS_TOP','NDOF_DOM','NDOF_TURN','NDOF_FLY','NDOF_TRANS','LAYER_USED','LAYER_ACTIVE','SORTALPHA','SORTBYEXT','SORTTIME','SORTSIZE','LONGDISPLAY','SHORTDISPLAY','GHOST','IMGDISPLAY','SAVE_AS','SAVE_COPY','BOOKMARKS','FONTPREVIEW','FILTER','NEWFOLDER','OPEN_RECENT','FILE_PARENT','FILE_REFRESH','FILE_FOLDER','FILE_BLANK','FILE_BLEND','FILE_IMAGE','FILE_MOVIE','FILE_SCRIPT','FILE_SOUND','FILE_FONT','FILE_TEXT','RECOVER_AUTO','SAVE_PREFS','LINK_BLEND','APPEND_BLEND','IMPORT','EXPORT','EXTERNAL_DATA','LOAD_FACTORY','LOOP_BACK','LOOP_FORWARDS','BACK','FORWARD','FILE_HIDDEN','FILE_BACKUP','DISK_DRIVE','MATPLANE','MATSPHERE','MATCUBE','MONKEY','HAIR','ALIASED','ANTIALIASED','MAT_SPHERE_SKY','WORDWRAP_OFF','WORDWRAP_ON','SYNTAX_OFF','SYNTAX_ON','LINENUMBERS_OFF','LINENUMBERS_ON','SCRIPTPLUGINS','SEQ_SEQUENCER','SEQ_PREVIEW','SEQ_LUMA_WAVEFORM','SEQ_CHROMA_SCOPE','SEQ_HISTOGRAM','SEQ_SPLITVIEW','IMAGE_RGB','IMAGE_RGB_ALPHA','IMAGE_ALPHA','IMAGE_ZDEPTH','IMAGEFILE','BRUSH_ADD','BRUSH_BLOB','BRUSH_BLUR','BRUSH_CLAY','BRUSH_CLAY_STRIPS','BRUSH_CLONE','BRUSH_CREASE','BRUSH_DARKEN','BRUSH_FILL','BRUSH_FLATTEN','BRUSH_GRAB','BRUSH_INFLATE','BRUSH_LAYER','BRUSH_LIGHTEN','BRUSH_MASK','BRUSH_MIX','BRUSH_MULTIPLY','BRUSH_NUDGE','BRUSH_PINCH','BRUSH_SCRAPE','BRUSH_SCULPT_DRAW','BRUSH_SMEAR','BRUSH_SMOOTH','BRUSH_SNAKE_HOOK','BRUSH_SOFTEN','BRUSH_SUBTRACT','BRUSH_TEXDRAW','BRUSH_TEXFILL','BRUSH_TEXMASK','BRUSH_THUMB','BRUSH_ROTATE','BRUSH_VERTEXDRAW','MATCAP_01','MATCAP_02','MATCAP_03','MATCAP_04','MATCAP_05','MATCAP_06','MATCAP_07','MATCAP_08','MATCAP_09','MATCAP_10','MATCAP_11','MATCAP_12','MATCAP_13','MATCAP_14','MATCAP_15','MATCAP_16','MATCAP_17','MATCAP_18','MATCAP_19','MATCAP_20','MATCAP_21','MATCAP_22','MATCAP_23','MATCAP_24','SMALL_TRI_RIGHT_VEC','KEYTYPE_KEYFRAME_VEC','KEYTYPE_BREAKDOWN_VEC','KEYTYPE_EXTREME_VEC','KEYTYPE_JITTER_VEC','KEYTYPE_MOVING_HOLD_VEC','COLORSET_01_VEC','COLORSET_02_VEC','COLORSET_03_VEC','COLORSET_04_VEC','COLORSET_05_VEC','COLORSET_06_VEC','COLORSET_07_VEC','COLORSET_08_VEC','COLORSET_09_VEC','COLORSET_10_VEC','COLORSET_11_VEC','COLORSET_12_VEC','COLORSET_13_VEC','COLORSET_14_VEC','COLORSET_15_VEC','COLORSET_16_VEC','COLORSET_17_VEC','COLORSET_18_VEC','COLORSET_19_VEC','COLORSET_20_VEC'] | None
        :param event:
        :type event: Event
        :return:
        :rtype: UIPieMenu
        """

    @classmethod
    def piemenu_end__internal(cls, menu: UIPieMenu = None):
        """piemenu_end__internal

        :param menu:
        :type menu: UIPieMenu
        """

    def popup_menu(self, draw_func, title="", icon="NONE"):
        """Popup menus can be useful for creating menus without having to register menu classes.Note that they will not block the scripts execution, so the caller can't wait for user input.

        :param draw_func:
        :param title:
        :param icon:
        """

    def popup_menu_pie(self, event, draw_func, title="", icon="NONE"):
        """

        :param event:
        :param draw_func:
        :param title:
        :param icon:
        """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WipeSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a wipe transition"""

    angle: float
    """ Edge angle

    :type: float
    """

    blur_width: float
    """ Width of the blur edge, in percentage relative to the image size

    :type: float
    """

    direction: typing.Literal["OUT", "IN"]
    """ Wipe direction

    :type: typing.Literal['OUT','IN']
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    transition_type: typing.Literal["SINGLE", "DOUBLE", "IRIS", "CLOCK"]
    """ 

    :type: typing.Literal['SINGLE','DOUBLE','IRIS','CLOCK']
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WireframeModifier(Modifier, bpy_struct):
    """Wireframe effect modifier"""

    crease_weight: float
    """ Crease weight (if active)

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    material_offset: int
    """ Offset material index of generated faces

    :type: int
    """

    offset: float
    """ Offset the thickness from the center

    :type: float
    """

    thickness: float
    """ Thickness factor

    :type: float
    """

    thickness_vertex_group: float
    """ Thickness factor to use for zero vertex group influence

    :type: float
    """

    use_boundary: bool
    """ Support face boundaries

    :type: bool
    """

    use_crease: bool
    """ Crease hub edges for improved subsurf

    :type: bool
    """

    use_even_offset: bool
    """ Scale the offset to give more even thickness

    :type: bool
    """

    use_relative_offset: bool
    """ Scale the offset by surrounding geometry

    :type: bool
    """

    use_replace: bool
    """ Remove original geometry

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selecting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WoodTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: typing.Literal[
        "BLENDER_ORIGINAL",
        "ORIGINAL_PERLIN",
        "IMPROVED_PERLIN",
        "VORONOI_F1",
        "VORONOI_F2",
        "VORONOI_F3",
        "VORONOI_F4",
        "VORONOI_F2_F1",
        "VORONOI_CRACKLE",
        "CELL_NOISE",
    ]
    """ Noise basis used for turbulence

    :type: typing.Literal['BLENDER_ORIGINAL','ORIGINAL_PERLIN','IMPROVED_PERLIN','VORONOI_F1','VORONOI_F2','VORONOI_F3','VORONOI_F4','VORONOI_F2_F1','VORONOI_CRACKLE','CELL_NOISE']
    """

    noise_basis_2: typing.Literal["SIN", "SAW", "TRI"]
    """ 

    :type: typing.Literal['SIN','SAW','TRI']
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: typing.Literal["SOFT_NOISE", "HARD_NOISE"]
    """ 

    :type: typing.Literal['SOFT_NOISE','HARD_NOISE']
    """

    turbulence: float
    """ Turbulence of the bandnoise and ringnoise types

    :type: float
    """

    wood_type: typing.Literal["BANDS", "RINGS", "BANDNOISE", "RINGNOISE"]
    """ 

    :type: typing.Literal['BANDS','RINGS','BANDNOISE','RINGNOISE']
    """

    users_material: typing.Any
    """ Materials that use this texture
(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture
(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class World(ID, bpy_struct):
    """World data-block describing the environment and ambient lighting of a scene"""

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    ambient_color: bpy_prop_array[float]
    """ Ambient color of the world

    :type: bpy_prop_array[float]
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color_range: float
    """ The color range that will be mapped to 0-1

    :type: float
    """

    cycles: CyclesWorldSettings
    """ Cycles world settings

    :type: CyclesWorldSettings
    """

    cycles_visibility: CyclesVisibilitySettings
    """ Cycles visibility settings

    :type: CyclesVisibilitySettings
    """

    exposure: float
    """ Amount of exponential color correction for light

    :type: float
    """

    horizon_color: bpy_prop_array[float]
    """ Color at the horizon

    :type: bpy_prop_array[float]
    """

    light_settings: WorldLighting
    """ World lighting settings

    :type: WorldLighting
    """

    mist_settings: WorldMistSettings
    """ World mist settings

    :type: WorldMistSettings
    """

    node_tree: ShaderNodeTree | None
    """ Node tree for node based worlds

    :type: ShaderNodeTree | None
    """

    texture_slots: WorldTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: WorldTextureSlots
    """

    use_nodes: bool
    """ Use shader nodes to render the world

    :type: bool
    """

    use_sky_blend: bool
    """ Render background with natural progression from horizon to zenith

    :type: bool
    """

    use_sky_paper: bool
    """ Flatten blend or texture coordinates

    :type: bool
    """

    use_sky_real: bool
    """ Render background with a real horizon, relative to the camera angle

    :type: bool
    """

    zenith_color: bpy_prop_array[float]
    """ Color at the zenith

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WorldLighting(bpy_struct):
    """Lighting for a World data-block"""

    adapt_to_speed: float
    """ Use the speed vector pass to reduce AO samples in fast moving pixels - higher values result in more aggressive sample reduction (requires Vec pass enabled, for Raytrace Adaptive QMC)

    :type: float
    """

    ao_blend_type: typing.Literal["MULTIPLY", "ADD"]
    """ Defines how AO mixes with material shading

    :type: typing.Literal['MULTIPLY','ADD']
    """

    ao_factor: float
    """ Factor for ambient occlusion blending

    :type: float
    """

    bias: float
    """ Bias (in radians) to prevent smoothed faces from showing banding (for Raytrace Constant Jittered)

    :type: float
    """

    correction: float
    """ Ad-hoc correction for over-occlusion due to the approximation

    :type: float
    """

    distance: float
    """ Length of rays, defines how far away other faces give occlusion effect

    :type: float
    """

    environment_color: typing.Literal["PLAIN", "SKY_COLOR", "SKY_TEXTURE"]
    """ Defines where the color of the environment light comes from

    :type: typing.Literal['PLAIN','SKY_COLOR','SKY_TEXTURE']
    """

    environment_energy: float
    """ Defines the strength of environment light

    :type: float
    """

    error_threshold: float
    """ Low values are slower and higher quality

    :type: float
    """

    falloff_strength: float
    """ Attenuation falloff strength, the higher, the less influence distant objects have

    :type: float
    """

    gather_method: typing.Literal["RAYTRACE", "APPROXIMATE"]
    """ 

    :type: typing.Literal['RAYTRACE','APPROXIMATE']
    """

    indirect_bounces: int
    """ Number of indirect diffuse light bounces

    :type: int
    """

    indirect_factor: float
    """ Factor for how much surrounding objects contribute to light

    :type: float
    """

    passes: int
    """ Number of preprocessing passes to reduce over-occlusion

    :type: int
    """

    sample_method: typing.Literal["CONSTANT_JITTERED", "ADAPTIVE_QMC", "CONSTANT_QMC"]
    """ Method for generating shadow samples (for Raytrace)

    :type: typing.Literal['CONSTANT_JITTERED','ADAPTIVE_QMC','CONSTANT_QMC']
    """

    samples: int
    """ Amount of ray samples. Higher values give smoother results and longer rendering times

    :type: int
    """

    threshold: float
    """ Samples below this threshold will be considered fully shadowed/unshadowed and skipped (for Raytrace Adaptive QMC)

    :type: float
    """

    use_ambient_occlusion: bool
    """ Use Ambient Occlusion to add shadowing based on distance between objects

    :type: bool
    """

    use_cache: bool
    """ Cache AO results in pixels and interpolate over neighboring pixels for speedup

    :type: bool
    """

    use_environment_light: bool
    """ Add light coming from the environment

    :type: bool
    """

    use_falloff: bool
    """ Distance will be used to attenuate shadows

    :type: bool
    """

    use_indirect_light: bool
    """ Add indirect light bouncing of surrounding objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WorldMistSettings(bpy_struct):
    """Mist settings for a World data-block"""

    depth: float
    """ Distance over which the mist effect fades in

    :type: float
    """

    falloff: typing.Literal["QUADRATIC", "LINEAR", "INVERSE_QUADRATIC"]
    """ Type of transition used to fade mist

    :type: typing.Literal['QUADRATIC','LINEAR','INVERSE_QUADRATIC']
    """

    height: float
    """ Control how much mist density decreases with height

    :type: float
    """

    intensity: float
    """ Overall minimum intensity of the mist effect

    :type: float
    """

    start: float
    """ Starting distance of the mist, measured from the camera

    :type: float
    """

    use_mist: bool
    """ Occlude objects with the environment color as they are further away

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class WorldTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a World data-block"""

    blend_factor: float
    """ Amount texture affects color progression of the background

    :type: float
    """

    horizon_factor: float
    """ Amount texture affects color of the horizon

    :type: float
    """

    lod_bias: float
    """ Amount bias on mipmapping

    :type: float
    """

    object: Object | None
    """ Object to use for mapping with Object texture coordinates

    :type: Object | None
    """

    texture_coords: typing.Literal[
        "VIEW", "GLOBAL", "ANGMAP", "SPHERE", "EQUIRECT", "TUBE", "OBJECT"
    ]
    """ Texture coordinates used to map the texture onto the background

    :type: typing.Literal['VIEW','GLOBAL','ANGMAP','SPHERE','EQUIRECT','TUBE','OBJECT']
    """

    use_map_blend: bool
    """ Affect the color progression of the background

    :type: bool
    """

    use_map_horizon: bool
    """ Affect the color of the horizon

    :type: bool
    """

    use_map_zenith_down: bool
    """ Affect the color of the zenith below

    :type: bool
    """

    use_map_zenith_up: bool
    """ Affect the color of the zenith above

    :type: bool
    """

    zenith_down_factor: float
    """ Amount texture affects color of the zenith below

    :type: float
    """

    zenith_up_factor: float
    """ Amount texture affects color of the zenith above

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class XnorController(Controller, bpy_struct):
    """Controller passing on events based on a logical XNOR operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

class XorController(Controller, bpy_struct):
    """Controller passing on events based on a logical XOR operation"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """

ANIM_OT_keying_set_export: bl_operators.anim.ANIM_OT_keying_set_export

BONE_PT_constraints: bl_ui.properties_constraint.BONE_PT_constraints

BONE_PT_context_bone: bl_ui.properties_data_bone.BONE_PT_context_bone

BONE_PT_curved: bl_ui.properties_data_bone.BONE_PT_curved

BONE_PT_custom_props: bl_ui.properties_data_bone.BONE_PT_custom_props

BONE_PT_deform: bl_ui.properties_data_bone.BONE_PT_deform

BONE_PT_display: bl_ui.properties_data_bone.BONE_PT_display

BONE_PT_inverse_kinematics: bl_ui.properties_data_bone.BONE_PT_inverse_kinematics

BONE_PT_relations: bl_ui.properties_data_bone.BONE_PT_relations

BONE_PT_transform: bl_ui.properties_data_bone.BONE_PT_transform

BONE_PT_transform_locks: bl_ui.properties_data_bone.BONE_PT_transform_locks

BRUSH_OT_active_index_set: bl_operators.wm.BRUSH_OT_active_index_set

CAMERA_MT_presets: bl_ui.properties_data_camera.CAMERA_MT_presets

CLIP_HT_header: bl_ui.space_clip.CLIP_HT_header

CLIP_MT_camera_presets: bl_ui.space_clip.CLIP_MT_camera_presets

CLIP_MT_clip: bl_ui.space_clip.CLIP_MT_clip

CLIP_MT_masking_editor_menus: bl_ui.space_clip.CLIP_MT_masking_editor_menus

CLIP_MT_proxy: bl_ui.space_clip.CLIP_MT_proxy

CLIP_MT_reconstruction: bl_ui.space_clip.CLIP_MT_reconstruction

CLIP_MT_select: bl_ui.space_clip.CLIP_MT_select

CLIP_MT_select_grouped: bl_ui.space_clip.CLIP_MT_select_grouped

CLIP_MT_stabilize_2d_rotation_specials: bl_ui.space_clip.CLIP_MT_stabilize_2d_rotation_specials

CLIP_MT_stabilize_2d_specials: bl_ui.space_clip.CLIP_MT_stabilize_2d_specials

CLIP_MT_track: bl_ui.space_clip.CLIP_MT_track

CLIP_MT_track_color_presets: bl_ui.space_clip.CLIP_MT_track_color_presets

CLIP_MT_track_color_specials: bl_ui.space_clip.CLIP_MT_track_color_specials

CLIP_MT_track_transform: bl_ui.space_clip.CLIP_MT_track_transform

CLIP_MT_track_visibility: bl_ui.space_clip.CLIP_MT_track_visibility

CLIP_MT_tracking_editor_menus: bl_ui.space_clip.CLIP_MT_tracking_editor_menus

CLIP_MT_tracking_settings_presets: bl_ui.space_clip.CLIP_MT_tracking_settings_presets

CLIP_MT_tracking_specials: bl_ui.space_clip.CLIP_MT_tracking_specials

CLIP_MT_view: bl_ui.space_clip.CLIP_MT_view

CLIP_OT_bundles_to_mesh: bl_operators.clip.CLIP_OT_bundles_to_mesh

CLIP_OT_constraint_to_fcurve: bl_operators.clip.CLIP_OT_constraint_to_fcurve

CLIP_OT_delete_proxy: bl_operators.clip.CLIP_OT_delete_proxy

CLIP_OT_filter_tracks: bl_operators.clip.CLIP_OT_filter_tracks

CLIP_OT_set_active_clip: bl_operators.clip.CLIP_OT_set_active_clip

CLIP_OT_set_viewport_background: bl_operators.clip.CLIP_OT_set_viewport_background

CLIP_OT_setup_tracking_scene: bl_operators.clip.CLIP_OT_setup_tracking_scene

CLIP_OT_track_settings_as_default: bl_operators.clip.CLIP_OT_track_settings_as_default

CLIP_OT_track_settings_to_track: bl_operators.clip.CLIP_OT_track_settings_to_track

CLIP_OT_track_to_empty: bl_operators.clip.CLIP_OT_track_to_empty

CLIP_PT_active_mask_point: bl_ui.space_clip.CLIP_PT_active_mask_point

CLIP_PT_active_mask_spline: bl_ui.space_clip.CLIP_PT_active_mask_spline

CLIP_PT_display: bl_ui.space_clip.CLIP_PT_display

CLIP_PT_footage: bl_ui.space_clip.CLIP_PT_footage

CLIP_PT_footage_info: bl_ui.space_clip.CLIP_PT_footage_info

CLIP_PT_grease_pencil: bl_ui.space_clip.CLIP_PT_grease_pencil

CLIP_PT_grease_pencil_palettecolor: bl_ui.space_clip.CLIP_PT_grease_pencil_palettecolor

CLIP_PT_marker: bl_ui.space_clip.CLIP_PT_marker

CLIP_PT_marker_display: bl_ui.space_clip.CLIP_PT_marker_display

CLIP_PT_mask: bl_ui.space_clip.CLIP_PT_mask

CLIP_PT_mask_display: bl_ui.space_clip.CLIP_PT_mask_display

CLIP_PT_mask_layers: bl_ui.space_clip.CLIP_PT_mask_layers

CLIP_PT_objects: bl_ui.space_clip.CLIP_PT_objects

CLIP_PT_plane_track: bl_ui.space_clip.CLIP_PT_plane_track

CLIP_PT_proxy: bl_ui.space_clip.CLIP_PT_proxy

CLIP_PT_stabilization: bl_ui.space_clip.CLIP_PT_stabilization

CLIP_PT_tools_cleanup: bl_ui.space_clip.CLIP_PT_tools_cleanup

CLIP_PT_tools_clip: bl_ui.space_clip.CLIP_PT_tools_clip

CLIP_PT_tools_geometry: bl_ui.space_clip.CLIP_PT_tools_geometry

CLIP_PT_tools_grease_pencil_brush: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_brush

CLIP_PT_tools_grease_pencil_brushcurves: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_brushcurves

CLIP_PT_tools_grease_pencil_draw: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_draw

CLIP_PT_tools_grease_pencil_edit: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_edit

CLIP_PT_tools_grease_pencil_sculpt: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_sculpt

CLIP_PT_tools_marker: bl_ui.space_clip.CLIP_PT_tools_marker

CLIP_PT_tools_mask: bl_ui.space_clip.CLIP_PT_tools_mask

CLIP_PT_tools_mask_add: bl_ui.space_clip.CLIP_PT_tools_mask_add

CLIP_PT_tools_mask_transforms: bl_ui.space_clip.CLIP_PT_tools_mask_transforms

CLIP_PT_tools_object: bl_ui.space_clip.CLIP_PT_tools_object

CLIP_PT_tools_orientation: bl_ui.space_clip.CLIP_PT_tools_orientation

CLIP_PT_tools_plane_tracking: bl_ui.space_clip.CLIP_PT_tools_plane_tracking

CLIP_PT_tools_scenesetup: bl_ui.space_clip.CLIP_PT_tools_scenesetup

CLIP_PT_tools_solve: bl_ui.space_clip.CLIP_PT_tools_solve

CLIP_PT_tools_tracking: bl_ui.space_clip.CLIP_PT_tools_tracking

CLIP_PT_track: bl_ui.space_clip.CLIP_PT_track

CLIP_PT_track_settings: bl_ui.space_clip.CLIP_PT_track_settings

CLIP_PT_tracking_camera: bl_ui.space_clip.CLIP_PT_tracking_camera

CLIP_PT_tracking_lens: bl_ui.space_clip.CLIP_PT_tracking_lens

CLIP_PT_tracking_settings: bl_ui.space_clip.CLIP_PT_tracking_settings

CLIP_UL_tracking_objects: bl_ui.space_clip.CLIP_UL_tracking_objects

CLOTH_MT_presets: bl_ui.properties_physics_cloth.CLOTH_MT_presets

CONSOLE_HT_header: bl_ui.space_console.CONSOLE_HT_header

CONSOLE_MT_console: bl_ui.space_console.CONSOLE_MT_console

CONSOLE_MT_editor_menus: bl_ui.space_console.CONSOLE_MT_editor_menus

CONSOLE_MT_language: bl_ui.space_console.CONSOLE_MT_language

DATA_MT_bone_group_specials: bl_ui.properties_data_armature.DATA_MT_bone_group_specials

DATA_PT_active_spline: bl_ui.properties_data_curve.DATA_PT_active_spline

DATA_PT_area: bl_ui.properties_data_lamp.DATA_PT_area

DATA_PT_bone_groups: bl_ui.properties_data_armature.DATA_PT_bone_groups

DATA_PT_camera: bl_ui.properties_data_camera.DATA_PT_camera

DATA_PT_camera_display: bl_ui.properties_data_camera.DATA_PT_camera_display

DATA_PT_camera_dof: bl_ui.properties_data_camera.DATA_PT_camera_dof

DATA_PT_camera_safe_areas: bl_ui.properties_data_camera.DATA_PT_camera_safe_areas

DATA_PT_camera_stereoscopy: bl_ui.properties_data_camera.DATA_PT_camera_stereoscopy

DATA_PT_cone: bl_ui.properties_data_speaker.DATA_PT_cone

DATA_PT_context_arm: bl_ui.properties_data_armature.DATA_PT_context_arm

DATA_PT_context_camera: bl_ui.properties_data_camera.DATA_PT_context_camera

DATA_PT_context_curve: bl_ui.properties_data_curve.DATA_PT_context_curve

DATA_PT_context_lamp: bl_ui.properties_data_lamp.DATA_PT_context_lamp

DATA_PT_context_lattice: bl_ui.properties_data_lattice.DATA_PT_context_lattice

DATA_PT_context_mesh: bl_ui.properties_data_mesh.DATA_PT_context_mesh

DATA_PT_context_metaball: bl_ui.properties_data_metaball.DATA_PT_context_metaball

DATA_PT_context_speaker: bl_ui.properties_data_speaker.DATA_PT_context_speaker

DATA_PT_culling: bl_ui.properties_data_camera.DATA_PT_culling

DATA_PT_curve_texture_space: bl_ui.properties_data_curve.DATA_PT_curve_texture_space

DATA_PT_custom_props_arm: bl_ui.properties_data_armature.DATA_PT_custom_props_arm

DATA_PT_custom_props_camera: bl_ui.properties_data_camera.DATA_PT_custom_props_camera

DATA_PT_custom_props_curve: bl_ui.properties_data_curve.DATA_PT_custom_props_curve

DATA_PT_custom_props_lamp: bl_ui.properties_data_lamp.DATA_PT_custom_props_lamp

DATA_PT_custom_props_lattice: bl_ui.properties_data_lattice.DATA_PT_custom_props_lattice

DATA_PT_custom_props_mesh: bl_ui.properties_data_mesh.DATA_PT_custom_props_mesh

DATA_PT_custom_props_metaball: bl_ui.properties_data_metaball.DATA_PT_custom_props_metaball

DATA_PT_custom_props_speaker: bl_ui.properties_data_speaker.DATA_PT_custom_props_speaker

DATA_PT_customdata: bl_ui.properties_data_mesh.DATA_PT_customdata

DATA_PT_display: bl_ui.properties_data_armature.DATA_PT_display

DATA_PT_distance: bl_ui.properties_data_speaker.DATA_PT_distance

DATA_PT_empty: bl_ui.properties_data_empty.DATA_PT_empty

DATA_PT_falloff_curve: bl_ui.properties_data_lamp.DATA_PT_falloff_curve

DATA_PT_font: bl_ui.properties_data_curve.DATA_PT_font

DATA_PT_game_viewport: bl_ui.properties_data_camera.DATA_PT_game_viewport

DATA_PT_geometry_curve: bl_ui.properties_data_curve.DATA_PT_geometry_curve

DATA_PT_ghost: bl_ui.properties_data_armature.DATA_PT_ghost

DATA_PT_iksolver_itasc: bl_ui.properties_data_armature.DATA_PT_iksolver_itasc

DATA_PT_lamp: bl_ui.properties_data_lamp.DATA_PT_lamp

DATA_PT_lattice: bl_ui.properties_data_lattice.DATA_PT_lattice

DATA_PT_lens: bl_ui.properties_data_camera.DATA_PT_lens

DATA_PT_levels_of_detail: bl_ui.properties_data_camera.DATA_PT_levels_of_detail

DATA_PT_mball_texture_space: bl_ui.properties_data_metaball.DATA_PT_mball_texture_space

DATA_PT_metaball: bl_ui.properties_data_metaball.DATA_PT_metaball

DATA_PT_metaball_element: bl_ui.properties_data_metaball.DATA_PT_metaball_element

DATA_PT_modifiers: bl_ui.properties_data_modifier.DATA_PT_modifiers

DATA_PT_motion_paths: bl_ui.properties_data_armature.DATA_PT_motion_paths

DATA_PT_normals: bl_ui.properties_data_mesh.DATA_PT_normals

DATA_PT_paragraph: bl_ui.properties_data_curve.DATA_PT_paragraph

DATA_PT_pathanim: bl_ui.properties_data_curve.DATA_PT_pathanim

DATA_PT_pose_library: bl_ui.properties_data_armature.DATA_PT_pose_library

DATA_PT_preview: bl_ui.properties_data_lamp.DATA_PT_preview

DATA_PT_shadow: bl_ui.properties_data_lamp.DATA_PT_shadow

DATA_PT_shadow_game: bl_ui.properties_game.DATA_PT_shadow_game

DATA_PT_shape_curve: bl_ui.properties_data_curve.DATA_PT_shape_curve

DATA_PT_shape_keys: bl_ui.properties_data_mesh.DATA_PT_shape_keys

DATA_PT_skeleton: bl_ui.properties_data_armature.DATA_PT_skeleton

DATA_PT_speaker: bl_ui.properties_data_speaker.DATA_PT_speaker

DATA_PT_spot: bl_ui.properties_data_lamp.DATA_PT_spot

DATA_PT_sunsky: bl_ui.properties_data_lamp.DATA_PT_sunsky

DATA_PT_text_boxes: bl_ui.properties_data_curve.DATA_PT_text_boxes

DATA_PT_texture_space: bl_ui.properties_data_mesh.DATA_PT_texture_space

DATA_PT_uv_texture: bl_ui.properties_data_mesh.DATA_PT_uv_texture

DATA_PT_vertex_colors: bl_ui.properties_data_mesh.DATA_PT_vertex_colors

DATA_PT_vertex_groups: bl_ui.properties_data_mesh.DATA_PT_vertex_groups

DOPESHEET_HT_header: bl_ui.space_dopesheet.DOPESHEET_HT_header

DOPESHEET_MT_channel: bl_ui.space_dopesheet.DOPESHEET_MT_channel

DOPESHEET_MT_delete: bl_ui.space_dopesheet.DOPESHEET_MT_delete

DOPESHEET_MT_editor_menus: bl_ui.space_dopesheet.DOPESHEET_MT_editor_menus

DOPESHEET_MT_gpencil_channel: bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_channel

DOPESHEET_MT_gpencil_frame: bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_frame

DOPESHEET_MT_key: bl_ui.space_dopesheet.DOPESHEET_MT_key

DOPESHEET_MT_key_transform: bl_ui.space_dopesheet.DOPESHEET_MT_key_transform

DOPESHEET_MT_marker: bl_ui.space_dopesheet.DOPESHEET_MT_marker

DOPESHEET_MT_select: bl_ui.space_dopesheet.DOPESHEET_MT_select

DOPESHEET_MT_view: bl_ui.space_dopesheet.DOPESHEET_MT_view

FILEBROWSER_HT_header: bl_ui.space_filebrowser.FILEBROWSER_HT_header

FILEBROWSER_MT_bookmarks_specials: bl_ui.space_filebrowser.FILEBROWSER_MT_bookmarks_specials

FILEBROWSER_PT_advanced_filter: bl_ui.space_filebrowser.FILEBROWSER_PT_advanced_filter

FILEBROWSER_PT_bookmarks: bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks

FILEBROWSER_PT_recent_folders: bl_ui.space_filebrowser.FILEBROWSER_PT_recent_folders

FILEBROWSER_PT_system_bookmarks: bl_ui.space_filebrowser.FILEBROWSER_PT_system_bookmarks

FILEBROWSER_PT_system_folders: bl_ui.space_filebrowser.FILEBROWSER_PT_system_folders

FILEBROWSER_UL_dir: bl_ui.space_filebrowser.FILEBROWSER_UL_dir

FLUID_MT_presets: bl_ui.properties_physics_fluid.FLUID_MT_presets

GPENCIL_MT_brush_specials: bl_ui.properties_grease_pencil_common.GPENCIL_MT_brush_specials

GPENCIL_MT_gpencil_edit_specials: bl_ui.properties_grease_pencil_common.GPENCIL_MT_gpencil_edit_specials

GPENCIL_MT_layer_specials: bl_ui.properties_grease_pencil_common.GPENCIL_MT_layer_specials

GPENCIL_MT_palettecolor_specials: bl_ui.properties_grease_pencil_common.GPENCIL_MT_palettecolor_specials

GPENCIL_MT_pie_sculpt: bl_ui.properties_grease_pencil_common.GPENCIL_MT_pie_sculpt

GPENCIL_MT_pie_settings_palette: bl_ui.properties_grease_pencil_common.GPENCIL_MT_pie_settings_palette

GPENCIL_MT_pie_tool_palette: bl_ui.properties_grease_pencil_common.GPENCIL_MT_pie_tool_palette

GPENCIL_MT_pie_tools_more: bl_ui.properties_grease_pencil_common.GPENCIL_MT_pie_tools_more

GPENCIL_MT_snap: bl_ui.properties_grease_pencil_common.GPENCIL_MT_snap

GPENCIL_UL_brush: bl_ui.properties_grease_pencil_common.GPENCIL_UL_brush

GPENCIL_UL_layer: bl_ui.properties_grease_pencil_common.GPENCIL_UL_layer

GPENCIL_UL_palettecolor: bl_ui.properties_grease_pencil_common.GPENCIL_UL_palettecolor

GRAPH_HT_header: bl_ui.space_graph.GRAPH_HT_header

GRAPH_MT_channel: bl_ui.space_graph.GRAPH_MT_channel

GRAPH_MT_delete: bl_ui.space_graph.GRAPH_MT_delete

GRAPH_MT_editor_menus: bl_ui.space_graph.GRAPH_MT_editor_menus

GRAPH_MT_key: bl_ui.space_graph.GRAPH_MT_key

GRAPH_MT_key_transform: bl_ui.space_graph.GRAPH_MT_key_transform

GRAPH_MT_marker: bl_ui.space_graph.GRAPH_MT_marker

GRAPH_MT_select: bl_ui.space_graph.GRAPH_MT_select

GRAPH_MT_view: bl_ui.space_graph.GRAPH_MT_view

GROUP_MT_specials: bl_ui.properties_object.GROUP_MT_specials

IMAGE_HT_header: bl_ui.space_image.IMAGE_HT_header

IMAGE_MT_brush: bl_ui.space_image.IMAGE_MT_brush

IMAGE_MT_image: bl_ui.space_image.IMAGE_MT_image

IMAGE_MT_image_invert: bl_ui.space_image.IMAGE_MT_image_invert

IMAGE_MT_select: bl_ui.space_image.IMAGE_MT_select

IMAGE_MT_uvs: bl_ui.space_image.IMAGE_MT_uvs

IMAGE_MT_uvs_mirror: bl_ui.space_image.IMAGE_MT_uvs_mirror

IMAGE_MT_uvs_proportional: bl_ui.space_image.IMAGE_MT_uvs_proportional

IMAGE_MT_uvs_select_mode: bl_ui.space_image.IMAGE_MT_uvs_select_mode

IMAGE_MT_uvs_showhide: bl_ui.space_image.IMAGE_MT_uvs_showhide

IMAGE_MT_uvs_snap: bl_ui.space_image.IMAGE_MT_uvs_snap

IMAGE_MT_uvs_transform: bl_ui.space_image.IMAGE_MT_uvs_transform

IMAGE_MT_uvs_weldalign: bl_ui.space_image.IMAGE_MT_uvs_weldalign

IMAGE_MT_view: bl_ui.space_image.IMAGE_MT_view

IMAGE_PT_active_mask_point: bl_ui.space_image.IMAGE_PT_active_mask_point

IMAGE_PT_active_mask_spline: bl_ui.space_image.IMAGE_PT_active_mask_spline

IMAGE_PT_game_properties: bl_ui.space_image.IMAGE_PT_game_properties

IMAGE_PT_grease_pencil: bl_ui.space_image.IMAGE_PT_grease_pencil

IMAGE_PT_grease_pencil_palettecolor: bl_ui.space_image.IMAGE_PT_grease_pencil_palettecolor

IMAGE_PT_image_properties: bl_ui.space_image.IMAGE_PT_image_properties

IMAGE_PT_mask: bl_ui.space_image.IMAGE_PT_mask

IMAGE_PT_mask_display: bl_ui.space_image.IMAGE_PT_mask_display

IMAGE_PT_mask_layers: bl_ui.space_image.IMAGE_PT_mask_layers

IMAGE_PT_options_uvs: bl_ui.space_image.IMAGE_PT_options_uvs

IMAGE_PT_paint: bl_ui.space_image.IMAGE_PT_paint

IMAGE_PT_paint_curve: bl_ui.space_image.IMAGE_PT_paint_curve

IMAGE_PT_paint_stroke: bl_ui.space_image.IMAGE_PT_paint_stroke

IMAGE_PT_sample_line: bl_ui.space_image.IMAGE_PT_sample_line

IMAGE_PT_scope_sample: bl_ui.space_image.IMAGE_PT_scope_sample

IMAGE_PT_tools_align_uvs: bl_ui.space_image.IMAGE_PT_tools_align_uvs

IMAGE_PT_tools_brush_appearance: bl_ui.space_image.IMAGE_PT_tools_brush_appearance

IMAGE_PT_tools_brush_overlay: bl_ui.space_image.IMAGE_PT_tools_brush_overlay

IMAGE_PT_tools_brush_texture: bl_ui.space_image.IMAGE_PT_tools_brush_texture

IMAGE_PT_tools_brush_tool: bl_ui.space_image.IMAGE_PT_tools_brush_tool

IMAGE_PT_tools_grease_pencil_brush: bl_ui.space_image.IMAGE_PT_tools_grease_pencil_brush

IMAGE_PT_tools_grease_pencil_brushcurves: bl_ui.space_image.IMAGE_PT_tools_grease_pencil_brushcurves

IMAGE_PT_tools_grease_pencil_draw: bl_ui.space_image.IMAGE_PT_tools_grease_pencil_draw

IMAGE_PT_tools_grease_pencil_edit: bl_ui.space_image.IMAGE_PT_tools_grease_pencil_edit

IMAGE_PT_tools_grease_pencil_sculpt: bl_ui.space_image.IMAGE_PT_tools_grease_pencil_sculpt

IMAGE_PT_tools_imagepaint_symmetry: bl_ui.space_image.IMAGE_PT_tools_imagepaint_symmetry

IMAGE_PT_tools_mask: bl_ui.space_image.IMAGE_PT_tools_mask

IMAGE_PT_tools_mask_add: bl_ui.space_image.IMAGE_PT_tools_mask_add

IMAGE_PT_tools_mask_texture: bl_ui.space_image.IMAGE_PT_tools_mask_texture

IMAGE_PT_tools_paint_options: bl_ui.space_image.IMAGE_PT_tools_paint_options

IMAGE_PT_tools_transform_uvs: bl_ui.space_image.IMAGE_PT_tools_transform_uvs

IMAGE_PT_tools_uvs: bl_ui.space_image.IMAGE_PT_tools_uvs

IMAGE_PT_uv_sculpt: bl_ui.space_image.IMAGE_PT_uv_sculpt

IMAGE_PT_uv_sculpt_curve: bl_ui.space_image.IMAGE_PT_uv_sculpt_curve

IMAGE_PT_view_histogram: bl_ui.space_image.IMAGE_PT_view_histogram

IMAGE_PT_view_properties: bl_ui.space_image.IMAGE_PT_view_properties

IMAGE_PT_view_vectorscope: bl_ui.space_image.IMAGE_PT_view_vectorscope

IMAGE_PT_view_waveform: bl_ui.space_image.IMAGE_PT_view_waveform

INFO_HT_header: bl_ui.space_info.INFO_HT_header

INFO_MT_add: bl_ui.space_view3d.INFO_MT_add

INFO_MT_armature_add: bl_ui.space_view3d.INFO_MT_armature_add

INFO_MT_camera_add: bl_ui.space_view3d.INFO_MT_camera_add

INFO_MT_curve_add: bl_ui.space_view3d.INFO_MT_curve_add

INFO_MT_edit_armature_add: bl_ui.space_view3d.INFO_MT_edit_armature_add

INFO_MT_edit_curve_add: bl_ui.space_view3d.INFO_MT_edit_curve_add

INFO_MT_editor_menus: bl_ui.space_info.INFO_MT_editor_menus

INFO_MT_file: bl_ui.space_info.INFO_MT_file

INFO_MT_file_export: bl_ui.space_info.INFO_MT_file_export

INFO_MT_file_external_data: bl_ui.space_info.INFO_MT_file_external_data

INFO_MT_file_import: bl_ui.space_info.INFO_MT_file_import

INFO_MT_file_previews: bl_ui.space_info.INFO_MT_file_previews

INFO_MT_game: bl_ui.space_info.INFO_MT_game

INFO_MT_game_show_debug: bl_ui.space_info.INFO_MT_game_show_debug

INFO_MT_help: bl_ui.space_info.INFO_MT_help

INFO_MT_lamp_add: bl_ui.space_view3d.INFO_MT_lamp_add

INFO_MT_mesh_add: bl_ui.space_view3d.INFO_MT_mesh_add

INFO_MT_metaball_add: bl_ui.space_view3d.INFO_MT_metaball_add

INFO_MT_opengl_render: bl_ui.space_info.INFO_MT_opengl_render

INFO_MT_render: bl_ui.space_info.INFO_MT_render

INFO_MT_surface_add: bl_ui.space_view3d.INFO_MT_surface_add

INFO_MT_window: bl_ui.space_info.INFO_MT_window

LAMP_MT_sunsky_presets: bl_ui.properties_data_lamp.LAMP_MT_sunsky_presets

LOGIC_HT_header: bl_ui.space_logic.LOGIC_HT_header

LOGIC_MT_editor_menus: bl_ui.space_logic.LOGIC_MT_editor_menus

LOGIC_MT_logicbricks_add: bl_ui.space_logic.LOGIC_MT_logicbricks_add

LOGIC_MT_view: bl_ui.space_logic.LOGIC_MT_view

LOGIC_PT_components: bl_ui.space_logic.LOGIC_PT_components

LOGIC_PT_properties: bl_ui.space_logic.LOGIC_PT_properties

MASK_MT_add: bl_operators.mask.MASK_MT_add

MASK_MT_animation: bl_ui.properties_mask_common.MASK_MT_animation

MASK_MT_editor_menus: bl_ui.space_image.MASK_MT_editor_menus

MASK_MT_mask: bl_ui.properties_mask_common.MASK_MT_mask

MASK_MT_select: bl_ui.properties_mask_common.MASK_MT_select

MASK_MT_transform: bl_ui.properties_mask_common.MASK_MT_transform

MASK_MT_visibility: bl_ui.properties_mask_common.MASK_MT_visibility

MASK_UL_layers: bl_ui.properties_mask_common.MASK_UL_layers

MATERIAL_MT_specials: bl_ui.properties_material.MATERIAL_MT_specials

MATERIAL_MT_sss_presets: bl_ui.properties_material.MATERIAL_MT_sss_presets

MATERIAL_PT_context_material: bl_ui.properties_material.MATERIAL_PT_context_material

MATERIAL_PT_custom_props: bl_ui.properties_material.MATERIAL_PT_custom_props

MATERIAL_PT_diffuse: bl_ui.properties_material.MATERIAL_PT_diffuse

MATERIAL_PT_flare: bl_ui.properties_material.MATERIAL_PT_flare

MATERIAL_PT_freestyle_line: bl_ui.properties_freestyle.MATERIAL_PT_freestyle_line

MATERIAL_PT_game_options: bl_ui.properties_material.MATERIAL_PT_game_options

MATERIAL_PT_game_settings: bl_ui.properties_material.MATERIAL_PT_game_settings

MATERIAL_PT_game_shadow: bl_ui.properties_material.MATERIAL_PT_game_shadow

MATERIAL_PT_halo: bl_ui.properties_material.MATERIAL_PT_halo

MATERIAL_PT_mirror: bl_ui.properties_material.MATERIAL_PT_mirror

MATERIAL_PT_options: bl_ui.properties_material.MATERIAL_PT_options

MATERIAL_PT_pipeline: bl_ui.properties_material.MATERIAL_PT_pipeline

MATERIAL_PT_preview: bl_ui.properties_material.MATERIAL_PT_preview

MATERIAL_PT_shading: bl_ui.properties_material.MATERIAL_PT_shading

MATERIAL_PT_shadow: bl_ui.properties_material.MATERIAL_PT_shadow

MATERIAL_PT_specular: bl_ui.properties_material.MATERIAL_PT_specular

MATERIAL_PT_sss: bl_ui.properties_material.MATERIAL_PT_sss

MATERIAL_PT_strand: bl_ui.properties_material.MATERIAL_PT_strand

MATERIAL_PT_transp: bl_ui.properties_material.MATERIAL_PT_transp

MATERIAL_PT_transp_game: bl_ui.properties_material.MATERIAL_PT_transp_game

MATERIAL_PT_volume_density: bl_ui.properties_material.MATERIAL_PT_volume_density

MATERIAL_PT_volume_integration: bl_ui.properties_material.MATERIAL_PT_volume_integration

MATERIAL_PT_volume_lighting: bl_ui.properties_material.MATERIAL_PT_volume_lighting

MATERIAL_PT_volume_options: bl_ui.properties_material.MATERIAL_PT_volume_options

MATERIAL_PT_volume_shading: bl_ui.properties_material.MATERIAL_PT_volume_shading

MATERIAL_PT_volume_transp: bl_ui.properties_material.MATERIAL_PT_volume_transp

MATERIAL_UL_matslots: bl_ui.properties_material.MATERIAL_UL_matslots

MESH_MT_shape_key_specials: bl_ui.properties_data_mesh.MESH_MT_shape_key_specials

MESH_MT_vertex_group_specials: bl_ui.properties_data_mesh.MESH_MT_vertex_group_specials

MESH_UL_shape_keys: bl_ui.properties_data_mesh.MESH_UL_shape_keys

MESH_UL_uvmaps_vcols: bl_ui.properties_data_mesh.MESH_UL_uvmaps_vcols

MESH_UL_vgroups: bl_ui.properties_data_mesh.MESH_UL_vgroups

NLA_HT_header: bl_ui.space_nla.NLA_HT_header

NLA_MT_add: bl_ui.space_nla.NLA_MT_add

NLA_MT_edit: bl_ui.space_nla.NLA_MT_edit

NLA_MT_edit_transform: bl_ui.space_nla.NLA_MT_edit_transform

NLA_MT_editor_menus: bl_ui.space_nla.NLA_MT_editor_menus

NLA_MT_marker: bl_ui.space_nla.NLA_MT_marker

NLA_MT_select: bl_ui.space_nla.NLA_MT_select

NLA_MT_view: bl_ui.space_nla.NLA_MT_view

NODE_HT_header: bl_ui.space_node.NODE_HT_header

NODE_MT_add: bl_ui.space_node.NODE_MT_add

NODE_MT_editor_menus: bl_ui.space_node.NODE_MT_editor_menus

NODE_MT_node: bl_ui.space_node.NODE_MT_node

NODE_MT_node_color_presets: bl_ui.space_node.NODE_MT_node_color_presets

NODE_MT_node_color_specials: bl_ui.space_node.NODE_MT_node_color_specials

NODE_MT_select: bl_ui.space_node.NODE_MT_select

NODE_MT_view: bl_ui.space_node.NODE_MT_view

NODE_OT_add_and_link_node: bl_operators.node.NODE_OT_add_and_link_node

NODE_OT_add_node: bl_operators.node.NODE_OT_add_node

NODE_OT_add_search: bl_operators.node.NODE_OT_add_search

NODE_OT_collapse_hide_unused_toggle: bl_operators.node.NODE_OT_collapse_hide_unused_toggle

NODE_OT_tree_path_parent: bl_operators.node.NODE_OT_tree_path_parent

NODE_PT_active_node_color: bl_ui.space_node.NODE_PT_active_node_color

NODE_PT_active_node_generic: bl_ui.space_node.NODE_PT_active_node_generic

NODE_PT_active_node_properties: bl_ui.space_node.NODE_PT_active_node_properties

NODE_PT_backdrop: bl_ui.space_node.NODE_PT_backdrop

NODE_PT_grease_pencil: bl_ui.space_node.NODE_PT_grease_pencil

NODE_PT_grease_pencil_palettecolor: bl_ui.space_node.NODE_PT_grease_pencil_palettecolor

NODE_PT_grease_pencil_tools: bl_ui.space_node.NODE_PT_grease_pencil_tools

NODE_PT_quality: bl_ui.space_node.NODE_PT_quality

NODE_PT_tools_grease_pencil_brush: bl_ui.space_node.NODE_PT_tools_grease_pencil_brush

NODE_PT_tools_grease_pencil_brushcurves: bl_ui.space_node.NODE_PT_tools_grease_pencil_brushcurves

NODE_PT_tools_grease_pencil_draw: bl_ui.space_node.NODE_PT_tools_grease_pencil_draw

NODE_PT_tools_grease_pencil_edit: bl_ui.space_node.NODE_PT_tools_grease_pencil_edit

NODE_PT_tools_grease_pencil_sculpt: bl_ui.space_node.NODE_PT_tools_grease_pencil_sculpt

NODE_UL_interface_sockets: bl_ui.space_node.NODE_UL_interface_sockets

OBJECT_MT_culling: bl_ui.properties_game.OBJECT_MT_culling

OBJECT_MT_lod_tools: bl_ui.properties_game.OBJECT_MT_lod_tools

OBJECT_PT_activity_culling: bl_ui.properties_game.OBJECT_PT_activity_culling

OBJECT_PT_constraints: bl_ui.properties_constraint.OBJECT_PT_constraints

OBJECT_PT_context_object: bl_ui.properties_object.OBJECT_PT_context_object

OBJECT_PT_custom_props: bl_ui.properties_object.OBJECT_PT_custom_props

OBJECT_PT_delta_transform: bl_ui.properties_object.OBJECT_PT_delta_transform

OBJECT_PT_display: bl_ui.properties_object.OBJECT_PT_display

OBJECT_PT_duplication: bl_ui.properties_object.OBJECT_PT_duplication

OBJECT_PT_groups: bl_ui.properties_object.OBJECT_PT_groups

OBJECT_PT_levels_of_detail: bl_ui.properties_game.OBJECT_PT_levels_of_detail

OBJECT_PT_motion_paths: bl_ui.properties_object.OBJECT_PT_motion_paths

OBJECT_PT_relations: bl_ui.properties_object.OBJECT_PT_relations

OBJECT_PT_relations_extras: bl_ui.properties_object.OBJECT_PT_relations_extras

OBJECT_PT_transform: bl_ui.properties_object.OBJECT_PT_transform

OBJECT_PT_transform_locks: bl_ui.properties_object.OBJECT_PT_transform_locks

OUTLINER_HT_header: bl_ui.space_outliner.OUTLINER_HT_header

OUTLINER_MT_edit_datablocks: bl_ui.space_outliner.OUTLINER_MT_edit_datablocks

OUTLINER_MT_editor_menus: bl_ui.space_outliner.OUTLINER_MT_editor_menus

OUTLINER_MT_search: bl_ui.space_outliner.OUTLINER_MT_search

OUTLINER_MT_view: bl_ui.space_outliner.OUTLINER_MT_view

PARTICLE_MT_hair_dynamics_presets: bl_ui.properties_particle.PARTICLE_MT_hair_dynamics_presets

PARTICLE_MT_specials: bl_ui.properties_particle.PARTICLE_MT_specials

PARTICLE_PT_boidbrain: bl_ui.properties_particle.PARTICLE_PT_boidbrain

PARTICLE_PT_cache: bl_ui.properties_particle.PARTICLE_PT_cache

PARTICLE_PT_children: bl_ui.properties_particle.PARTICLE_PT_children

PARTICLE_PT_context_particles: bl_ui.properties_particle.PARTICLE_PT_context_particles

PARTICLE_PT_custom_props: bl_ui.properties_particle.PARTICLE_PT_custom_props

PARTICLE_PT_draw: bl_ui.properties_particle.PARTICLE_PT_draw

PARTICLE_PT_emission: bl_ui.properties_particle.PARTICLE_PT_emission

PARTICLE_PT_field_weights: bl_ui.properties_particle.PARTICLE_PT_field_weights

PARTICLE_PT_force_fields: bl_ui.properties_particle.PARTICLE_PT_force_fields

PARTICLE_PT_hair_dynamics: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics

PARTICLE_PT_physics: bl_ui.properties_particle.PARTICLE_PT_physics

PARTICLE_PT_render: bl_ui.properties_particle.PARTICLE_PT_render

PARTICLE_PT_rotation: bl_ui.properties_particle.PARTICLE_PT_rotation

PARTICLE_PT_velocity: bl_ui.properties_particle.PARTICLE_PT_velocity

PARTICLE_PT_vertexgroups: bl_ui.properties_particle.PARTICLE_PT_vertexgroups

PARTICLE_UL_particle_systems: bl_ui.properties_particle.PARTICLE_UL_particle_systems

PHYSICS_PT_add: bl_ui.properties_physics_common.PHYSICS_PT_add

PHYSICS_PT_cloth: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth

PHYSICS_PT_cloth_cache: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_cache

PHYSICS_PT_cloth_collision: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_collision

PHYSICS_PT_cloth_field_weights: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_field_weights

PHYSICS_PT_cloth_sewing: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_sewing

PHYSICS_PT_cloth_stiffness: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_stiffness

PHYSICS_PT_collision: bl_ui.properties_physics_field.PHYSICS_PT_collision

PHYSICS_PT_domain_boundary: bl_ui.properties_physics_fluid.PHYSICS_PT_domain_boundary

PHYSICS_PT_domain_gravity: bl_ui.properties_physics_fluid.PHYSICS_PT_domain_gravity

PHYSICS_PT_domain_particles: bl_ui.properties_physics_fluid.PHYSICS_PT_domain_particles

PHYSICS_PT_dp_advanced_canvas: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_advanced_canvas

PHYSICS_PT_dp_brush_source: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_source

PHYSICS_PT_dp_brush_velocity: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity

PHYSICS_PT_dp_brush_wave: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_wave

PHYSICS_PT_dp_cache: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_cache

PHYSICS_PT_dp_canvas_initial_color: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_initial_color

PHYSICS_PT_dp_canvas_output: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output

PHYSICS_PT_dp_effects: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects

PHYSICS_PT_dynamic_paint: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dynamic_paint

PHYSICS_PT_field: bl_ui.properties_physics_field.PHYSICS_PT_field

PHYSICS_PT_fluid: bl_ui.properties_physics_fluid.PHYSICS_PT_fluid

PHYSICS_PT_game_collision_bounds: bl_ui.properties_game.PHYSICS_PT_game_collision_bounds

PHYSICS_PT_game_obstacles: bl_ui.properties_game.PHYSICS_PT_game_obstacles

PHYSICS_PT_game_physics: bl_ui.properties_game.PHYSICS_PT_game_physics

PHYSICS_PT_rigid_body: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body

PHYSICS_PT_rigid_body_collisions: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions

PHYSICS_PT_rigid_body_constraint: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint

PHYSICS_PT_rigid_body_dynamics: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_dynamics

PHYSICS_PT_smoke: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke

PHYSICS_PT_smoke_adaptive_domain: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_adaptive_domain

PHYSICS_PT_smoke_cache: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_cache

PHYSICS_PT_smoke_display_settings: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_display_settings

PHYSICS_PT_smoke_field_weights: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_field_weights

PHYSICS_PT_smoke_fire: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_fire

PHYSICS_PT_smoke_flow_advanced: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_flow_advanced

PHYSICS_PT_smoke_groups: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_groups

PHYSICS_PT_smoke_highres: bl_ui.properties_physics_smoke.PHYSICS_PT_smoke_highres

PHYSICS_PT_softbody: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody

PHYSICS_PT_softbody_cache: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_cache

PHYSICS_PT_softbody_collision: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_collision

PHYSICS_PT_softbody_edge: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge

PHYSICS_PT_softbody_field_weights: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_field_weights

PHYSICS_PT_softbody_goal: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal

PHYSICS_PT_softbody_solver: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver

PHYSICS_UL_dynapaint_surfaces: bl_ui.properties_physics_dynamicpaint.PHYSICS_UL_dynapaint_surfaces

PROPERTIES_HT_header: bl_ui.space_properties.PROPERTIES_HT_header

RENDERLAYER_PT_freestyle: bl_ui.properties_freestyle.RENDERLAYER_PT_freestyle

RENDERLAYER_PT_freestyle_lineset: bl_ui.properties_freestyle.RENDERLAYER_PT_freestyle_lineset

RENDERLAYER_PT_freestyle_linestyle: bl_ui.properties_freestyle.RENDERLAYER_PT_freestyle_linestyle

RENDERLAYER_PT_layer_options: bl_ui.properties_render_layer.RENDERLAYER_PT_layer_options

RENDERLAYER_PT_layer_passes: bl_ui.properties_render_layer.RENDERLAYER_PT_layer_passes

RENDERLAYER_PT_layers: bl_ui.properties_render_layer.RENDERLAYER_PT_layers

RENDERLAYER_PT_views: bl_ui.properties_render_layer.RENDERLAYER_PT_views

RENDERLAYER_UL_linesets: bl_ui.properties_freestyle.RENDERLAYER_UL_linesets

RENDERLAYER_UL_renderlayers: bl_ui.properties_render_layer.RENDERLAYER_UL_renderlayers

RENDERLAYER_UL_renderviews: bl_ui.properties_render_layer.RENDERLAYER_UL_renderviews

RENDER_MT_ffmpeg_presets: bl_ui.properties_render.RENDER_MT_ffmpeg_presets

RENDER_MT_framerate_presets: bl_ui.properties_render.RENDER_MT_framerate_presets

RENDER_MT_lineset_specials: bl_ui.properties_freestyle.RENDER_MT_lineset_specials

RENDER_MT_presets: bl_ui.properties_render.RENDER_MT_presets

RENDER_PT_antialiasing: bl_ui.properties_render.RENDER_PT_antialiasing

RENDER_PT_bake: bl_ui.properties_render.RENDER_PT_bake

RENDER_PT_dimensions: bl_ui.properties_render.RENDER_PT_dimensions

RENDER_PT_embedded: bl_ui.properties_game.RENDER_PT_embedded

RENDER_PT_encoding: bl_ui.properties_render.RENDER_PT_encoding

RENDER_PT_freestyle: bl_ui.properties_freestyle.RENDER_PT_freestyle

RENDER_PT_game_animations: bl_ui.properties_game.RENDER_PT_game_animations

RENDER_PT_game_attachments: bl_ui.properties_game.RENDER_PT_game_attachments

RENDER_PT_game_debug: bl_ui.properties_game.RENDER_PT_game_debug

RENDER_PT_game_display: bl_ui.properties_game.RENDER_PT_game_display

RENDER_PT_game_player: bl_ui.properties_game.RENDER_PT_game_player

RENDER_PT_game_shading: bl_ui.properties_game.RENDER_PT_game_shading

RENDER_PT_game_stereo: bl_ui.properties_game.RENDER_PT_game_stereo

RENDER_PT_game_system: bl_ui.properties_game.RENDER_PT_game_system

RENDER_PT_motion_blur: bl_ui.properties_render.RENDER_PT_motion_blur

RENDER_PT_output: bl_ui.properties_render.RENDER_PT_output

RENDER_PT_performance: bl_ui.properties_render.RENDER_PT_performance

RENDER_PT_post_processing: bl_ui.properties_render.RENDER_PT_post_processing

RENDER_PT_render: bl_ui.properties_render.RENDER_PT_render

RENDER_PT_shading: bl_ui.properties_render.RENDER_PT_shading

RENDER_PT_stamp: bl_ui.properties_render.RENDER_PT_stamp

RENDER_UL_attachments: bl_ui.properties_game.RENDER_UL_attachments

SAFE_AREAS_MT_presets: bl_ui.properties_data_camera.SAFE_AREAS_MT_presets

SCENE_MT_units_length_presets: bl_ui.properties_scene.SCENE_MT_units_length_presets

SCENE_OT_freestyle_add_edge_marks_to_keying_set: bl_operators.freestyle.SCENE_OT_freestyle_add_edge_marks_to_keying_set

SCENE_OT_freestyle_add_face_marks_to_keying_set: bl_operators.freestyle.SCENE_OT_freestyle_add_face_marks_to_keying_set

SCENE_OT_freestyle_fill_range_by_selection: bl_operators.freestyle.SCENE_OT_freestyle_fill_range_by_selection

SCENE_OT_freestyle_module_open: bl_operators.freestyle.SCENE_OT_freestyle_module_open

SCENE_PT_audio: bl_ui.properties_scene.SCENE_PT_audio

SCENE_PT_color_management: bl_ui.properties_scene.SCENE_PT_color_management

SCENE_PT_custom_props: bl_ui.properties_scene.SCENE_PT_custom_props

SCENE_PT_game_audio: bl_ui.properties_game.SCENE_PT_game_audio

SCENE_PT_game_console: bl_ui.properties_game.SCENE_PT_game_console

SCENE_PT_game_hysteresis: bl_ui.properties_game.SCENE_PT_game_hysteresis

SCENE_PT_game_navmesh: bl_ui.properties_game.SCENE_PT_game_navmesh

SCENE_PT_game_physics: bl_ui.properties_game.SCENE_PT_game_physics

SCENE_PT_game_physics_obstacles: bl_ui.properties_game.SCENE_PT_game_physics_obstacles

SCENE_PT_keying_set_paths: bl_ui.properties_scene.SCENE_PT_keying_set_paths

SCENE_PT_keying_sets: bl_ui.properties_scene.SCENE_PT_keying_sets

SCENE_PT_physics: bl_ui.properties_scene.SCENE_PT_physics

SCENE_PT_rigid_body_cache: bl_ui.properties_scene.SCENE_PT_rigid_body_cache

SCENE_PT_rigid_body_field_weights: bl_ui.properties_scene.SCENE_PT_rigid_body_field_weights

SCENE_PT_rigid_body_world: bl_ui.properties_scene.SCENE_PT_rigid_body_world

SCENE_PT_scene: bl_ui.properties_scene.SCENE_PT_scene

SCENE_PT_simplify: bl_ui.properties_scene.SCENE_PT_simplify

SCENE_PT_unit: bl_ui.properties_scene.SCENE_PT_unit

SCENE_UL_keying_set_paths: bl_ui.properties_scene.SCENE_UL_keying_set_paths

SEQUENCER_HT_header: bl_ui.space_sequencer.SEQUENCER_HT_header

SEQUENCER_MT_add: bl_ui.space_sequencer.SEQUENCER_MT_add

SEQUENCER_MT_add_effect: bl_ui.space_sequencer.SEQUENCER_MT_add_effect

SEQUENCER_MT_add_generate: bl_ui.space_sequencer.SEQUENCER_MT_add_generate

SEQUENCER_MT_change: bl_ui.space_sequencer.SEQUENCER_MT_change

SEQUENCER_MT_editor_menus: bl_ui.space_sequencer.SEQUENCER_MT_editor_menus

SEQUENCER_MT_frame: bl_ui.space_sequencer.SEQUENCER_MT_frame

SEQUENCER_MT_marker: bl_ui.space_sequencer.SEQUENCER_MT_marker

SEQUENCER_MT_select: bl_ui.space_sequencer.SEQUENCER_MT_select

SEQUENCER_MT_strip: bl_ui.space_sequencer.SEQUENCER_MT_strip

SEQUENCER_MT_strip_input: bl_ui.space_sequencer.SEQUENCER_MT_strip_input

SEQUENCER_MT_strip_lock_mute: bl_ui.space_sequencer.SEQUENCER_MT_strip_lock_mute

SEQUENCER_MT_strip_transform: bl_ui.space_sequencer.SEQUENCER_MT_strip_transform

SEQUENCER_MT_view: bl_ui.space_sequencer.SEQUENCER_MT_view

SEQUENCER_MT_view_toggle: bl_ui.space_sequencer.SEQUENCER_MT_view_toggle

SEQUENCER_PT_custom_props: bl_ui.space_sequencer.SEQUENCER_PT_custom_props

SEQUENCER_PT_edit: bl_ui.space_sequencer.SEQUENCER_PT_edit

SEQUENCER_PT_effect: bl_ui.space_sequencer.SEQUENCER_PT_effect

SEQUENCER_PT_filter: bl_ui.space_sequencer.SEQUENCER_PT_filter

SEQUENCER_PT_grease_pencil: bl_ui.space_sequencer.SEQUENCER_PT_grease_pencil

SEQUENCER_PT_grease_pencil_palettecolor: bl_ui.space_sequencer.SEQUENCER_PT_grease_pencil_palettecolor

SEQUENCER_PT_grease_pencil_tools: bl_ui.space_sequencer.SEQUENCER_PT_grease_pencil_tools

SEQUENCER_PT_input: bl_ui.space_sequencer.SEQUENCER_PT_input

SEQUENCER_PT_mask: bl_ui.space_sequencer.SEQUENCER_PT_mask

SEQUENCER_PT_modifiers: bl_ui.space_sequencer.SEQUENCER_PT_modifiers

SEQUENCER_PT_preview: bl_ui.space_sequencer.SEQUENCER_PT_preview

SEQUENCER_PT_proxy: bl_ui.space_sequencer.SEQUENCER_PT_proxy

SEQUENCER_PT_scene: bl_ui.space_sequencer.SEQUENCER_PT_scene

SEQUENCER_PT_sound: bl_ui.space_sequencer.SEQUENCER_PT_sound

SEQUENCER_PT_view: bl_ui.space_sequencer.SEQUENCER_PT_view

SEQUENCER_PT_view_safe_areas: bl_ui.space_sequencer.SEQUENCER_PT_view_safe_areas

TEXTURE_MT_envmap_specials: bl_ui.properties_texture.TEXTURE_MT_envmap_specials

TEXTURE_MT_specials: bl_ui.properties_texture.TEXTURE_MT_specials

TEXTURE_PT_blend: bl_ui.properties_texture.TEXTURE_PT_blend

TEXTURE_PT_clouds: bl_ui.properties_texture.TEXTURE_PT_clouds

TEXTURE_PT_colors: bl_ui.properties_texture.TEXTURE_PT_colors

TEXTURE_PT_context_texture: bl_ui.properties_texture.TEXTURE_PT_context_texture

TEXTURE_PT_custom_props: bl_ui.properties_texture.TEXTURE_PT_custom_props

TEXTURE_PT_distortednoise: bl_ui.properties_texture.TEXTURE_PT_distortednoise

TEXTURE_PT_envmap: bl_ui.properties_texture.TEXTURE_PT_envmap

TEXTURE_PT_envmap_sampling: bl_ui.properties_texture.TEXTURE_PT_envmap_sampling

TEXTURE_PT_game_influence: bl_ui.properties_texture.TEXTURE_PT_game_influence

TEXTURE_PT_game_mapping: bl_ui.properties_texture.TEXTURE_PT_game_mapping

TEXTURE_PT_game_parallax: bl_ui.properties_texture.TEXTURE_PT_game_parallax

TEXTURE_PT_image: bl_ui.properties_texture.TEXTURE_PT_image

TEXTURE_PT_image_mapping: bl_ui.properties_texture.TEXTURE_PT_image_mapping

TEXTURE_PT_image_sampling: bl_ui.properties_texture.TEXTURE_PT_image_sampling

TEXTURE_PT_influence: bl_ui.properties_texture.TEXTURE_PT_influence

TEXTURE_PT_magic: bl_ui.properties_texture.TEXTURE_PT_magic

TEXTURE_PT_mapping: bl_ui.properties_texture.TEXTURE_PT_mapping

TEXTURE_PT_marble: bl_ui.properties_texture.TEXTURE_PT_marble

TEXTURE_PT_musgrave: bl_ui.properties_texture.TEXTURE_PT_musgrave

TEXTURE_PT_ocean: bl_ui.properties_texture.TEXTURE_PT_ocean

TEXTURE_PT_pointdensity: bl_ui.properties_texture.TEXTURE_PT_pointdensity

TEXTURE_PT_pointdensity_turbulence: bl_ui.properties_texture.TEXTURE_PT_pointdensity_turbulence

TEXTURE_PT_preview: bl_ui.properties_texture.TEXTURE_PT_preview

TEXTURE_PT_stucci: bl_ui.properties_texture.TEXTURE_PT_stucci

TEXTURE_PT_voronoi: bl_ui.properties_texture.TEXTURE_PT_voronoi

TEXTURE_PT_voxeldata: bl_ui.properties_texture.TEXTURE_PT_voxeldata

TEXTURE_PT_wood: bl_ui.properties_texture.TEXTURE_PT_wood

TEXTURE_UL_texpaintslots: bl_ui.space_view3d_toolbar.TEXTURE_UL_texpaintslots

TEXTURE_UL_texslots: bl_ui.properties_texture.TEXTURE_UL_texslots

TEXT_HT_header: bl_ui.space_text.TEXT_HT_header

TEXT_MT_edit: bl_ui.space_text.TEXT_MT_edit

TEXT_MT_edit_select: bl_ui.space_text.TEXT_MT_edit_select

TEXT_MT_edit_to3d: bl_ui.space_text.TEXT_MT_edit_to3d

TEXT_MT_editor_menus: bl_ui.space_text.TEXT_MT_editor_menus

TEXT_MT_format: bl_ui.space_text.TEXT_MT_format

TEXT_MT_templates: bl_ui.space_text.TEXT_MT_templates

TEXT_MT_templates_osl: bl_ui.space_text.TEXT_MT_templates_osl

TEXT_MT_templates_py: bl_ui.space_text.TEXT_MT_templates_py

TEXT_MT_text: bl_ui.space_text.TEXT_MT_text

TEXT_MT_toolbox: bl_ui.space_text.TEXT_MT_toolbox

TEXT_MT_view: bl_ui.space_text.TEXT_MT_view

TEXT_PT_find: bl_ui.space_text.TEXT_PT_find

TEXT_PT_properties: bl_ui.space_text.TEXT_PT_properties

TIME_HT_header: bl_ui.space_time.TIME_HT_header

TIME_MT_autokey: bl_ui.space_time.TIME_MT_autokey

TIME_MT_cache: bl_ui.space_time.TIME_MT_cache

TIME_MT_editor_menus: bl_ui.space_time.TIME_MT_editor_menus

TIME_MT_frame: bl_ui.space_time.TIME_MT_frame

TIME_MT_marker: bl_ui.space_time.TIME_MT_marker

TIME_MT_playback: bl_ui.space_time.TIME_MT_playback

TIME_MT_view: bl_ui.space_time.TIME_MT_view

UI_UL_list: bl_ui.UI_UL_list

USERPREF_HT_header: bl_ui.space_userpref.USERPREF_HT_header

USERPREF_MT_addons_online_resources: bl_ui.space_userpref.USERPREF_MT_addons_online_resources

USERPREF_MT_app_templates: bl_ui.space_userpref.USERPREF_MT_app_templates

USERPREF_MT_appconfigs: bl_ui.space_userpref.USERPREF_MT_appconfigs

USERPREF_MT_interaction_presets: bl_ui.space_userpref.USERPREF_MT_interaction_presets

USERPREF_MT_interface_theme_presets: bl_ui.space_userpref.USERPREF_MT_interface_theme_presets

USERPREF_MT_keyconfigs: bl_ui.space_userpref.USERPREF_MT_keyconfigs

USERPREF_MT_ndof_settings: bl_ui.space_userpref.USERPREF_MT_ndof_settings

USERPREF_MT_splash: bl_ui.space_userpref.USERPREF_MT_splash

USERPREF_MT_splash_footer: bl_ui.space_userpref.USERPREF_MT_splash_footer

USERPREF_MT_templates_splash: bl_ui.space_userpref.USERPREF_MT_templates_splash

USERPREF_PT_addons: bl_ui.space_userpref.USERPREF_PT_addons

USERPREF_PT_edit: bl_ui.space_userpref.USERPREF_PT_edit

USERPREF_PT_file: bl_ui.space_userpref.USERPREF_PT_file

USERPREF_PT_input: bl_ui.space_userpref.USERPREF_PT_input

USERPREF_PT_interface: bl_ui.space_userpref.USERPREF_PT_interface

USERPREF_PT_system: bl_ui.space_userpref.USERPREF_PT_system

USERPREF_PT_tabs: bl_ui.space_userpref.USERPREF_PT_tabs

USERPREF_PT_theme: bl_ui.space_userpref.USERPREF_PT_theme

VIEW3D_HT_header: bl_ui.space_view3d.VIEW3D_HT_header

VIEW3D_MT_angle_control: bl_ui.space_view3d.VIEW3D_MT_angle_control

VIEW3D_MT_armature_specials: bl_ui.space_view3d.VIEW3D_MT_armature_specials

VIEW3D_MT_bone_options_disable: bl_ui.space_view3d.VIEW3D_MT_bone_options_disable

VIEW3D_MT_bone_options_enable: bl_ui.space_view3d.VIEW3D_MT_bone_options_enable

VIEW3D_MT_bone_options_toggle: bl_ui.space_view3d.VIEW3D_MT_bone_options_toggle

VIEW3D_MT_brush: bl_ui.space_view3d.VIEW3D_MT_brush

VIEW3D_MT_brush_paint_modes: bl_ui.space_view3d.VIEW3D_MT_brush_paint_modes

VIEW3D_MT_edit_armature: bl_ui.space_view3d.VIEW3D_MT_edit_armature

VIEW3D_MT_edit_armature_delete: bl_ui.space_view3d.VIEW3D_MT_edit_armature_delete

VIEW3D_MT_edit_armature_parent: bl_ui.space_view3d.VIEW3D_MT_edit_armature_parent

VIEW3D_MT_edit_armature_roll: bl_ui.space_view3d.VIEW3D_MT_edit_armature_roll

VIEW3D_MT_edit_curve: bl_ui.space_view3d.VIEW3D_MT_edit_curve

VIEW3D_MT_edit_curve_clean: bl_ui.space_view3d.VIEW3D_MT_edit_curve_clean

VIEW3D_MT_edit_curve_ctrlpoints: bl_ui.space_view3d.VIEW3D_MT_edit_curve_ctrlpoints

VIEW3D_MT_edit_curve_delete: bl_ui.space_view3d.VIEW3D_MT_edit_curve_delete

VIEW3D_MT_edit_curve_segments: bl_ui.space_view3d.VIEW3D_MT_edit_curve_segments

VIEW3D_MT_edit_curve_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_curve_showhide

VIEW3D_MT_edit_curve_specials: bl_ui.space_view3d.VIEW3D_MT_edit_curve_specials

VIEW3D_MT_edit_font: bl_ui.space_view3d.VIEW3D_MT_edit_font

VIEW3D_MT_edit_gpencil: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil

VIEW3D_MT_edit_gpencil_delete: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_delete

VIEW3D_MT_edit_gpencil_interpolate: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_interpolate

VIEW3D_MT_edit_gpencil_transform: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_transform

VIEW3D_MT_edit_lattice: bl_ui.space_view3d.VIEW3D_MT_edit_lattice

VIEW3D_MT_edit_mesh: bl_ui.space_view3d.VIEW3D_MT_edit_mesh

VIEW3D_MT_edit_mesh_clean: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_clean

VIEW3D_MT_edit_mesh_delete: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_delete

VIEW3D_MT_edit_mesh_edges: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_edges

VIEW3D_MT_edit_mesh_edges_data: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_edges_data

VIEW3D_MT_edit_mesh_extrude: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_extrude

VIEW3D_MT_edit_mesh_faces: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_faces

VIEW3D_MT_edit_mesh_normals: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals

VIEW3D_MT_edit_mesh_select_by_trait: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_by_trait

VIEW3D_MT_edit_mesh_select_linked: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_linked

VIEW3D_MT_edit_mesh_select_loops: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_loops

VIEW3D_MT_edit_mesh_select_mode: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_mode

VIEW3D_MT_edit_mesh_select_more_less: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_more_less

VIEW3D_MT_edit_mesh_select_similar: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_similar

VIEW3D_MT_edit_mesh_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_showhide

VIEW3D_MT_edit_mesh_specials: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_specials

VIEW3D_MT_edit_mesh_vertices: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_vertices

VIEW3D_MT_edit_meta: bl_ui.space_view3d.VIEW3D_MT_edit_meta

VIEW3D_MT_edit_meta_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_meta_showhide

VIEW3D_MT_edit_proportional: bl_ui.space_view3d.VIEW3D_MT_edit_proportional

VIEW3D_MT_edit_surface: bl_ui.space_view3d.VIEW3D_MT_edit_surface

VIEW3D_MT_edit_text_chars: bl_ui.space_view3d.VIEW3D_MT_edit_text_chars

VIEW3D_MT_editor_menus: bl_ui.space_view3d.VIEW3D_MT_editor_menus

VIEW3D_MT_hide_mask: bl_ui.space_view3d.VIEW3D_MT_hide_mask

VIEW3D_MT_hook: bl_ui.space_view3d.VIEW3D_MT_hook

VIEW3D_MT_make_links: bl_ui.space_view3d.VIEW3D_MT_make_links

VIEW3D_MT_make_single_user: bl_ui.space_view3d.VIEW3D_MT_make_single_user

VIEW3D_MT_mirror: bl_ui.space_view3d.VIEW3D_MT_mirror

VIEW3D_MT_object: bl_ui.space_view3d.VIEW3D_MT_object

VIEW3D_MT_object_animation: bl_ui.space_view3d.VIEW3D_MT_object_animation

VIEW3D_MT_object_apply: bl_ui.space_view3d.VIEW3D_MT_object_apply

VIEW3D_MT_object_clear: bl_ui.space_view3d.VIEW3D_MT_object_clear

VIEW3D_MT_object_constraints: bl_ui.space_view3d.VIEW3D_MT_object_constraints

VIEW3D_MT_object_game: bl_ui.space_view3d.VIEW3D_MT_object_game

VIEW3D_MT_object_group: bl_ui.space_view3d.VIEW3D_MT_object_group

VIEW3D_MT_object_parent: bl_ui.space_view3d.VIEW3D_MT_object_parent

VIEW3D_MT_object_quick_effects: bl_ui.space_view3d.VIEW3D_MT_object_quick_effects

VIEW3D_MT_object_relations: bl_ui.space_view3d.VIEW3D_MT_object_relations

VIEW3D_MT_object_showhide: bl_ui.space_view3d.VIEW3D_MT_object_showhide

VIEW3D_MT_object_specials: bl_ui.space_view3d.VIEW3D_MT_object_specials

VIEW3D_MT_object_track: bl_ui.space_view3d.VIEW3D_MT_object_track

VIEW3D_MT_paint_vertex: bl_ui.space_view3d.VIEW3D_MT_paint_vertex

VIEW3D_MT_paint_weight: bl_ui.space_view3d.VIEW3D_MT_paint_weight

VIEW3D_MT_particle: bl_ui.space_view3d.VIEW3D_MT_particle

VIEW3D_MT_particle_showhide: bl_ui.space_view3d.VIEW3D_MT_particle_showhide

VIEW3D_MT_particle_specials: bl_ui.space_view3d.VIEW3D_MT_particle_specials

VIEW3D_MT_pose: bl_ui.space_view3d.VIEW3D_MT_pose

VIEW3D_MT_pose_apply: bl_ui.space_view3d.VIEW3D_MT_pose_apply

VIEW3D_MT_pose_constraints: bl_ui.space_view3d.VIEW3D_MT_pose_constraints

VIEW3D_MT_pose_group: bl_ui.space_view3d.VIEW3D_MT_pose_group

VIEW3D_MT_pose_ik: bl_ui.space_view3d.VIEW3D_MT_pose_ik

VIEW3D_MT_pose_library: bl_ui.space_view3d.VIEW3D_MT_pose_library

VIEW3D_MT_pose_motion: bl_ui.space_view3d.VIEW3D_MT_pose_motion

VIEW3D_MT_pose_propagate: bl_ui.space_view3d.VIEW3D_MT_pose_propagate

VIEW3D_MT_pose_showhide: bl_ui.space_view3d.VIEW3D_MT_pose_showhide

VIEW3D_MT_pose_slide: bl_ui.space_view3d.VIEW3D_MT_pose_slide

VIEW3D_MT_pose_specials: bl_ui.space_view3d.VIEW3D_MT_pose_specials

VIEW3D_MT_pose_transform: bl_ui.space_view3d.VIEW3D_MT_pose_transform

VIEW3D_MT_sculpt: bl_ui.space_view3d.VIEW3D_MT_sculpt

VIEW3D_MT_select_edit_armature: bl_ui.space_view3d.VIEW3D_MT_select_edit_armature

VIEW3D_MT_select_edit_curve: bl_ui.space_view3d.VIEW3D_MT_select_edit_curve

VIEW3D_MT_select_edit_lattice: bl_ui.space_view3d.VIEW3D_MT_select_edit_lattice

VIEW3D_MT_select_edit_mesh: bl_ui.space_view3d.VIEW3D_MT_select_edit_mesh

VIEW3D_MT_select_edit_metaball: bl_ui.space_view3d.VIEW3D_MT_select_edit_metaball

VIEW3D_MT_select_edit_surface: bl_ui.space_view3d.VIEW3D_MT_select_edit_surface

VIEW3D_MT_select_edit_text: bl_ui.space_view3d.VIEW3D_MT_select_edit_text

VIEW3D_MT_select_gpencil: bl_ui.space_view3d.VIEW3D_MT_select_gpencil

VIEW3D_MT_select_object: bl_ui.space_view3d.VIEW3D_MT_select_object

VIEW3D_MT_select_object_more_less: bl_ui.space_view3d.VIEW3D_MT_select_object_more_less

VIEW3D_MT_select_paint_mask: bl_ui.space_view3d.VIEW3D_MT_select_paint_mask

VIEW3D_MT_select_paint_mask_vertex: bl_ui.space_view3d.VIEW3D_MT_select_paint_mask_vertex

VIEW3D_MT_select_particle: bl_ui.space_view3d.VIEW3D_MT_select_particle

VIEW3D_MT_select_pose: bl_ui.space_view3d.VIEW3D_MT_select_pose

VIEW3D_MT_select_pose_more_less: bl_ui.space_view3d.VIEW3D_MT_select_pose_more_less

VIEW3D_MT_snap: bl_ui.space_view3d.VIEW3D_MT_snap

VIEW3D_MT_tools_projectpaint_clone: bl_ui.properties_paint_common.VIEW3D_MT_tools_projectpaint_clone

VIEW3D_MT_tools_projectpaint_stencil: bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_stencil

VIEW3D_MT_tools_projectpaint_uvlayer: bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_uvlayer

VIEW3D_MT_transform: bl_ui.space_view3d.VIEW3D_MT_transform

VIEW3D_MT_transform_armature: bl_ui.space_view3d.VIEW3D_MT_transform_armature

VIEW3D_MT_transform_base: bl_ui.space_view3d.VIEW3D_MT_transform_base

VIEW3D_MT_transform_object: bl_ui.space_view3d.VIEW3D_MT_transform_object

VIEW3D_MT_undo_redo: bl_ui.space_view3d.VIEW3D_MT_undo_redo

VIEW3D_MT_uv_map: bl_ui.space_view3d.VIEW3D_MT_uv_map

VIEW3D_MT_vertex_group: bl_ui.space_view3d.VIEW3D_MT_vertex_group

VIEW3D_MT_view: bl_ui.space_view3d.VIEW3D_MT_view

VIEW3D_MT_view_align: bl_ui.space_view3d.VIEW3D_MT_view_align

VIEW3D_MT_view_align_selected: bl_ui.space_view3d.VIEW3D_MT_view_align_selected

VIEW3D_MT_view_borders: bl_ui.space_view3d.VIEW3D_MT_view_borders

VIEW3D_MT_view_cameras: bl_ui.space_view3d.VIEW3D_MT_view_cameras

VIEW3D_MT_view_navigation: bl_ui.space_view3d.VIEW3D_MT_view_navigation

VIEW3D_MT_view_viewpoint: bl_ui.space_view3d.VIEW3D_MT_view_viewpoint

VIEW3D_OT_edit_mesh_extrude_individual_move: bl_operators.view3d.VIEW3D_OT_edit_mesh_extrude_individual_move

VIEW3D_OT_select_or_deselect_all: bl_operators.view3d.VIEW3D_OT_select_or_deselect_all

VIEW3D_PT_background_image: bl_ui.space_view3d.VIEW3D_PT_background_image

VIEW3D_PT_context_properties: bl_ui.space_view3d.VIEW3D_PT_context_properties

VIEW3D_PT_etch_a_ton: bl_ui.space_view3d.VIEW3D_PT_etch_a_ton

VIEW3D_PT_grease_pencil: bl_ui.space_view3d.VIEW3D_PT_grease_pencil

VIEW3D_PT_grease_pencil_palettecolor: bl_ui.space_view3d.VIEW3D_PT_grease_pencil_palettecolor

VIEW3D_PT_imapaint_tools_missing: bl_ui.space_view3d_toolbar.VIEW3D_PT_imapaint_tools_missing

VIEW3D_PT_sculpt_dyntopo: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_dyntopo

VIEW3D_PT_sculpt_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_options

VIEW3D_PT_sculpt_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_symmetry

VIEW3D_PT_slots_projectpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_projectpaint

VIEW3D_PT_stencil_projectpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_stencil_projectpaint

VIEW3D_PT_tools_add_curve_edit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_add_curve_edit

VIEW3D_PT_tools_add_mball_edit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_add_mball_edit

VIEW3D_PT_tools_add_mesh_edit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_add_mesh_edit

VIEW3D_PT_tools_add_object: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_add_object

VIEW3D_PT_tools_add_surface_edit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_add_surface_edit

VIEW3D_PT_tools_animation: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_animation

VIEW3D_PT_tools_armatureedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_armatureedit

VIEW3D_PT_tools_armatureedit_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_armatureedit_options

VIEW3D_PT_tools_armatureedit_transform: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_armatureedit_transform

VIEW3D_PT_tools_brush: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush

VIEW3D_PT_tools_brush_appearance: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_appearance

VIEW3D_PT_tools_brush_curve: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_curve

VIEW3D_PT_tools_brush_overlay: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_overlay

VIEW3D_PT_tools_brush_stroke: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_stroke

VIEW3D_PT_tools_brush_texture: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_texture

VIEW3D_PT_tools_curveedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_curveedit

VIEW3D_PT_tools_curveedit_options_stroke: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_curveedit_options_stroke

VIEW3D_PT_tools_grease_pencil_brush: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush

VIEW3D_PT_tools_grease_pencil_brushcurves: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brushcurves

VIEW3D_PT_tools_grease_pencil_draw: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_draw

VIEW3D_PT_tools_grease_pencil_edit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_edit

VIEW3D_PT_tools_grease_pencil_interpolate: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_interpolate

VIEW3D_PT_tools_grease_pencil_sculpt: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt

VIEW3D_PT_tools_history: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_history

VIEW3D_PT_tools_imagepaint_external: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_external

VIEW3D_PT_tools_imagepaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_symmetry

VIEW3D_PT_tools_latticeedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_latticeedit

VIEW3D_PT_tools_mask_texture: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_mask_texture

VIEW3D_PT_tools_mballedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_mballedit

VIEW3D_PT_tools_meshedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit

VIEW3D_PT_tools_meshedit_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options

VIEW3D_PT_tools_meshweight: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshweight

VIEW3D_PT_tools_object: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_object

VIEW3D_PT_tools_particlemode: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode

VIEW3D_PT_tools_posemode: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_posemode

VIEW3D_PT_tools_posemode_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_posemode_options

VIEW3D_PT_tools_projectpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_projectpaint

VIEW3D_PT_tools_relations: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_relations

VIEW3D_PT_tools_rigid_body: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_rigid_body

VIEW3D_PT_tools_shading: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_shading

VIEW3D_PT_tools_surfaceedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_surfaceedit

VIEW3D_PT_tools_textedit: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_textedit

VIEW3D_PT_tools_transform: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_transform

VIEW3D_PT_tools_transform_curve: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_transform_curve

VIEW3D_PT_tools_transform_mesh: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_transform_mesh

VIEW3D_PT_tools_transform_surface: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_transform_surface

VIEW3D_PT_tools_uvs: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_uvs

VIEW3D_PT_tools_vertexpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint

VIEW3D_PT_tools_vertexpaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_symmetry

VIEW3D_PT_tools_weightpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint

VIEW3D_PT_tools_weightpaint_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_options

VIEW3D_PT_tools_weightpaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_symmetry

VIEW3D_PT_transform_orientations: bl_ui.space_view3d.VIEW3D_PT_transform_orientations

VIEW3D_PT_view3d_cursor: bl_ui.space_view3d.VIEW3D_PT_view3d_cursor

VIEW3D_PT_view3d_curvedisplay: bl_ui.space_view3d.VIEW3D_PT_view3d_curvedisplay

VIEW3D_PT_view3d_display: bl_ui.space_view3d.VIEW3D_PT_view3d_display

VIEW3D_PT_view3d_meshdisplay: bl_ui.space_view3d.VIEW3D_PT_view3d_meshdisplay

VIEW3D_PT_view3d_meshstatvis: bl_ui.space_view3d.VIEW3D_PT_view3d_meshstatvis

VIEW3D_PT_view3d_motion_tracking: bl_ui.space_view3d.VIEW3D_PT_view3d_motion_tracking

VIEW3D_PT_view3d_name: bl_ui.space_view3d.VIEW3D_PT_view3d_name

VIEW3D_PT_view3d_properties: bl_ui.space_view3d.VIEW3D_PT_view3d_properties

VIEW3D_PT_view3d_shading: bl_ui.space_view3d.VIEW3D_PT_view3d_shading

VIEW3D_PT_view3d_stereo: bl_ui.space_view3d.VIEW3D_PT_view3d_stereo

WM_MT_operator_presets: bl_operators.presets.WM_MT_operator_presets

WM_OT_addon_disable: bl_operators.wm.WM_OT_addon_disable

WM_OT_addon_enable: bl_operators.wm.WM_OT_addon_enable

WM_OT_addon_expand: bl_operators.wm.WM_OT_addon_expand

WM_OT_addon_install: bl_operators.wm.WM_OT_addon_install

WM_OT_addon_refresh: bl_operators.wm.WM_OT_addon_refresh

WM_OT_addon_remove: bl_operators.wm.WM_OT_addon_remove

WM_OT_addon_userpref_show: bl_operators.wm.WM_OT_addon_userpref_show

WM_OT_app_template_install: bl_operators.wm.WM_OT_app_template_install

WM_OT_appconfig_activate: bl_operators.wm.WM_OT_appconfig_activate

WM_OT_appconfig_default: bl_operators.wm.WM_OT_appconfig_default

WM_OT_blend_strings_utf8_validate: bl_operators.file.WM_OT_blend_strings_utf8_validate

WM_OT_blenderplayer_start: bl_operators.wm.WM_OT_blenderplayer_start

WM_OT_context_collection_boolean_set: bl_operators.wm.WM_OT_context_collection_boolean_set

WM_OT_context_cycle_array: bl_operators.wm.WM_OT_context_cycle_array

WM_OT_context_cycle_enum: bl_operators.wm.WM_OT_context_cycle_enum

WM_OT_context_cycle_int: bl_operators.wm.WM_OT_context_cycle_int

WM_OT_context_menu_enum: bl_operators.wm.WM_OT_context_menu_enum

WM_OT_context_modal_mouse: bl_operators.wm.WM_OT_context_modal_mouse

WM_OT_context_pie_enum: bl_operators.wm.WM_OT_context_pie_enum

WM_OT_context_scale_float: bl_operators.wm.WM_OT_context_scale_float

WM_OT_context_scale_int: bl_operators.wm.WM_OT_context_scale_int

WM_OT_context_set_boolean: bl_operators.wm.WM_OT_context_set_boolean

WM_OT_context_set_enum: bl_operators.wm.WM_OT_context_set_enum

WM_OT_context_set_float: bl_operators.wm.WM_OT_context_set_float

WM_OT_context_set_id: bl_operators.wm.WM_OT_context_set_id

WM_OT_context_set_int: bl_operators.wm.WM_OT_context_set_int

WM_OT_context_set_string: bl_operators.wm.WM_OT_context_set_string

WM_OT_context_set_value: bl_operators.wm.WM_OT_context_set_value

WM_OT_context_toggle: bl_operators.wm.WM_OT_context_toggle

WM_OT_context_toggle_enum: bl_operators.wm.WM_OT_context_toggle_enum

WM_OT_copy_prev_settings: bl_operators.wm.WM_OT_copy_prev_settings

WM_OT_doc_view: bl_operators.wm.WM_OT_doc_view

WM_OT_doc_view_manual: bl_operators.wm.WM_OT_doc_view_manual

WM_OT_keyconfig_activate: bl_operators.wm.WM_OT_keyconfig_activate

WM_OT_keyconfig_export: bl_operators.wm.WM_OT_keyconfig_export

WM_OT_keyconfig_import: bl_operators.wm.WM_OT_keyconfig_import

WM_OT_keyconfig_remove: bl_operators.wm.WM_OT_keyconfig_remove

WM_OT_keyconfig_test: bl_operators.wm.WM_OT_keyconfig_test

WM_OT_keyitem_add: bl_operators.wm.WM_OT_keyitem_add

WM_OT_keyitem_remove: bl_operators.wm.WM_OT_keyitem_remove

WM_OT_keyitem_restore: bl_operators.wm.WM_OT_keyitem_restore

WM_OT_keymap_restore: bl_operators.wm.WM_OT_keymap_restore

WM_OT_operator_cheat_sheet: bl_operators.wm.WM_OT_operator_cheat_sheet

WM_OT_operator_pie_enum: bl_operators.wm.WM_OT_operator_pie_enum

WM_OT_path_open: bl_operators.wm.WM_OT_path_open

WM_OT_previews_batch_clear: bl_operators.file.WM_OT_previews_batch_clear

WM_OT_previews_batch_generate: bl_operators.file.WM_OT_previews_batch_generate

WM_OT_properties_add: bl_operators.wm.WM_OT_properties_add

WM_OT_properties_context_change: bl_operators.wm.WM_OT_properties_context_change

WM_OT_properties_edit: bl_operators.wm.WM_OT_properties_edit

WM_OT_properties_remove: bl_operators.wm.WM_OT_properties_remove

WM_OT_sysinfo: bl_operators.wm.WM_OT_sysinfo

WM_OT_theme_install: bl_operators.wm.WM_OT_theme_install

WM_OT_url_open: bl_operators.wm.WM_OT_url_open

WORLD_PT_ambient_occlusion: bl_ui.properties_world.WORLD_PT_ambient_occlusion

WORLD_PT_context_world: bl_ui.properties_world.WORLD_PT_context_world

WORLD_PT_custom_props: bl_ui.properties_world.WORLD_PT_custom_props

WORLD_PT_environment_lighting: bl_ui.properties_world.WORLD_PT_environment_lighting

WORLD_PT_game_context_world: bl_ui.properties_game.WORLD_PT_game_context_world

WORLD_PT_game_environment_lighting: bl_ui.properties_game.WORLD_PT_game_environment_lighting

WORLD_PT_game_mist: bl_ui.properties_game.WORLD_PT_game_mist

WORLD_PT_game_world: bl_ui.properties_game.WORLD_PT_game_world

WORLD_PT_gather: bl_ui.properties_world.WORLD_PT_gather

WORLD_PT_indirect_lighting: bl_ui.properties_world.WORLD_PT_indirect_lighting

WORLD_PT_mist: bl_ui.properties_world.WORLD_PT_mist

WORLD_PT_preview: bl_ui.properties_world.WORLD_PT_preview

WORLD_PT_world: bl_ui.properties_world.WORLD_PT_world
